/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGPYTHON
#define SWIGPYTHON
#endif

#define SWIG_PYTHON_DIRECTOR_NO_VTABLE
#define SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */
# undef _DEBUG
# include <Python.h>
# define _DEBUG
#else
# include <Python.h>
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return nullptr;
  if (type->str != nullptr) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"nullptr") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"nullptr") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intintargfunc ssizessizeargfunc;
typedef intobjargproc ssizeobjargproc;
typedef intintobjargproc ssizessizeobjargproc;
typedef getreadbufferproc readbufferproc;
typedef getwritebufferproc writebufferproc;
typedef getsegcountproc segcountproc;
typedef getcharbufferproc charbufferproc;
static long PyNumber_AsSsize_t (PyObject *x, void *SWIGUNUSEDPARM(exc))
{
  long result = 0;
  PyObject *i = PyNumber_Int(x);
  if (i) {
    result = PyInt_AsLong(i);
    Py_DECREF(i);
  }
  return result;
}
#endif

#if PY_VERSION_HEX < 0x02050000
#define PyInt_FromSize_t(x) PyInt_FromLong((long)x)
#endif

#if PY_VERSION_HEX < 0x02040000
#define Py_VISIT(op)				\
  do { 						\
    if (op) {					\
      int vret = visit((op), arg);		\
      if (vret)					\
        return vret;				\
    }						\
  } while (0)
#endif

#if PY_VERSION_HEX < 0x02030000
typedef struct {
  PyTypeObject type;
  PyNumberMethods as_number;
  PyMappingMethods as_mapping;
  PySequenceMethods as_sequence;
  PyBufferProcs as_buffer;
  PyObject *name, *slots;
} PyHeapTypeObject;
#endif

#if PY_VERSION_HEX < 0x02030000
typedef destructor freefunc;
#endif

#if ((PY_MAJOR_VERSION == 2 && PY_MINOR_VERSION > 6) || \
     (PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION > 0) || \
     (PY_MAJOR_VERSION > 3))
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)
#endif

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#define Py_hash_t long
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
#if PY_VERSION_HEX >= 0x03000000
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func)
{
  return PyInstanceMethod_New(func);
}
#else
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(func))
{
  return nullptr;
}
#endif

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(nullptr, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(nullptr, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(nullptr, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, nullptr);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_INCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = nullptr;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (v->next) {
# ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
# endif
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *val = nullptr, *type = nullptr, *tb = nullptr;
      PyErr_Fetch(&val, &type, &tb);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        res = SWIG_Python_CallFunctor(destroy, tmp);
        Py_DECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(val, type, tb);

      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return nullptr;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return nullptr;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#elif (PY_VERSION_HEX < 0x02050000)
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#else
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) 
#endif
    {
      return nullptr;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(nullptr, 0)
#else
      PyObject_HEAD_INIT(nullptr)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyObject",               /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      0,                                    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
      (getattrfunc)SwigPyObject_getattr,    /* tp_getattr */
#else
      (getattrfunc)0,                       /* tp_getattr */
#endif
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
      0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,                                    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
      0,                                    /* tp_prev */
#endif
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpyobject_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpyobject_type) < 0)
      return nullptr;
#endif
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(nullptr, 0)
#else
      PyObject_HEAD_INIT(nullptr)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyPacked",               /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyPacked_print,        /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
      0,                                    /* tp_prev */
#endif
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpypacked_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpypacked_type) < 0)
      return nullptr;
#endif
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

static PyObject *swig_this = nullptr;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (swig_this == nullptr)
    swig_this = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return nullptr;
#else

  obj = 0;

#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != nullptr) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
    }
    if (!SWIG_IsOK(res) && obj == Py_None) {
      if (ptr)
        *ptr = 0;
      if (PyErr_Occurred())
        PyErr_Clear();
      res = SWIG_OK;
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, nullptr);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != nullptr) {
	PyObject *dict = *dictptr;
	if (dict == nullptr) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = ((PyTypeObject*) data->newargs)->tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    if (inst) {
      PyObject_SetAttr(inst, SWIG_This(), swig_this);
      Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst = 0;
  PyObject *dict = PyDict_New();
  if (dict) {
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
  }
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == nullptr) {
    return nullptr;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == nullptr) {
    Py_DECREF(inst);
    return nullptr;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = nullptr;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != nullptr) {
   dict = *dictptr;
   if (dict == nullptr) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return nullptr;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
# ifdef SWIGPY_USE_CAPSULE
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
# else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
# endif
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError, "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError, "PyModule_AddObject() needs non-nullptr value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == nullptr) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
#ifdef SWIGPY_USE_CAPSULE
SWIG_Python_DestroyModule(PyObject *obj)
#else
SWIG_Python_DestroyModule(void *vptr)
#endif
{
#ifdef SWIGPY_USE_CAPSULE
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
#else
  swig_module_info *swig_module = (swig_module_info *) vptr;
#endif
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  swig_this = nullptr;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {nullptr, nullptr, 0, nullptr} }; /* Sentinel */
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
#ifdef SWIGPY_USE_CAPSULE
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#else
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#endif
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
#ifdef SWIGPY_USE_CAPSULE
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, nullptr);
#else
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
#endif
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
#ifdef SWIGPY_USE_CAPSULE
      obj = PyCapsule_New((void*) descriptor, nullptr, nullptr);
#else
      obj = PyCObject_FromVoidPtr(descriptor, nullptr);
#endif
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), nullptr, nullptr);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = nullptr;
  if (descr != nullptr)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_ConstParameterCollectionIteratorT swig_types[0]
#define SWIGTYPE_p_Like_T swig_types[1]
#define SWIGTYPE_p_Options swig_types[2]
#define SWIGTYPE_p_ParameterCollectionIteratorT swig_types[3]
#define SWIGTYPE_p_ParameterIter swig_types[4]
#define SWIGTYPE_p_ParameterMap swig_types[5]
#define SWIGTYPE_p_XMLControlRegistry swig_types[6]
#define SWIGTYPE_p_allocator_type swig_types[7]
#define SWIGTYPE_p_char swig_types[8]
#define SWIGTYPE_p_difference_type swig_types[9]
#define SWIGTYPE_p_except__BadCastException swig_types[10]
#define SWIGTYPE_p_except__Context swig_types[11]
#define SWIGTYPE_p_except__Exception swig_types[12]
#define SWIGTYPE_p_except__FileNotFoundException swig_types[13]
#define SWIGTYPE_p_except__IOException swig_types[14]
#define SWIGTYPE_p_except__IndexOutOfRangeException swig_types[15]
#define SWIGTYPE_p_except__InvalidArgumentException swig_types[16]
#define SWIGTYPE_p_except__InvalidFormatException swig_types[17]
#define SWIGTYPE_p_except__KeyAlreadyExistsException swig_types[18]
#define SWIGTYPE_p_except__NoSuchKeyException swig_types[19]
#define SWIGTYPE_p_except__NoSuchReferenceException swig_types[20]
#define SWIGTYPE_p_except__NotImplementedException swig_types[21]
#define SWIGTYPE_p_except__NullPointerReferenceException swig_types[22]
#define SWIGTYPE_p_except__OutOfMemoryException swig_types[23]
#define SWIGTYPE_p_except__ParseException swig_types[24]
#define SWIGTYPE_p_except__SerializationException swig_types[25]
#define SWIGTYPE_p_except__Throwable swig_types[26]
#define SWIGTYPE_p_int swig_types[27]
#define SWIGTYPE_p_int16_t swig_types[28]
#define SWIGTYPE_p_int32_t swig_types[29]
#define SWIGTYPE_p_int64_t swig_types[30]
#define SWIGTYPE_p_int8_t swig_types[31]
#define SWIGTYPE_p_io__InputStream swig_types[32]
#define SWIGTYPE_p_logging__Logger swig_types[33]
#define SWIGTYPE_p_math__linear__VectorNT_2_double_t swig_types[34]
#define SWIGTYPE_p_math__linear__VectorNT_3_double_t swig_types[35]
#define SWIGTYPE_p_math__linear__VectorT_double_t swig_types[36]
#define SWIGTYPE_p_math__poly__OneDT_double_t swig_types[37]
#define SWIGTYPE_p_math__poly__OneDT_math__linear__VectorNT_3_double_t_t swig_types[38]
#define SWIGTYPE_p_math__poly__TwoDT_double_t swig_types[39]
#define SWIGTYPE_p_mem__ScopedCloneablePtrT_six__AmplitudeTable_t swig_types[40]
#define SWIGTYPE_p_mem__ScopedCloneablePtrT_six__CollectionInformation_t swig_types[41]
#define SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t swig_types[42]
#define SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t swig_types[43]
#define SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t swig_types[44]
#define SWIGTYPE_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t swig_types[45]
#define SWIGTYPE_p_mem__ScopedCopyablePtrT_six__GeoInfo_t swig_types[46]
#define SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t swig_types[47]
#define SWIGTYPE_p_mem__ScopedCopyablePtrT_six__LUT_t swig_types[48]
#define SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchInformation_t swig_types[49]
#define SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchType_t swig_types[50]
#define SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t swig_types[51]
#define SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t swig_types[52]
#define SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t swig_types[53]
#define SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t swig_types[54]
#define SWIGTYPE_p_mt__SingletonT_six__XMLControlRegistry_true_t swig_types[55]
#define SWIGTYPE_p_nitf_DateTime swig_types[56]
#define SWIGTYPE_p_nitf__DateTime swig_types[57]
#define SWIGTYPE_p_nitf__FileSecurity swig_types[58]
#define SWIGTYPE_p_off_t swig_types[59]
#define SWIGTYPE_p_p_PyObject swig_types[60]
#define SWIGTYPE_p_pid_t swig_types[61]
#define SWIGTYPE_p_scene__AngleMagnitude swig_types[62]
#define SWIGTYPE_p_scene__Errors swig_types[63]
#define SWIGTYPE_p_scene__FrameType swig_types[64]
#define SWIGTYPE_p_scene__LatLon swig_types[65]
#define SWIGTYPE_p_scene__LatLonAlt swig_types[66]
#define SWIGTYPE_p_scene__PlaneProjectionModel swig_types[67]
#define SWIGTYPE_p_six__AmplitudeTable swig_types[68]
#define SWIGTYPE_p_six__AppliedType swig_types[69]
#define SWIGTYPE_p_six__AutofocusType swig_types[70]
#define SWIGTYPE_p_six__BooleanType swig_types[71]
#define SWIGTYPE_p_six__ByteSwapping swig_types[72]
#define SWIGTYPE_p_six__Classification swig_types[73]
#define SWIGTYPE_p_six__CollectType swig_types[74]
#define SWIGTYPE_p_six__CollectionInformation swig_types[75]
#define SWIGTYPE_p_six__ComplexImageGridType swig_types[76]
#define SWIGTYPE_p_six__ComplexImagePlaneType swig_types[77]
#define SWIGTYPE_p_six__Components swig_types[78]
#define SWIGTYPE_p_six__CompositeSCP swig_types[79]
#define SWIGTYPE_p_six__Constants swig_types[80]
#define SWIGTYPE_p_six__CornersT_scene__LatLonAlt_t swig_types[81]
#define SWIGTYPE_p_six__CornersT_scene__LatLon_t swig_types[82]
#define SWIGTYPE_p_six__CorrCoefs swig_types[83]
#define SWIGTYPE_p_six__DESValidationException swig_types[84]
#define SWIGTYPE_p_six__Data swig_types[85]
#define SWIGTYPE_p_six__DataType swig_types[86]
#define SWIGTYPE_p_six__DecimationMethod swig_types[87]
#define SWIGTYPE_p_six__DecorrType swig_types[88]
#define SWIGTYPE_p_six__DemodType swig_types[89]
#define SWIGTYPE_p_six__DisplayType swig_types[90]
#define SWIGTYPE_p_six__DualPolarizationType swig_types[91]
#define SWIGTYPE_p_six__EarthModelType swig_types[92]
#define SWIGTYPE_p_six__ErrorStatistics swig_types[93]
#define SWIGTYPE_p_six__FFTSign swig_types[94]
#define SWIGTYPE_p_six__GeoDataBase swig_types[95]
#define SWIGTYPE_p_six__GeoInfo swig_types[96]
#define SWIGTYPE_p_six__ImageBeamCompensationType swig_types[97]
#define SWIGTYPE_p_six__ImageFormationType swig_types[98]
#define SWIGTYPE_p_six__Init swig_types[99]
#define SWIGTYPE_p_six__IonoError swig_types[100]
#define SWIGTYPE_p_six__LUT swig_types[101]
#define SWIGTYPE_p_six__MagnificationMethod swig_types[102]
#define SWIGTYPE_p_six__MatchCollect swig_types[103]
#define SWIGTYPE_p_six__MatchInformation swig_types[104]
#define SWIGTYPE_p_six__MatchType swig_types[105]
#define SWIGTYPE_p_six__MissingRequiredException swig_types[106]
#define SWIGTYPE_p_six__NoiseLevel swig_types[107]
#define SWIGTYPE_p_six__Options swig_types[108]
#define SWIGTYPE_p_six__OrientationType swig_types[109]
#define SWIGTYPE_p_six__Parameter swig_types[110]
#define SWIGTYPE_p_six__ParameterCollection swig_types[111]
#define SWIGTYPE_p_six__PixelType swig_types[112]
#define SWIGTYPE_p_six__PolarizationSequenceType swig_types[113]
#define SWIGTYPE_p_six__PolarizationType swig_types[114]
#define SWIGTYPE_p_six__PosVelError swig_types[115]
#define SWIGTYPE_p_six__ProjectionType swig_types[116]
#define SWIGTYPE_p_six__RMAlgoType swig_types[117]
#define SWIGTYPE_p_six__RadarModeType swig_types[118]
#define SWIGTYPE_p_six__RadarSensor swig_types[119]
#define SWIGTYPE_p_six__Radiometric swig_types[120]
#define SWIGTYPE_p_six__ReferencePoint swig_types[121]
#define SWIGTYPE_p_six__RegionType swig_types[122]
#define SWIGTYPE_p_six__RowColEnum swig_types[123]
#define SWIGTYPE_p_six__SCP swig_types[124]
#define SWIGTYPE_p_six__SCPType swig_types[125]
#define SWIGTYPE_p_six__SideOfTrackType swig_types[126]
#define SWIGTYPE_p_six__SlowTimeBeamCompensationType swig_types[127]
#define SWIGTYPE_p_six__TropoError swig_types[128]
#define SWIGTYPE_p_six__UninitializedValueException swig_types[129]
#define SWIGTYPE_p_six__XMLControl swig_types[130]
#define SWIGTYPE_p_six__XMLControlCreator swig_types[131]
#define SWIGTYPE_p_six__XMLControlRegistry swig_types[132]
#define SWIGTYPE_p_six__XYZEnum swig_types[133]
#define SWIGTYPE_p_size_t swig_types[134]
#define SWIGTYPE_p_size_type swig_types[135]
#define SWIGTYPE_p_ssize_t swig_types[136]
#define SWIGTYPE_p_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t swig_types[137]
#define SWIGTYPE_p_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t swig_types[138]
#define SWIGTYPE_p_std__allocatorT_six__MatchCollect_t swig_types[139]
#define SWIGTYPE_p_std__allocatorT_six__MatchType_t swig_types[140]
#define SWIGTYPE_p_std__auto_ptrT_six__AmplitudeTable_t swig_types[141]
#define SWIGTYPE_p_std__auto_ptrT_six__CollectionInformation_t swig_types[142]
#define SWIGTYPE_p_std__auto_ptrT_six__Components_t swig_types[143]
#define SWIGTYPE_p_std__auto_ptrT_six__CompositeSCP_t swig_types[144]
#define SWIGTYPE_p_std__auto_ptrT_six__CorrCoefs_t swig_types[145]
#define SWIGTYPE_p_std__auto_ptrT_six__ErrorStatistics_t swig_types[146]
#define SWIGTYPE_p_std__auto_ptrT_six__GeoInfo_t swig_types[147]
#define SWIGTYPE_p_std__auto_ptrT_six__IonoError_t swig_types[148]
#define SWIGTYPE_p_std__auto_ptrT_six__MatchInformation_t swig_types[149]
#define SWIGTYPE_p_std__auto_ptrT_six__MatchType_t swig_types[150]
#define SWIGTYPE_p_std__auto_ptrT_six__PosVelError_t swig_types[151]
#define SWIGTYPE_p_std__auto_ptrT_six__RadarSensor_t swig_types[152]
#define SWIGTYPE_p_std__auto_ptrT_six__Radiometric_t swig_types[153]
#define SWIGTYPE_p_std__auto_ptrT_six__TropoError_t swig_types[154]
#define SWIGTYPE_p_std__auto_ptrT_six__XMLControlCreator_t swig_types[155]
#define SWIGTYPE_p_std__invalid_argument swig_types[156]
#define SWIGTYPE_p_std__mapT_std__string_six__Parameter_t__const_iterator swig_types[157]
#define SWIGTYPE_p_std__ostream swig_types[158]
#define SWIGTYPE_p_std__string swig_types[159]
#define SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t swig_types[160]
#define SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t swig_types[161]
#define SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t swig_types[162]
#define SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t swig_types[163]
#define SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t swig_types[164]
#define SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t swig_types[165]
#define SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t swig_types[166]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[167]
#define SWIGTYPE_p_types__RgAzT_double_t swig_types[168]
#define SWIGTYPE_p_types__RowColT_double_t swig_types[169]
#define SWIGTYPE_p_types__RowColT_math__poly__TwoDT_double_t_t swig_types[170]
#define SWIGTYPE_p_types__RowColT_scene__LatLon_t swig_types[171]
#define SWIGTYPE_p_types__RowColT_ssize_t_t swig_types[172]
#define SWIGTYPE_p_uint16_t swig_types[173]
#define SWIGTYPE_p_uint32_t swig_types[174]
#define SWIGTYPE_p_uint64_t swig_types[175]
#define SWIGTYPE_p_uint8_t swig_types[176]
#define SWIGTYPE_p_unsigned_char swig_types[177]
#define SWIGTYPE_p_value_type swig_types[178]
#define SWIGTYPE_p_xml__lite__Document swig_types[179]
static swig_type_info *swig_types[181];
static swig_module_info swig_module = {swig_types, 180, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _six_base.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__six_base

#else
#  define SWIG_init    init_six_base

#endif
#define SWIG_name    "_six_base"

#define SWIGVERSION 0x030012 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include <iostream>

#if PY_VERSION_HEX >= 0x03020000
# define SWIGPY_SLICE_ARG(obj) ((PyObject*) (obj))
#else
# define SWIGPY_SLICE_ARG(obj) ((PySliceObject*) (obj))
#endif


#include <typeinfo>
#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>


#include <stddef.h>


namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };

#if defined(SWIGPYTHON_BUILTIN)
  inline PyObject* make_output_iterator_builtin (PyObject *pyself)
  {
    Py_INCREF(pyself);
    return pyself;
  }
#endif
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = (double) PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (PyObject *obj, unsigned long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    unsigned long long v = PyLong_AsUnsignedLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, 0, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
      if (val) *val = (unsigned long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  }
#endif
  return res;
}


  #define SWIG_From_long   PyInt_FromLong 


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_long_SS_long  (long long value)
{
  return ((value < LONG_MIN) || (value > LONG_MAX)) ?
    PyLong_FromLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    return SWIG_From_long  (static_cast< long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(ptrdiff_t) <= sizeof(long long) */
    return SWIG_From_long_SS_long  (static_cast< long long >(value));
  }
#endif
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_long_SS_long (PyObject *obj, long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    long long v = PyLong_AsLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    long v;
    res = SWIG_AsVal_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    const double mant_min = -mant_max;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, mant_min, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, mant_min, mant_max)) {
      if (val) *val = (long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    long v;
    res = SWIG_AsVal_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(ptrdiff_t) <= sizeof(long long)) {
    long long v;
    res = SWIG_AsVal_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  }
#endif
  return res;
}


#include <algorithm>


#include <vector>



#include <memory>
#include <vector>
#include <cstddef>
using std::ptrdiff_t;

#include "import/six.h"
#include "import/nitf.hpp"
#include "Python.h"
#include "datetime.h"

using namespace six;


namespace swig {
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  /*
    Partial specialization for pointers (traits_info)
  */
  template <class Type> struct traits_info<Type *> {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers (traits)
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category>
  struct traits_as { };

  template <class Type, class Category>
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_InternalNewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      Type *p;
      swig_type_info *descriptor = type_info<Type>();
      int res = descriptor ? SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0) : SWIG_ERROR;
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  template <class Difference>
  inline size_t
  check_index(Difference i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    throw std::out_of_range("index out of range");
  }

  template <class Difference>
  void
  slice_adjust(Difference i, Difference j, Py_ssize_t step, size_t size, Difference &ii, Difference &jj, bool insert = false) {
    if (step == 0) {
      throw std::invalid_argument("slice step cannot be zero");
    } else if (step > 0) {
      // Required range: 0 <= i < size, 0 <= j < size, i <= j
      if (i < 0) {
        ii = 0;
      } else if (i < (Difference)size) {
        ii = i;
      } else if (insert && (i >= (Difference)size)) {
        ii = (Difference)size;
      }
      if (j < 0) {
        jj = 0;
      } else {
        jj = (j < (Difference)size) ? j : (Difference)size;
      }
      if (jj < ii)
        jj = ii;
    } else {
      // Required range: -1 <= i < size-1, -1 <= j < size-1, i >= j
      if (i < -1) {
        ii = -1;
      } else if (i < (Difference) size) {
        ii = i;
      } else if (i >= (Difference)(size-1)) {
        ii = (Difference)(size-1);
      }
      if (j < -1) {
        jj = -1;
      } else {
        jj = (j < (Difference)size ) ? j : (Difference)(size-1);
      }
      if (ii < jj)
        ii = jj;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence>
  inline void
  erase(Sequence* seq, const typename Sequence::iterator& position) {
    seq->erase(position);
  }

  template <class Sequence>
  struct traits_reserve {
    static void reserve(Sequence & /*seq*/, typename Sequence::size_type /*n*/) {
      // This should be specialized for types that support reserve
    }
  };

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj);

    if (step > 0) {
      typename Sequence::const_iterator sb = self->begin();
      typename Sequence::const_iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      if (step == 1) {
        return new Sequence(sb, se);
      } else {
        Sequence *sequence = new Sequence();
        swig::traits_reserve<Sequence>::reserve(*sequence, (jj - ii + step - 1) / step);
        typename Sequence::const_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<step && it!=se; ++c)
            it++;
        }
        return sequence;
      } 
    } else {
      Sequence *sequence = new Sequence();
      swig::traits_reserve<Sequence>::reserve(*sequence, (ii - jj - step - 1) / -step);
      typename Sequence::const_reverse_iterator sb = self->rbegin();
      typename Sequence::const_reverse_iterator se = self->rbegin();
      std::advance(sb,size-ii-1);
      std::advance(se,size-jj-1);
      typename Sequence::const_reverse_iterator it = sb;
      while (it!=se) {
        sequence->push_back(*it);
        for (Py_ssize_t c=0; c<-step && it!=se; ++c)
          it++;
      }
      return sequence;
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, Py_ssize_t step, const InputSeq& is = InputSeq()) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (step == 1) {
        size_t ssize = jj - ii;
        if (ssize <= is.size()) {
          // expanding/staying the same size
          swig::traits_reserve<Sequence>::reserve(*self, self->size() - ssize + is.size());
          typename Sequence::iterator sb = self->begin();
          typename InputSeq::const_iterator isit = is.begin();
          std::advance(sb,ii);
          std::advance(isit, jj - ii);
          self->insert(std::copy(is.begin(), isit, sb), isit, is.end());
        } else {
          // shrinking
          typename Sequence::iterator sb = self->begin();
          typename Sequence::iterator se = self->begin();
          std::advance(sb,ii);
          std::advance(se,jj);
          self->erase(sb,se);
          sb = self->begin();
          std::advance(sb,ii);
          self->insert(sb, is.begin(), is.end());
        }
      } else {
        size_t replacecount = (jj - ii + step - 1) / step;
        if (is.size() != replacecount) {
          char msg[1024];
          sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
          throw std::invalid_argument(msg);
        }
        typename Sequence::const_iterator isit = is.begin();
        typename Sequence::iterator it = self->begin();
        std::advance(it,ii);
        for (size_t rc=0; rc<replacecount; ++rc) {
          *it++ = *isit++;
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
        }
      }
    } else {
      size_t replacecount = (ii - jj - step - 1) / -step;
      if (is.size() != replacecount) {
        char msg[1024];
        sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
        throw std::invalid_argument(msg);
      }
      typename Sequence::const_iterator isit = is.begin();
      typename Sequence::reverse_iterator it = self->rbegin();
      std::advance(it,size-ii-1);
      for (size_t rc=0; rc<replacecount; ++rc) {
        *it++ = *isit++;
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
      }
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      typename Sequence::iterator sb = self->begin();
      std::advance(sb,ii);
      if (step == 1) {
        typename Sequence::iterator se = self->begin();
        std::advance(se,jj);
        self->erase(sb,se);
      } else {
        typename Sequence::iterator it = sb;
        size_t delcount = (jj - ii + step - 1) / step;
        while (delcount) {
          it = self->erase(it);
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
          delcount--;
        }
      }
    } else {
      typename Sequence::reverse_iterator sb = self->rbegin();
      std::advance(sb,size-ii-1);
      typename Sequence::reverse_iterator it = sb;
      size_t delcount = (ii - jj - step - 1) / -step;
      while (delcount) {
        it = typename Sequence::reverse_iterator(self->erase((++it).base()));
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
        delcount--;
      }
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }

  private:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }

}


namespace swig
{
  template <class T>
  struct SwigPySequence_Ref
  {
    SwigPySequence_Ref(PyObject* seq, Py_ssize_t index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", (int)_index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    SwigPySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    Py_ssize_t _index;
  };

  template <class T>
  struct SwigPySequence_ArrowProxy
  {
    SwigPySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct SwigPySequence_InputIterator
  {
    typedef SwigPySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef Py_ssize_t difference_type;

    SwigPySequence_InputIterator()
    {
    }

    SwigPySequence_InputIterator(PyObject* seq, Py_ssize_t index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    SwigPySequence_ArrowProxy<T>
    operator->() const {
      return SwigPySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  // STL container wrapper around a Python sequence
  template <class T>
  struct SwigPySequence_Cont
  {
    typedef SwigPySequence_Ref<T> reference;
    typedef const SwigPySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef Py_ssize_t difference_type;
    typedef size_t size_type;
    typedef const pointer const_pointer;
    typedef SwigPySequence_InputIterator<T, reference> iterator;
    typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

    SwigPySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~SwigPySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      Py_ssize_t s = size();
      for (Py_ssize_t i = 0; i < s; ++i) {
	swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", (int)i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
  if (PyBytes_Check(obj))
#else
  if (PyUnicode_Check(obj))
#endif
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
#if PY_VERSION_HEX>=0x03000000
#if !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    if(alloc) *alloc = SWIG_NEWOBJ;
#endif
    PyBytes_AsStringAndSize(obj, &cstr, &len);
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	{
	  *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
	  *alloc = SWIG_NEWOBJ;
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
	*cptr = PyBytes_AsString(obj);
#else
	assert(0); /* Should never reach here with Unicode strings in Python 3 */
#endif
#else
	*cptr = SWIG_Python_str_AsChar(obj);
#endif
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000 && !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    Py_XDECREF(obj);
#endif
    return SWIG_OK;
  } else {
#if defined(SWIG_PYTHON_2_UNICODE)
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
#error "Cannot use both SWIG_PYTHON_2_UNICODE and SWIG_PYTHON_STRICT_BYTE_CHAR at once"
#endif
#if PY_VERSION_HEX<0x03000000
    if (PyUnicode_Check(obj)) {
      char *cstr; Py_ssize_t len;
      if (!alloc && cptr) {
        return SWIG_RuntimeError;
      }
      obj = PyUnicode_AsUTF8String(obj);
      if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
        if (cptr) {
          if (alloc) *alloc = SWIG_NEWOBJ;
          *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        }
        if (psize) *psize = len + 1;

        Py_XDECREF(obj);
        return SWIG_OK;
      } else {
        Py_XDECREF(obj);
      }
    }
#endif
#endif

    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}





SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
      return PyBytes_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#else
#if PY_VERSION_HEX >= 0x03010000
      return PyUnicode_DecodeUTF8(carray, static_cast< Py_ssize_t >(size), "surrogateescape");
#else
      return PyUnicode_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
#endif
#else
      return PyString_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


  #define SWIG_From_double   PyFloat_FromDouble 

SWIGINTERN PyObject *nitf_DateTime_toPythonDateTime(nitf::DateTime *self){
        PyObject* nitfDateTime = nullptr;
        int year = self->getYear();
        int month = self->getMonth();
        int day = self->getDayOfMonth();
        int hour = self->getHour();
        int minute = self->getMinute();
        int second = static_cast<int>(self->getSecond());
        int microsecond = static_cast<int>((self->getSecond() - second) * 1e6);
        nitfDateTime = PyDateTime_FromDateAndTime(year, month, day,
                hour, minute, second, microsecond);
        return nitfDateTime;
    }

SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value));
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(size_t) <= sizeof(unsigned long long) */
    return SWIG_From_unsigned_SS_long_SS_long  (static_cast< unsigned long long >(value));
  }
#endif
}


SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_short  (unsigned short value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}

SWIGINTERN void six_Parameter_setValue(six::Parameter *self,std::string const &str){
      self->setValue<std::string>(str);
    }
SWIGINTERN std::string six_Parameter___str__(six::Parameter *self){
      return self->str();
    }
SWIGINTERN long six_Parameter___int__(six::Parameter *self){
      return str::toType<long>(self->str());
    }
SWIGINTERN double six_Parameter___float__(six::Parameter *self){
      return str::toType<double>(self->str());
    }
SWIGINTERN six::Parameter &six_ParameterCollection___getitem__(six::ParameterCollection *self,size_t i){
      return (*self)[i];
    }
SWIGINTERN void six_ParameterCollection___setitem__(six::ParameterCollection *self,size_t i,six::Parameter const &v){
      (*self)[i] = v;
    }

SWIGINTERN int
SWIG_AsVal_std_string (PyObject * obj, std::string *val)
{
  std::string* v = (std::string *) 0;
  int res = SWIG_AsPtr_std_string (obj, &v);
  if (!SWIG_IsOK(res)) return res;
  if (v) {
    if (val) *val = *v;
    if (SWIG_IsNewObj(res)) {
      delete v;
      res = SWIG_DelNewMask(res);
    }
    return res;
  }
  return SWIG_ERROR;
}


namespace swig {
  template <> struct traits< std::string > {
    typedef value_category category;
    static const char* type_name() { return"std::string"; }
  };
  template <>  struct traits_asval< std::string > {
    typedef std::string value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_std_string (obj, val);
    }
  };
  template <>  struct traits_from< std::string > {
    typedef std::string value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_std_string  (val);
    }
  };
}


namespace swig {
  template <class SwigPySeq, class Seq>
  inline void
  assign(const SwigPySeq& swigpyseq, Seq* seq) {
    // seq->assign(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
    typedef typename SwigPySeq::value_type value_type;
    typename SwigPySeq::const_iterator it = swigpyseq.begin();
    for (;it != swigpyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	swig_type_info *descriptor = swig::type_info<sequence>();
	if (descriptor && SWIG_IsOK(::SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0))) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (PySequence_Check(obj)) {
	try {
	  SwigPySequence_Cont<value_type> swigpyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(swigpyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return swigpyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_InternalNewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((Py_ssize_t)size);
	Py_ssize_t i = 0;
	for (const_iterator it = seq.begin(); it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return nullptr;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_reserve<std::vector<T> > {
      static void reserve(std::vector<T> &seq, typename std::vector<T>::size_type n) {
        seq.reserve(n);
      }
    };

    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< std::string, std::allocator< std::string > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::string" "," "std::allocator< std::string >" " >";
	  }
	};
      }
    

SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


  namespace swig {
    template <>  struct traits< six::MatchCollect > {
      typedef pointer_category category;
      static const char* type_name() { return"six::MatchCollect"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< six::MatchCollect, std::allocator< six::MatchCollect > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "six::MatchCollect" "," "std::allocator< six::MatchCollect >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_six_MatchCollect_Sg__iterator(std::vector< six::MatchCollect > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_six_MatchCollect_Sg____nonzero__(std::vector< six::MatchCollect > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_six_MatchCollect_Sg____bool__(std::vector< six::MatchCollect > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< six::MatchCollect >::size_type std_vector_Sl_six_MatchCollect_Sg____len__(std::vector< six::MatchCollect > const *self){
      return self->size();
    }
SWIGINTERN std::vector< six::MatchCollect,std::allocator< six::MatchCollect > > *std_vector_Sl_six_MatchCollect_Sg____getslice__(std::vector< six::MatchCollect > *self,std::vector< six::MatchCollect >::difference_type i,std::vector< six::MatchCollect >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_six_MatchCollect_Sg____setslice____SWIG_0(std::vector< six::MatchCollect > *self,std::vector< six::MatchCollect >::difference_type i,std::vector< six::MatchCollect >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< six::MatchCollect,std::allocator< six::MatchCollect > >());
    }
SWIGINTERN void std_vector_Sl_six_MatchCollect_Sg____setslice____SWIG_1(std::vector< six::MatchCollect > *self,std::vector< six::MatchCollect >::difference_type i,std::vector< six::MatchCollect >::difference_type j,std::vector< six::MatchCollect,std::allocator< six::MatchCollect > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_six_MatchCollect_Sg____delslice__(std::vector< six::MatchCollect > *self,std::vector< six::MatchCollect >::difference_type i,std::vector< six::MatchCollect >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_six_MatchCollect_Sg____delitem____SWIG_0(std::vector< six::MatchCollect > *self,std::vector< six::MatchCollect >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< six::MatchCollect,std::allocator< six::MatchCollect > > *std_vector_Sl_six_MatchCollect_Sg____getitem____SWIG_0(std::vector< six::MatchCollect > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return nullptr;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< six::MatchCollect,std::allocator< six::MatchCollect > >::difference_type id = i;
      std::vector< six::MatchCollect,std::allocator< six::MatchCollect > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_six_MatchCollect_Sg____setitem____SWIG_0(std::vector< six::MatchCollect > *self,PySliceObject *slice,std::vector< six::MatchCollect,std::allocator< six::MatchCollect > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< six::MatchCollect,std::allocator< six::MatchCollect > >::difference_type id = i;
      std::vector< six::MatchCollect,std::allocator< six::MatchCollect > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_six_MatchCollect_Sg____setitem____SWIG_1(std::vector< six::MatchCollect > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< six::MatchCollect,std::allocator< six::MatchCollect > >::difference_type id = i;
      std::vector< six::MatchCollect,std::allocator< six::MatchCollect > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_six_MatchCollect_Sg____delitem____SWIG_1(std::vector< six::MatchCollect > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< six::MatchCollect,std::allocator< six::MatchCollect > >::difference_type id = i;
      std::vector< six::MatchCollect,std::allocator< six::MatchCollect > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< six::MatchCollect >::value_type const &std_vector_Sl_six_MatchCollect_Sg____getitem____SWIG_1(std::vector< six::MatchCollect > const *self,std::vector< six::MatchCollect >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_six_MatchCollect_Sg____setitem____SWIG_2(std::vector< six::MatchCollect > *self,std::vector< six::MatchCollect >::difference_type i,std::vector< six::MatchCollect >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< six::MatchCollect >::value_type std_vector_Sl_six_MatchCollect_Sg__pop(std::vector< six::MatchCollect > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< six::MatchCollect,std::allocator< six::MatchCollect > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_six_MatchCollect_Sg__append(std::vector< six::MatchCollect > *self,std::vector< six::MatchCollect >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< six::MatchCollect >::iterator std_vector_Sl_six_MatchCollect_Sg__erase__SWIG_0(std::vector< six::MatchCollect > *self,std::vector< six::MatchCollect >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< six::MatchCollect >::iterator std_vector_Sl_six_MatchCollect_Sg__erase__SWIG_1(std::vector< six::MatchCollect > *self,std::vector< six::MatchCollect >::iterator first,std::vector< six::MatchCollect >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< six::MatchCollect >::iterator std_vector_Sl_six_MatchCollect_Sg__insert__SWIG_0(std::vector< six::MatchCollect > *self,std::vector< six::MatchCollect >::iterator pos,std::vector< six::MatchCollect >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_six_MatchCollect_Sg__insert__SWIG_1(std::vector< six::MatchCollect > *self,std::vector< six::MatchCollect >::iterator pos,std::vector< six::MatchCollect >::size_type n,std::vector< six::MatchCollect >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits< six::MatchType > {
      typedef pointer_category category;
      static const char* type_name() { return"six::MatchType"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< six::MatchType, std::allocator< six::MatchType > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "six::MatchType" "," "std::allocator< six::MatchType >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_six_MatchType_Sg__iterator(std::vector< six::MatchType > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_six_MatchType_Sg____nonzero__(std::vector< six::MatchType > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_six_MatchType_Sg____bool__(std::vector< six::MatchType > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< six::MatchType >::size_type std_vector_Sl_six_MatchType_Sg____len__(std::vector< six::MatchType > const *self){
      return self->size();
    }
SWIGINTERN std::vector< six::MatchType,std::allocator< six::MatchType > > *std_vector_Sl_six_MatchType_Sg____getslice__(std::vector< six::MatchType > *self,std::vector< six::MatchType >::difference_type i,std::vector< six::MatchType >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_six_MatchType_Sg____setslice____SWIG_0(std::vector< six::MatchType > *self,std::vector< six::MatchType >::difference_type i,std::vector< six::MatchType >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< six::MatchType,std::allocator< six::MatchType > >());
    }
SWIGINTERN void std_vector_Sl_six_MatchType_Sg____setslice____SWIG_1(std::vector< six::MatchType > *self,std::vector< six::MatchType >::difference_type i,std::vector< six::MatchType >::difference_type j,std::vector< six::MatchType,std::allocator< six::MatchType > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_six_MatchType_Sg____delslice__(std::vector< six::MatchType > *self,std::vector< six::MatchType >::difference_type i,std::vector< six::MatchType >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_six_MatchType_Sg____delitem____SWIG_0(std::vector< six::MatchType > *self,std::vector< six::MatchType >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< six::MatchType,std::allocator< six::MatchType > > *std_vector_Sl_six_MatchType_Sg____getitem____SWIG_0(std::vector< six::MatchType > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return nullptr;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< six::MatchType,std::allocator< six::MatchType > >::difference_type id = i;
      std::vector< six::MatchType,std::allocator< six::MatchType > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_six_MatchType_Sg____setitem____SWIG_0(std::vector< six::MatchType > *self,PySliceObject *slice,std::vector< six::MatchType,std::allocator< six::MatchType > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< six::MatchType,std::allocator< six::MatchType > >::difference_type id = i;
      std::vector< six::MatchType,std::allocator< six::MatchType > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_six_MatchType_Sg____setitem____SWIG_1(std::vector< six::MatchType > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< six::MatchType,std::allocator< six::MatchType > >::difference_type id = i;
      std::vector< six::MatchType,std::allocator< six::MatchType > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_six_MatchType_Sg____delitem____SWIG_1(std::vector< six::MatchType > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< six::MatchType,std::allocator< six::MatchType > >::difference_type id = i;
      std::vector< six::MatchType,std::allocator< six::MatchType > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< six::MatchType >::value_type const &std_vector_Sl_six_MatchType_Sg____getitem____SWIG_1(std::vector< six::MatchType > const *self,std::vector< six::MatchType >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_six_MatchType_Sg____setitem____SWIG_2(std::vector< six::MatchType > *self,std::vector< six::MatchType >::difference_type i,std::vector< six::MatchType >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< six::MatchType >::value_type std_vector_Sl_six_MatchType_Sg__pop(std::vector< six::MatchType > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< six::MatchType,std::allocator< six::MatchType > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_six_MatchType_Sg__append(std::vector< six::MatchType > *self,std::vector< six::MatchType >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< six::MatchType >::iterator std_vector_Sl_six_MatchType_Sg__erase__SWIG_0(std::vector< six::MatchType > *self,std::vector< six::MatchType >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< six::MatchType >::iterator std_vector_Sl_six_MatchType_Sg__erase__SWIG_1(std::vector< six::MatchType > *self,std::vector< six::MatchType >::iterator first,std::vector< six::MatchType >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< six::MatchType >::iterator std_vector_Sl_six_MatchType_Sg__insert__SWIG_0(std::vector< six::MatchType > *self,std::vector< six::MatchType >::iterator pos,std::vector< six::MatchType >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_six_MatchType_Sg__insert__SWIG_1(std::vector< six::MatchType > *self,std::vector< six::MatchType >::iterator pos,std::vector< six::MatchType >::size_type n,std::vector< six::MatchType >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits< mem::ScopedCopyablePtr< six::MatchType > > {
      typedef pointer_category category;
      static const char* type_name() { return"mem::ScopedCopyablePtr< six::MatchType >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< mem::ScopedCopyablePtr< six::MatchType >, std::allocator< mem::ScopedCopyablePtr< six::MatchType > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "mem::ScopedCopyablePtr< six::MatchType >" "," "std::allocator< mem::ScopedCopyablePtr< six::MatchType > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_MatchType_Sg__Sg__iterator(std::vector< mem::ScopedCopyablePtr< six::MatchType > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_MatchType_Sg__Sg____nonzero__(std::vector< mem::ScopedCopyablePtr< six::MatchType > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_MatchType_Sg__Sg____bool__(std::vector< mem::ScopedCopyablePtr< six::MatchType > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< mem::ScopedCopyablePtr< six::MatchType > >::size_type std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_MatchType_Sg__Sg____len__(std::vector< mem::ScopedCopyablePtr< six::MatchType > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > > *std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_MatchType_Sg__Sg____getslice__(std::vector< mem::ScopedCopyablePtr< six::MatchType > > *self,std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type i,std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_MatchType_Sg__Sg____setslice____SWIG_0(std::vector< mem::ScopedCopyablePtr< six::MatchType > > *self,std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type i,std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > >());
    }
SWIGINTERN void std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_MatchType_Sg__Sg____setslice____SWIG_1(std::vector< mem::ScopedCopyablePtr< six::MatchType > > *self,std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type i,std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type j,std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_MatchType_Sg__Sg____delslice__(std::vector< mem::ScopedCopyablePtr< six::MatchType > > *self,std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type i,std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_MatchType_Sg__Sg____delitem____SWIG_0(std::vector< mem::ScopedCopyablePtr< six::MatchType > > *self,std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > > *std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_MatchType_Sg__Sg____getitem____SWIG_0(std::vector< mem::ScopedCopyablePtr< six::MatchType > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return nullptr;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > >::difference_type id = i;
      std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_MatchType_Sg__Sg____setitem____SWIG_0(std::vector< mem::ScopedCopyablePtr< six::MatchType > > *self,PySliceObject *slice,std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > >::difference_type id = i;
      std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_MatchType_Sg__Sg____setitem____SWIG_1(std::vector< mem::ScopedCopyablePtr< six::MatchType > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > >::difference_type id = i;
      std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_MatchType_Sg__Sg____delitem____SWIG_1(std::vector< mem::ScopedCopyablePtr< six::MatchType > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > >::difference_type id = i;
      std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type const &std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_MatchType_Sg__Sg____getitem____SWIG_1(std::vector< mem::ScopedCopyablePtr< six::MatchType > > const *self,std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_MatchType_Sg__Sg____setitem____SWIG_2(std::vector< mem::ScopedCopyablePtr< six::MatchType > > *self,std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type i,std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_MatchType_Sg__Sg__pop(std::vector< mem::ScopedCopyablePtr< six::MatchType > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_MatchType_Sg__Sg__append(std::vector< mem::ScopedCopyablePtr< six::MatchType > > *self,std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_MatchType_Sg__Sg__erase__SWIG_0(std::vector< mem::ScopedCopyablePtr< six::MatchType > > *self,std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_MatchType_Sg__Sg__erase__SWIG_1(std::vector< mem::ScopedCopyablePtr< six::MatchType > > *self,std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator first,std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_MatchType_Sg__Sg__insert__SWIG_0(std::vector< mem::ScopedCopyablePtr< six::MatchType > > *self,std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator pos,std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_MatchType_Sg__Sg__insert__SWIG_1(std::vector< mem::ScopedCopyablePtr< six::MatchType > > *self,std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator pos,std::vector< mem::ScopedCopyablePtr< six::MatchType > >::size_type n,std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits< mem::ScopedCopyablePtr< six::GeoInfo > > {
      typedef pointer_category category;
      static const char* type_name() { return"mem::ScopedCopyablePtr< six::GeoInfo >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< mem::ScopedCopyablePtr< six::GeoInfo >, std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "mem::ScopedCopyablePtr< six::GeoInfo >" "," "std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_GeoInfo_Sg__Sg__iterator(std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_GeoInfo_Sg__Sg____nonzero__(std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_GeoInfo_Sg__Sg____bool__(std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::size_type std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_GeoInfo_Sg__Sg____len__(std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > > *std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_GeoInfo_Sg__Sg____getslice__(std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *self,std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type i,std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_GeoInfo_Sg__Sg____setslice____SWIG_0(std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *self,std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type i,std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > >());
    }
SWIGINTERN void std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_GeoInfo_Sg__Sg____setslice____SWIG_1(std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *self,std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type i,std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type j,std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_GeoInfo_Sg__Sg____delslice__(std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *self,std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type i,std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_GeoInfo_Sg__Sg____delitem____SWIG_0(std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *self,std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > > *std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_GeoInfo_Sg__Sg____getitem____SWIG_0(std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return nullptr;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > >::difference_type id = i;
      std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_GeoInfo_Sg__Sg____setitem____SWIG_0(std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *self,PySliceObject *slice,std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > >::difference_type id = i;
      std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_GeoInfo_Sg__Sg____setitem____SWIG_1(std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > >::difference_type id = i;
      std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_GeoInfo_Sg__Sg____delitem____SWIG_1(std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > >::difference_type id = i;
      std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type const &std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_GeoInfo_Sg__Sg____getitem____SWIG_1(std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > const *self,std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_GeoInfo_Sg__Sg____setitem____SWIG_2(std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *self,std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type i,std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_GeoInfo_Sg__Sg__pop(std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_GeoInfo_Sg__Sg__append(std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *self,std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_GeoInfo_Sg__Sg__erase__SWIG_0(std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *self,std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_GeoInfo_Sg__Sg__erase__SWIG_1(std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *self,std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator first,std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_GeoInfo_Sg__Sg__insert__SWIG_0(std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *self,std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator pos,std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_GeoInfo_Sg__Sg__insert__SWIG_1(std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *self,std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator pos,std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::size_type n,std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type const &x){ self->insert(pos, n, x); }

mem::ScopedCopyablePtr< six::Radiometric > makeScopedCopyableRadiometric()
{
    return mem::ScopedCopyablePtr< six::Radiometric >(new six::Radiometric ());
} 


mem::ScopedCopyablePtr< six::ErrorStatistics > makeScopedCopyableErrorStatistics()
{
    return mem::ScopedCopyablePtr< six::ErrorStatistics >(new six::ErrorStatistics ());
} 


mem::ScopedCopyablePtr< six::Components > makeScopedCopyableComponents()
{
    return mem::ScopedCopyablePtr< six::Components >(new six::Components ());
} 


mem::ScopedCopyablePtr< six::CorrCoefs > makeScopedCopyableCorrCoefs()
{
    return mem::ScopedCopyablePtr< six::CorrCoefs >(new six::CorrCoefs ());
} 


mem::ScopedCopyablePtr< six::PosVelError > makeScopedCopyablePosVelError()
{
    return mem::ScopedCopyablePtr< six::PosVelError >(new six::PosVelError ());
} 


mem::ScopedCopyablePtr< six::GeoInfo > makeScopedCopyableGeoInfo()
{
    return mem::ScopedCopyablePtr< six::GeoInfo >(new six::GeoInfo ());
} 


mem::ScopedCopyablePtr< six::RadarSensor > makeScopedCopyableRadarSensor()
{
    return mem::ScopedCopyablePtr< six::RadarSensor >(new six::RadarSensor ());
} 


mem::ScopedCopyablePtr< six::TropoError > makeScopedCopyableTropoError()
{
    return mem::ScopedCopyablePtr< six::TropoError >(new six::TropoError ());
} 


mem::ScopedCopyablePtr< six::IonoError > makeScopedCopyableIonoError()
{
    return mem::ScopedCopyablePtr< six::IonoError >(new six::IonoError ());
} 


mem::ScopedCopyablePtr< six::CompositeSCP > makeScopedCopyableCompositeSCP()
{
    return mem::ScopedCopyablePtr< six::CompositeSCP >(new six::CompositeSCP ());
} 


mem::ScopedCopyablePtr< six::MatchInformation > makeScopedCopyableMatchInformation()
{
    return mem::ScopedCopyablePtr< six::MatchInformation >(new six::MatchInformation ());
} 


mem::ScopedCopyablePtr< six::MatchType > makeScopedCopyableMatchType()
{
    return mem::ScopedCopyablePtr< six::MatchType >(new six::MatchType ());
} 

SWIGINTERN double mem_ScopedCloneablePtr_Sl_six_AmplitudeTable_Sg____getitem__(mem::ScopedCloneablePtr< six::AmplitudeTable > const *self,size_t key){
        return *(double*)(**self)[key];
    }
SWIGINTERN void mem_ScopedCloneablePtr_Sl_six_AmplitudeTable_Sg____setitem__(mem::ScopedCloneablePtr< six::AmplitudeTable > *self,size_t key,double value){
        double* location = (double*)(**self)[key];
        *location = value;
    }

mem::ScopedCloneablePtr< six::AmplitudeTable > makeScopedCloneableAmplitudeTable()
{
    return mem::ScopedCloneablePtr< six::AmplitudeTable >(new six::AmplitudeTable ());
} 


mem::ScopedCloneablePtr< six::CollectionInformation > makeScopedCloneableCollectionInformation()
{
    return mem::ScopedCloneablePtr< six::CollectionInformation >(new six::CollectionInformation ());
} 

#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SwigPyIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_value",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_incr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_incr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_incr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_incr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_incr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::incr(size_t)\n"
    "    swig::SwigPyIterator::incr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_decr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_decr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_decr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_decr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_decr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::decr(size_t)\n"
    "    swig::SwigPyIterator::decr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_distance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_equal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_copy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator___next__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->__next__();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_previous",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_advance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->advance(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator +=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator -=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *SwigPyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_swig__SwigPyIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DateTime__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nitf::DateTime *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DateTime")) SWIG_fail;
  {
    try
    {
      result = (nitf::DateTime *)new nitf::DateTime();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nitf__DateTime, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_DateTime__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nitf_DateTime *arg1 = (nitf_DateTime *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  nitf::DateTime *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DateTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_nitf_DateTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DateTime" "', argument " "1"" of type '" "nitf_DateTime *""'"); 
  }
  arg1 = reinterpret_cast< nitf_DateTime * >(argp1);
  {
    try
    {
      result = (nitf::DateTime *)new nitf::DateTime(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nitf__DateTime, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_DateTime__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  nitf::DateTime *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DateTime",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DateTime" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try
    {
      result = (nitf::DateTime *)new nitf::DateTime(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nitf__DateTime, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_DateTime__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  nitf::DateTime *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_DateTime",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DateTime" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DateTime" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_DateTime" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DateTime" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try
    {
      result = (nitf::DateTime *)new nitf::DateTime((std::string const &)*arg1,(std::string const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nitf__DateTime, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_DateTime__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double arg6 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  nitf::DateTime *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_DateTime",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DateTime" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DateTime" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DateTime" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_DateTime" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_DateTime" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_DateTime" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try
    {
      result = (nitf::DateTime *)new nitf::DateTime(arg1,arg2,arg3,arg4,arg5,arg6);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nitf__DateTime, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_DateTime__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  nitf::DateTime *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_DateTime",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DateTime" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DateTime" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DateTime" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_DateTime" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_DateTime" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try
    {
      result = (nitf::DateTime *)new nitf::DateTime(arg1,arg2,arg3,arg4,arg5);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nitf__DateTime, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_DateTime__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  nitf::DateTime *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_DateTime",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DateTime" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DateTime" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DateTime" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_DateTime" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try
    {
      result = (nitf::DateTime *)new nitf::DateTime(arg1,arg2,arg3,arg4);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nitf__DateTime, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_DateTime__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  nitf::DateTime *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_DateTime",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DateTime" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DateTime" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DateTime" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try
    {
      result = (nitf::DateTime *)new nitf::DateTime(arg1,arg2,arg3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nitf__DateTime, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_delete_DateTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nitf::DateTime *arg1 = (nitf::DateTime *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DateTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_nitf__DateTime, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DateTime" "', argument " "1"" of type '" "nitf::DateTime *""'"); 
  }
  arg1 = reinterpret_cast< nitf::DateTime * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_DateTime__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nitf::DateTime *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  nitf::DateTime *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DateTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_nitf__DateTime,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DateTime" "', argument " "1"" of type '" "nitf::DateTime const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DateTime" "', argument " "1"" of type '" "nitf::DateTime const &""'"); 
  }
  arg1 = reinterpret_cast< nitf::DateTime * >(argp1);
  {
    try
    {
      result = (nitf::DateTime *)new nitf::DateTime((nitf::DateTime const &)*arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nitf__DateTime, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_DateTime(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DateTime__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_nitf_DateTime, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DateTime__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_nitf__DateTime, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DateTime__SWIG_8(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_DateTime__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_DateTime__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], nullptr);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_DateTime__SWIG_7(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], nullptr);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], nullptr);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_DateTime__SWIG_6(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], nullptr);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], nullptr);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], nullptr);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_DateTime__SWIG_5(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], nullptr);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], nullptr);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], nullptr);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], nullptr);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_DateTime__SWIG_4(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DateTime'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    nitf::DateTime::DateTime()\n"
    "    nitf::DateTime::DateTime(nitf_DateTime *)\n"
    "    nitf::DateTime::DateTime(double)\n"
    "    nitf::DateTime::DateTime(std::string const &,std::string const &)\n"
    "    nitf::DateTime::DateTime(int,int,int,int,int,double)\n"
    "    nitf::DateTime::DateTime(int,int,int,int,int)\n"
    "    nitf::DateTime::DateTime(int,int,int,int)\n"
    "    nitf::DateTime::DateTime(int,int,int)\n"
    "    nitf::DateTime::DateTime(nitf::DateTime const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DateTime___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nitf::DateTime *arg1 = (nitf::DateTime *) 0 ;
  nitf::DateTime *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DateTime___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_nitf__DateTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateTime___lt__" "', argument " "1"" of type '" "nitf::DateTime const *""'"); 
  }
  arg1 = reinterpret_cast< nitf::DateTime * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_nitf__DateTime,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DateTime___lt__" "', argument " "2"" of type '" "nitf::DateTime const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DateTime___lt__" "', argument " "2"" of type '" "nitf::DateTime const &""'"); 
  }
  arg2 = reinterpret_cast< nitf::DateTime * >(argp2);
  {
    try
    {
      result = (bool)((nitf::DateTime const *)arg1)->operator <((nitf::DateTime const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DateTime___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nitf::DateTime *arg1 = (nitf::DateTime *) 0 ;
  nitf::DateTime *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DateTime___le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_nitf__DateTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateTime___le__" "', argument " "1"" of type '" "nitf::DateTime const *""'"); 
  }
  arg1 = reinterpret_cast< nitf::DateTime * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_nitf__DateTime,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DateTime___le__" "', argument " "2"" of type '" "nitf::DateTime const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DateTime___le__" "', argument " "2"" of type '" "nitf::DateTime const &""'"); 
  }
  arg2 = reinterpret_cast< nitf::DateTime * >(argp2);
  {
    try
    {
      result = (bool)((nitf::DateTime const *)arg1)->operator <=((nitf::DateTime const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DateTime___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nitf::DateTime *arg1 = (nitf::DateTime *) 0 ;
  nitf::DateTime *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DateTime___gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_nitf__DateTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateTime___gt__" "', argument " "1"" of type '" "nitf::DateTime const *""'"); 
  }
  arg1 = reinterpret_cast< nitf::DateTime * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_nitf__DateTime,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DateTime___gt__" "', argument " "2"" of type '" "nitf::DateTime const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DateTime___gt__" "', argument " "2"" of type '" "nitf::DateTime const &""'"); 
  }
  arg2 = reinterpret_cast< nitf::DateTime * >(argp2);
  {
    try
    {
      result = (bool)((nitf::DateTime const *)arg1)->operator >((nitf::DateTime const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DateTime___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nitf::DateTime *arg1 = (nitf::DateTime *) 0 ;
  nitf::DateTime *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DateTime___ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_nitf__DateTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateTime___ge__" "', argument " "1"" of type '" "nitf::DateTime const *""'"); 
  }
  arg1 = reinterpret_cast< nitf::DateTime * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_nitf__DateTime,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DateTime___ge__" "', argument " "2"" of type '" "nitf::DateTime const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DateTime___ge__" "', argument " "2"" of type '" "nitf::DateTime const &""'"); 
  }
  arg2 = reinterpret_cast< nitf::DateTime * >(argp2);
  {
    try
    {
      result = (bool)((nitf::DateTime const *)arg1)->operator >=((nitf::DateTime const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DateTime___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nitf::DateTime *arg1 = (nitf::DateTime *) 0 ;
  nitf::DateTime *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DateTime___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_nitf__DateTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateTime___eq__" "', argument " "1"" of type '" "nitf::DateTime const *""'"); 
  }
  arg1 = reinterpret_cast< nitf::DateTime * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_nitf__DateTime,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DateTime___eq__" "', argument " "2"" of type '" "nitf::DateTime const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DateTime___eq__" "', argument " "2"" of type '" "nitf::DateTime const &""'"); 
  }
  arg2 = reinterpret_cast< nitf::DateTime * >(argp2);
  {
    try
    {
      result = (bool)((nitf::DateTime const *)arg1)->operator ==((nitf::DateTime const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DateTime___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nitf::DateTime *arg1 = (nitf::DateTime *) 0 ;
  nitf::DateTime *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DateTime___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_nitf__DateTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateTime___ne__" "', argument " "1"" of type '" "nitf::DateTime const *""'"); 
  }
  arg1 = reinterpret_cast< nitf::DateTime * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_nitf__DateTime,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DateTime___ne__" "', argument " "2"" of type '" "nitf::DateTime const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DateTime___ne__" "', argument " "2"" of type '" "nitf::DateTime const &""'"); 
  }
  arg2 = reinterpret_cast< nitf::DateTime * >(argp2);
  {
    try
    {
      result = (bool)((nitf::DateTime const *)arg1)->operator !=((nitf::DateTime const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DateTime_getNative__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nitf::DateTime *arg1 = (nitf::DateTime *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  nitf_DateTime *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DateTime_getNative",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_nitf__DateTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateTime_getNative" "', argument " "1"" of type '" "nitf::DateTime *""'"); 
  }
  arg1 = reinterpret_cast< nitf::DateTime * >(argp1);
  {
    try
    {
      result = (nitf_DateTime *)(arg1)->getNative();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nitf_DateTime, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DateTime_getNative__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nitf::DateTime *arg1 = (nitf::DateTime *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  nitf_DateTime *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DateTime_getNative",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_nitf__DateTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateTime_getNative" "', argument " "1"" of type '" "nitf::DateTime const *""'"); 
  }
  arg1 = reinterpret_cast< nitf::DateTime * >(argp1);
  {
    try
    {
      result = (nitf_DateTime *)((nitf::DateTime const *)arg1)->getNative();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nitf_DateTime, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DateTime_getNative(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_nitf__DateTime, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_DateTime_getNative__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_nitf__DateTime, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_DateTime_getNative__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DateTime_getNative'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    nitf::DateTime::getNative()\n"
    "    nitf::DateTime::getNative() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DateTime_format__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nitf::DateTime *arg1 = (nitf::DateTime *) 0 ;
  std::string *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DateTime_format",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_nitf__DateTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateTime_format" "', argument " "1"" of type '" "nitf::DateTime const *""'"); 
  }
  arg1 = reinterpret_cast< nitf::DateTime * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DateTime_format" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DateTime_format" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, nullptr, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DateTime_format" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DateTime_format" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  {
    try
    {
      ((nitf::DateTime const *)arg1)->format((std::string const &)*arg2,arg3,arg4);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DateTime_format__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nitf::DateTime *arg1 = (nitf::DateTime *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DateTime_format",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_nitf__DateTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateTime_format" "', argument " "1"" of type '" "nitf::DateTime const *""'"); 
  }
  arg1 = reinterpret_cast< nitf::DateTime * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DateTime_format" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DateTime_format" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DateTime_format" "', argument " "3"" of type '" "std::string &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DateTime_format" "', argument " "3"" of type '" "std::string &""'"); 
  }
  arg3 = reinterpret_cast< std::string * >(argp3);
  {
    try
    {
      ((nitf::DateTime const *)arg1)->format((std::string const &)*arg2,*arg3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DateTime_format__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nitf::DateTime *arg1 = (nitf::DateTime *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DateTime_format",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_nitf__DateTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateTime_format" "', argument " "1"" of type '" "nitf::DateTime const *""'"); 
  }
  arg1 = reinterpret_cast< nitf::DateTime * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DateTime_format" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DateTime_format" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try
    {
      result = ((nitf::DateTime const *)arg1)->format((std::string const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DateTime_format(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_nitf__DateTime, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DateTime_format__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_nitf__DateTime, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__string, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DateTime_format__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_nitf__DateTime, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, nullptr, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], nullptr);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_DateTime_format__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DateTime_format'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    nitf::DateTime::format(std::string const &,char *,size_t) const\n"
    "    nitf::DateTime::format(std::string const &,std::string &) const\n"
    "    nitf::DateTime::format(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DateTime_getYear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nitf::DateTime *arg1 = (nitf::DateTime *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DateTime_getYear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_nitf__DateTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateTime_getYear" "', argument " "1"" of type '" "nitf::DateTime const *""'"); 
  }
  arg1 = reinterpret_cast< nitf::DateTime * >(argp1);
  {
    try
    {
      result = (int)((nitf::DateTime const *)arg1)->getYear();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DateTime_getMonth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nitf::DateTime *arg1 = (nitf::DateTime *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DateTime_getMonth",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_nitf__DateTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateTime_getMonth" "', argument " "1"" of type '" "nitf::DateTime const *""'"); 
  }
  arg1 = reinterpret_cast< nitf::DateTime * >(argp1);
  {
    try
    {
      result = (int)((nitf::DateTime const *)arg1)->getMonth();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DateTime_getDayOfMonth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nitf::DateTime *arg1 = (nitf::DateTime *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DateTime_getDayOfMonth",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_nitf__DateTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateTime_getDayOfMonth" "', argument " "1"" of type '" "nitf::DateTime const *""'"); 
  }
  arg1 = reinterpret_cast< nitf::DateTime * >(argp1);
  {
    try
    {
      result = (int)((nitf::DateTime const *)arg1)->getDayOfMonth();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DateTime_getDayOfWeek(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nitf::DateTime *arg1 = (nitf::DateTime *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DateTime_getDayOfWeek",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_nitf__DateTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateTime_getDayOfWeek" "', argument " "1"" of type '" "nitf::DateTime const *""'"); 
  }
  arg1 = reinterpret_cast< nitf::DateTime * >(argp1);
  {
    try
    {
      result = (int)((nitf::DateTime const *)arg1)->getDayOfWeek();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DateTime_getDayOfYear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nitf::DateTime *arg1 = (nitf::DateTime *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DateTime_getDayOfYear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_nitf__DateTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateTime_getDayOfYear" "', argument " "1"" of type '" "nitf::DateTime const *""'"); 
  }
  arg1 = reinterpret_cast< nitf::DateTime * >(argp1);
  {
    try
    {
      result = (int)((nitf::DateTime const *)arg1)->getDayOfYear();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DateTime_getHour(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nitf::DateTime *arg1 = (nitf::DateTime *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DateTime_getHour",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_nitf__DateTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateTime_getHour" "', argument " "1"" of type '" "nitf::DateTime const *""'"); 
  }
  arg1 = reinterpret_cast< nitf::DateTime * >(argp1);
  {
    try
    {
      result = (int)((nitf::DateTime const *)arg1)->getHour();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DateTime_getMinute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nitf::DateTime *arg1 = (nitf::DateTime *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DateTime_getMinute",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_nitf__DateTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateTime_getMinute" "', argument " "1"" of type '" "nitf::DateTime const *""'"); 
  }
  arg1 = reinterpret_cast< nitf::DateTime * >(argp1);
  {
    try
    {
      result = (int)((nitf::DateTime const *)arg1)->getMinute();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DateTime_getSecond(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nitf::DateTime *arg1 = (nitf::DateTime *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DateTime_getSecond",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_nitf__DateTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateTime_getSecond" "', argument " "1"" of type '" "nitf::DateTime const *""'"); 
  }
  arg1 = reinterpret_cast< nitf::DateTime * >(argp1);
  {
    try
    {
      result = (double)((nitf::DateTime const *)arg1)->getSecond();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DateTime_getTimeInMillis(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nitf::DateTime *arg1 = (nitf::DateTime *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DateTime_getTimeInMillis",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_nitf__DateTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateTime_getTimeInMillis" "', argument " "1"" of type '" "nitf::DateTime const *""'"); 
  }
  arg1 = reinterpret_cast< nitf::DateTime * >(argp1);
  {
    try
    {
      result = (double)((nitf::DateTime const *)arg1)->getTimeInMillis();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DateTime_setYear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nitf::DateTime *arg1 = (nitf::DateTime *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DateTime_setYear",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_nitf__DateTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateTime_setYear" "', argument " "1"" of type '" "nitf::DateTime *""'"); 
  }
  arg1 = reinterpret_cast< nitf::DateTime * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DateTime_setYear" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      (arg1)->setYear(arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DateTime_setMonth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nitf::DateTime *arg1 = (nitf::DateTime *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DateTime_setMonth",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_nitf__DateTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateTime_setMonth" "', argument " "1"" of type '" "nitf::DateTime *""'"); 
  }
  arg1 = reinterpret_cast< nitf::DateTime * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DateTime_setMonth" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      (arg1)->setMonth(arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DateTime_setDayOfMonth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nitf::DateTime *arg1 = (nitf::DateTime *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DateTime_setDayOfMonth",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_nitf__DateTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateTime_setDayOfMonth" "', argument " "1"" of type '" "nitf::DateTime *""'"); 
  }
  arg1 = reinterpret_cast< nitf::DateTime * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DateTime_setDayOfMonth" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      (arg1)->setDayOfMonth(arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DateTime_setHour(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nitf::DateTime *arg1 = (nitf::DateTime *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DateTime_setHour",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_nitf__DateTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateTime_setHour" "', argument " "1"" of type '" "nitf::DateTime *""'"); 
  }
  arg1 = reinterpret_cast< nitf::DateTime * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DateTime_setHour" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      (arg1)->setHour(arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DateTime_setMinute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nitf::DateTime *arg1 = (nitf::DateTime *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DateTime_setMinute",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_nitf__DateTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateTime_setMinute" "', argument " "1"" of type '" "nitf::DateTime *""'"); 
  }
  arg1 = reinterpret_cast< nitf::DateTime * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DateTime_setMinute" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      (arg1)->setMinute(arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DateTime_setSecond(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nitf::DateTime *arg1 = (nitf::DateTime *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DateTime_setSecond",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_nitf__DateTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateTime_setSecond" "', argument " "1"" of type '" "nitf::DateTime *""'"); 
  }
  arg1 = reinterpret_cast< nitf::DateTime * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DateTime_setSecond" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      (arg1)->setSecond(arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DateTime_setTimeInMillis(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nitf::DateTime *arg1 = (nitf::DateTime *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DateTime_setTimeInMillis",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_nitf__DateTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateTime_setTimeInMillis" "', argument " "1"" of type '" "nitf::DateTime *""'"); 
  }
  arg1 = reinterpret_cast< nitf::DateTime * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DateTime_setTimeInMillis" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      (arg1)->setTimeInMillis(arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DateTime_toPythonDateTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nitf::DateTime *arg1 = (nitf::DateTime *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DateTime_toPythonDateTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_nitf__DateTime, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateTime_toPythonDateTime" "', argument " "1"" of type '" "nitf::DateTime *""'"); 
  }
  arg1 = reinterpret_cast< nitf::DateTime * >(argp1);
  {
    try
    {
      result = (PyObject *)nitf_DateTime_toPythonDateTime(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *DateTime_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_nitf__DateTime, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_NOT_SET_VALUE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable NOT_SET_VALUE is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_NOT_SET_VALUE_get(void) {
  PyObject *pyobj = 0;
  
  {
    try
    {
      pyobj = SWIG_From_int(static_cast< int >(six::NOT_SET_VALUE));
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  return pyobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_AppliedType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::AppliedType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_AppliedType")) SWIG_fail;
  {
    try
    {
      result = (six::AppliedType *)new six::AppliedType();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__AppliedType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_AppliedType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  six::AppliedType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_AppliedType",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_AppliedType" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try
    {
      result = (six::AppliedType *)new six::AppliedType(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__AppliedType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_AppliedType__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  six::AppliedType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_AppliedType",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_AppliedType" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      result = (six::AppliedType *)new six::AppliedType(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__AppliedType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_AppliedType(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_AppliedType__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_AppliedType__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_AppliedType__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_AppliedType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::AppliedType::AppliedType()\n"
    "    six::AppliedType::AppliedType(std::string)\n"
    "    six::AppliedType::AppliedType(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_AppliedType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::AppliedType *arg1 = (six::AppliedType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AppliedType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__AppliedType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AppliedType" "', argument " "1"" of type '" "six::AppliedType *""'"); 
  }
  arg1 = reinterpret_cast< six::AppliedType * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_AppliedType_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::AppliedType *arg1 = (six::AppliedType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AppliedType_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__AppliedType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AppliedType_toString" "', argument " "1"" of type '" "six::AppliedType const *""'"); 
  }
  arg1 = reinterpret_cast< six::AppliedType * >(argp1);
  {
    try
    {
      result = ((six::AppliedType const *)arg1)->toString();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_AppliedType___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::AppliedType *arg1 = (six::AppliedType *) 0 ;
  six::AppliedType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AppliedType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__AppliedType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AppliedType___eq__" "', argument " "1"" of type '" "six::AppliedType const *""'"); 
  }
  arg1 = reinterpret_cast< six::AppliedType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__AppliedType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AppliedType___eq__" "', argument " "2"" of type '" "six::AppliedType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AppliedType___eq__" "', argument " "2"" of type '" "six::AppliedType const &""'"); 
  }
  arg2 = reinterpret_cast< six::AppliedType * >(argp2);
  {
    try
    {
      result = (bool)((six::AppliedType const *)arg1)->operator ==((six::AppliedType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_AppliedType___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::AppliedType *arg1 = (six::AppliedType *) 0 ;
  six::AppliedType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AppliedType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__AppliedType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AppliedType___ne__" "', argument " "1"" of type '" "six::AppliedType const *""'"); 
  }
  arg1 = reinterpret_cast< six::AppliedType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__AppliedType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AppliedType___ne__" "', argument " "2"" of type '" "six::AppliedType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AppliedType___ne__" "', argument " "2"" of type '" "six::AppliedType const &""'"); 
  }
  arg2 = reinterpret_cast< six::AppliedType * >(argp2);
  {
    try
    {
      result = (bool)((six::AppliedType const *)arg1)->operator !=((six::AppliedType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_AppliedType___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::AppliedType *arg1 = (six::AppliedType *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AppliedType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__AppliedType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AppliedType___eq__" "', argument " "1"" of type '" "six::AppliedType const *""'"); 
  }
  arg1 = reinterpret_cast< six::AppliedType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AppliedType___eq__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::AppliedType const *)arg1)->operator ==((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_AppliedType___eq__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__AppliedType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__AppliedType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AppliedType___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__AppliedType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AppliedType___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_AppliedType___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::AppliedType *arg1 = (six::AppliedType *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AppliedType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__AppliedType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AppliedType___ne__" "', argument " "1"" of type '" "six::AppliedType const *""'"); 
  }
  arg1 = reinterpret_cast< six::AppliedType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AppliedType___ne__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::AppliedType const *)arg1)->operator !=((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_AppliedType___ne__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__AppliedType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__AppliedType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AppliedType___ne____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__AppliedType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AppliedType___ne____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_AppliedType___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::AppliedType *arg1 = (six::AppliedType *) 0 ;
  six::AppliedType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AppliedType___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__AppliedType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AppliedType___lt__" "', argument " "1"" of type '" "six::AppliedType const *""'"); 
  }
  arg1 = reinterpret_cast< six::AppliedType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__AppliedType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AppliedType___lt__" "', argument " "2"" of type '" "six::AppliedType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AppliedType___lt__" "', argument " "2"" of type '" "six::AppliedType const &""'"); 
  }
  arg2 = reinterpret_cast< six::AppliedType * >(argp2);
  {
    try
    {
      result = (bool)((six::AppliedType const *)arg1)->operator <((six::AppliedType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_AppliedType___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::AppliedType *arg1 = (six::AppliedType *) 0 ;
  six::AppliedType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AppliedType___gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__AppliedType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AppliedType___gt__" "', argument " "1"" of type '" "six::AppliedType const *""'"); 
  }
  arg1 = reinterpret_cast< six::AppliedType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__AppliedType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AppliedType___gt__" "', argument " "2"" of type '" "six::AppliedType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AppliedType___gt__" "', argument " "2"" of type '" "six::AppliedType const &""'"); 
  }
  arg2 = reinterpret_cast< six::AppliedType * >(argp2);
  {
    try
    {
      result = (bool)((six::AppliedType const *)arg1)->operator >((six::AppliedType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_AppliedType___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::AppliedType *arg1 = (six::AppliedType *) 0 ;
  six::AppliedType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AppliedType___le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__AppliedType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AppliedType___le__" "', argument " "1"" of type '" "six::AppliedType const *""'"); 
  }
  arg1 = reinterpret_cast< six::AppliedType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__AppliedType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AppliedType___le__" "', argument " "2"" of type '" "six::AppliedType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AppliedType___le__" "', argument " "2"" of type '" "six::AppliedType const &""'"); 
  }
  arg2 = reinterpret_cast< six::AppliedType * >(argp2);
  {
    try
    {
      result = (bool)((six::AppliedType const *)arg1)->operator <=((six::AppliedType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_AppliedType___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::AppliedType *arg1 = (six::AppliedType *) 0 ;
  six::AppliedType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AppliedType___ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__AppliedType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AppliedType___ge__" "', argument " "1"" of type '" "six::AppliedType const *""'"); 
  }
  arg1 = reinterpret_cast< six::AppliedType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__AppliedType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AppliedType___ge__" "', argument " "2"" of type '" "six::AppliedType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AppliedType___ge__" "', argument " "2"" of type '" "six::AppliedType const &""'"); 
  }
  arg2 = reinterpret_cast< six::AppliedType * >(argp2);
  {
    try
    {
      result = (bool)((six::AppliedType const *)arg1)->operator >=((six::AppliedType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_AppliedType_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)":AppliedType_size")) SWIG_fail;
  {
    try
    {
      result = six::AppliedType::size();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_AppliedType_value_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::AppliedType *arg1 = (six::AppliedType *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AppliedType_value_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__AppliedType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AppliedType_value_set" "', argument " "1"" of type '" "six::AppliedType *""'"); 
  }
  arg1 = reinterpret_cast< six::AppliedType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AppliedType_value_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      if (arg1) (arg1)->value = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_AppliedType_value_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::AppliedType *arg1 = (six::AppliedType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AppliedType_value_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__AppliedType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AppliedType_value_get" "', argument " "1"" of type '" "six::AppliedType *""'"); 
  }
  arg1 = reinterpret_cast< six::AppliedType * >(argp1);
  {
    try
    {
      result = (int) ((arg1)->value);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *AppliedType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__AppliedType, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_AutofocusType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::AutofocusType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_AutofocusType")) SWIG_fail;
  {
    try
    {
      result = (six::AutofocusType *)new six::AutofocusType();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__AutofocusType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_AutofocusType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  six::AutofocusType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_AutofocusType",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_AutofocusType" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try
    {
      result = (six::AutofocusType *)new six::AutofocusType(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__AutofocusType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_AutofocusType__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  six::AutofocusType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_AutofocusType",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_AutofocusType" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      result = (six::AutofocusType *)new six::AutofocusType(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__AutofocusType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_AutofocusType(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_AutofocusType__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_AutofocusType__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_AutofocusType__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_AutofocusType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::AutofocusType::AutofocusType()\n"
    "    six::AutofocusType::AutofocusType(std::string)\n"
    "    six::AutofocusType::AutofocusType(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_AutofocusType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::AutofocusType *arg1 = (six::AutofocusType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AutofocusType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__AutofocusType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AutofocusType" "', argument " "1"" of type '" "six::AutofocusType *""'"); 
  }
  arg1 = reinterpret_cast< six::AutofocusType * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_AutofocusType_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::AutofocusType *arg1 = (six::AutofocusType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AutofocusType_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__AutofocusType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AutofocusType_toString" "', argument " "1"" of type '" "six::AutofocusType const *""'"); 
  }
  arg1 = reinterpret_cast< six::AutofocusType * >(argp1);
  {
    try
    {
      result = ((six::AutofocusType const *)arg1)->toString();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_AutofocusType___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::AutofocusType *arg1 = (six::AutofocusType *) 0 ;
  six::AutofocusType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AutofocusType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__AutofocusType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AutofocusType___eq__" "', argument " "1"" of type '" "six::AutofocusType const *""'"); 
  }
  arg1 = reinterpret_cast< six::AutofocusType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__AutofocusType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AutofocusType___eq__" "', argument " "2"" of type '" "six::AutofocusType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AutofocusType___eq__" "', argument " "2"" of type '" "six::AutofocusType const &""'"); 
  }
  arg2 = reinterpret_cast< six::AutofocusType * >(argp2);
  {
    try
    {
      result = (bool)((six::AutofocusType const *)arg1)->operator ==((six::AutofocusType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_AutofocusType___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::AutofocusType *arg1 = (six::AutofocusType *) 0 ;
  six::AutofocusType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AutofocusType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__AutofocusType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AutofocusType___ne__" "', argument " "1"" of type '" "six::AutofocusType const *""'"); 
  }
  arg1 = reinterpret_cast< six::AutofocusType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__AutofocusType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AutofocusType___ne__" "', argument " "2"" of type '" "six::AutofocusType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AutofocusType___ne__" "', argument " "2"" of type '" "six::AutofocusType const &""'"); 
  }
  arg2 = reinterpret_cast< six::AutofocusType * >(argp2);
  {
    try
    {
      result = (bool)((six::AutofocusType const *)arg1)->operator !=((six::AutofocusType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_AutofocusType___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::AutofocusType *arg1 = (six::AutofocusType *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AutofocusType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__AutofocusType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AutofocusType___eq__" "', argument " "1"" of type '" "six::AutofocusType const *""'"); 
  }
  arg1 = reinterpret_cast< six::AutofocusType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AutofocusType___eq__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::AutofocusType const *)arg1)->operator ==((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_AutofocusType___eq__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__AutofocusType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__AutofocusType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AutofocusType___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__AutofocusType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AutofocusType___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_AutofocusType___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::AutofocusType *arg1 = (six::AutofocusType *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AutofocusType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__AutofocusType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AutofocusType___ne__" "', argument " "1"" of type '" "six::AutofocusType const *""'"); 
  }
  arg1 = reinterpret_cast< six::AutofocusType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AutofocusType___ne__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::AutofocusType const *)arg1)->operator !=((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_AutofocusType___ne__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__AutofocusType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__AutofocusType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AutofocusType___ne____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__AutofocusType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AutofocusType___ne____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_AutofocusType___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::AutofocusType *arg1 = (six::AutofocusType *) 0 ;
  six::AutofocusType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AutofocusType___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__AutofocusType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AutofocusType___lt__" "', argument " "1"" of type '" "six::AutofocusType const *""'"); 
  }
  arg1 = reinterpret_cast< six::AutofocusType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__AutofocusType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AutofocusType___lt__" "', argument " "2"" of type '" "six::AutofocusType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AutofocusType___lt__" "', argument " "2"" of type '" "six::AutofocusType const &""'"); 
  }
  arg2 = reinterpret_cast< six::AutofocusType * >(argp2);
  {
    try
    {
      result = (bool)((six::AutofocusType const *)arg1)->operator <((six::AutofocusType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_AutofocusType___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::AutofocusType *arg1 = (six::AutofocusType *) 0 ;
  six::AutofocusType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AutofocusType___gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__AutofocusType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AutofocusType___gt__" "', argument " "1"" of type '" "six::AutofocusType const *""'"); 
  }
  arg1 = reinterpret_cast< six::AutofocusType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__AutofocusType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AutofocusType___gt__" "', argument " "2"" of type '" "six::AutofocusType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AutofocusType___gt__" "', argument " "2"" of type '" "six::AutofocusType const &""'"); 
  }
  arg2 = reinterpret_cast< six::AutofocusType * >(argp2);
  {
    try
    {
      result = (bool)((six::AutofocusType const *)arg1)->operator >((six::AutofocusType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_AutofocusType___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::AutofocusType *arg1 = (six::AutofocusType *) 0 ;
  six::AutofocusType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AutofocusType___le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__AutofocusType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AutofocusType___le__" "', argument " "1"" of type '" "six::AutofocusType const *""'"); 
  }
  arg1 = reinterpret_cast< six::AutofocusType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__AutofocusType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AutofocusType___le__" "', argument " "2"" of type '" "six::AutofocusType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AutofocusType___le__" "', argument " "2"" of type '" "six::AutofocusType const &""'"); 
  }
  arg2 = reinterpret_cast< six::AutofocusType * >(argp2);
  {
    try
    {
      result = (bool)((six::AutofocusType const *)arg1)->operator <=((six::AutofocusType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_AutofocusType___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::AutofocusType *arg1 = (six::AutofocusType *) 0 ;
  six::AutofocusType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AutofocusType___ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__AutofocusType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AutofocusType___ge__" "', argument " "1"" of type '" "six::AutofocusType const *""'"); 
  }
  arg1 = reinterpret_cast< six::AutofocusType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__AutofocusType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AutofocusType___ge__" "', argument " "2"" of type '" "six::AutofocusType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AutofocusType___ge__" "', argument " "2"" of type '" "six::AutofocusType const &""'"); 
  }
  arg2 = reinterpret_cast< six::AutofocusType * >(argp2);
  {
    try
    {
      result = (bool)((six::AutofocusType const *)arg1)->operator >=((six::AutofocusType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_AutofocusType_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)":AutofocusType_size")) SWIG_fail;
  {
    try
    {
      result = six::AutofocusType::size();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_AutofocusType_value_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::AutofocusType *arg1 = (six::AutofocusType *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AutofocusType_value_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__AutofocusType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AutofocusType_value_set" "', argument " "1"" of type '" "six::AutofocusType *""'"); 
  }
  arg1 = reinterpret_cast< six::AutofocusType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AutofocusType_value_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      if (arg1) (arg1)->value = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_AutofocusType_value_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::AutofocusType *arg1 = (six::AutofocusType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AutofocusType_value_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__AutofocusType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AutofocusType_value_get" "', argument " "1"" of type '" "six::AutofocusType *""'"); 
  }
  arg1 = reinterpret_cast< six::AutofocusType * >(argp1);
  {
    try
    {
      result = (int) ((arg1)->value);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *AutofocusType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__AutofocusType, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_BooleanType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::BooleanType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_BooleanType")) SWIG_fail;
  {
    try
    {
      result = (six::BooleanType *)new six::BooleanType();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__BooleanType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_BooleanType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  six::BooleanType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_BooleanType",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_BooleanType" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try
    {
      result = (six::BooleanType *)new six::BooleanType(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__BooleanType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_BooleanType__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  six::BooleanType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_BooleanType",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BooleanType" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      result = (six::BooleanType *)new six::BooleanType(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__BooleanType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_BooleanType(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_BooleanType__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_BooleanType__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_BooleanType__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_BooleanType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::BooleanType::BooleanType()\n"
    "    six::BooleanType::BooleanType(std::string)\n"
    "    six::BooleanType::BooleanType(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_BooleanType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::BooleanType *arg1 = (six::BooleanType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BooleanType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__BooleanType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BooleanType" "', argument " "1"" of type '" "six::BooleanType *""'"); 
  }
  arg1 = reinterpret_cast< six::BooleanType * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_BooleanType_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::BooleanType *arg1 = (six::BooleanType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BooleanType_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__BooleanType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BooleanType_toString" "', argument " "1"" of type '" "six::BooleanType const *""'"); 
  }
  arg1 = reinterpret_cast< six::BooleanType * >(argp1);
  {
    try
    {
      result = ((six::BooleanType const *)arg1)->toString();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_BooleanType___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::BooleanType *arg1 = (six::BooleanType *) 0 ;
  six::BooleanType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BooleanType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__BooleanType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BooleanType___eq__" "', argument " "1"" of type '" "six::BooleanType const *""'"); 
  }
  arg1 = reinterpret_cast< six::BooleanType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__BooleanType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BooleanType___eq__" "', argument " "2"" of type '" "six::BooleanType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BooleanType___eq__" "', argument " "2"" of type '" "six::BooleanType const &""'"); 
  }
  arg2 = reinterpret_cast< six::BooleanType * >(argp2);
  {
    try
    {
      result = (bool)((six::BooleanType const *)arg1)->operator ==((six::BooleanType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_BooleanType___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::BooleanType *arg1 = (six::BooleanType *) 0 ;
  six::BooleanType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BooleanType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__BooleanType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BooleanType___ne__" "', argument " "1"" of type '" "six::BooleanType const *""'"); 
  }
  arg1 = reinterpret_cast< six::BooleanType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__BooleanType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BooleanType___ne__" "', argument " "2"" of type '" "six::BooleanType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BooleanType___ne__" "', argument " "2"" of type '" "six::BooleanType const &""'"); 
  }
  arg2 = reinterpret_cast< six::BooleanType * >(argp2);
  {
    try
    {
      result = (bool)((six::BooleanType const *)arg1)->operator !=((six::BooleanType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_BooleanType___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::BooleanType *arg1 = (six::BooleanType *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BooleanType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__BooleanType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BooleanType___eq__" "', argument " "1"" of type '" "six::BooleanType const *""'"); 
  }
  arg1 = reinterpret_cast< six::BooleanType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BooleanType___eq__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::BooleanType const *)arg1)->operator ==((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_BooleanType___eq__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__BooleanType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__BooleanType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BooleanType___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__BooleanType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BooleanType___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_BooleanType___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::BooleanType *arg1 = (six::BooleanType *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BooleanType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__BooleanType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BooleanType___ne__" "', argument " "1"" of type '" "six::BooleanType const *""'"); 
  }
  arg1 = reinterpret_cast< six::BooleanType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BooleanType___ne__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::BooleanType const *)arg1)->operator !=((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_BooleanType___ne__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__BooleanType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__BooleanType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BooleanType___ne____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__BooleanType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BooleanType___ne____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_BooleanType___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::BooleanType *arg1 = (six::BooleanType *) 0 ;
  six::BooleanType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BooleanType___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__BooleanType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BooleanType___lt__" "', argument " "1"" of type '" "six::BooleanType const *""'"); 
  }
  arg1 = reinterpret_cast< six::BooleanType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__BooleanType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BooleanType___lt__" "', argument " "2"" of type '" "six::BooleanType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BooleanType___lt__" "', argument " "2"" of type '" "six::BooleanType const &""'"); 
  }
  arg2 = reinterpret_cast< six::BooleanType * >(argp2);
  {
    try
    {
      result = (bool)((six::BooleanType const *)arg1)->operator <((six::BooleanType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_BooleanType___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::BooleanType *arg1 = (six::BooleanType *) 0 ;
  six::BooleanType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BooleanType___gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__BooleanType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BooleanType___gt__" "', argument " "1"" of type '" "six::BooleanType const *""'"); 
  }
  arg1 = reinterpret_cast< six::BooleanType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__BooleanType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BooleanType___gt__" "', argument " "2"" of type '" "six::BooleanType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BooleanType___gt__" "', argument " "2"" of type '" "six::BooleanType const &""'"); 
  }
  arg2 = reinterpret_cast< six::BooleanType * >(argp2);
  {
    try
    {
      result = (bool)((six::BooleanType const *)arg1)->operator >((six::BooleanType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_BooleanType___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::BooleanType *arg1 = (six::BooleanType *) 0 ;
  six::BooleanType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BooleanType___le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__BooleanType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BooleanType___le__" "', argument " "1"" of type '" "six::BooleanType const *""'"); 
  }
  arg1 = reinterpret_cast< six::BooleanType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__BooleanType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BooleanType___le__" "', argument " "2"" of type '" "six::BooleanType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BooleanType___le__" "', argument " "2"" of type '" "six::BooleanType const &""'"); 
  }
  arg2 = reinterpret_cast< six::BooleanType * >(argp2);
  {
    try
    {
      result = (bool)((six::BooleanType const *)arg1)->operator <=((six::BooleanType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_BooleanType___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::BooleanType *arg1 = (six::BooleanType *) 0 ;
  six::BooleanType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BooleanType___ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__BooleanType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BooleanType___ge__" "', argument " "1"" of type '" "six::BooleanType const *""'"); 
  }
  arg1 = reinterpret_cast< six::BooleanType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__BooleanType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BooleanType___ge__" "', argument " "2"" of type '" "six::BooleanType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BooleanType___ge__" "', argument " "2"" of type '" "six::BooleanType const &""'"); 
  }
  arg2 = reinterpret_cast< six::BooleanType * >(argp2);
  {
    try
    {
      result = (bool)((six::BooleanType const *)arg1)->operator >=((six::BooleanType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_BooleanType_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)":BooleanType_size")) SWIG_fail;
  {
    try
    {
      result = six::BooleanType::size();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_BooleanType_value_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::BooleanType *arg1 = (six::BooleanType *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BooleanType_value_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__BooleanType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BooleanType_value_set" "', argument " "1"" of type '" "six::BooleanType *""'"); 
  }
  arg1 = reinterpret_cast< six::BooleanType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BooleanType_value_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      if (arg1) (arg1)->value = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_BooleanType_value_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::BooleanType *arg1 = (six::BooleanType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BooleanType_value_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__BooleanType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BooleanType_value_get" "', argument " "1"" of type '" "six::BooleanType *""'"); 
  }
  arg1 = reinterpret_cast< six::BooleanType * >(argp1);
  {
    try
    {
      result = (int) ((arg1)->value);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *BooleanType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__BooleanType, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ByteSwapping__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ByteSwapping *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ByteSwapping")) SWIG_fail;
  {
    try
    {
      result = (six::ByteSwapping *)new six::ByteSwapping();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__ByteSwapping, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ByteSwapping__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  six::ByteSwapping *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ByteSwapping",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ByteSwapping" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try
    {
      result = (six::ByteSwapping *)new six::ByteSwapping(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__ByteSwapping, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ByteSwapping__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  six::ByteSwapping *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ByteSwapping",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ByteSwapping" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      result = (six::ByteSwapping *)new six::ByteSwapping(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__ByteSwapping, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ByteSwapping(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ByteSwapping__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ByteSwapping__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ByteSwapping__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ByteSwapping'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::ByteSwapping::ByteSwapping()\n"
    "    six::ByteSwapping::ByteSwapping(std::string)\n"
    "    six::ByteSwapping::ByteSwapping(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ByteSwapping(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ByteSwapping *arg1 = (six::ByteSwapping *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ByteSwapping",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ByteSwapping, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ByteSwapping" "', argument " "1"" of type '" "six::ByteSwapping *""'"); 
  }
  arg1 = reinterpret_cast< six::ByteSwapping * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ByteSwapping_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ByteSwapping *arg1 = (six::ByteSwapping *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ByteSwapping_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ByteSwapping, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ByteSwapping_toString" "', argument " "1"" of type '" "six::ByteSwapping const *""'"); 
  }
  arg1 = reinterpret_cast< six::ByteSwapping * >(argp1);
  {
    try
    {
      result = ((six::ByteSwapping const *)arg1)->toString();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ByteSwapping___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ByteSwapping *arg1 = (six::ByteSwapping *) 0 ;
  six::ByteSwapping *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ByteSwapping___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ByteSwapping, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ByteSwapping___eq__" "', argument " "1"" of type '" "six::ByteSwapping const *""'"); 
  }
  arg1 = reinterpret_cast< six::ByteSwapping * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__ByteSwapping,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ByteSwapping___eq__" "', argument " "2"" of type '" "six::ByteSwapping const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ByteSwapping___eq__" "', argument " "2"" of type '" "six::ByteSwapping const &""'"); 
  }
  arg2 = reinterpret_cast< six::ByteSwapping * >(argp2);
  {
    try
    {
      result = (bool)((six::ByteSwapping const *)arg1)->operator ==((six::ByteSwapping const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ByteSwapping___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ByteSwapping *arg1 = (six::ByteSwapping *) 0 ;
  six::ByteSwapping *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ByteSwapping___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ByteSwapping, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ByteSwapping___ne__" "', argument " "1"" of type '" "six::ByteSwapping const *""'"); 
  }
  arg1 = reinterpret_cast< six::ByteSwapping * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__ByteSwapping,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ByteSwapping___ne__" "', argument " "2"" of type '" "six::ByteSwapping const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ByteSwapping___ne__" "', argument " "2"" of type '" "six::ByteSwapping const &""'"); 
  }
  arg2 = reinterpret_cast< six::ByteSwapping * >(argp2);
  {
    try
    {
      result = (bool)((six::ByteSwapping const *)arg1)->operator !=((six::ByteSwapping const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ByteSwapping___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ByteSwapping *arg1 = (six::ByteSwapping *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ByteSwapping___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ByteSwapping, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ByteSwapping___eq__" "', argument " "1"" of type '" "six::ByteSwapping const *""'"); 
  }
  arg1 = reinterpret_cast< six::ByteSwapping * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ByteSwapping___eq__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::ByteSwapping const *)arg1)->operator ==((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ByteSwapping___eq__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__ByteSwapping, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__ByteSwapping, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ByteSwapping___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__ByteSwapping, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ByteSwapping___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ByteSwapping___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ByteSwapping *arg1 = (six::ByteSwapping *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ByteSwapping___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ByteSwapping, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ByteSwapping___ne__" "', argument " "1"" of type '" "six::ByteSwapping const *""'"); 
  }
  arg1 = reinterpret_cast< six::ByteSwapping * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ByteSwapping___ne__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::ByteSwapping const *)arg1)->operator !=((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ByteSwapping___ne__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__ByteSwapping, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__ByteSwapping, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ByteSwapping___ne____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__ByteSwapping, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ByteSwapping___ne____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ByteSwapping___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ByteSwapping *arg1 = (six::ByteSwapping *) 0 ;
  six::ByteSwapping *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ByteSwapping___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ByteSwapping, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ByteSwapping___lt__" "', argument " "1"" of type '" "six::ByteSwapping const *""'"); 
  }
  arg1 = reinterpret_cast< six::ByteSwapping * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__ByteSwapping,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ByteSwapping___lt__" "', argument " "2"" of type '" "six::ByteSwapping const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ByteSwapping___lt__" "', argument " "2"" of type '" "six::ByteSwapping const &""'"); 
  }
  arg2 = reinterpret_cast< six::ByteSwapping * >(argp2);
  {
    try
    {
      result = (bool)((six::ByteSwapping const *)arg1)->operator <((six::ByteSwapping const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ByteSwapping___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ByteSwapping *arg1 = (six::ByteSwapping *) 0 ;
  six::ByteSwapping *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ByteSwapping___gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ByteSwapping, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ByteSwapping___gt__" "', argument " "1"" of type '" "six::ByteSwapping const *""'"); 
  }
  arg1 = reinterpret_cast< six::ByteSwapping * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__ByteSwapping,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ByteSwapping___gt__" "', argument " "2"" of type '" "six::ByteSwapping const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ByteSwapping___gt__" "', argument " "2"" of type '" "six::ByteSwapping const &""'"); 
  }
  arg2 = reinterpret_cast< six::ByteSwapping * >(argp2);
  {
    try
    {
      result = (bool)((six::ByteSwapping const *)arg1)->operator >((six::ByteSwapping const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ByteSwapping___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ByteSwapping *arg1 = (six::ByteSwapping *) 0 ;
  six::ByteSwapping *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ByteSwapping___le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ByteSwapping, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ByteSwapping___le__" "', argument " "1"" of type '" "six::ByteSwapping const *""'"); 
  }
  arg1 = reinterpret_cast< six::ByteSwapping * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__ByteSwapping,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ByteSwapping___le__" "', argument " "2"" of type '" "six::ByteSwapping const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ByteSwapping___le__" "', argument " "2"" of type '" "six::ByteSwapping const &""'"); 
  }
  arg2 = reinterpret_cast< six::ByteSwapping * >(argp2);
  {
    try
    {
      result = (bool)((six::ByteSwapping const *)arg1)->operator <=((six::ByteSwapping const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ByteSwapping___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ByteSwapping *arg1 = (six::ByteSwapping *) 0 ;
  six::ByteSwapping *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ByteSwapping___ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ByteSwapping, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ByteSwapping___ge__" "', argument " "1"" of type '" "six::ByteSwapping const *""'"); 
  }
  arg1 = reinterpret_cast< six::ByteSwapping * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__ByteSwapping,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ByteSwapping___ge__" "', argument " "2"" of type '" "six::ByteSwapping const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ByteSwapping___ge__" "', argument " "2"" of type '" "six::ByteSwapping const &""'"); 
  }
  arg2 = reinterpret_cast< six::ByteSwapping * >(argp2);
  {
    try
    {
      result = (bool)((six::ByteSwapping const *)arg1)->operator >=((six::ByteSwapping const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ByteSwapping_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)":ByteSwapping_size")) SWIG_fail;
  {
    try
    {
      result = six::ByteSwapping::size();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ByteSwapping_value_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ByteSwapping *arg1 = (six::ByteSwapping *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ByteSwapping_value_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ByteSwapping, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ByteSwapping_value_set" "', argument " "1"" of type '" "six::ByteSwapping *""'"); 
  }
  arg1 = reinterpret_cast< six::ByteSwapping * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ByteSwapping_value_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      if (arg1) (arg1)->value = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ByteSwapping_value_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ByteSwapping *arg1 = (six::ByteSwapping *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ByteSwapping_value_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ByteSwapping, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ByteSwapping_value_get" "', argument " "1"" of type '" "six::ByteSwapping *""'"); 
  }
  arg1 = reinterpret_cast< six::ByteSwapping * >(argp1);
  {
    try
    {
      result = (int) ((arg1)->value);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *ByteSwapping_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__ByteSwapping, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CollectType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CollectType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_CollectType")) SWIG_fail;
  {
    try
    {
      result = (six::CollectType *)new six::CollectType();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__CollectType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_CollectType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  six::CollectType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CollectType",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_CollectType" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try
    {
      result = (six::CollectType *)new six::CollectType(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__CollectType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_CollectType__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  six::CollectType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CollectType",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_CollectType" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      result = (six::CollectType *)new six::CollectType(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__CollectType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_CollectType(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_CollectType__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_CollectType__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CollectType__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_CollectType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::CollectType::CollectType()\n"
    "    six::CollectType::CollectType(std::string)\n"
    "    six::CollectType::CollectType(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_CollectType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CollectType *arg1 = (six::CollectType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CollectType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CollectType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CollectType" "', argument " "1"" of type '" "six::CollectType *""'"); 
  }
  arg1 = reinterpret_cast< six::CollectType * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CollectType_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CollectType *arg1 = (six::CollectType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CollectType_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CollectType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectType_toString" "', argument " "1"" of type '" "six::CollectType const *""'"); 
  }
  arg1 = reinterpret_cast< six::CollectType * >(argp1);
  {
    try
    {
      result = ((six::CollectType const *)arg1)->toString();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CollectType___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CollectType *arg1 = (six::CollectType *) 0 ;
  six::CollectType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CollectType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CollectType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectType___eq__" "', argument " "1"" of type '" "six::CollectType const *""'"); 
  }
  arg1 = reinterpret_cast< six::CollectType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__CollectType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CollectType___eq__" "', argument " "2"" of type '" "six::CollectType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CollectType___eq__" "', argument " "2"" of type '" "six::CollectType const &""'"); 
  }
  arg2 = reinterpret_cast< six::CollectType * >(argp2);
  {
    try
    {
      result = (bool)((six::CollectType const *)arg1)->operator ==((six::CollectType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CollectType___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CollectType *arg1 = (six::CollectType *) 0 ;
  six::CollectType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CollectType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CollectType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectType___ne__" "', argument " "1"" of type '" "six::CollectType const *""'"); 
  }
  arg1 = reinterpret_cast< six::CollectType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__CollectType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CollectType___ne__" "', argument " "2"" of type '" "six::CollectType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CollectType___ne__" "', argument " "2"" of type '" "six::CollectType const &""'"); 
  }
  arg2 = reinterpret_cast< six::CollectType * >(argp2);
  {
    try
    {
      result = (bool)((six::CollectType const *)arg1)->operator !=((six::CollectType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CollectType___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CollectType *arg1 = (six::CollectType *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CollectType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CollectType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectType___eq__" "', argument " "1"" of type '" "six::CollectType const *""'"); 
  }
  arg1 = reinterpret_cast< six::CollectType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CollectType___eq__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::CollectType const *)arg1)->operator ==((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CollectType___eq__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__CollectType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__CollectType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CollectType___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__CollectType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CollectType___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_CollectType___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CollectType *arg1 = (six::CollectType *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CollectType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CollectType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectType___ne__" "', argument " "1"" of type '" "six::CollectType const *""'"); 
  }
  arg1 = reinterpret_cast< six::CollectType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CollectType___ne__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::CollectType const *)arg1)->operator !=((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CollectType___ne__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__CollectType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__CollectType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CollectType___ne____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__CollectType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CollectType___ne____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_CollectType___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CollectType *arg1 = (six::CollectType *) 0 ;
  six::CollectType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CollectType___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CollectType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectType___lt__" "', argument " "1"" of type '" "six::CollectType const *""'"); 
  }
  arg1 = reinterpret_cast< six::CollectType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__CollectType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CollectType___lt__" "', argument " "2"" of type '" "six::CollectType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CollectType___lt__" "', argument " "2"" of type '" "six::CollectType const &""'"); 
  }
  arg2 = reinterpret_cast< six::CollectType * >(argp2);
  {
    try
    {
      result = (bool)((six::CollectType const *)arg1)->operator <((six::CollectType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CollectType___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CollectType *arg1 = (six::CollectType *) 0 ;
  six::CollectType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CollectType___gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CollectType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectType___gt__" "', argument " "1"" of type '" "six::CollectType const *""'"); 
  }
  arg1 = reinterpret_cast< six::CollectType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__CollectType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CollectType___gt__" "', argument " "2"" of type '" "six::CollectType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CollectType___gt__" "', argument " "2"" of type '" "six::CollectType const &""'"); 
  }
  arg2 = reinterpret_cast< six::CollectType * >(argp2);
  {
    try
    {
      result = (bool)((six::CollectType const *)arg1)->operator >((six::CollectType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CollectType___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CollectType *arg1 = (six::CollectType *) 0 ;
  six::CollectType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CollectType___le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CollectType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectType___le__" "', argument " "1"" of type '" "six::CollectType const *""'"); 
  }
  arg1 = reinterpret_cast< six::CollectType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__CollectType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CollectType___le__" "', argument " "2"" of type '" "six::CollectType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CollectType___le__" "', argument " "2"" of type '" "six::CollectType const &""'"); 
  }
  arg2 = reinterpret_cast< six::CollectType * >(argp2);
  {
    try
    {
      result = (bool)((six::CollectType const *)arg1)->operator <=((six::CollectType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CollectType___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CollectType *arg1 = (six::CollectType *) 0 ;
  six::CollectType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CollectType___ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CollectType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectType___ge__" "', argument " "1"" of type '" "six::CollectType const *""'"); 
  }
  arg1 = reinterpret_cast< six::CollectType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__CollectType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CollectType___ge__" "', argument " "2"" of type '" "six::CollectType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CollectType___ge__" "', argument " "2"" of type '" "six::CollectType const &""'"); 
  }
  arg2 = reinterpret_cast< six::CollectType * >(argp2);
  {
    try
    {
      result = (bool)((six::CollectType const *)arg1)->operator >=((six::CollectType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CollectType_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)":CollectType_size")) SWIG_fail;
  {
    try
    {
      result = six::CollectType::size();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CollectType_value_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CollectType *arg1 = (six::CollectType *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CollectType_value_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CollectType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectType_value_set" "', argument " "1"" of type '" "six::CollectType *""'"); 
  }
  arg1 = reinterpret_cast< six::CollectType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CollectType_value_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      if (arg1) (arg1)->value = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CollectType_value_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CollectType *arg1 = (six::CollectType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CollectType_value_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CollectType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectType_value_get" "', argument " "1"" of type '" "six::CollectType *""'"); 
  }
  arg1 = reinterpret_cast< six::CollectType * >(argp1);
  {
    try
    {
      result = (int) ((arg1)->value);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *CollectType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__CollectType, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ComplexImageGridType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ComplexImageGridType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ComplexImageGridType")) SWIG_fail;
  {
    try
    {
      result = (six::ComplexImageGridType *)new six::ComplexImageGridType();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__ComplexImageGridType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ComplexImageGridType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  six::ComplexImageGridType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ComplexImageGridType",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ComplexImageGridType" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try
    {
      result = (six::ComplexImageGridType *)new six::ComplexImageGridType(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__ComplexImageGridType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ComplexImageGridType__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  six::ComplexImageGridType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ComplexImageGridType",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ComplexImageGridType" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      result = (six::ComplexImageGridType *)new six::ComplexImageGridType(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__ComplexImageGridType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ComplexImageGridType(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ComplexImageGridType__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ComplexImageGridType__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ComplexImageGridType__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ComplexImageGridType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::ComplexImageGridType::ComplexImageGridType()\n"
    "    six::ComplexImageGridType::ComplexImageGridType(std::string)\n"
    "    six::ComplexImageGridType::ComplexImageGridType(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ComplexImageGridType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ComplexImageGridType *arg1 = (six::ComplexImageGridType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ComplexImageGridType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ComplexImageGridType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ComplexImageGridType" "', argument " "1"" of type '" "six::ComplexImageGridType *""'"); 
  }
  arg1 = reinterpret_cast< six::ComplexImageGridType * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ComplexImageGridType_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ComplexImageGridType *arg1 = (six::ComplexImageGridType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexImageGridType_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ComplexImageGridType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexImageGridType_toString" "', argument " "1"" of type '" "six::ComplexImageGridType const *""'"); 
  }
  arg1 = reinterpret_cast< six::ComplexImageGridType * >(argp1);
  {
    try
    {
      result = ((six::ComplexImageGridType const *)arg1)->toString();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ComplexImageGridType___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ComplexImageGridType *arg1 = (six::ComplexImageGridType *) 0 ;
  six::ComplexImageGridType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexImageGridType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ComplexImageGridType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexImageGridType___eq__" "', argument " "1"" of type '" "six::ComplexImageGridType const *""'"); 
  }
  arg1 = reinterpret_cast< six::ComplexImageGridType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__ComplexImageGridType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComplexImageGridType___eq__" "', argument " "2"" of type '" "six::ComplexImageGridType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComplexImageGridType___eq__" "', argument " "2"" of type '" "six::ComplexImageGridType const &""'"); 
  }
  arg2 = reinterpret_cast< six::ComplexImageGridType * >(argp2);
  {
    try
    {
      result = (bool)((six::ComplexImageGridType const *)arg1)->operator ==((six::ComplexImageGridType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ComplexImageGridType___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ComplexImageGridType *arg1 = (six::ComplexImageGridType *) 0 ;
  six::ComplexImageGridType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexImageGridType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ComplexImageGridType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexImageGridType___ne__" "', argument " "1"" of type '" "six::ComplexImageGridType const *""'"); 
  }
  arg1 = reinterpret_cast< six::ComplexImageGridType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__ComplexImageGridType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComplexImageGridType___ne__" "', argument " "2"" of type '" "six::ComplexImageGridType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComplexImageGridType___ne__" "', argument " "2"" of type '" "six::ComplexImageGridType const &""'"); 
  }
  arg2 = reinterpret_cast< six::ComplexImageGridType * >(argp2);
  {
    try
    {
      result = (bool)((six::ComplexImageGridType const *)arg1)->operator !=((six::ComplexImageGridType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ComplexImageGridType___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ComplexImageGridType *arg1 = (six::ComplexImageGridType *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexImageGridType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ComplexImageGridType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexImageGridType___eq__" "', argument " "1"" of type '" "six::ComplexImageGridType const *""'"); 
  }
  arg1 = reinterpret_cast< six::ComplexImageGridType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ComplexImageGridType___eq__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::ComplexImageGridType const *)arg1)->operator ==((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ComplexImageGridType___eq__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__ComplexImageGridType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__ComplexImageGridType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ComplexImageGridType___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__ComplexImageGridType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ComplexImageGridType___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ComplexImageGridType___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ComplexImageGridType *arg1 = (six::ComplexImageGridType *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexImageGridType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ComplexImageGridType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexImageGridType___ne__" "', argument " "1"" of type '" "six::ComplexImageGridType const *""'"); 
  }
  arg1 = reinterpret_cast< six::ComplexImageGridType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ComplexImageGridType___ne__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::ComplexImageGridType const *)arg1)->operator !=((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ComplexImageGridType___ne__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__ComplexImageGridType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__ComplexImageGridType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ComplexImageGridType___ne____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__ComplexImageGridType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ComplexImageGridType___ne____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ComplexImageGridType___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ComplexImageGridType *arg1 = (six::ComplexImageGridType *) 0 ;
  six::ComplexImageGridType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexImageGridType___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ComplexImageGridType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexImageGridType___lt__" "', argument " "1"" of type '" "six::ComplexImageGridType const *""'"); 
  }
  arg1 = reinterpret_cast< six::ComplexImageGridType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__ComplexImageGridType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComplexImageGridType___lt__" "', argument " "2"" of type '" "six::ComplexImageGridType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComplexImageGridType___lt__" "', argument " "2"" of type '" "six::ComplexImageGridType const &""'"); 
  }
  arg2 = reinterpret_cast< six::ComplexImageGridType * >(argp2);
  {
    try
    {
      result = (bool)((six::ComplexImageGridType const *)arg1)->operator <((six::ComplexImageGridType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ComplexImageGridType___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ComplexImageGridType *arg1 = (six::ComplexImageGridType *) 0 ;
  six::ComplexImageGridType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexImageGridType___gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ComplexImageGridType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexImageGridType___gt__" "', argument " "1"" of type '" "six::ComplexImageGridType const *""'"); 
  }
  arg1 = reinterpret_cast< six::ComplexImageGridType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__ComplexImageGridType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComplexImageGridType___gt__" "', argument " "2"" of type '" "six::ComplexImageGridType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComplexImageGridType___gt__" "', argument " "2"" of type '" "six::ComplexImageGridType const &""'"); 
  }
  arg2 = reinterpret_cast< six::ComplexImageGridType * >(argp2);
  {
    try
    {
      result = (bool)((six::ComplexImageGridType const *)arg1)->operator >((six::ComplexImageGridType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ComplexImageGridType___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ComplexImageGridType *arg1 = (six::ComplexImageGridType *) 0 ;
  six::ComplexImageGridType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexImageGridType___le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ComplexImageGridType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexImageGridType___le__" "', argument " "1"" of type '" "six::ComplexImageGridType const *""'"); 
  }
  arg1 = reinterpret_cast< six::ComplexImageGridType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__ComplexImageGridType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComplexImageGridType___le__" "', argument " "2"" of type '" "six::ComplexImageGridType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComplexImageGridType___le__" "', argument " "2"" of type '" "six::ComplexImageGridType const &""'"); 
  }
  arg2 = reinterpret_cast< six::ComplexImageGridType * >(argp2);
  {
    try
    {
      result = (bool)((six::ComplexImageGridType const *)arg1)->operator <=((six::ComplexImageGridType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ComplexImageGridType___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ComplexImageGridType *arg1 = (six::ComplexImageGridType *) 0 ;
  six::ComplexImageGridType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexImageGridType___ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ComplexImageGridType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexImageGridType___ge__" "', argument " "1"" of type '" "six::ComplexImageGridType const *""'"); 
  }
  arg1 = reinterpret_cast< six::ComplexImageGridType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__ComplexImageGridType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComplexImageGridType___ge__" "', argument " "2"" of type '" "six::ComplexImageGridType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComplexImageGridType___ge__" "', argument " "2"" of type '" "six::ComplexImageGridType const &""'"); 
  }
  arg2 = reinterpret_cast< six::ComplexImageGridType * >(argp2);
  {
    try
    {
      result = (bool)((six::ComplexImageGridType const *)arg1)->operator >=((six::ComplexImageGridType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ComplexImageGridType_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)":ComplexImageGridType_size")) SWIG_fail;
  {
    try
    {
      result = six::ComplexImageGridType::size();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ComplexImageGridType_value_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ComplexImageGridType *arg1 = (six::ComplexImageGridType *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexImageGridType_value_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ComplexImageGridType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexImageGridType_value_set" "', argument " "1"" of type '" "six::ComplexImageGridType *""'"); 
  }
  arg1 = reinterpret_cast< six::ComplexImageGridType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ComplexImageGridType_value_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      if (arg1) (arg1)->value = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ComplexImageGridType_value_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ComplexImageGridType *arg1 = (six::ComplexImageGridType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexImageGridType_value_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ComplexImageGridType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexImageGridType_value_get" "', argument " "1"" of type '" "six::ComplexImageGridType *""'"); 
  }
  arg1 = reinterpret_cast< six::ComplexImageGridType * >(argp1);
  {
    try
    {
      result = (int) ((arg1)->value);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *ComplexImageGridType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__ComplexImageGridType, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ComplexImagePlaneType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ComplexImagePlaneType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ComplexImagePlaneType")) SWIG_fail;
  {
    try
    {
      result = (six::ComplexImagePlaneType *)new six::ComplexImagePlaneType();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__ComplexImagePlaneType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ComplexImagePlaneType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  six::ComplexImagePlaneType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ComplexImagePlaneType",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ComplexImagePlaneType" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try
    {
      result = (six::ComplexImagePlaneType *)new six::ComplexImagePlaneType(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__ComplexImagePlaneType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ComplexImagePlaneType__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  six::ComplexImagePlaneType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ComplexImagePlaneType",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ComplexImagePlaneType" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      result = (six::ComplexImagePlaneType *)new six::ComplexImagePlaneType(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__ComplexImagePlaneType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ComplexImagePlaneType(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ComplexImagePlaneType__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ComplexImagePlaneType__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ComplexImagePlaneType__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ComplexImagePlaneType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::ComplexImagePlaneType::ComplexImagePlaneType()\n"
    "    six::ComplexImagePlaneType::ComplexImagePlaneType(std::string)\n"
    "    six::ComplexImagePlaneType::ComplexImagePlaneType(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ComplexImagePlaneType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ComplexImagePlaneType *arg1 = (six::ComplexImagePlaneType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ComplexImagePlaneType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ComplexImagePlaneType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ComplexImagePlaneType" "', argument " "1"" of type '" "six::ComplexImagePlaneType *""'"); 
  }
  arg1 = reinterpret_cast< six::ComplexImagePlaneType * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ComplexImagePlaneType_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ComplexImagePlaneType *arg1 = (six::ComplexImagePlaneType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexImagePlaneType_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ComplexImagePlaneType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexImagePlaneType_toString" "', argument " "1"" of type '" "six::ComplexImagePlaneType const *""'"); 
  }
  arg1 = reinterpret_cast< six::ComplexImagePlaneType * >(argp1);
  {
    try
    {
      result = ((six::ComplexImagePlaneType const *)arg1)->toString();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ComplexImagePlaneType___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ComplexImagePlaneType *arg1 = (six::ComplexImagePlaneType *) 0 ;
  six::ComplexImagePlaneType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexImagePlaneType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ComplexImagePlaneType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexImagePlaneType___eq__" "', argument " "1"" of type '" "six::ComplexImagePlaneType const *""'"); 
  }
  arg1 = reinterpret_cast< six::ComplexImagePlaneType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__ComplexImagePlaneType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComplexImagePlaneType___eq__" "', argument " "2"" of type '" "six::ComplexImagePlaneType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComplexImagePlaneType___eq__" "', argument " "2"" of type '" "six::ComplexImagePlaneType const &""'"); 
  }
  arg2 = reinterpret_cast< six::ComplexImagePlaneType * >(argp2);
  {
    try
    {
      result = (bool)((six::ComplexImagePlaneType const *)arg1)->operator ==((six::ComplexImagePlaneType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ComplexImagePlaneType___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ComplexImagePlaneType *arg1 = (six::ComplexImagePlaneType *) 0 ;
  six::ComplexImagePlaneType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexImagePlaneType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ComplexImagePlaneType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexImagePlaneType___ne__" "', argument " "1"" of type '" "six::ComplexImagePlaneType const *""'"); 
  }
  arg1 = reinterpret_cast< six::ComplexImagePlaneType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__ComplexImagePlaneType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComplexImagePlaneType___ne__" "', argument " "2"" of type '" "six::ComplexImagePlaneType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComplexImagePlaneType___ne__" "', argument " "2"" of type '" "six::ComplexImagePlaneType const &""'"); 
  }
  arg2 = reinterpret_cast< six::ComplexImagePlaneType * >(argp2);
  {
    try
    {
      result = (bool)((six::ComplexImagePlaneType const *)arg1)->operator !=((six::ComplexImagePlaneType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ComplexImagePlaneType___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ComplexImagePlaneType *arg1 = (six::ComplexImagePlaneType *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexImagePlaneType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ComplexImagePlaneType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexImagePlaneType___eq__" "', argument " "1"" of type '" "six::ComplexImagePlaneType const *""'"); 
  }
  arg1 = reinterpret_cast< six::ComplexImagePlaneType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ComplexImagePlaneType___eq__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::ComplexImagePlaneType const *)arg1)->operator ==((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ComplexImagePlaneType___eq__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__ComplexImagePlaneType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__ComplexImagePlaneType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ComplexImagePlaneType___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__ComplexImagePlaneType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ComplexImagePlaneType___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ComplexImagePlaneType___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ComplexImagePlaneType *arg1 = (six::ComplexImagePlaneType *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexImagePlaneType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ComplexImagePlaneType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexImagePlaneType___ne__" "', argument " "1"" of type '" "six::ComplexImagePlaneType const *""'"); 
  }
  arg1 = reinterpret_cast< six::ComplexImagePlaneType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ComplexImagePlaneType___ne__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::ComplexImagePlaneType const *)arg1)->operator !=((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ComplexImagePlaneType___ne__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__ComplexImagePlaneType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__ComplexImagePlaneType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ComplexImagePlaneType___ne____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__ComplexImagePlaneType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ComplexImagePlaneType___ne____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ComplexImagePlaneType___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ComplexImagePlaneType *arg1 = (six::ComplexImagePlaneType *) 0 ;
  six::ComplexImagePlaneType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexImagePlaneType___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ComplexImagePlaneType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexImagePlaneType___lt__" "', argument " "1"" of type '" "six::ComplexImagePlaneType const *""'"); 
  }
  arg1 = reinterpret_cast< six::ComplexImagePlaneType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__ComplexImagePlaneType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComplexImagePlaneType___lt__" "', argument " "2"" of type '" "six::ComplexImagePlaneType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComplexImagePlaneType___lt__" "', argument " "2"" of type '" "six::ComplexImagePlaneType const &""'"); 
  }
  arg2 = reinterpret_cast< six::ComplexImagePlaneType * >(argp2);
  {
    try
    {
      result = (bool)((six::ComplexImagePlaneType const *)arg1)->operator <((six::ComplexImagePlaneType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ComplexImagePlaneType___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ComplexImagePlaneType *arg1 = (six::ComplexImagePlaneType *) 0 ;
  six::ComplexImagePlaneType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexImagePlaneType___gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ComplexImagePlaneType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexImagePlaneType___gt__" "', argument " "1"" of type '" "six::ComplexImagePlaneType const *""'"); 
  }
  arg1 = reinterpret_cast< six::ComplexImagePlaneType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__ComplexImagePlaneType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComplexImagePlaneType___gt__" "', argument " "2"" of type '" "six::ComplexImagePlaneType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComplexImagePlaneType___gt__" "', argument " "2"" of type '" "six::ComplexImagePlaneType const &""'"); 
  }
  arg2 = reinterpret_cast< six::ComplexImagePlaneType * >(argp2);
  {
    try
    {
      result = (bool)((six::ComplexImagePlaneType const *)arg1)->operator >((six::ComplexImagePlaneType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ComplexImagePlaneType___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ComplexImagePlaneType *arg1 = (six::ComplexImagePlaneType *) 0 ;
  six::ComplexImagePlaneType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexImagePlaneType___le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ComplexImagePlaneType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexImagePlaneType___le__" "', argument " "1"" of type '" "six::ComplexImagePlaneType const *""'"); 
  }
  arg1 = reinterpret_cast< six::ComplexImagePlaneType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__ComplexImagePlaneType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComplexImagePlaneType___le__" "', argument " "2"" of type '" "six::ComplexImagePlaneType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComplexImagePlaneType___le__" "', argument " "2"" of type '" "six::ComplexImagePlaneType const &""'"); 
  }
  arg2 = reinterpret_cast< six::ComplexImagePlaneType * >(argp2);
  {
    try
    {
      result = (bool)((six::ComplexImagePlaneType const *)arg1)->operator <=((six::ComplexImagePlaneType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ComplexImagePlaneType___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ComplexImagePlaneType *arg1 = (six::ComplexImagePlaneType *) 0 ;
  six::ComplexImagePlaneType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexImagePlaneType___ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ComplexImagePlaneType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexImagePlaneType___ge__" "', argument " "1"" of type '" "six::ComplexImagePlaneType const *""'"); 
  }
  arg1 = reinterpret_cast< six::ComplexImagePlaneType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__ComplexImagePlaneType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComplexImagePlaneType___ge__" "', argument " "2"" of type '" "six::ComplexImagePlaneType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComplexImagePlaneType___ge__" "', argument " "2"" of type '" "six::ComplexImagePlaneType const &""'"); 
  }
  arg2 = reinterpret_cast< six::ComplexImagePlaneType * >(argp2);
  {
    try
    {
      result = (bool)((six::ComplexImagePlaneType const *)arg1)->operator >=((six::ComplexImagePlaneType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ComplexImagePlaneType_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)":ComplexImagePlaneType_size")) SWIG_fail;
  {
    try
    {
      result = six::ComplexImagePlaneType::size();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ComplexImagePlaneType_value_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ComplexImagePlaneType *arg1 = (six::ComplexImagePlaneType *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexImagePlaneType_value_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ComplexImagePlaneType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexImagePlaneType_value_set" "', argument " "1"" of type '" "six::ComplexImagePlaneType *""'"); 
  }
  arg1 = reinterpret_cast< six::ComplexImagePlaneType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ComplexImagePlaneType_value_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      if (arg1) (arg1)->value = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ComplexImagePlaneType_value_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ComplexImagePlaneType *arg1 = (six::ComplexImagePlaneType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexImagePlaneType_value_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ComplexImagePlaneType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexImagePlaneType_value_get" "', argument " "1"" of type '" "six::ComplexImagePlaneType *""'"); 
  }
  arg1 = reinterpret_cast< six::ComplexImagePlaneType * >(argp1);
  {
    try
    {
      result = (int) ((arg1)->value);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *ComplexImagePlaneType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__ComplexImagePlaneType, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DataType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DataType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DataType")) SWIG_fail;
  {
    try
    {
      result = (six::DataType *)new six::DataType();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__DataType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_DataType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  six::DataType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DataType",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_DataType" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try
    {
      result = (six::DataType *)new six::DataType(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__DataType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_DataType__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  six::DataType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DataType",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DataType" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      result = (six::DataType *)new six::DataType(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__DataType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_DataType(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DataType__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_DataType__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DataType__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DataType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::DataType::DataType()\n"
    "    six::DataType::DataType(std::string)\n"
    "    six::DataType::DataType(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_DataType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DataType *arg1 = (six::DataType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DataType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DataType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DataType" "', argument " "1"" of type '" "six::DataType *""'"); 
  }
  arg1 = reinterpret_cast< six::DataType * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DataType_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DataType *arg1 = (six::DataType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DataType_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DataType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataType_toString" "', argument " "1"" of type '" "six::DataType const *""'"); 
  }
  arg1 = reinterpret_cast< six::DataType * >(argp1);
  {
    try
    {
      result = ((six::DataType const *)arg1)->toString();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DataType___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DataType *arg1 = (six::DataType *) 0 ;
  six::DataType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DataType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DataType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataType___eq__" "', argument " "1"" of type '" "six::DataType const *""'"); 
  }
  arg1 = reinterpret_cast< six::DataType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__DataType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataType___eq__" "', argument " "2"" of type '" "six::DataType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataType___eq__" "', argument " "2"" of type '" "six::DataType const &""'"); 
  }
  arg2 = reinterpret_cast< six::DataType * >(argp2);
  {
    try
    {
      result = (bool)((six::DataType const *)arg1)->operator ==((six::DataType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DataType___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DataType *arg1 = (six::DataType *) 0 ;
  six::DataType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DataType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DataType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataType___ne__" "', argument " "1"" of type '" "six::DataType const *""'"); 
  }
  arg1 = reinterpret_cast< six::DataType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__DataType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataType___ne__" "', argument " "2"" of type '" "six::DataType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataType___ne__" "', argument " "2"" of type '" "six::DataType const &""'"); 
  }
  arg2 = reinterpret_cast< six::DataType * >(argp2);
  {
    try
    {
      result = (bool)((six::DataType const *)arg1)->operator !=((six::DataType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DataType___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DataType *arg1 = (six::DataType *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DataType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DataType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataType___eq__" "', argument " "1"" of type '" "six::DataType const *""'"); 
  }
  arg1 = reinterpret_cast< six::DataType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataType___eq__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::DataType const *)arg1)->operator ==((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DataType___eq__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__DataType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__DataType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DataType___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__DataType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DataType___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_DataType___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DataType *arg1 = (six::DataType *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DataType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DataType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataType___ne__" "', argument " "1"" of type '" "six::DataType const *""'"); 
  }
  arg1 = reinterpret_cast< six::DataType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataType___ne__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::DataType const *)arg1)->operator !=((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DataType___ne__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__DataType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__DataType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DataType___ne____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__DataType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DataType___ne____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_DataType___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DataType *arg1 = (six::DataType *) 0 ;
  six::DataType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DataType___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DataType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataType___lt__" "', argument " "1"" of type '" "six::DataType const *""'"); 
  }
  arg1 = reinterpret_cast< six::DataType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__DataType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataType___lt__" "', argument " "2"" of type '" "six::DataType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataType___lt__" "', argument " "2"" of type '" "six::DataType const &""'"); 
  }
  arg2 = reinterpret_cast< six::DataType * >(argp2);
  {
    try
    {
      result = (bool)((six::DataType const *)arg1)->operator <((six::DataType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DataType___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DataType *arg1 = (six::DataType *) 0 ;
  six::DataType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DataType___gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DataType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataType___gt__" "', argument " "1"" of type '" "six::DataType const *""'"); 
  }
  arg1 = reinterpret_cast< six::DataType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__DataType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataType___gt__" "', argument " "2"" of type '" "six::DataType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataType___gt__" "', argument " "2"" of type '" "six::DataType const &""'"); 
  }
  arg2 = reinterpret_cast< six::DataType * >(argp2);
  {
    try
    {
      result = (bool)((six::DataType const *)arg1)->operator >((six::DataType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DataType___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DataType *arg1 = (six::DataType *) 0 ;
  six::DataType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DataType___le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DataType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataType___le__" "', argument " "1"" of type '" "six::DataType const *""'"); 
  }
  arg1 = reinterpret_cast< six::DataType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__DataType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataType___le__" "', argument " "2"" of type '" "six::DataType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataType___le__" "', argument " "2"" of type '" "six::DataType const &""'"); 
  }
  arg2 = reinterpret_cast< six::DataType * >(argp2);
  {
    try
    {
      result = (bool)((six::DataType const *)arg1)->operator <=((six::DataType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DataType___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DataType *arg1 = (six::DataType *) 0 ;
  six::DataType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DataType___ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DataType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataType___ge__" "', argument " "1"" of type '" "six::DataType const *""'"); 
  }
  arg1 = reinterpret_cast< six::DataType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__DataType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataType___ge__" "', argument " "2"" of type '" "six::DataType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataType___ge__" "', argument " "2"" of type '" "six::DataType const &""'"); 
  }
  arg2 = reinterpret_cast< six::DataType * >(argp2);
  {
    try
    {
      result = (bool)((six::DataType const *)arg1)->operator >=((six::DataType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DataType_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)":DataType_size")) SWIG_fail;
  {
    try
    {
      result = six::DataType::size();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DataType_value_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DataType *arg1 = (six::DataType *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DataType_value_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DataType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataType_value_set" "', argument " "1"" of type '" "six::DataType *""'"); 
  }
  arg1 = reinterpret_cast< six::DataType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataType_value_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      if (arg1) (arg1)->value = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DataType_value_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DataType *arg1 = (six::DataType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DataType_value_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DataType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataType_value_get" "', argument " "1"" of type '" "six::DataType *""'"); 
  }
  arg1 = reinterpret_cast< six::DataType * >(argp1);
  {
    try
    {
      result = (int) ((arg1)->value);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *DataType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__DataType, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DecimationMethod__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DecimationMethod *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DecimationMethod")) SWIG_fail;
  {
    try
    {
      result = (six::DecimationMethod *)new six::DecimationMethod();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__DecimationMethod, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_DecimationMethod__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  six::DecimationMethod *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DecimationMethod",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_DecimationMethod" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try
    {
      result = (six::DecimationMethod *)new six::DecimationMethod(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__DecimationMethod, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_DecimationMethod__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  six::DecimationMethod *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DecimationMethod",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DecimationMethod" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      result = (six::DecimationMethod *)new six::DecimationMethod(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__DecimationMethod, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_DecimationMethod(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DecimationMethod__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_DecimationMethod__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DecimationMethod__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DecimationMethod'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::DecimationMethod::DecimationMethod()\n"
    "    six::DecimationMethod::DecimationMethod(std::string)\n"
    "    six::DecimationMethod::DecimationMethod(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_DecimationMethod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DecimationMethod *arg1 = (six::DecimationMethod *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DecimationMethod",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DecimationMethod, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DecimationMethod" "', argument " "1"" of type '" "six::DecimationMethod *""'"); 
  }
  arg1 = reinterpret_cast< six::DecimationMethod * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DecimationMethod_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DecimationMethod *arg1 = (six::DecimationMethod *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DecimationMethod_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DecimationMethod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecimationMethod_toString" "', argument " "1"" of type '" "six::DecimationMethod const *""'"); 
  }
  arg1 = reinterpret_cast< six::DecimationMethod * >(argp1);
  {
    try
    {
      result = ((six::DecimationMethod const *)arg1)->toString();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DecimationMethod___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DecimationMethod *arg1 = (six::DecimationMethod *) 0 ;
  six::DecimationMethod *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecimationMethod___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DecimationMethod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecimationMethod___eq__" "', argument " "1"" of type '" "six::DecimationMethod const *""'"); 
  }
  arg1 = reinterpret_cast< six::DecimationMethod * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__DecimationMethod,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecimationMethod___eq__" "', argument " "2"" of type '" "six::DecimationMethod const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecimationMethod___eq__" "', argument " "2"" of type '" "six::DecimationMethod const &""'"); 
  }
  arg2 = reinterpret_cast< six::DecimationMethod * >(argp2);
  {
    try
    {
      result = (bool)((six::DecimationMethod const *)arg1)->operator ==((six::DecimationMethod const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DecimationMethod___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DecimationMethod *arg1 = (six::DecimationMethod *) 0 ;
  six::DecimationMethod *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecimationMethod___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DecimationMethod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecimationMethod___ne__" "', argument " "1"" of type '" "six::DecimationMethod const *""'"); 
  }
  arg1 = reinterpret_cast< six::DecimationMethod * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__DecimationMethod,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecimationMethod___ne__" "', argument " "2"" of type '" "six::DecimationMethod const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecimationMethod___ne__" "', argument " "2"" of type '" "six::DecimationMethod const &""'"); 
  }
  arg2 = reinterpret_cast< six::DecimationMethod * >(argp2);
  {
    try
    {
      result = (bool)((six::DecimationMethod const *)arg1)->operator !=((six::DecimationMethod const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DecimationMethod___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DecimationMethod *arg1 = (six::DecimationMethod *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecimationMethod___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DecimationMethod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecimationMethod___eq__" "', argument " "1"" of type '" "six::DecimationMethod const *""'"); 
  }
  arg1 = reinterpret_cast< six::DecimationMethod * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DecimationMethod___eq__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::DecimationMethod const *)arg1)->operator ==((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DecimationMethod___eq__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__DecimationMethod, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__DecimationMethod, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DecimationMethod___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__DecimationMethod, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DecimationMethod___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_DecimationMethod___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DecimationMethod *arg1 = (six::DecimationMethod *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecimationMethod___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DecimationMethod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecimationMethod___ne__" "', argument " "1"" of type '" "six::DecimationMethod const *""'"); 
  }
  arg1 = reinterpret_cast< six::DecimationMethod * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DecimationMethod___ne__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::DecimationMethod const *)arg1)->operator !=((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DecimationMethod___ne__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__DecimationMethod, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__DecimationMethod, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DecimationMethod___ne____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__DecimationMethod, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DecimationMethod___ne____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_DecimationMethod___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DecimationMethod *arg1 = (six::DecimationMethod *) 0 ;
  six::DecimationMethod *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecimationMethod___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DecimationMethod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecimationMethod___lt__" "', argument " "1"" of type '" "six::DecimationMethod const *""'"); 
  }
  arg1 = reinterpret_cast< six::DecimationMethod * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__DecimationMethod,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecimationMethod___lt__" "', argument " "2"" of type '" "six::DecimationMethod const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecimationMethod___lt__" "', argument " "2"" of type '" "six::DecimationMethod const &""'"); 
  }
  arg2 = reinterpret_cast< six::DecimationMethod * >(argp2);
  {
    try
    {
      result = (bool)((six::DecimationMethod const *)arg1)->operator <((six::DecimationMethod const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DecimationMethod___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DecimationMethod *arg1 = (six::DecimationMethod *) 0 ;
  six::DecimationMethod *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecimationMethod___gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DecimationMethod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecimationMethod___gt__" "', argument " "1"" of type '" "six::DecimationMethod const *""'"); 
  }
  arg1 = reinterpret_cast< six::DecimationMethod * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__DecimationMethod,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecimationMethod___gt__" "', argument " "2"" of type '" "six::DecimationMethod const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecimationMethod___gt__" "', argument " "2"" of type '" "six::DecimationMethod const &""'"); 
  }
  arg2 = reinterpret_cast< six::DecimationMethod * >(argp2);
  {
    try
    {
      result = (bool)((six::DecimationMethod const *)arg1)->operator >((six::DecimationMethod const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DecimationMethod___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DecimationMethod *arg1 = (six::DecimationMethod *) 0 ;
  six::DecimationMethod *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecimationMethod___le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DecimationMethod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecimationMethod___le__" "', argument " "1"" of type '" "six::DecimationMethod const *""'"); 
  }
  arg1 = reinterpret_cast< six::DecimationMethod * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__DecimationMethod,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecimationMethod___le__" "', argument " "2"" of type '" "six::DecimationMethod const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecimationMethod___le__" "', argument " "2"" of type '" "six::DecimationMethod const &""'"); 
  }
  arg2 = reinterpret_cast< six::DecimationMethod * >(argp2);
  {
    try
    {
      result = (bool)((six::DecimationMethod const *)arg1)->operator <=((six::DecimationMethod const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DecimationMethod___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DecimationMethod *arg1 = (six::DecimationMethod *) 0 ;
  six::DecimationMethod *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecimationMethod___ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DecimationMethod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecimationMethod___ge__" "', argument " "1"" of type '" "six::DecimationMethod const *""'"); 
  }
  arg1 = reinterpret_cast< six::DecimationMethod * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__DecimationMethod,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecimationMethod___ge__" "', argument " "2"" of type '" "six::DecimationMethod const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecimationMethod___ge__" "', argument " "2"" of type '" "six::DecimationMethod const &""'"); 
  }
  arg2 = reinterpret_cast< six::DecimationMethod * >(argp2);
  {
    try
    {
      result = (bool)((six::DecimationMethod const *)arg1)->operator >=((six::DecimationMethod const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DecimationMethod_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)":DecimationMethod_size")) SWIG_fail;
  {
    try
    {
      result = six::DecimationMethod::size();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DecimationMethod_value_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DecimationMethod *arg1 = (six::DecimationMethod *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecimationMethod_value_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DecimationMethod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecimationMethod_value_set" "', argument " "1"" of type '" "six::DecimationMethod *""'"); 
  }
  arg1 = reinterpret_cast< six::DecimationMethod * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DecimationMethod_value_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      if (arg1) (arg1)->value = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DecimationMethod_value_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DecimationMethod *arg1 = (six::DecimationMethod *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DecimationMethod_value_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DecimationMethod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecimationMethod_value_get" "', argument " "1"" of type '" "six::DecimationMethod *""'"); 
  }
  arg1 = reinterpret_cast< six::DecimationMethod * >(argp1);
  {
    try
    {
      result = (int) ((arg1)->value);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *DecimationMethod_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__DecimationMethod, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DemodType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DemodType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DemodType")) SWIG_fail;
  {
    try
    {
      result = (six::DemodType *)new six::DemodType();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__DemodType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_DemodType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  six::DemodType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DemodType",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_DemodType" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try
    {
      result = (six::DemodType *)new six::DemodType(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__DemodType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_DemodType__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  six::DemodType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DemodType",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DemodType" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      result = (six::DemodType *)new six::DemodType(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__DemodType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_DemodType(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DemodType__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_DemodType__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DemodType__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DemodType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::DemodType::DemodType()\n"
    "    six::DemodType::DemodType(std::string)\n"
    "    six::DemodType::DemodType(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_DemodType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DemodType *arg1 = (six::DemodType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DemodType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DemodType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DemodType" "', argument " "1"" of type '" "six::DemodType *""'"); 
  }
  arg1 = reinterpret_cast< six::DemodType * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DemodType_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DemodType *arg1 = (six::DemodType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DemodType_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DemodType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DemodType_toString" "', argument " "1"" of type '" "six::DemodType const *""'"); 
  }
  arg1 = reinterpret_cast< six::DemodType * >(argp1);
  {
    try
    {
      result = ((six::DemodType const *)arg1)->toString();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DemodType___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DemodType *arg1 = (six::DemodType *) 0 ;
  six::DemodType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DemodType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DemodType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DemodType___eq__" "', argument " "1"" of type '" "six::DemodType const *""'"); 
  }
  arg1 = reinterpret_cast< six::DemodType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__DemodType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DemodType___eq__" "', argument " "2"" of type '" "six::DemodType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DemodType___eq__" "', argument " "2"" of type '" "six::DemodType const &""'"); 
  }
  arg2 = reinterpret_cast< six::DemodType * >(argp2);
  {
    try
    {
      result = (bool)((six::DemodType const *)arg1)->operator ==((six::DemodType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DemodType___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DemodType *arg1 = (six::DemodType *) 0 ;
  six::DemodType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DemodType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DemodType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DemodType___ne__" "', argument " "1"" of type '" "six::DemodType const *""'"); 
  }
  arg1 = reinterpret_cast< six::DemodType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__DemodType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DemodType___ne__" "', argument " "2"" of type '" "six::DemodType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DemodType___ne__" "', argument " "2"" of type '" "six::DemodType const &""'"); 
  }
  arg2 = reinterpret_cast< six::DemodType * >(argp2);
  {
    try
    {
      result = (bool)((six::DemodType const *)arg1)->operator !=((six::DemodType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DemodType___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DemodType *arg1 = (six::DemodType *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DemodType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DemodType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DemodType___eq__" "', argument " "1"" of type '" "six::DemodType const *""'"); 
  }
  arg1 = reinterpret_cast< six::DemodType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DemodType___eq__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::DemodType const *)arg1)->operator ==((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DemodType___eq__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__DemodType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__DemodType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DemodType___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__DemodType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DemodType___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_DemodType___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DemodType *arg1 = (six::DemodType *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DemodType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DemodType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DemodType___ne__" "', argument " "1"" of type '" "six::DemodType const *""'"); 
  }
  arg1 = reinterpret_cast< six::DemodType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DemodType___ne__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::DemodType const *)arg1)->operator !=((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DemodType___ne__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__DemodType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__DemodType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DemodType___ne____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__DemodType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DemodType___ne____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_DemodType___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DemodType *arg1 = (six::DemodType *) 0 ;
  six::DemodType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DemodType___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DemodType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DemodType___lt__" "', argument " "1"" of type '" "six::DemodType const *""'"); 
  }
  arg1 = reinterpret_cast< six::DemodType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__DemodType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DemodType___lt__" "', argument " "2"" of type '" "six::DemodType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DemodType___lt__" "', argument " "2"" of type '" "six::DemodType const &""'"); 
  }
  arg2 = reinterpret_cast< six::DemodType * >(argp2);
  {
    try
    {
      result = (bool)((six::DemodType const *)arg1)->operator <((six::DemodType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DemodType___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DemodType *arg1 = (six::DemodType *) 0 ;
  six::DemodType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DemodType___gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DemodType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DemodType___gt__" "', argument " "1"" of type '" "six::DemodType const *""'"); 
  }
  arg1 = reinterpret_cast< six::DemodType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__DemodType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DemodType___gt__" "', argument " "2"" of type '" "six::DemodType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DemodType___gt__" "', argument " "2"" of type '" "six::DemodType const &""'"); 
  }
  arg2 = reinterpret_cast< six::DemodType * >(argp2);
  {
    try
    {
      result = (bool)((six::DemodType const *)arg1)->operator >((six::DemodType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DemodType___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DemodType *arg1 = (six::DemodType *) 0 ;
  six::DemodType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DemodType___le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DemodType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DemodType___le__" "', argument " "1"" of type '" "six::DemodType const *""'"); 
  }
  arg1 = reinterpret_cast< six::DemodType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__DemodType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DemodType___le__" "', argument " "2"" of type '" "six::DemodType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DemodType___le__" "', argument " "2"" of type '" "six::DemodType const &""'"); 
  }
  arg2 = reinterpret_cast< six::DemodType * >(argp2);
  {
    try
    {
      result = (bool)((six::DemodType const *)arg1)->operator <=((six::DemodType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DemodType___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DemodType *arg1 = (six::DemodType *) 0 ;
  six::DemodType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DemodType___ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DemodType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DemodType___ge__" "', argument " "1"" of type '" "six::DemodType const *""'"); 
  }
  arg1 = reinterpret_cast< six::DemodType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__DemodType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DemodType___ge__" "', argument " "2"" of type '" "six::DemodType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DemodType___ge__" "', argument " "2"" of type '" "six::DemodType const &""'"); 
  }
  arg2 = reinterpret_cast< six::DemodType * >(argp2);
  {
    try
    {
      result = (bool)((six::DemodType const *)arg1)->operator >=((six::DemodType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DemodType_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)":DemodType_size")) SWIG_fail;
  {
    try
    {
      result = six::DemodType::size();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DemodType_value_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DemodType *arg1 = (six::DemodType *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DemodType_value_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DemodType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DemodType_value_set" "', argument " "1"" of type '" "six::DemodType *""'"); 
  }
  arg1 = reinterpret_cast< six::DemodType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DemodType_value_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      if (arg1) (arg1)->value = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DemodType_value_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DemodType *arg1 = (six::DemodType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DemodType_value_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DemodType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DemodType_value_get" "', argument " "1"" of type '" "six::DemodType *""'"); 
  }
  arg1 = reinterpret_cast< six::DemodType * >(argp1);
  {
    try
    {
      result = (int) ((arg1)->value);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *DemodType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__DemodType, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DisplayType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DisplayType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DisplayType")) SWIG_fail;
  {
    try
    {
      result = (six::DisplayType *)new six::DisplayType();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__DisplayType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_DisplayType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  six::DisplayType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DisplayType",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_DisplayType" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try
    {
      result = (six::DisplayType *)new six::DisplayType(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__DisplayType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_DisplayType__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  six::DisplayType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DisplayType",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DisplayType" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      result = (six::DisplayType *)new six::DisplayType(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__DisplayType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_DisplayType(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DisplayType__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_DisplayType__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DisplayType__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DisplayType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::DisplayType::DisplayType()\n"
    "    six::DisplayType::DisplayType(std::string)\n"
    "    six::DisplayType::DisplayType(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_DisplayType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DisplayType *arg1 = (six::DisplayType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DisplayType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DisplayType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DisplayType" "', argument " "1"" of type '" "six::DisplayType *""'"); 
  }
  arg1 = reinterpret_cast< six::DisplayType * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DisplayType_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DisplayType *arg1 = (six::DisplayType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DisplayType_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DisplayType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DisplayType_toString" "', argument " "1"" of type '" "six::DisplayType const *""'"); 
  }
  arg1 = reinterpret_cast< six::DisplayType * >(argp1);
  {
    try
    {
      result = ((six::DisplayType const *)arg1)->toString();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DisplayType___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DisplayType *arg1 = (six::DisplayType *) 0 ;
  six::DisplayType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DisplayType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DisplayType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DisplayType___eq__" "', argument " "1"" of type '" "six::DisplayType const *""'"); 
  }
  arg1 = reinterpret_cast< six::DisplayType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__DisplayType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DisplayType___eq__" "', argument " "2"" of type '" "six::DisplayType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DisplayType___eq__" "', argument " "2"" of type '" "six::DisplayType const &""'"); 
  }
  arg2 = reinterpret_cast< six::DisplayType * >(argp2);
  {
    try
    {
      result = (bool)((six::DisplayType const *)arg1)->operator ==((six::DisplayType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DisplayType___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DisplayType *arg1 = (six::DisplayType *) 0 ;
  six::DisplayType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DisplayType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DisplayType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DisplayType___ne__" "', argument " "1"" of type '" "six::DisplayType const *""'"); 
  }
  arg1 = reinterpret_cast< six::DisplayType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__DisplayType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DisplayType___ne__" "', argument " "2"" of type '" "six::DisplayType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DisplayType___ne__" "', argument " "2"" of type '" "six::DisplayType const &""'"); 
  }
  arg2 = reinterpret_cast< six::DisplayType * >(argp2);
  {
    try
    {
      result = (bool)((six::DisplayType const *)arg1)->operator !=((six::DisplayType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DisplayType___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DisplayType *arg1 = (six::DisplayType *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DisplayType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DisplayType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DisplayType___eq__" "', argument " "1"" of type '" "six::DisplayType const *""'"); 
  }
  arg1 = reinterpret_cast< six::DisplayType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DisplayType___eq__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::DisplayType const *)arg1)->operator ==((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DisplayType___eq__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__DisplayType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__DisplayType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DisplayType___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__DisplayType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DisplayType___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_DisplayType___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DisplayType *arg1 = (six::DisplayType *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DisplayType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DisplayType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DisplayType___ne__" "', argument " "1"" of type '" "six::DisplayType const *""'"); 
  }
  arg1 = reinterpret_cast< six::DisplayType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DisplayType___ne__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::DisplayType const *)arg1)->operator !=((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DisplayType___ne__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__DisplayType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__DisplayType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DisplayType___ne____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__DisplayType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DisplayType___ne____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_DisplayType___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DisplayType *arg1 = (six::DisplayType *) 0 ;
  six::DisplayType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DisplayType___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DisplayType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DisplayType___lt__" "', argument " "1"" of type '" "six::DisplayType const *""'"); 
  }
  arg1 = reinterpret_cast< six::DisplayType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__DisplayType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DisplayType___lt__" "', argument " "2"" of type '" "six::DisplayType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DisplayType___lt__" "', argument " "2"" of type '" "six::DisplayType const &""'"); 
  }
  arg2 = reinterpret_cast< six::DisplayType * >(argp2);
  {
    try
    {
      result = (bool)((six::DisplayType const *)arg1)->operator <((six::DisplayType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DisplayType___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DisplayType *arg1 = (six::DisplayType *) 0 ;
  six::DisplayType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DisplayType___gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DisplayType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DisplayType___gt__" "', argument " "1"" of type '" "six::DisplayType const *""'"); 
  }
  arg1 = reinterpret_cast< six::DisplayType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__DisplayType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DisplayType___gt__" "', argument " "2"" of type '" "six::DisplayType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DisplayType___gt__" "', argument " "2"" of type '" "six::DisplayType const &""'"); 
  }
  arg2 = reinterpret_cast< six::DisplayType * >(argp2);
  {
    try
    {
      result = (bool)((six::DisplayType const *)arg1)->operator >((six::DisplayType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DisplayType___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DisplayType *arg1 = (six::DisplayType *) 0 ;
  six::DisplayType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DisplayType___le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DisplayType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DisplayType___le__" "', argument " "1"" of type '" "six::DisplayType const *""'"); 
  }
  arg1 = reinterpret_cast< six::DisplayType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__DisplayType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DisplayType___le__" "', argument " "2"" of type '" "six::DisplayType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DisplayType___le__" "', argument " "2"" of type '" "six::DisplayType const &""'"); 
  }
  arg2 = reinterpret_cast< six::DisplayType * >(argp2);
  {
    try
    {
      result = (bool)((six::DisplayType const *)arg1)->operator <=((six::DisplayType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DisplayType___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DisplayType *arg1 = (six::DisplayType *) 0 ;
  six::DisplayType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DisplayType___ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DisplayType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DisplayType___ge__" "', argument " "1"" of type '" "six::DisplayType const *""'"); 
  }
  arg1 = reinterpret_cast< six::DisplayType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__DisplayType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DisplayType___ge__" "', argument " "2"" of type '" "six::DisplayType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DisplayType___ge__" "', argument " "2"" of type '" "six::DisplayType const &""'"); 
  }
  arg2 = reinterpret_cast< six::DisplayType * >(argp2);
  {
    try
    {
      result = (bool)((six::DisplayType const *)arg1)->operator >=((six::DisplayType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DisplayType_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)":DisplayType_size")) SWIG_fail;
  {
    try
    {
      result = six::DisplayType::size();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DisplayType_value_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DisplayType *arg1 = (six::DisplayType *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DisplayType_value_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DisplayType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DisplayType_value_set" "', argument " "1"" of type '" "six::DisplayType *""'"); 
  }
  arg1 = reinterpret_cast< six::DisplayType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DisplayType_value_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      if (arg1) (arg1)->value = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DisplayType_value_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DisplayType *arg1 = (six::DisplayType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DisplayType_value_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DisplayType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DisplayType_value_get" "', argument " "1"" of type '" "six::DisplayType *""'"); 
  }
  arg1 = reinterpret_cast< six::DisplayType * >(argp1);
  {
    try
    {
      result = (int) ((arg1)->value);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *DisplayType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__DisplayType, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DualPolarizationType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DualPolarizationType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DualPolarizationType")) SWIG_fail;
  {
    try
    {
      result = (six::DualPolarizationType *)new six::DualPolarizationType();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__DualPolarizationType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_DualPolarizationType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  six::DualPolarizationType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DualPolarizationType",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_DualPolarizationType" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try
    {
      result = (six::DualPolarizationType *)new six::DualPolarizationType(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__DualPolarizationType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_DualPolarizationType__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  six::DualPolarizationType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DualPolarizationType",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DualPolarizationType" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      result = (six::DualPolarizationType *)new six::DualPolarizationType(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__DualPolarizationType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_DualPolarizationType(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DualPolarizationType__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_DualPolarizationType__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DualPolarizationType__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DualPolarizationType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::DualPolarizationType::DualPolarizationType()\n"
    "    six::DualPolarizationType::DualPolarizationType(std::string)\n"
    "    six::DualPolarizationType::DualPolarizationType(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_DualPolarizationType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DualPolarizationType *arg1 = (six::DualPolarizationType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DualPolarizationType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DualPolarizationType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DualPolarizationType" "', argument " "1"" of type '" "six::DualPolarizationType *""'"); 
  }
  arg1 = reinterpret_cast< six::DualPolarizationType * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DualPolarizationType_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DualPolarizationType *arg1 = (six::DualPolarizationType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DualPolarizationType_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DualPolarizationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DualPolarizationType_toString" "', argument " "1"" of type '" "six::DualPolarizationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::DualPolarizationType * >(argp1);
  {
    try
    {
      result = ((six::DualPolarizationType const *)arg1)->toString();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DualPolarizationType___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DualPolarizationType *arg1 = (six::DualPolarizationType *) 0 ;
  six::DualPolarizationType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DualPolarizationType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DualPolarizationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DualPolarizationType___eq__" "', argument " "1"" of type '" "six::DualPolarizationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::DualPolarizationType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__DualPolarizationType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DualPolarizationType___eq__" "', argument " "2"" of type '" "six::DualPolarizationType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DualPolarizationType___eq__" "', argument " "2"" of type '" "six::DualPolarizationType const &""'"); 
  }
  arg2 = reinterpret_cast< six::DualPolarizationType * >(argp2);
  {
    try
    {
      result = (bool)((six::DualPolarizationType const *)arg1)->operator ==((six::DualPolarizationType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DualPolarizationType___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DualPolarizationType *arg1 = (six::DualPolarizationType *) 0 ;
  six::DualPolarizationType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DualPolarizationType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DualPolarizationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DualPolarizationType___ne__" "', argument " "1"" of type '" "six::DualPolarizationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::DualPolarizationType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__DualPolarizationType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DualPolarizationType___ne__" "', argument " "2"" of type '" "six::DualPolarizationType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DualPolarizationType___ne__" "', argument " "2"" of type '" "six::DualPolarizationType const &""'"); 
  }
  arg2 = reinterpret_cast< six::DualPolarizationType * >(argp2);
  {
    try
    {
      result = (bool)((six::DualPolarizationType const *)arg1)->operator !=((six::DualPolarizationType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DualPolarizationType___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DualPolarizationType *arg1 = (six::DualPolarizationType *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DualPolarizationType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DualPolarizationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DualPolarizationType___eq__" "', argument " "1"" of type '" "six::DualPolarizationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::DualPolarizationType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DualPolarizationType___eq__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::DualPolarizationType const *)arg1)->operator ==((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DualPolarizationType___eq__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__DualPolarizationType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__DualPolarizationType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DualPolarizationType___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__DualPolarizationType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DualPolarizationType___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_DualPolarizationType___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DualPolarizationType *arg1 = (six::DualPolarizationType *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DualPolarizationType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DualPolarizationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DualPolarizationType___ne__" "', argument " "1"" of type '" "six::DualPolarizationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::DualPolarizationType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DualPolarizationType___ne__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::DualPolarizationType const *)arg1)->operator !=((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DualPolarizationType___ne__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__DualPolarizationType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__DualPolarizationType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DualPolarizationType___ne____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__DualPolarizationType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DualPolarizationType___ne____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_DualPolarizationType___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DualPolarizationType *arg1 = (six::DualPolarizationType *) 0 ;
  six::DualPolarizationType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DualPolarizationType___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DualPolarizationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DualPolarizationType___lt__" "', argument " "1"" of type '" "six::DualPolarizationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::DualPolarizationType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__DualPolarizationType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DualPolarizationType___lt__" "', argument " "2"" of type '" "six::DualPolarizationType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DualPolarizationType___lt__" "', argument " "2"" of type '" "six::DualPolarizationType const &""'"); 
  }
  arg2 = reinterpret_cast< six::DualPolarizationType * >(argp2);
  {
    try
    {
      result = (bool)((six::DualPolarizationType const *)arg1)->operator <((six::DualPolarizationType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DualPolarizationType___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DualPolarizationType *arg1 = (six::DualPolarizationType *) 0 ;
  six::DualPolarizationType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DualPolarizationType___gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DualPolarizationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DualPolarizationType___gt__" "', argument " "1"" of type '" "six::DualPolarizationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::DualPolarizationType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__DualPolarizationType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DualPolarizationType___gt__" "', argument " "2"" of type '" "six::DualPolarizationType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DualPolarizationType___gt__" "', argument " "2"" of type '" "six::DualPolarizationType const &""'"); 
  }
  arg2 = reinterpret_cast< six::DualPolarizationType * >(argp2);
  {
    try
    {
      result = (bool)((six::DualPolarizationType const *)arg1)->operator >((six::DualPolarizationType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DualPolarizationType___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DualPolarizationType *arg1 = (six::DualPolarizationType *) 0 ;
  six::DualPolarizationType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DualPolarizationType___le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DualPolarizationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DualPolarizationType___le__" "', argument " "1"" of type '" "six::DualPolarizationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::DualPolarizationType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__DualPolarizationType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DualPolarizationType___le__" "', argument " "2"" of type '" "six::DualPolarizationType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DualPolarizationType___le__" "', argument " "2"" of type '" "six::DualPolarizationType const &""'"); 
  }
  arg2 = reinterpret_cast< six::DualPolarizationType * >(argp2);
  {
    try
    {
      result = (bool)((six::DualPolarizationType const *)arg1)->operator <=((six::DualPolarizationType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DualPolarizationType___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DualPolarizationType *arg1 = (six::DualPolarizationType *) 0 ;
  six::DualPolarizationType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DualPolarizationType___ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DualPolarizationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DualPolarizationType___ge__" "', argument " "1"" of type '" "six::DualPolarizationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::DualPolarizationType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__DualPolarizationType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DualPolarizationType___ge__" "', argument " "2"" of type '" "six::DualPolarizationType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DualPolarizationType___ge__" "', argument " "2"" of type '" "six::DualPolarizationType const &""'"); 
  }
  arg2 = reinterpret_cast< six::DualPolarizationType * >(argp2);
  {
    try
    {
      result = (bool)((six::DualPolarizationType const *)arg1)->operator >=((six::DualPolarizationType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DualPolarizationType_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)":DualPolarizationType_size")) SWIG_fail;
  {
    try
    {
      result = six::DualPolarizationType::size();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DualPolarizationType_value_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DualPolarizationType *arg1 = (six::DualPolarizationType *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DualPolarizationType_value_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DualPolarizationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DualPolarizationType_value_set" "', argument " "1"" of type '" "six::DualPolarizationType *""'"); 
  }
  arg1 = reinterpret_cast< six::DualPolarizationType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DualPolarizationType_value_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      if (arg1) (arg1)->value = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DualPolarizationType_value_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DualPolarizationType *arg1 = (six::DualPolarizationType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DualPolarizationType_value_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DualPolarizationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DualPolarizationType_value_get" "', argument " "1"" of type '" "six::DualPolarizationType *""'"); 
  }
  arg1 = reinterpret_cast< six::DualPolarizationType * >(argp1);
  {
    try
    {
      result = (int) ((arg1)->value);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *DualPolarizationType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__DualPolarizationType, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_EarthModelType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::EarthModelType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_EarthModelType")) SWIG_fail;
  {
    try
    {
      result = (six::EarthModelType *)new six::EarthModelType();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__EarthModelType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_EarthModelType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  six::EarthModelType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_EarthModelType",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_EarthModelType" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try
    {
      result = (six::EarthModelType *)new six::EarthModelType(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__EarthModelType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_EarthModelType__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  six::EarthModelType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_EarthModelType",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_EarthModelType" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      result = (six::EarthModelType *)new six::EarthModelType(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__EarthModelType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_EarthModelType(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_EarthModelType__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_EarthModelType__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_EarthModelType__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_EarthModelType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::EarthModelType::EarthModelType()\n"
    "    six::EarthModelType::EarthModelType(std::string)\n"
    "    six::EarthModelType::EarthModelType(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_EarthModelType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::EarthModelType *arg1 = (six::EarthModelType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_EarthModelType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__EarthModelType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EarthModelType" "', argument " "1"" of type '" "six::EarthModelType *""'"); 
  }
  arg1 = reinterpret_cast< six::EarthModelType * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_EarthModelType_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::EarthModelType *arg1 = (six::EarthModelType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EarthModelType_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__EarthModelType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EarthModelType_toString" "', argument " "1"" of type '" "six::EarthModelType const *""'"); 
  }
  arg1 = reinterpret_cast< six::EarthModelType * >(argp1);
  {
    try
    {
      result = ((six::EarthModelType const *)arg1)->toString();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_EarthModelType___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::EarthModelType *arg1 = (six::EarthModelType *) 0 ;
  six::EarthModelType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EarthModelType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__EarthModelType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EarthModelType___eq__" "', argument " "1"" of type '" "six::EarthModelType const *""'"); 
  }
  arg1 = reinterpret_cast< six::EarthModelType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__EarthModelType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EarthModelType___eq__" "', argument " "2"" of type '" "six::EarthModelType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EarthModelType___eq__" "', argument " "2"" of type '" "six::EarthModelType const &""'"); 
  }
  arg2 = reinterpret_cast< six::EarthModelType * >(argp2);
  {
    try
    {
      result = (bool)((six::EarthModelType const *)arg1)->operator ==((six::EarthModelType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_EarthModelType___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::EarthModelType *arg1 = (six::EarthModelType *) 0 ;
  six::EarthModelType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EarthModelType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__EarthModelType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EarthModelType___ne__" "', argument " "1"" of type '" "six::EarthModelType const *""'"); 
  }
  arg1 = reinterpret_cast< six::EarthModelType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__EarthModelType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EarthModelType___ne__" "', argument " "2"" of type '" "six::EarthModelType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EarthModelType___ne__" "', argument " "2"" of type '" "six::EarthModelType const &""'"); 
  }
  arg2 = reinterpret_cast< six::EarthModelType * >(argp2);
  {
    try
    {
      result = (bool)((six::EarthModelType const *)arg1)->operator !=((six::EarthModelType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_EarthModelType___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::EarthModelType *arg1 = (six::EarthModelType *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EarthModelType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__EarthModelType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EarthModelType___eq__" "', argument " "1"" of type '" "six::EarthModelType const *""'"); 
  }
  arg1 = reinterpret_cast< six::EarthModelType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EarthModelType___eq__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::EarthModelType const *)arg1)->operator ==((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_EarthModelType___eq__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__EarthModelType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__EarthModelType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_EarthModelType___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__EarthModelType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_EarthModelType___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_EarthModelType___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::EarthModelType *arg1 = (six::EarthModelType *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EarthModelType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__EarthModelType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EarthModelType___ne__" "', argument " "1"" of type '" "six::EarthModelType const *""'"); 
  }
  arg1 = reinterpret_cast< six::EarthModelType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EarthModelType___ne__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::EarthModelType const *)arg1)->operator !=((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_EarthModelType___ne__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__EarthModelType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__EarthModelType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_EarthModelType___ne____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__EarthModelType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_EarthModelType___ne____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_EarthModelType___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::EarthModelType *arg1 = (six::EarthModelType *) 0 ;
  six::EarthModelType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EarthModelType___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__EarthModelType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EarthModelType___lt__" "', argument " "1"" of type '" "six::EarthModelType const *""'"); 
  }
  arg1 = reinterpret_cast< six::EarthModelType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__EarthModelType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EarthModelType___lt__" "', argument " "2"" of type '" "six::EarthModelType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EarthModelType___lt__" "', argument " "2"" of type '" "six::EarthModelType const &""'"); 
  }
  arg2 = reinterpret_cast< six::EarthModelType * >(argp2);
  {
    try
    {
      result = (bool)((six::EarthModelType const *)arg1)->operator <((six::EarthModelType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_EarthModelType___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::EarthModelType *arg1 = (six::EarthModelType *) 0 ;
  six::EarthModelType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EarthModelType___gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__EarthModelType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EarthModelType___gt__" "', argument " "1"" of type '" "six::EarthModelType const *""'"); 
  }
  arg1 = reinterpret_cast< six::EarthModelType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__EarthModelType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EarthModelType___gt__" "', argument " "2"" of type '" "six::EarthModelType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EarthModelType___gt__" "', argument " "2"" of type '" "six::EarthModelType const &""'"); 
  }
  arg2 = reinterpret_cast< six::EarthModelType * >(argp2);
  {
    try
    {
      result = (bool)((six::EarthModelType const *)arg1)->operator >((six::EarthModelType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_EarthModelType___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::EarthModelType *arg1 = (six::EarthModelType *) 0 ;
  six::EarthModelType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EarthModelType___le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__EarthModelType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EarthModelType___le__" "', argument " "1"" of type '" "six::EarthModelType const *""'"); 
  }
  arg1 = reinterpret_cast< six::EarthModelType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__EarthModelType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EarthModelType___le__" "', argument " "2"" of type '" "six::EarthModelType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EarthModelType___le__" "', argument " "2"" of type '" "six::EarthModelType const &""'"); 
  }
  arg2 = reinterpret_cast< six::EarthModelType * >(argp2);
  {
    try
    {
      result = (bool)((six::EarthModelType const *)arg1)->operator <=((six::EarthModelType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_EarthModelType___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::EarthModelType *arg1 = (six::EarthModelType *) 0 ;
  six::EarthModelType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EarthModelType___ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__EarthModelType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EarthModelType___ge__" "', argument " "1"" of type '" "six::EarthModelType const *""'"); 
  }
  arg1 = reinterpret_cast< six::EarthModelType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__EarthModelType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EarthModelType___ge__" "', argument " "2"" of type '" "six::EarthModelType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EarthModelType___ge__" "', argument " "2"" of type '" "six::EarthModelType const &""'"); 
  }
  arg2 = reinterpret_cast< six::EarthModelType * >(argp2);
  {
    try
    {
      result = (bool)((six::EarthModelType const *)arg1)->operator >=((six::EarthModelType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_EarthModelType_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)":EarthModelType_size")) SWIG_fail;
  {
    try
    {
      result = six::EarthModelType::size();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_EarthModelType_value_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::EarthModelType *arg1 = (six::EarthModelType *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EarthModelType_value_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__EarthModelType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EarthModelType_value_set" "', argument " "1"" of type '" "six::EarthModelType *""'"); 
  }
  arg1 = reinterpret_cast< six::EarthModelType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EarthModelType_value_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      if (arg1) (arg1)->value = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_EarthModelType_value_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::EarthModelType *arg1 = (six::EarthModelType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EarthModelType_value_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__EarthModelType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EarthModelType_value_get" "', argument " "1"" of type '" "six::EarthModelType *""'"); 
  }
  arg1 = reinterpret_cast< six::EarthModelType * >(argp1);
  {
    try
    {
      result = (int) ((arg1)->value);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *EarthModelType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__EarthModelType, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_FFTSign__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::FFTSign *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_FFTSign")) SWIG_fail;
  {
    try
    {
      result = (six::FFTSign *)new six::FFTSign();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__FFTSign, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_FFTSign__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  six::FFTSign *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FFTSign",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_FFTSign" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try
    {
      result = (six::FFTSign *)new six::FFTSign(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__FFTSign, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_FFTSign__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  six::FFTSign *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FFTSign",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FFTSign" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      result = (six::FFTSign *)new six::FFTSign(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__FFTSign, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_FFTSign(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_FFTSign__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_FFTSign__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FFTSign__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_FFTSign'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::FFTSign::FFTSign()\n"
    "    six::FFTSign::FFTSign(std::string)\n"
    "    six::FFTSign::FFTSign(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_FFTSign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::FFTSign *arg1 = (six::FFTSign *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FFTSign",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__FFTSign, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FFTSign" "', argument " "1"" of type '" "six::FFTSign *""'"); 
  }
  arg1 = reinterpret_cast< six::FFTSign * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_FFTSign_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::FFTSign *arg1 = (six::FFTSign *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FFTSign_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__FFTSign, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FFTSign_toString" "', argument " "1"" of type '" "six::FFTSign const *""'"); 
  }
  arg1 = reinterpret_cast< six::FFTSign * >(argp1);
  {
    try
    {
      result = ((six::FFTSign const *)arg1)->toString();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_FFTSign___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::FFTSign *arg1 = (six::FFTSign *) 0 ;
  six::FFTSign *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FFTSign___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__FFTSign, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FFTSign___eq__" "', argument " "1"" of type '" "six::FFTSign const *""'"); 
  }
  arg1 = reinterpret_cast< six::FFTSign * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__FFTSign,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FFTSign___eq__" "', argument " "2"" of type '" "six::FFTSign const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FFTSign___eq__" "', argument " "2"" of type '" "six::FFTSign const &""'"); 
  }
  arg2 = reinterpret_cast< six::FFTSign * >(argp2);
  {
    try
    {
      result = (bool)((six::FFTSign const *)arg1)->operator ==((six::FFTSign const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_FFTSign___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::FFTSign *arg1 = (six::FFTSign *) 0 ;
  six::FFTSign *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FFTSign___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__FFTSign, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FFTSign___ne__" "', argument " "1"" of type '" "six::FFTSign const *""'"); 
  }
  arg1 = reinterpret_cast< six::FFTSign * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__FFTSign,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FFTSign___ne__" "', argument " "2"" of type '" "six::FFTSign const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FFTSign___ne__" "', argument " "2"" of type '" "six::FFTSign const &""'"); 
  }
  arg2 = reinterpret_cast< six::FFTSign * >(argp2);
  {
    try
    {
      result = (bool)((six::FFTSign const *)arg1)->operator !=((six::FFTSign const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_FFTSign___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::FFTSign *arg1 = (six::FFTSign *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FFTSign___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__FFTSign, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FFTSign___eq__" "', argument " "1"" of type '" "six::FFTSign const *""'"); 
  }
  arg1 = reinterpret_cast< six::FFTSign * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FFTSign___eq__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::FFTSign const *)arg1)->operator ==((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_FFTSign___eq__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__FFTSign, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__FFTSign, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FFTSign___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__FFTSign, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FFTSign___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_FFTSign___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::FFTSign *arg1 = (six::FFTSign *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FFTSign___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__FFTSign, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FFTSign___ne__" "', argument " "1"" of type '" "six::FFTSign const *""'"); 
  }
  arg1 = reinterpret_cast< six::FFTSign * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FFTSign___ne__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::FFTSign const *)arg1)->operator !=((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_FFTSign___ne__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__FFTSign, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__FFTSign, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FFTSign___ne____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__FFTSign, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FFTSign___ne____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_FFTSign___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::FFTSign *arg1 = (six::FFTSign *) 0 ;
  six::FFTSign *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FFTSign___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__FFTSign, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FFTSign___lt__" "', argument " "1"" of type '" "six::FFTSign const *""'"); 
  }
  arg1 = reinterpret_cast< six::FFTSign * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__FFTSign,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FFTSign___lt__" "', argument " "2"" of type '" "six::FFTSign const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FFTSign___lt__" "', argument " "2"" of type '" "six::FFTSign const &""'"); 
  }
  arg2 = reinterpret_cast< six::FFTSign * >(argp2);
  {
    try
    {
      result = (bool)((six::FFTSign const *)arg1)->operator <((six::FFTSign const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_FFTSign___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::FFTSign *arg1 = (six::FFTSign *) 0 ;
  six::FFTSign *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FFTSign___gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__FFTSign, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FFTSign___gt__" "', argument " "1"" of type '" "six::FFTSign const *""'"); 
  }
  arg1 = reinterpret_cast< six::FFTSign * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__FFTSign,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FFTSign___gt__" "', argument " "2"" of type '" "six::FFTSign const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FFTSign___gt__" "', argument " "2"" of type '" "six::FFTSign const &""'"); 
  }
  arg2 = reinterpret_cast< six::FFTSign * >(argp2);
  {
    try
    {
      result = (bool)((six::FFTSign const *)arg1)->operator >((six::FFTSign const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_FFTSign___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::FFTSign *arg1 = (six::FFTSign *) 0 ;
  six::FFTSign *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FFTSign___le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__FFTSign, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FFTSign___le__" "', argument " "1"" of type '" "six::FFTSign const *""'"); 
  }
  arg1 = reinterpret_cast< six::FFTSign * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__FFTSign,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FFTSign___le__" "', argument " "2"" of type '" "six::FFTSign const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FFTSign___le__" "', argument " "2"" of type '" "six::FFTSign const &""'"); 
  }
  arg2 = reinterpret_cast< six::FFTSign * >(argp2);
  {
    try
    {
      result = (bool)((six::FFTSign const *)arg1)->operator <=((six::FFTSign const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_FFTSign___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::FFTSign *arg1 = (six::FFTSign *) 0 ;
  six::FFTSign *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FFTSign___ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__FFTSign, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FFTSign___ge__" "', argument " "1"" of type '" "six::FFTSign const *""'"); 
  }
  arg1 = reinterpret_cast< six::FFTSign * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__FFTSign,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FFTSign___ge__" "', argument " "2"" of type '" "six::FFTSign const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FFTSign___ge__" "', argument " "2"" of type '" "six::FFTSign const &""'"); 
  }
  arg2 = reinterpret_cast< six::FFTSign * >(argp2);
  {
    try
    {
      result = (bool)((six::FFTSign const *)arg1)->operator >=((six::FFTSign const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_FFTSign_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)":FFTSign_size")) SWIG_fail;
  {
    try
    {
      result = six::FFTSign::size();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_FFTSign_value_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::FFTSign *arg1 = (six::FFTSign *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FFTSign_value_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__FFTSign, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FFTSign_value_set" "', argument " "1"" of type '" "six::FFTSign *""'"); 
  }
  arg1 = reinterpret_cast< six::FFTSign * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FFTSign_value_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      if (arg1) (arg1)->value = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_FFTSign_value_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::FFTSign *arg1 = (six::FFTSign *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FFTSign_value_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__FFTSign, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FFTSign_value_get" "', argument " "1"" of type '" "six::FFTSign *""'"); 
  }
  arg1 = reinterpret_cast< six::FFTSign * >(argp1);
  {
    try
    {
      result = (int) ((arg1)->value);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *FFTSign_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__FFTSign, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ImageBeamCompensationType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ImageBeamCompensationType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ImageBeamCompensationType")) SWIG_fail;
  {
    try
    {
      result = (six::ImageBeamCompensationType *)new six::ImageBeamCompensationType();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__ImageBeamCompensationType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ImageBeamCompensationType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  six::ImageBeamCompensationType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ImageBeamCompensationType",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ImageBeamCompensationType" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try
    {
      result = (six::ImageBeamCompensationType *)new six::ImageBeamCompensationType(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__ImageBeamCompensationType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ImageBeamCompensationType__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  six::ImageBeamCompensationType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ImageBeamCompensationType",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ImageBeamCompensationType" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      result = (six::ImageBeamCompensationType *)new six::ImageBeamCompensationType(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__ImageBeamCompensationType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ImageBeamCompensationType(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ImageBeamCompensationType__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ImageBeamCompensationType__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ImageBeamCompensationType__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ImageBeamCompensationType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::ImageBeamCompensationType::ImageBeamCompensationType()\n"
    "    six::ImageBeamCompensationType::ImageBeamCompensationType(std::string)\n"
    "    six::ImageBeamCompensationType::ImageBeamCompensationType(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ImageBeamCompensationType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ImageBeamCompensationType *arg1 = (six::ImageBeamCompensationType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ImageBeamCompensationType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ImageBeamCompensationType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ImageBeamCompensationType" "', argument " "1"" of type '" "six::ImageBeamCompensationType *""'"); 
  }
  arg1 = reinterpret_cast< six::ImageBeamCompensationType * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ImageBeamCompensationType_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ImageBeamCompensationType *arg1 = (six::ImageBeamCompensationType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageBeamCompensationType_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ImageBeamCompensationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageBeamCompensationType_toString" "', argument " "1"" of type '" "six::ImageBeamCompensationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::ImageBeamCompensationType * >(argp1);
  {
    try
    {
      result = ((six::ImageBeamCompensationType const *)arg1)->toString();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ImageBeamCompensationType___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ImageBeamCompensationType *arg1 = (six::ImageBeamCompensationType *) 0 ;
  six::ImageBeamCompensationType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageBeamCompensationType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ImageBeamCompensationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageBeamCompensationType___eq__" "', argument " "1"" of type '" "six::ImageBeamCompensationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::ImageBeamCompensationType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__ImageBeamCompensationType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageBeamCompensationType___eq__" "', argument " "2"" of type '" "six::ImageBeamCompensationType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageBeamCompensationType___eq__" "', argument " "2"" of type '" "six::ImageBeamCompensationType const &""'"); 
  }
  arg2 = reinterpret_cast< six::ImageBeamCompensationType * >(argp2);
  {
    try
    {
      result = (bool)((six::ImageBeamCompensationType const *)arg1)->operator ==((six::ImageBeamCompensationType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ImageBeamCompensationType___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ImageBeamCompensationType *arg1 = (six::ImageBeamCompensationType *) 0 ;
  six::ImageBeamCompensationType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageBeamCompensationType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ImageBeamCompensationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageBeamCompensationType___ne__" "', argument " "1"" of type '" "six::ImageBeamCompensationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::ImageBeamCompensationType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__ImageBeamCompensationType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageBeamCompensationType___ne__" "', argument " "2"" of type '" "six::ImageBeamCompensationType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageBeamCompensationType___ne__" "', argument " "2"" of type '" "six::ImageBeamCompensationType const &""'"); 
  }
  arg2 = reinterpret_cast< six::ImageBeamCompensationType * >(argp2);
  {
    try
    {
      result = (bool)((six::ImageBeamCompensationType const *)arg1)->operator !=((six::ImageBeamCompensationType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ImageBeamCompensationType___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ImageBeamCompensationType *arg1 = (six::ImageBeamCompensationType *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageBeamCompensationType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ImageBeamCompensationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageBeamCompensationType___eq__" "', argument " "1"" of type '" "six::ImageBeamCompensationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::ImageBeamCompensationType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageBeamCompensationType___eq__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::ImageBeamCompensationType const *)arg1)->operator ==((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ImageBeamCompensationType___eq__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__ImageBeamCompensationType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__ImageBeamCompensationType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ImageBeamCompensationType___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__ImageBeamCompensationType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ImageBeamCompensationType___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ImageBeamCompensationType___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ImageBeamCompensationType *arg1 = (six::ImageBeamCompensationType *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageBeamCompensationType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ImageBeamCompensationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageBeamCompensationType___ne__" "', argument " "1"" of type '" "six::ImageBeamCompensationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::ImageBeamCompensationType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageBeamCompensationType___ne__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::ImageBeamCompensationType const *)arg1)->operator !=((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ImageBeamCompensationType___ne__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__ImageBeamCompensationType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__ImageBeamCompensationType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ImageBeamCompensationType___ne____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__ImageBeamCompensationType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ImageBeamCompensationType___ne____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ImageBeamCompensationType___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ImageBeamCompensationType *arg1 = (six::ImageBeamCompensationType *) 0 ;
  six::ImageBeamCompensationType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageBeamCompensationType___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ImageBeamCompensationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageBeamCompensationType___lt__" "', argument " "1"" of type '" "six::ImageBeamCompensationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::ImageBeamCompensationType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__ImageBeamCompensationType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageBeamCompensationType___lt__" "', argument " "2"" of type '" "six::ImageBeamCompensationType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageBeamCompensationType___lt__" "', argument " "2"" of type '" "six::ImageBeamCompensationType const &""'"); 
  }
  arg2 = reinterpret_cast< six::ImageBeamCompensationType * >(argp2);
  {
    try
    {
      result = (bool)((six::ImageBeamCompensationType const *)arg1)->operator <((six::ImageBeamCompensationType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ImageBeamCompensationType___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ImageBeamCompensationType *arg1 = (six::ImageBeamCompensationType *) 0 ;
  six::ImageBeamCompensationType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageBeamCompensationType___gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ImageBeamCompensationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageBeamCompensationType___gt__" "', argument " "1"" of type '" "six::ImageBeamCompensationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::ImageBeamCompensationType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__ImageBeamCompensationType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageBeamCompensationType___gt__" "', argument " "2"" of type '" "six::ImageBeamCompensationType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageBeamCompensationType___gt__" "', argument " "2"" of type '" "six::ImageBeamCompensationType const &""'"); 
  }
  arg2 = reinterpret_cast< six::ImageBeamCompensationType * >(argp2);
  {
    try
    {
      result = (bool)((six::ImageBeamCompensationType const *)arg1)->operator >((six::ImageBeamCompensationType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ImageBeamCompensationType___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ImageBeamCompensationType *arg1 = (six::ImageBeamCompensationType *) 0 ;
  six::ImageBeamCompensationType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageBeamCompensationType___le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ImageBeamCompensationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageBeamCompensationType___le__" "', argument " "1"" of type '" "six::ImageBeamCompensationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::ImageBeamCompensationType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__ImageBeamCompensationType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageBeamCompensationType___le__" "', argument " "2"" of type '" "six::ImageBeamCompensationType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageBeamCompensationType___le__" "', argument " "2"" of type '" "six::ImageBeamCompensationType const &""'"); 
  }
  arg2 = reinterpret_cast< six::ImageBeamCompensationType * >(argp2);
  {
    try
    {
      result = (bool)((six::ImageBeamCompensationType const *)arg1)->operator <=((six::ImageBeamCompensationType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ImageBeamCompensationType___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ImageBeamCompensationType *arg1 = (six::ImageBeamCompensationType *) 0 ;
  six::ImageBeamCompensationType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageBeamCompensationType___ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ImageBeamCompensationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageBeamCompensationType___ge__" "', argument " "1"" of type '" "six::ImageBeamCompensationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::ImageBeamCompensationType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__ImageBeamCompensationType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageBeamCompensationType___ge__" "', argument " "2"" of type '" "six::ImageBeamCompensationType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageBeamCompensationType___ge__" "', argument " "2"" of type '" "six::ImageBeamCompensationType const &""'"); 
  }
  arg2 = reinterpret_cast< six::ImageBeamCompensationType * >(argp2);
  {
    try
    {
      result = (bool)((six::ImageBeamCompensationType const *)arg1)->operator >=((six::ImageBeamCompensationType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ImageBeamCompensationType_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)":ImageBeamCompensationType_size")) SWIG_fail;
  {
    try
    {
      result = six::ImageBeamCompensationType::size();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ImageBeamCompensationType_value_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ImageBeamCompensationType *arg1 = (six::ImageBeamCompensationType *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageBeamCompensationType_value_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ImageBeamCompensationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageBeamCompensationType_value_set" "', argument " "1"" of type '" "six::ImageBeamCompensationType *""'"); 
  }
  arg1 = reinterpret_cast< six::ImageBeamCompensationType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageBeamCompensationType_value_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      if (arg1) (arg1)->value = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ImageBeamCompensationType_value_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ImageBeamCompensationType *arg1 = (six::ImageBeamCompensationType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageBeamCompensationType_value_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ImageBeamCompensationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageBeamCompensationType_value_get" "', argument " "1"" of type '" "six::ImageBeamCompensationType *""'"); 
  }
  arg1 = reinterpret_cast< six::ImageBeamCompensationType * >(argp1);
  {
    try
    {
      result = (int) ((arg1)->value);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *ImageBeamCompensationType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__ImageBeamCompensationType, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ImageFormationType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ImageFormationType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ImageFormationType")) SWIG_fail;
  {
    try
    {
      result = (six::ImageFormationType *)new six::ImageFormationType();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__ImageFormationType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ImageFormationType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  six::ImageFormationType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ImageFormationType",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ImageFormationType" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try
    {
      result = (six::ImageFormationType *)new six::ImageFormationType(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__ImageFormationType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ImageFormationType__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  six::ImageFormationType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ImageFormationType",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ImageFormationType" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      result = (six::ImageFormationType *)new six::ImageFormationType(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__ImageFormationType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ImageFormationType(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ImageFormationType__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ImageFormationType__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ImageFormationType__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ImageFormationType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::ImageFormationType::ImageFormationType()\n"
    "    six::ImageFormationType::ImageFormationType(std::string)\n"
    "    six::ImageFormationType::ImageFormationType(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ImageFormationType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ImageFormationType *arg1 = (six::ImageFormationType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ImageFormationType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ImageFormationType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ImageFormationType" "', argument " "1"" of type '" "six::ImageFormationType *""'"); 
  }
  arg1 = reinterpret_cast< six::ImageFormationType * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ImageFormationType_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ImageFormationType *arg1 = (six::ImageFormationType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageFormationType_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ImageFormationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageFormationType_toString" "', argument " "1"" of type '" "six::ImageFormationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::ImageFormationType * >(argp1);
  {
    try
    {
      result = ((six::ImageFormationType const *)arg1)->toString();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ImageFormationType___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ImageFormationType *arg1 = (six::ImageFormationType *) 0 ;
  six::ImageFormationType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageFormationType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ImageFormationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageFormationType___eq__" "', argument " "1"" of type '" "six::ImageFormationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::ImageFormationType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__ImageFormationType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageFormationType___eq__" "', argument " "2"" of type '" "six::ImageFormationType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageFormationType___eq__" "', argument " "2"" of type '" "six::ImageFormationType const &""'"); 
  }
  arg2 = reinterpret_cast< six::ImageFormationType * >(argp2);
  {
    try
    {
      result = (bool)((six::ImageFormationType const *)arg1)->operator ==((six::ImageFormationType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ImageFormationType___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ImageFormationType *arg1 = (six::ImageFormationType *) 0 ;
  six::ImageFormationType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageFormationType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ImageFormationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageFormationType___ne__" "', argument " "1"" of type '" "six::ImageFormationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::ImageFormationType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__ImageFormationType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageFormationType___ne__" "', argument " "2"" of type '" "six::ImageFormationType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageFormationType___ne__" "', argument " "2"" of type '" "six::ImageFormationType const &""'"); 
  }
  arg2 = reinterpret_cast< six::ImageFormationType * >(argp2);
  {
    try
    {
      result = (bool)((six::ImageFormationType const *)arg1)->operator !=((six::ImageFormationType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ImageFormationType___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ImageFormationType *arg1 = (six::ImageFormationType *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageFormationType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ImageFormationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageFormationType___eq__" "', argument " "1"" of type '" "six::ImageFormationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::ImageFormationType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageFormationType___eq__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::ImageFormationType const *)arg1)->operator ==((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ImageFormationType___eq__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__ImageFormationType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__ImageFormationType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ImageFormationType___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__ImageFormationType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ImageFormationType___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ImageFormationType___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ImageFormationType *arg1 = (six::ImageFormationType *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageFormationType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ImageFormationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageFormationType___ne__" "', argument " "1"" of type '" "six::ImageFormationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::ImageFormationType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageFormationType___ne__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::ImageFormationType const *)arg1)->operator !=((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ImageFormationType___ne__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__ImageFormationType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__ImageFormationType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ImageFormationType___ne____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__ImageFormationType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ImageFormationType___ne____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ImageFormationType___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ImageFormationType *arg1 = (six::ImageFormationType *) 0 ;
  six::ImageFormationType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageFormationType___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ImageFormationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageFormationType___lt__" "', argument " "1"" of type '" "six::ImageFormationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::ImageFormationType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__ImageFormationType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageFormationType___lt__" "', argument " "2"" of type '" "six::ImageFormationType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageFormationType___lt__" "', argument " "2"" of type '" "six::ImageFormationType const &""'"); 
  }
  arg2 = reinterpret_cast< six::ImageFormationType * >(argp2);
  {
    try
    {
      result = (bool)((six::ImageFormationType const *)arg1)->operator <((six::ImageFormationType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ImageFormationType___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ImageFormationType *arg1 = (six::ImageFormationType *) 0 ;
  six::ImageFormationType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageFormationType___gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ImageFormationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageFormationType___gt__" "', argument " "1"" of type '" "six::ImageFormationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::ImageFormationType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__ImageFormationType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageFormationType___gt__" "', argument " "2"" of type '" "six::ImageFormationType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageFormationType___gt__" "', argument " "2"" of type '" "six::ImageFormationType const &""'"); 
  }
  arg2 = reinterpret_cast< six::ImageFormationType * >(argp2);
  {
    try
    {
      result = (bool)((six::ImageFormationType const *)arg1)->operator >((six::ImageFormationType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ImageFormationType___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ImageFormationType *arg1 = (six::ImageFormationType *) 0 ;
  six::ImageFormationType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageFormationType___le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ImageFormationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageFormationType___le__" "', argument " "1"" of type '" "six::ImageFormationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::ImageFormationType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__ImageFormationType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageFormationType___le__" "', argument " "2"" of type '" "six::ImageFormationType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageFormationType___le__" "', argument " "2"" of type '" "six::ImageFormationType const &""'"); 
  }
  arg2 = reinterpret_cast< six::ImageFormationType * >(argp2);
  {
    try
    {
      result = (bool)((six::ImageFormationType const *)arg1)->operator <=((six::ImageFormationType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ImageFormationType___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ImageFormationType *arg1 = (six::ImageFormationType *) 0 ;
  six::ImageFormationType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageFormationType___ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ImageFormationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageFormationType___ge__" "', argument " "1"" of type '" "six::ImageFormationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::ImageFormationType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__ImageFormationType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageFormationType___ge__" "', argument " "2"" of type '" "six::ImageFormationType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageFormationType___ge__" "', argument " "2"" of type '" "six::ImageFormationType const &""'"); 
  }
  arg2 = reinterpret_cast< six::ImageFormationType * >(argp2);
  {
    try
    {
      result = (bool)((six::ImageFormationType const *)arg1)->operator >=((six::ImageFormationType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ImageFormationType_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)":ImageFormationType_size")) SWIG_fail;
  {
    try
    {
      result = six::ImageFormationType::size();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ImageFormationType_value_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ImageFormationType *arg1 = (six::ImageFormationType *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageFormationType_value_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ImageFormationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageFormationType_value_set" "', argument " "1"" of type '" "six::ImageFormationType *""'"); 
  }
  arg1 = reinterpret_cast< six::ImageFormationType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageFormationType_value_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      if (arg1) (arg1)->value = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ImageFormationType_value_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ImageFormationType *arg1 = (six::ImageFormationType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageFormationType_value_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ImageFormationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageFormationType_value_get" "', argument " "1"" of type '" "six::ImageFormationType *""'"); 
  }
  arg1 = reinterpret_cast< six::ImageFormationType * >(argp1);
  {
    try
    {
      result = (int) ((arg1)->value);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *ImageFormationType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__ImageFormationType, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MagnificationMethod__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MagnificationMethod *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_MagnificationMethod")) SWIG_fail;
  {
    try
    {
      result = (six::MagnificationMethod *)new six::MagnificationMethod();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__MagnificationMethod, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_MagnificationMethod__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  six::MagnificationMethod *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MagnificationMethod",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_MagnificationMethod" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try
    {
      result = (six::MagnificationMethod *)new six::MagnificationMethod(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__MagnificationMethod, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_MagnificationMethod__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  six::MagnificationMethod *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MagnificationMethod",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MagnificationMethod" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      result = (six::MagnificationMethod *)new six::MagnificationMethod(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__MagnificationMethod, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_MagnificationMethod(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_MagnificationMethod__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_MagnificationMethod__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MagnificationMethod__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_MagnificationMethod'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::MagnificationMethod::MagnificationMethod()\n"
    "    six::MagnificationMethod::MagnificationMethod(std::string)\n"
    "    six::MagnificationMethod::MagnificationMethod(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_MagnificationMethod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MagnificationMethod *arg1 = (six::MagnificationMethod *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MagnificationMethod",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__MagnificationMethod, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MagnificationMethod" "', argument " "1"" of type '" "six::MagnificationMethod *""'"); 
  }
  arg1 = reinterpret_cast< six::MagnificationMethod * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_MagnificationMethod_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MagnificationMethod *arg1 = (six::MagnificationMethod *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MagnificationMethod_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__MagnificationMethod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MagnificationMethod_toString" "', argument " "1"" of type '" "six::MagnificationMethod const *""'"); 
  }
  arg1 = reinterpret_cast< six::MagnificationMethod * >(argp1);
  {
    try
    {
      result = ((six::MagnificationMethod const *)arg1)->toString();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_MagnificationMethod___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MagnificationMethod *arg1 = (six::MagnificationMethod *) 0 ;
  six::MagnificationMethod *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MagnificationMethod___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__MagnificationMethod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MagnificationMethod___eq__" "', argument " "1"" of type '" "six::MagnificationMethod const *""'"); 
  }
  arg1 = reinterpret_cast< six::MagnificationMethod * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__MagnificationMethod,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MagnificationMethod___eq__" "', argument " "2"" of type '" "six::MagnificationMethod const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MagnificationMethod___eq__" "', argument " "2"" of type '" "six::MagnificationMethod const &""'"); 
  }
  arg2 = reinterpret_cast< six::MagnificationMethod * >(argp2);
  {
    try
    {
      result = (bool)((six::MagnificationMethod const *)arg1)->operator ==((six::MagnificationMethod const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_MagnificationMethod___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MagnificationMethod *arg1 = (six::MagnificationMethod *) 0 ;
  six::MagnificationMethod *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MagnificationMethod___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__MagnificationMethod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MagnificationMethod___ne__" "', argument " "1"" of type '" "six::MagnificationMethod const *""'"); 
  }
  arg1 = reinterpret_cast< six::MagnificationMethod * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__MagnificationMethod,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MagnificationMethod___ne__" "', argument " "2"" of type '" "six::MagnificationMethod const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MagnificationMethod___ne__" "', argument " "2"" of type '" "six::MagnificationMethod const &""'"); 
  }
  arg2 = reinterpret_cast< six::MagnificationMethod * >(argp2);
  {
    try
    {
      result = (bool)((six::MagnificationMethod const *)arg1)->operator !=((six::MagnificationMethod const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_MagnificationMethod___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MagnificationMethod *arg1 = (six::MagnificationMethod *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MagnificationMethod___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__MagnificationMethod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MagnificationMethod___eq__" "', argument " "1"" of type '" "six::MagnificationMethod const *""'"); 
  }
  arg1 = reinterpret_cast< six::MagnificationMethod * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MagnificationMethod___eq__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::MagnificationMethod const *)arg1)->operator ==((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_MagnificationMethod___eq__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__MagnificationMethod, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__MagnificationMethod, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MagnificationMethod___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__MagnificationMethod, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MagnificationMethod___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_MagnificationMethod___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MagnificationMethod *arg1 = (six::MagnificationMethod *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MagnificationMethod___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__MagnificationMethod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MagnificationMethod___ne__" "', argument " "1"" of type '" "six::MagnificationMethod const *""'"); 
  }
  arg1 = reinterpret_cast< six::MagnificationMethod * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MagnificationMethod___ne__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::MagnificationMethod const *)arg1)->operator !=((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_MagnificationMethod___ne__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__MagnificationMethod, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__MagnificationMethod, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MagnificationMethod___ne____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__MagnificationMethod, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MagnificationMethod___ne____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_MagnificationMethod___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MagnificationMethod *arg1 = (six::MagnificationMethod *) 0 ;
  six::MagnificationMethod *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MagnificationMethod___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__MagnificationMethod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MagnificationMethod___lt__" "', argument " "1"" of type '" "six::MagnificationMethod const *""'"); 
  }
  arg1 = reinterpret_cast< six::MagnificationMethod * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__MagnificationMethod,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MagnificationMethod___lt__" "', argument " "2"" of type '" "six::MagnificationMethod const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MagnificationMethod___lt__" "', argument " "2"" of type '" "six::MagnificationMethod const &""'"); 
  }
  arg2 = reinterpret_cast< six::MagnificationMethod * >(argp2);
  {
    try
    {
      result = (bool)((six::MagnificationMethod const *)arg1)->operator <((six::MagnificationMethod const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_MagnificationMethod___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MagnificationMethod *arg1 = (six::MagnificationMethod *) 0 ;
  six::MagnificationMethod *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MagnificationMethod___gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__MagnificationMethod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MagnificationMethod___gt__" "', argument " "1"" of type '" "six::MagnificationMethod const *""'"); 
  }
  arg1 = reinterpret_cast< six::MagnificationMethod * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__MagnificationMethod,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MagnificationMethod___gt__" "', argument " "2"" of type '" "six::MagnificationMethod const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MagnificationMethod___gt__" "', argument " "2"" of type '" "six::MagnificationMethod const &""'"); 
  }
  arg2 = reinterpret_cast< six::MagnificationMethod * >(argp2);
  {
    try
    {
      result = (bool)((six::MagnificationMethod const *)arg1)->operator >((six::MagnificationMethod const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_MagnificationMethod___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MagnificationMethod *arg1 = (six::MagnificationMethod *) 0 ;
  six::MagnificationMethod *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MagnificationMethod___le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__MagnificationMethod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MagnificationMethod___le__" "', argument " "1"" of type '" "six::MagnificationMethod const *""'"); 
  }
  arg1 = reinterpret_cast< six::MagnificationMethod * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__MagnificationMethod,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MagnificationMethod___le__" "', argument " "2"" of type '" "six::MagnificationMethod const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MagnificationMethod___le__" "', argument " "2"" of type '" "six::MagnificationMethod const &""'"); 
  }
  arg2 = reinterpret_cast< six::MagnificationMethod * >(argp2);
  {
    try
    {
      result = (bool)((six::MagnificationMethod const *)arg1)->operator <=((six::MagnificationMethod const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_MagnificationMethod___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MagnificationMethod *arg1 = (six::MagnificationMethod *) 0 ;
  six::MagnificationMethod *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MagnificationMethod___ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__MagnificationMethod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MagnificationMethod___ge__" "', argument " "1"" of type '" "six::MagnificationMethod const *""'"); 
  }
  arg1 = reinterpret_cast< six::MagnificationMethod * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__MagnificationMethod,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MagnificationMethod___ge__" "', argument " "2"" of type '" "six::MagnificationMethod const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MagnificationMethod___ge__" "', argument " "2"" of type '" "six::MagnificationMethod const &""'"); 
  }
  arg2 = reinterpret_cast< six::MagnificationMethod * >(argp2);
  {
    try
    {
      result = (bool)((six::MagnificationMethod const *)arg1)->operator >=((six::MagnificationMethod const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_MagnificationMethod_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)":MagnificationMethod_size")) SWIG_fail;
  {
    try
    {
      result = six::MagnificationMethod::size();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_MagnificationMethod_value_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MagnificationMethod *arg1 = (six::MagnificationMethod *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MagnificationMethod_value_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__MagnificationMethod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MagnificationMethod_value_set" "', argument " "1"" of type '" "six::MagnificationMethod *""'"); 
  }
  arg1 = reinterpret_cast< six::MagnificationMethod * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MagnificationMethod_value_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      if (arg1) (arg1)->value = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_MagnificationMethod_value_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MagnificationMethod *arg1 = (six::MagnificationMethod *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MagnificationMethod_value_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__MagnificationMethod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MagnificationMethod_value_get" "', argument " "1"" of type '" "six::MagnificationMethod *""'"); 
  }
  arg1 = reinterpret_cast< six::MagnificationMethod * >(argp1);
  {
    try
    {
      result = (int) ((arg1)->value);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *MagnificationMethod_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__MagnificationMethod, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_OrientationType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::OrientationType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_OrientationType")) SWIG_fail;
  {
    try
    {
      result = (six::OrientationType *)new six::OrientationType();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__OrientationType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_OrientationType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  six::OrientationType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_OrientationType",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_OrientationType" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try
    {
      result = (six::OrientationType *)new six::OrientationType(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__OrientationType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_OrientationType__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  six::OrientationType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_OrientationType",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_OrientationType" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      result = (six::OrientationType *)new six::OrientationType(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__OrientationType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_OrientationType(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_OrientationType__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_OrientationType__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_OrientationType__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_OrientationType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::OrientationType::OrientationType()\n"
    "    six::OrientationType::OrientationType(std::string)\n"
    "    six::OrientationType::OrientationType(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_OrientationType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::OrientationType *arg1 = (six::OrientationType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_OrientationType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__OrientationType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_OrientationType" "', argument " "1"" of type '" "six::OrientationType *""'"); 
  }
  arg1 = reinterpret_cast< six::OrientationType * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_OrientationType_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::OrientationType *arg1 = (six::OrientationType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OrientationType_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__OrientationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OrientationType_toString" "', argument " "1"" of type '" "six::OrientationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::OrientationType * >(argp1);
  {
    try
    {
      result = ((six::OrientationType const *)arg1)->toString();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_OrientationType___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::OrientationType *arg1 = (six::OrientationType *) 0 ;
  six::OrientationType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OrientationType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__OrientationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OrientationType___eq__" "', argument " "1"" of type '" "six::OrientationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::OrientationType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__OrientationType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OrientationType___eq__" "', argument " "2"" of type '" "six::OrientationType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OrientationType___eq__" "', argument " "2"" of type '" "six::OrientationType const &""'"); 
  }
  arg2 = reinterpret_cast< six::OrientationType * >(argp2);
  {
    try
    {
      result = (bool)((six::OrientationType const *)arg1)->operator ==((six::OrientationType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_OrientationType___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::OrientationType *arg1 = (six::OrientationType *) 0 ;
  six::OrientationType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OrientationType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__OrientationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OrientationType___ne__" "', argument " "1"" of type '" "six::OrientationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::OrientationType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__OrientationType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OrientationType___ne__" "', argument " "2"" of type '" "six::OrientationType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OrientationType___ne__" "', argument " "2"" of type '" "six::OrientationType const &""'"); 
  }
  arg2 = reinterpret_cast< six::OrientationType * >(argp2);
  {
    try
    {
      result = (bool)((six::OrientationType const *)arg1)->operator !=((six::OrientationType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_OrientationType___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::OrientationType *arg1 = (six::OrientationType *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OrientationType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__OrientationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OrientationType___eq__" "', argument " "1"" of type '" "six::OrientationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::OrientationType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OrientationType___eq__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::OrientationType const *)arg1)->operator ==((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_OrientationType___eq__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__OrientationType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__OrientationType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_OrientationType___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__OrientationType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_OrientationType___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_OrientationType___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::OrientationType *arg1 = (six::OrientationType *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OrientationType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__OrientationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OrientationType___ne__" "', argument " "1"" of type '" "six::OrientationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::OrientationType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OrientationType___ne__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::OrientationType const *)arg1)->operator !=((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_OrientationType___ne__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__OrientationType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__OrientationType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_OrientationType___ne____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__OrientationType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_OrientationType___ne____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_OrientationType___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::OrientationType *arg1 = (six::OrientationType *) 0 ;
  six::OrientationType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OrientationType___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__OrientationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OrientationType___lt__" "', argument " "1"" of type '" "six::OrientationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::OrientationType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__OrientationType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OrientationType___lt__" "', argument " "2"" of type '" "six::OrientationType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OrientationType___lt__" "', argument " "2"" of type '" "six::OrientationType const &""'"); 
  }
  arg2 = reinterpret_cast< six::OrientationType * >(argp2);
  {
    try
    {
      result = (bool)((six::OrientationType const *)arg1)->operator <((six::OrientationType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_OrientationType___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::OrientationType *arg1 = (six::OrientationType *) 0 ;
  six::OrientationType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OrientationType___gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__OrientationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OrientationType___gt__" "', argument " "1"" of type '" "six::OrientationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::OrientationType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__OrientationType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OrientationType___gt__" "', argument " "2"" of type '" "six::OrientationType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OrientationType___gt__" "', argument " "2"" of type '" "six::OrientationType const &""'"); 
  }
  arg2 = reinterpret_cast< six::OrientationType * >(argp2);
  {
    try
    {
      result = (bool)((six::OrientationType const *)arg1)->operator >((six::OrientationType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_OrientationType___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::OrientationType *arg1 = (six::OrientationType *) 0 ;
  six::OrientationType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OrientationType___le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__OrientationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OrientationType___le__" "', argument " "1"" of type '" "six::OrientationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::OrientationType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__OrientationType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OrientationType___le__" "', argument " "2"" of type '" "six::OrientationType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OrientationType___le__" "', argument " "2"" of type '" "six::OrientationType const &""'"); 
  }
  arg2 = reinterpret_cast< six::OrientationType * >(argp2);
  {
    try
    {
      result = (bool)((six::OrientationType const *)arg1)->operator <=((six::OrientationType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_OrientationType___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::OrientationType *arg1 = (six::OrientationType *) 0 ;
  six::OrientationType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OrientationType___ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__OrientationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OrientationType___ge__" "', argument " "1"" of type '" "six::OrientationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::OrientationType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__OrientationType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OrientationType___ge__" "', argument " "2"" of type '" "six::OrientationType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OrientationType___ge__" "', argument " "2"" of type '" "six::OrientationType const &""'"); 
  }
  arg2 = reinterpret_cast< six::OrientationType * >(argp2);
  {
    try
    {
      result = (bool)((six::OrientationType const *)arg1)->operator >=((six::OrientationType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_OrientationType_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)":OrientationType_size")) SWIG_fail;
  {
    try
    {
      result = six::OrientationType::size();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_OrientationType_value_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::OrientationType *arg1 = (six::OrientationType *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OrientationType_value_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__OrientationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OrientationType_value_set" "', argument " "1"" of type '" "six::OrientationType *""'"); 
  }
  arg1 = reinterpret_cast< six::OrientationType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OrientationType_value_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      if (arg1) (arg1)->value = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_OrientationType_value_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::OrientationType *arg1 = (six::OrientationType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OrientationType_value_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__OrientationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OrientationType_value_get" "', argument " "1"" of type '" "six::OrientationType *""'"); 
  }
  arg1 = reinterpret_cast< six::OrientationType * >(argp1);
  {
    try
    {
      result = (int) ((arg1)->value);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *OrientationType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__OrientationType, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PixelType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PixelType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_PixelType")) SWIG_fail;
  {
    try
    {
      result = (six::PixelType *)new six::PixelType();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__PixelType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_PixelType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  six::PixelType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PixelType",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_PixelType" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try
    {
      result = (six::PixelType *)new six::PixelType(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__PixelType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_PixelType__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  six::PixelType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PixelType",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PixelType" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      result = (six::PixelType *)new six::PixelType(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__PixelType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_PixelType(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_PixelType__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_PixelType__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PixelType__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_PixelType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::PixelType::PixelType()\n"
    "    six::PixelType::PixelType(std::string)\n"
    "    six::PixelType::PixelType(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_PixelType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PixelType *arg1 = (six::PixelType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PixelType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PixelType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PixelType" "', argument " "1"" of type '" "six::PixelType *""'"); 
  }
  arg1 = reinterpret_cast< six::PixelType * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PixelType_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PixelType *arg1 = (six::PixelType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PixelType_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PixelType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelType_toString" "', argument " "1"" of type '" "six::PixelType const *""'"); 
  }
  arg1 = reinterpret_cast< six::PixelType * >(argp1);
  {
    try
    {
      result = ((six::PixelType const *)arg1)->toString();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PixelType___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PixelType *arg1 = (six::PixelType *) 0 ;
  six::PixelType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PixelType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PixelType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelType___eq__" "', argument " "1"" of type '" "six::PixelType const *""'"); 
  }
  arg1 = reinterpret_cast< six::PixelType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__PixelType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PixelType___eq__" "', argument " "2"" of type '" "six::PixelType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PixelType___eq__" "', argument " "2"" of type '" "six::PixelType const &""'"); 
  }
  arg2 = reinterpret_cast< six::PixelType * >(argp2);
  {
    try
    {
      result = (bool)((six::PixelType const *)arg1)->operator ==((six::PixelType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PixelType___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PixelType *arg1 = (six::PixelType *) 0 ;
  six::PixelType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PixelType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PixelType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelType___ne__" "', argument " "1"" of type '" "six::PixelType const *""'"); 
  }
  arg1 = reinterpret_cast< six::PixelType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__PixelType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PixelType___ne__" "', argument " "2"" of type '" "six::PixelType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PixelType___ne__" "', argument " "2"" of type '" "six::PixelType const &""'"); 
  }
  arg2 = reinterpret_cast< six::PixelType * >(argp2);
  {
    try
    {
      result = (bool)((six::PixelType const *)arg1)->operator !=((six::PixelType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PixelType___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PixelType *arg1 = (six::PixelType *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PixelType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PixelType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelType___eq__" "', argument " "1"" of type '" "six::PixelType const *""'"); 
  }
  arg1 = reinterpret_cast< six::PixelType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PixelType___eq__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::PixelType const *)arg1)->operator ==((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PixelType___eq__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__PixelType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__PixelType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PixelType___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__PixelType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PixelType___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_PixelType___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PixelType *arg1 = (six::PixelType *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PixelType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PixelType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelType___ne__" "', argument " "1"" of type '" "six::PixelType const *""'"); 
  }
  arg1 = reinterpret_cast< six::PixelType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PixelType___ne__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::PixelType const *)arg1)->operator !=((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PixelType___ne__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__PixelType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__PixelType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PixelType___ne____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__PixelType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PixelType___ne____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_PixelType___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PixelType *arg1 = (six::PixelType *) 0 ;
  six::PixelType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PixelType___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PixelType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelType___lt__" "', argument " "1"" of type '" "six::PixelType const *""'"); 
  }
  arg1 = reinterpret_cast< six::PixelType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__PixelType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PixelType___lt__" "', argument " "2"" of type '" "six::PixelType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PixelType___lt__" "', argument " "2"" of type '" "six::PixelType const &""'"); 
  }
  arg2 = reinterpret_cast< six::PixelType * >(argp2);
  {
    try
    {
      result = (bool)((six::PixelType const *)arg1)->operator <((six::PixelType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PixelType___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PixelType *arg1 = (six::PixelType *) 0 ;
  six::PixelType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PixelType___gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PixelType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelType___gt__" "', argument " "1"" of type '" "six::PixelType const *""'"); 
  }
  arg1 = reinterpret_cast< six::PixelType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__PixelType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PixelType___gt__" "', argument " "2"" of type '" "six::PixelType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PixelType___gt__" "', argument " "2"" of type '" "six::PixelType const &""'"); 
  }
  arg2 = reinterpret_cast< six::PixelType * >(argp2);
  {
    try
    {
      result = (bool)((six::PixelType const *)arg1)->operator >((six::PixelType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PixelType___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PixelType *arg1 = (six::PixelType *) 0 ;
  six::PixelType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PixelType___le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PixelType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelType___le__" "', argument " "1"" of type '" "six::PixelType const *""'"); 
  }
  arg1 = reinterpret_cast< six::PixelType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__PixelType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PixelType___le__" "', argument " "2"" of type '" "six::PixelType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PixelType___le__" "', argument " "2"" of type '" "six::PixelType const &""'"); 
  }
  arg2 = reinterpret_cast< six::PixelType * >(argp2);
  {
    try
    {
      result = (bool)((six::PixelType const *)arg1)->operator <=((six::PixelType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PixelType___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PixelType *arg1 = (six::PixelType *) 0 ;
  six::PixelType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PixelType___ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PixelType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelType___ge__" "', argument " "1"" of type '" "six::PixelType const *""'"); 
  }
  arg1 = reinterpret_cast< six::PixelType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__PixelType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PixelType___ge__" "', argument " "2"" of type '" "six::PixelType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PixelType___ge__" "', argument " "2"" of type '" "six::PixelType const &""'"); 
  }
  arg2 = reinterpret_cast< six::PixelType * >(argp2);
  {
    try
    {
      result = (bool)((six::PixelType const *)arg1)->operator >=((six::PixelType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PixelType_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)":PixelType_size")) SWIG_fail;
  {
    try
    {
      result = six::PixelType::size();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PixelType_value_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PixelType *arg1 = (six::PixelType *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PixelType_value_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PixelType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelType_value_set" "', argument " "1"" of type '" "six::PixelType *""'"); 
  }
  arg1 = reinterpret_cast< six::PixelType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PixelType_value_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      if (arg1) (arg1)->value = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PixelType_value_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PixelType *arg1 = (six::PixelType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PixelType_value_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PixelType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelType_value_get" "', argument " "1"" of type '" "six::PixelType *""'"); 
  }
  arg1 = reinterpret_cast< six::PixelType * >(argp1);
  {
    try
    {
      result = (int) ((arg1)->value);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *PixelType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__PixelType, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PolarizationSequenceType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PolarizationSequenceType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_PolarizationSequenceType")) SWIG_fail;
  {
    try
    {
      result = (six::PolarizationSequenceType *)new six::PolarizationSequenceType();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__PolarizationSequenceType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_PolarizationSequenceType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  six::PolarizationSequenceType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PolarizationSequenceType",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_PolarizationSequenceType" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try
    {
      result = (six::PolarizationSequenceType *)new six::PolarizationSequenceType(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__PolarizationSequenceType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_PolarizationSequenceType__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  six::PolarizationSequenceType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PolarizationSequenceType",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PolarizationSequenceType" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      result = (six::PolarizationSequenceType *)new six::PolarizationSequenceType(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__PolarizationSequenceType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_PolarizationSequenceType(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_PolarizationSequenceType__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_PolarizationSequenceType__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PolarizationSequenceType__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_PolarizationSequenceType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::PolarizationSequenceType::PolarizationSequenceType()\n"
    "    six::PolarizationSequenceType::PolarizationSequenceType(std::string)\n"
    "    six::PolarizationSequenceType::PolarizationSequenceType(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_PolarizationSequenceType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PolarizationSequenceType *arg1 = (six::PolarizationSequenceType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PolarizationSequenceType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PolarizationSequenceType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PolarizationSequenceType" "', argument " "1"" of type '" "six::PolarizationSequenceType *""'"); 
  }
  arg1 = reinterpret_cast< six::PolarizationSequenceType * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PolarizationSequenceType_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PolarizationSequenceType *arg1 = (six::PolarizationSequenceType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PolarizationSequenceType_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PolarizationSequenceType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolarizationSequenceType_toString" "', argument " "1"" of type '" "six::PolarizationSequenceType const *""'"); 
  }
  arg1 = reinterpret_cast< six::PolarizationSequenceType * >(argp1);
  {
    try
    {
      result = ((six::PolarizationSequenceType const *)arg1)->toString();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PolarizationSequenceType___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PolarizationSequenceType *arg1 = (six::PolarizationSequenceType *) 0 ;
  six::PolarizationSequenceType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PolarizationSequenceType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PolarizationSequenceType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolarizationSequenceType___eq__" "', argument " "1"" of type '" "six::PolarizationSequenceType const *""'"); 
  }
  arg1 = reinterpret_cast< six::PolarizationSequenceType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__PolarizationSequenceType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PolarizationSequenceType___eq__" "', argument " "2"" of type '" "six::PolarizationSequenceType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PolarizationSequenceType___eq__" "', argument " "2"" of type '" "six::PolarizationSequenceType const &""'"); 
  }
  arg2 = reinterpret_cast< six::PolarizationSequenceType * >(argp2);
  {
    try
    {
      result = (bool)((six::PolarizationSequenceType const *)arg1)->operator ==((six::PolarizationSequenceType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PolarizationSequenceType___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PolarizationSequenceType *arg1 = (six::PolarizationSequenceType *) 0 ;
  six::PolarizationSequenceType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PolarizationSequenceType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PolarizationSequenceType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolarizationSequenceType___ne__" "', argument " "1"" of type '" "six::PolarizationSequenceType const *""'"); 
  }
  arg1 = reinterpret_cast< six::PolarizationSequenceType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__PolarizationSequenceType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PolarizationSequenceType___ne__" "', argument " "2"" of type '" "six::PolarizationSequenceType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PolarizationSequenceType___ne__" "', argument " "2"" of type '" "six::PolarizationSequenceType const &""'"); 
  }
  arg2 = reinterpret_cast< six::PolarizationSequenceType * >(argp2);
  {
    try
    {
      result = (bool)((six::PolarizationSequenceType const *)arg1)->operator !=((six::PolarizationSequenceType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PolarizationSequenceType___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PolarizationSequenceType *arg1 = (six::PolarizationSequenceType *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PolarizationSequenceType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PolarizationSequenceType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolarizationSequenceType___eq__" "', argument " "1"" of type '" "six::PolarizationSequenceType const *""'"); 
  }
  arg1 = reinterpret_cast< six::PolarizationSequenceType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PolarizationSequenceType___eq__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::PolarizationSequenceType const *)arg1)->operator ==((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PolarizationSequenceType___eq__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__PolarizationSequenceType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__PolarizationSequenceType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PolarizationSequenceType___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__PolarizationSequenceType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PolarizationSequenceType___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_PolarizationSequenceType___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PolarizationSequenceType *arg1 = (six::PolarizationSequenceType *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PolarizationSequenceType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PolarizationSequenceType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolarizationSequenceType___ne__" "', argument " "1"" of type '" "six::PolarizationSequenceType const *""'"); 
  }
  arg1 = reinterpret_cast< six::PolarizationSequenceType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PolarizationSequenceType___ne__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::PolarizationSequenceType const *)arg1)->operator !=((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PolarizationSequenceType___ne__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__PolarizationSequenceType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__PolarizationSequenceType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PolarizationSequenceType___ne____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__PolarizationSequenceType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PolarizationSequenceType___ne____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_PolarizationSequenceType___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PolarizationSequenceType *arg1 = (six::PolarizationSequenceType *) 0 ;
  six::PolarizationSequenceType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PolarizationSequenceType___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PolarizationSequenceType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolarizationSequenceType___lt__" "', argument " "1"" of type '" "six::PolarizationSequenceType const *""'"); 
  }
  arg1 = reinterpret_cast< six::PolarizationSequenceType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__PolarizationSequenceType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PolarizationSequenceType___lt__" "', argument " "2"" of type '" "six::PolarizationSequenceType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PolarizationSequenceType___lt__" "', argument " "2"" of type '" "six::PolarizationSequenceType const &""'"); 
  }
  arg2 = reinterpret_cast< six::PolarizationSequenceType * >(argp2);
  {
    try
    {
      result = (bool)((six::PolarizationSequenceType const *)arg1)->operator <((six::PolarizationSequenceType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PolarizationSequenceType___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PolarizationSequenceType *arg1 = (six::PolarizationSequenceType *) 0 ;
  six::PolarizationSequenceType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PolarizationSequenceType___gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PolarizationSequenceType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolarizationSequenceType___gt__" "', argument " "1"" of type '" "six::PolarizationSequenceType const *""'"); 
  }
  arg1 = reinterpret_cast< six::PolarizationSequenceType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__PolarizationSequenceType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PolarizationSequenceType___gt__" "', argument " "2"" of type '" "six::PolarizationSequenceType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PolarizationSequenceType___gt__" "', argument " "2"" of type '" "six::PolarizationSequenceType const &""'"); 
  }
  arg2 = reinterpret_cast< six::PolarizationSequenceType * >(argp2);
  {
    try
    {
      result = (bool)((six::PolarizationSequenceType const *)arg1)->operator >((six::PolarizationSequenceType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PolarizationSequenceType___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PolarizationSequenceType *arg1 = (six::PolarizationSequenceType *) 0 ;
  six::PolarizationSequenceType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PolarizationSequenceType___le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PolarizationSequenceType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolarizationSequenceType___le__" "', argument " "1"" of type '" "six::PolarizationSequenceType const *""'"); 
  }
  arg1 = reinterpret_cast< six::PolarizationSequenceType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__PolarizationSequenceType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PolarizationSequenceType___le__" "', argument " "2"" of type '" "six::PolarizationSequenceType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PolarizationSequenceType___le__" "', argument " "2"" of type '" "six::PolarizationSequenceType const &""'"); 
  }
  arg2 = reinterpret_cast< six::PolarizationSequenceType * >(argp2);
  {
    try
    {
      result = (bool)((six::PolarizationSequenceType const *)arg1)->operator <=((six::PolarizationSequenceType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PolarizationSequenceType___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PolarizationSequenceType *arg1 = (six::PolarizationSequenceType *) 0 ;
  six::PolarizationSequenceType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PolarizationSequenceType___ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PolarizationSequenceType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolarizationSequenceType___ge__" "', argument " "1"" of type '" "six::PolarizationSequenceType const *""'"); 
  }
  arg1 = reinterpret_cast< six::PolarizationSequenceType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__PolarizationSequenceType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PolarizationSequenceType___ge__" "', argument " "2"" of type '" "six::PolarizationSequenceType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PolarizationSequenceType___ge__" "', argument " "2"" of type '" "six::PolarizationSequenceType const &""'"); 
  }
  arg2 = reinterpret_cast< six::PolarizationSequenceType * >(argp2);
  {
    try
    {
      result = (bool)((six::PolarizationSequenceType const *)arg1)->operator >=((six::PolarizationSequenceType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PolarizationSequenceType_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)":PolarizationSequenceType_size")) SWIG_fail;
  {
    try
    {
      result = six::PolarizationSequenceType::size();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PolarizationSequenceType_value_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PolarizationSequenceType *arg1 = (six::PolarizationSequenceType *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PolarizationSequenceType_value_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PolarizationSequenceType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolarizationSequenceType_value_set" "', argument " "1"" of type '" "six::PolarizationSequenceType *""'"); 
  }
  arg1 = reinterpret_cast< six::PolarizationSequenceType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PolarizationSequenceType_value_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      if (arg1) (arg1)->value = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PolarizationSequenceType_value_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PolarizationSequenceType *arg1 = (six::PolarizationSequenceType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PolarizationSequenceType_value_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PolarizationSequenceType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolarizationSequenceType_value_get" "', argument " "1"" of type '" "six::PolarizationSequenceType *""'"); 
  }
  arg1 = reinterpret_cast< six::PolarizationSequenceType * >(argp1);
  {
    try
    {
      result = (int) ((arg1)->value);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *PolarizationSequenceType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__PolarizationSequenceType, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PolarizationType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PolarizationType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_PolarizationType")) SWIG_fail;
  {
    try
    {
      result = (six::PolarizationType *)new six::PolarizationType();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__PolarizationType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_PolarizationType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  six::PolarizationType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PolarizationType",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_PolarizationType" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try
    {
      result = (six::PolarizationType *)new six::PolarizationType(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__PolarizationType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_PolarizationType__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  six::PolarizationType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PolarizationType",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PolarizationType" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      result = (six::PolarizationType *)new six::PolarizationType(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__PolarizationType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_PolarizationType(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_PolarizationType__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_PolarizationType__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PolarizationType__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_PolarizationType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::PolarizationType::PolarizationType()\n"
    "    six::PolarizationType::PolarizationType(std::string)\n"
    "    six::PolarizationType::PolarizationType(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_PolarizationType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PolarizationType *arg1 = (six::PolarizationType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PolarizationType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PolarizationType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PolarizationType" "', argument " "1"" of type '" "six::PolarizationType *""'"); 
  }
  arg1 = reinterpret_cast< six::PolarizationType * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PolarizationType_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PolarizationType *arg1 = (six::PolarizationType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PolarizationType_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PolarizationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolarizationType_toString" "', argument " "1"" of type '" "six::PolarizationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::PolarizationType * >(argp1);
  {
    try
    {
      result = ((six::PolarizationType const *)arg1)->toString();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PolarizationType___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PolarizationType *arg1 = (six::PolarizationType *) 0 ;
  six::PolarizationType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PolarizationType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PolarizationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolarizationType___eq__" "', argument " "1"" of type '" "six::PolarizationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::PolarizationType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__PolarizationType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PolarizationType___eq__" "', argument " "2"" of type '" "six::PolarizationType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PolarizationType___eq__" "', argument " "2"" of type '" "six::PolarizationType const &""'"); 
  }
  arg2 = reinterpret_cast< six::PolarizationType * >(argp2);
  {
    try
    {
      result = (bool)((six::PolarizationType const *)arg1)->operator ==((six::PolarizationType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PolarizationType___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PolarizationType *arg1 = (six::PolarizationType *) 0 ;
  six::PolarizationType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PolarizationType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PolarizationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolarizationType___ne__" "', argument " "1"" of type '" "six::PolarizationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::PolarizationType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__PolarizationType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PolarizationType___ne__" "', argument " "2"" of type '" "six::PolarizationType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PolarizationType___ne__" "', argument " "2"" of type '" "six::PolarizationType const &""'"); 
  }
  arg2 = reinterpret_cast< six::PolarizationType * >(argp2);
  {
    try
    {
      result = (bool)((six::PolarizationType const *)arg1)->operator !=((six::PolarizationType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PolarizationType___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PolarizationType *arg1 = (six::PolarizationType *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PolarizationType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PolarizationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolarizationType___eq__" "', argument " "1"" of type '" "six::PolarizationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::PolarizationType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PolarizationType___eq__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::PolarizationType const *)arg1)->operator ==((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PolarizationType___eq__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__PolarizationType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__PolarizationType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PolarizationType___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__PolarizationType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PolarizationType___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_PolarizationType___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PolarizationType *arg1 = (six::PolarizationType *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PolarizationType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PolarizationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolarizationType___ne__" "', argument " "1"" of type '" "six::PolarizationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::PolarizationType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PolarizationType___ne__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::PolarizationType const *)arg1)->operator !=((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PolarizationType___ne__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__PolarizationType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__PolarizationType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PolarizationType___ne____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__PolarizationType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PolarizationType___ne____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_PolarizationType___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PolarizationType *arg1 = (six::PolarizationType *) 0 ;
  six::PolarizationType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PolarizationType___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PolarizationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolarizationType___lt__" "', argument " "1"" of type '" "six::PolarizationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::PolarizationType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__PolarizationType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PolarizationType___lt__" "', argument " "2"" of type '" "six::PolarizationType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PolarizationType___lt__" "', argument " "2"" of type '" "six::PolarizationType const &""'"); 
  }
  arg2 = reinterpret_cast< six::PolarizationType * >(argp2);
  {
    try
    {
      result = (bool)((six::PolarizationType const *)arg1)->operator <((six::PolarizationType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PolarizationType___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PolarizationType *arg1 = (six::PolarizationType *) 0 ;
  six::PolarizationType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PolarizationType___gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PolarizationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolarizationType___gt__" "', argument " "1"" of type '" "six::PolarizationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::PolarizationType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__PolarizationType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PolarizationType___gt__" "', argument " "2"" of type '" "six::PolarizationType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PolarizationType___gt__" "', argument " "2"" of type '" "six::PolarizationType const &""'"); 
  }
  arg2 = reinterpret_cast< six::PolarizationType * >(argp2);
  {
    try
    {
      result = (bool)((six::PolarizationType const *)arg1)->operator >((six::PolarizationType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PolarizationType___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PolarizationType *arg1 = (six::PolarizationType *) 0 ;
  six::PolarizationType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PolarizationType___le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PolarizationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolarizationType___le__" "', argument " "1"" of type '" "six::PolarizationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::PolarizationType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__PolarizationType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PolarizationType___le__" "', argument " "2"" of type '" "six::PolarizationType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PolarizationType___le__" "', argument " "2"" of type '" "six::PolarizationType const &""'"); 
  }
  arg2 = reinterpret_cast< six::PolarizationType * >(argp2);
  {
    try
    {
      result = (bool)((six::PolarizationType const *)arg1)->operator <=((six::PolarizationType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PolarizationType___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PolarizationType *arg1 = (six::PolarizationType *) 0 ;
  six::PolarizationType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PolarizationType___ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PolarizationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolarizationType___ge__" "', argument " "1"" of type '" "six::PolarizationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::PolarizationType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__PolarizationType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PolarizationType___ge__" "', argument " "2"" of type '" "six::PolarizationType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PolarizationType___ge__" "', argument " "2"" of type '" "six::PolarizationType const &""'"); 
  }
  arg2 = reinterpret_cast< six::PolarizationType * >(argp2);
  {
    try
    {
      result = (bool)((six::PolarizationType const *)arg1)->operator >=((six::PolarizationType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PolarizationType_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)":PolarizationType_size")) SWIG_fail;
  {
    try
    {
      result = six::PolarizationType::size();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PolarizationType_value_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PolarizationType *arg1 = (six::PolarizationType *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PolarizationType_value_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PolarizationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolarizationType_value_set" "', argument " "1"" of type '" "six::PolarizationType *""'"); 
  }
  arg1 = reinterpret_cast< six::PolarizationType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PolarizationType_value_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      if (arg1) (arg1)->value = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PolarizationType_value_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PolarizationType *arg1 = (six::PolarizationType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PolarizationType_value_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PolarizationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolarizationType_value_get" "', argument " "1"" of type '" "six::PolarizationType *""'"); 
  }
  arg1 = reinterpret_cast< six::PolarizationType * >(argp1);
  {
    try
    {
      result = (int) ((arg1)->value);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *PolarizationType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__PolarizationType, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ProjectionType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ProjectionType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ProjectionType")) SWIG_fail;
  {
    try
    {
      result = (six::ProjectionType *)new six::ProjectionType();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__ProjectionType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ProjectionType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  six::ProjectionType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ProjectionType",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ProjectionType" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try
    {
      result = (six::ProjectionType *)new six::ProjectionType(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__ProjectionType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ProjectionType__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  six::ProjectionType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ProjectionType",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ProjectionType" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      result = (six::ProjectionType *)new six::ProjectionType(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__ProjectionType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ProjectionType(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ProjectionType__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ProjectionType__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ProjectionType__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ProjectionType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::ProjectionType::ProjectionType()\n"
    "    six::ProjectionType::ProjectionType(std::string)\n"
    "    six::ProjectionType::ProjectionType(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ProjectionType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ProjectionType *arg1 = (six::ProjectionType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ProjectionType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ProjectionType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ProjectionType" "', argument " "1"" of type '" "six::ProjectionType *""'"); 
  }
  arg1 = reinterpret_cast< six::ProjectionType * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ProjectionType_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ProjectionType *arg1 = (six::ProjectionType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ProjectionType_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ProjectionType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProjectionType_toString" "', argument " "1"" of type '" "six::ProjectionType const *""'"); 
  }
  arg1 = reinterpret_cast< six::ProjectionType * >(argp1);
  {
    try
    {
      result = ((six::ProjectionType const *)arg1)->toString();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ProjectionType___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ProjectionType *arg1 = (six::ProjectionType *) 0 ;
  six::ProjectionType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ProjectionType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ProjectionType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProjectionType___eq__" "', argument " "1"" of type '" "six::ProjectionType const *""'"); 
  }
  arg1 = reinterpret_cast< six::ProjectionType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__ProjectionType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ProjectionType___eq__" "', argument " "2"" of type '" "six::ProjectionType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ProjectionType___eq__" "', argument " "2"" of type '" "six::ProjectionType const &""'"); 
  }
  arg2 = reinterpret_cast< six::ProjectionType * >(argp2);
  {
    try
    {
      result = (bool)((six::ProjectionType const *)arg1)->operator ==((six::ProjectionType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ProjectionType___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ProjectionType *arg1 = (six::ProjectionType *) 0 ;
  six::ProjectionType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ProjectionType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ProjectionType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProjectionType___ne__" "', argument " "1"" of type '" "six::ProjectionType const *""'"); 
  }
  arg1 = reinterpret_cast< six::ProjectionType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__ProjectionType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ProjectionType___ne__" "', argument " "2"" of type '" "six::ProjectionType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ProjectionType___ne__" "', argument " "2"" of type '" "six::ProjectionType const &""'"); 
  }
  arg2 = reinterpret_cast< six::ProjectionType * >(argp2);
  {
    try
    {
      result = (bool)((six::ProjectionType const *)arg1)->operator !=((six::ProjectionType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ProjectionType___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ProjectionType *arg1 = (six::ProjectionType *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ProjectionType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ProjectionType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProjectionType___eq__" "', argument " "1"" of type '" "six::ProjectionType const *""'"); 
  }
  arg1 = reinterpret_cast< six::ProjectionType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ProjectionType___eq__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::ProjectionType const *)arg1)->operator ==((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ProjectionType___eq__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__ProjectionType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__ProjectionType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ProjectionType___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__ProjectionType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ProjectionType___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ProjectionType___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ProjectionType *arg1 = (six::ProjectionType *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ProjectionType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ProjectionType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProjectionType___ne__" "', argument " "1"" of type '" "six::ProjectionType const *""'"); 
  }
  arg1 = reinterpret_cast< six::ProjectionType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ProjectionType___ne__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::ProjectionType const *)arg1)->operator !=((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ProjectionType___ne__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__ProjectionType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__ProjectionType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ProjectionType___ne____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__ProjectionType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ProjectionType___ne____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ProjectionType___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ProjectionType *arg1 = (six::ProjectionType *) 0 ;
  six::ProjectionType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ProjectionType___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ProjectionType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProjectionType___lt__" "', argument " "1"" of type '" "six::ProjectionType const *""'"); 
  }
  arg1 = reinterpret_cast< six::ProjectionType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__ProjectionType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ProjectionType___lt__" "', argument " "2"" of type '" "six::ProjectionType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ProjectionType___lt__" "', argument " "2"" of type '" "six::ProjectionType const &""'"); 
  }
  arg2 = reinterpret_cast< six::ProjectionType * >(argp2);
  {
    try
    {
      result = (bool)((six::ProjectionType const *)arg1)->operator <((six::ProjectionType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ProjectionType___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ProjectionType *arg1 = (six::ProjectionType *) 0 ;
  six::ProjectionType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ProjectionType___gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ProjectionType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProjectionType___gt__" "', argument " "1"" of type '" "six::ProjectionType const *""'"); 
  }
  arg1 = reinterpret_cast< six::ProjectionType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__ProjectionType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ProjectionType___gt__" "', argument " "2"" of type '" "six::ProjectionType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ProjectionType___gt__" "', argument " "2"" of type '" "six::ProjectionType const &""'"); 
  }
  arg2 = reinterpret_cast< six::ProjectionType * >(argp2);
  {
    try
    {
      result = (bool)((six::ProjectionType const *)arg1)->operator >((six::ProjectionType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ProjectionType___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ProjectionType *arg1 = (six::ProjectionType *) 0 ;
  six::ProjectionType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ProjectionType___le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ProjectionType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProjectionType___le__" "', argument " "1"" of type '" "six::ProjectionType const *""'"); 
  }
  arg1 = reinterpret_cast< six::ProjectionType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__ProjectionType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ProjectionType___le__" "', argument " "2"" of type '" "six::ProjectionType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ProjectionType___le__" "', argument " "2"" of type '" "six::ProjectionType const &""'"); 
  }
  arg2 = reinterpret_cast< six::ProjectionType * >(argp2);
  {
    try
    {
      result = (bool)((six::ProjectionType const *)arg1)->operator <=((six::ProjectionType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ProjectionType___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ProjectionType *arg1 = (six::ProjectionType *) 0 ;
  six::ProjectionType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ProjectionType___ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ProjectionType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProjectionType___ge__" "', argument " "1"" of type '" "six::ProjectionType const *""'"); 
  }
  arg1 = reinterpret_cast< six::ProjectionType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__ProjectionType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ProjectionType___ge__" "', argument " "2"" of type '" "six::ProjectionType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ProjectionType___ge__" "', argument " "2"" of type '" "six::ProjectionType const &""'"); 
  }
  arg2 = reinterpret_cast< six::ProjectionType * >(argp2);
  {
    try
    {
      result = (bool)((six::ProjectionType const *)arg1)->operator >=((six::ProjectionType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ProjectionType_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)":ProjectionType_size")) SWIG_fail;
  {
    try
    {
      result = six::ProjectionType::size();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ProjectionType_value_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ProjectionType *arg1 = (six::ProjectionType *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ProjectionType_value_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ProjectionType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProjectionType_value_set" "', argument " "1"" of type '" "six::ProjectionType *""'"); 
  }
  arg1 = reinterpret_cast< six::ProjectionType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ProjectionType_value_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      if (arg1) (arg1)->value = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ProjectionType_value_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ProjectionType *arg1 = (six::ProjectionType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ProjectionType_value_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ProjectionType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProjectionType_value_get" "', argument " "1"" of type '" "six::ProjectionType *""'"); 
  }
  arg1 = reinterpret_cast< six::ProjectionType * >(argp1);
  {
    try
    {
      result = (int) ((arg1)->value);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *ProjectionType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__ProjectionType, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RMAlgoType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RMAlgoType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_RMAlgoType")) SWIG_fail;
  {
    try
    {
      result = (six::RMAlgoType *)new six::RMAlgoType();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__RMAlgoType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_RMAlgoType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  six::RMAlgoType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_RMAlgoType",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RMAlgoType" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try
    {
      result = (six::RMAlgoType *)new six::RMAlgoType(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__RMAlgoType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_RMAlgoType__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  six::RMAlgoType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_RMAlgoType",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RMAlgoType" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      result = (six::RMAlgoType *)new six::RMAlgoType(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__RMAlgoType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_RMAlgoType(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_RMAlgoType__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_RMAlgoType__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RMAlgoType__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_RMAlgoType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::RMAlgoType::RMAlgoType()\n"
    "    six::RMAlgoType::RMAlgoType(std::string)\n"
    "    six::RMAlgoType::RMAlgoType(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_RMAlgoType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RMAlgoType *arg1 = (six::RMAlgoType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RMAlgoType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RMAlgoType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RMAlgoType" "', argument " "1"" of type '" "six::RMAlgoType *""'"); 
  }
  arg1 = reinterpret_cast< six::RMAlgoType * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RMAlgoType_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RMAlgoType *arg1 = (six::RMAlgoType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RMAlgoType_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RMAlgoType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RMAlgoType_toString" "', argument " "1"" of type '" "six::RMAlgoType const *""'"); 
  }
  arg1 = reinterpret_cast< six::RMAlgoType * >(argp1);
  {
    try
    {
      result = ((six::RMAlgoType const *)arg1)->toString();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RMAlgoType___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RMAlgoType *arg1 = (six::RMAlgoType *) 0 ;
  six::RMAlgoType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RMAlgoType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RMAlgoType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RMAlgoType___eq__" "', argument " "1"" of type '" "six::RMAlgoType const *""'"); 
  }
  arg1 = reinterpret_cast< six::RMAlgoType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__RMAlgoType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RMAlgoType___eq__" "', argument " "2"" of type '" "six::RMAlgoType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RMAlgoType___eq__" "', argument " "2"" of type '" "six::RMAlgoType const &""'"); 
  }
  arg2 = reinterpret_cast< six::RMAlgoType * >(argp2);
  {
    try
    {
      result = (bool)((six::RMAlgoType const *)arg1)->operator ==((six::RMAlgoType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RMAlgoType___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RMAlgoType *arg1 = (six::RMAlgoType *) 0 ;
  six::RMAlgoType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RMAlgoType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RMAlgoType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RMAlgoType___ne__" "', argument " "1"" of type '" "six::RMAlgoType const *""'"); 
  }
  arg1 = reinterpret_cast< six::RMAlgoType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__RMAlgoType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RMAlgoType___ne__" "', argument " "2"" of type '" "six::RMAlgoType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RMAlgoType___ne__" "', argument " "2"" of type '" "six::RMAlgoType const &""'"); 
  }
  arg2 = reinterpret_cast< six::RMAlgoType * >(argp2);
  {
    try
    {
      result = (bool)((six::RMAlgoType const *)arg1)->operator !=((six::RMAlgoType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RMAlgoType___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RMAlgoType *arg1 = (six::RMAlgoType *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RMAlgoType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RMAlgoType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RMAlgoType___eq__" "', argument " "1"" of type '" "six::RMAlgoType const *""'"); 
  }
  arg1 = reinterpret_cast< six::RMAlgoType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RMAlgoType___eq__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::RMAlgoType const *)arg1)->operator ==((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RMAlgoType___eq__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__RMAlgoType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__RMAlgoType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RMAlgoType___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__RMAlgoType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RMAlgoType___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_RMAlgoType___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RMAlgoType *arg1 = (six::RMAlgoType *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RMAlgoType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RMAlgoType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RMAlgoType___ne__" "', argument " "1"" of type '" "six::RMAlgoType const *""'"); 
  }
  arg1 = reinterpret_cast< six::RMAlgoType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RMAlgoType___ne__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::RMAlgoType const *)arg1)->operator !=((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RMAlgoType___ne__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__RMAlgoType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__RMAlgoType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RMAlgoType___ne____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__RMAlgoType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RMAlgoType___ne____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_RMAlgoType___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RMAlgoType *arg1 = (six::RMAlgoType *) 0 ;
  six::RMAlgoType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RMAlgoType___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RMAlgoType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RMAlgoType___lt__" "', argument " "1"" of type '" "six::RMAlgoType const *""'"); 
  }
  arg1 = reinterpret_cast< six::RMAlgoType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__RMAlgoType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RMAlgoType___lt__" "', argument " "2"" of type '" "six::RMAlgoType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RMAlgoType___lt__" "', argument " "2"" of type '" "six::RMAlgoType const &""'"); 
  }
  arg2 = reinterpret_cast< six::RMAlgoType * >(argp2);
  {
    try
    {
      result = (bool)((six::RMAlgoType const *)arg1)->operator <((six::RMAlgoType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RMAlgoType___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RMAlgoType *arg1 = (six::RMAlgoType *) 0 ;
  six::RMAlgoType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RMAlgoType___gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RMAlgoType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RMAlgoType___gt__" "', argument " "1"" of type '" "six::RMAlgoType const *""'"); 
  }
  arg1 = reinterpret_cast< six::RMAlgoType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__RMAlgoType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RMAlgoType___gt__" "', argument " "2"" of type '" "six::RMAlgoType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RMAlgoType___gt__" "', argument " "2"" of type '" "six::RMAlgoType const &""'"); 
  }
  arg2 = reinterpret_cast< six::RMAlgoType * >(argp2);
  {
    try
    {
      result = (bool)((six::RMAlgoType const *)arg1)->operator >((six::RMAlgoType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RMAlgoType___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RMAlgoType *arg1 = (six::RMAlgoType *) 0 ;
  six::RMAlgoType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RMAlgoType___le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RMAlgoType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RMAlgoType___le__" "', argument " "1"" of type '" "six::RMAlgoType const *""'"); 
  }
  arg1 = reinterpret_cast< six::RMAlgoType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__RMAlgoType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RMAlgoType___le__" "', argument " "2"" of type '" "six::RMAlgoType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RMAlgoType___le__" "', argument " "2"" of type '" "six::RMAlgoType const &""'"); 
  }
  arg2 = reinterpret_cast< six::RMAlgoType * >(argp2);
  {
    try
    {
      result = (bool)((six::RMAlgoType const *)arg1)->operator <=((six::RMAlgoType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RMAlgoType___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RMAlgoType *arg1 = (six::RMAlgoType *) 0 ;
  six::RMAlgoType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RMAlgoType___ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RMAlgoType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RMAlgoType___ge__" "', argument " "1"" of type '" "six::RMAlgoType const *""'"); 
  }
  arg1 = reinterpret_cast< six::RMAlgoType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__RMAlgoType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RMAlgoType___ge__" "', argument " "2"" of type '" "six::RMAlgoType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RMAlgoType___ge__" "', argument " "2"" of type '" "six::RMAlgoType const &""'"); 
  }
  arg2 = reinterpret_cast< six::RMAlgoType * >(argp2);
  {
    try
    {
      result = (bool)((six::RMAlgoType const *)arg1)->operator >=((six::RMAlgoType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RMAlgoType_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)":RMAlgoType_size")) SWIG_fail;
  {
    try
    {
      result = six::RMAlgoType::size();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RMAlgoType_value_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RMAlgoType *arg1 = (six::RMAlgoType *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RMAlgoType_value_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RMAlgoType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RMAlgoType_value_set" "', argument " "1"" of type '" "six::RMAlgoType *""'"); 
  }
  arg1 = reinterpret_cast< six::RMAlgoType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RMAlgoType_value_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      if (arg1) (arg1)->value = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RMAlgoType_value_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RMAlgoType *arg1 = (six::RMAlgoType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RMAlgoType_value_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RMAlgoType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RMAlgoType_value_get" "', argument " "1"" of type '" "six::RMAlgoType *""'"); 
  }
  arg1 = reinterpret_cast< six::RMAlgoType * >(argp1);
  {
    try
    {
      result = (int) ((arg1)->value);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *RMAlgoType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__RMAlgoType, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RadarModeType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RadarModeType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_RadarModeType")) SWIG_fail;
  {
    try
    {
      result = (six::RadarModeType *)new six::RadarModeType();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__RadarModeType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_RadarModeType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  six::RadarModeType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_RadarModeType",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RadarModeType" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try
    {
      result = (six::RadarModeType *)new six::RadarModeType(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__RadarModeType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_RadarModeType__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  six::RadarModeType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_RadarModeType",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RadarModeType" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      result = (six::RadarModeType *)new six::RadarModeType(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__RadarModeType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_RadarModeType(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_RadarModeType__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_RadarModeType__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RadarModeType__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_RadarModeType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::RadarModeType::RadarModeType()\n"
    "    six::RadarModeType::RadarModeType(std::string)\n"
    "    six::RadarModeType::RadarModeType(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_RadarModeType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RadarModeType *arg1 = (six::RadarModeType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RadarModeType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RadarModeType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RadarModeType" "', argument " "1"" of type '" "six::RadarModeType *""'"); 
  }
  arg1 = reinterpret_cast< six::RadarModeType * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RadarModeType_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RadarModeType *arg1 = (six::RadarModeType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RadarModeType_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RadarModeType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadarModeType_toString" "', argument " "1"" of type '" "six::RadarModeType const *""'"); 
  }
  arg1 = reinterpret_cast< six::RadarModeType * >(argp1);
  {
    try
    {
      result = ((six::RadarModeType const *)arg1)->toString();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RadarModeType___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RadarModeType *arg1 = (six::RadarModeType *) 0 ;
  six::RadarModeType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RadarModeType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RadarModeType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadarModeType___eq__" "', argument " "1"" of type '" "six::RadarModeType const *""'"); 
  }
  arg1 = reinterpret_cast< six::RadarModeType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__RadarModeType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RadarModeType___eq__" "', argument " "2"" of type '" "six::RadarModeType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RadarModeType___eq__" "', argument " "2"" of type '" "six::RadarModeType const &""'"); 
  }
  arg2 = reinterpret_cast< six::RadarModeType * >(argp2);
  {
    try
    {
      result = (bool)((six::RadarModeType const *)arg1)->operator ==((six::RadarModeType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RadarModeType___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RadarModeType *arg1 = (six::RadarModeType *) 0 ;
  six::RadarModeType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RadarModeType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RadarModeType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadarModeType___ne__" "', argument " "1"" of type '" "six::RadarModeType const *""'"); 
  }
  arg1 = reinterpret_cast< six::RadarModeType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__RadarModeType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RadarModeType___ne__" "', argument " "2"" of type '" "six::RadarModeType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RadarModeType___ne__" "', argument " "2"" of type '" "six::RadarModeType const &""'"); 
  }
  arg2 = reinterpret_cast< six::RadarModeType * >(argp2);
  {
    try
    {
      result = (bool)((six::RadarModeType const *)arg1)->operator !=((six::RadarModeType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RadarModeType___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RadarModeType *arg1 = (six::RadarModeType *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RadarModeType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RadarModeType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadarModeType___eq__" "', argument " "1"" of type '" "six::RadarModeType const *""'"); 
  }
  arg1 = reinterpret_cast< six::RadarModeType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RadarModeType___eq__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::RadarModeType const *)arg1)->operator ==((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RadarModeType___eq__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__RadarModeType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__RadarModeType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RadarModeType___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__RadarModeType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RadarModeType___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_RadarModeType___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RadarModeType *arg1 = (six::RadarModeType *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RadarModeType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RadarModeType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadarModeType___ne__" "', argument " "1"" of type '" "six::RadarModeType const *""'"); 
  }
  arg1 = reinterpret_cast< six::RadarModeType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RadarModeType___ne__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::RadarModeType const *)arg1)->operator !=((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RadarModeType___ne__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__RadarModeType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__RadarModeType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RadarModeType___ne____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__RadarModeType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RadarModeType___ne____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_RadarModeType___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RadarModeType *arg1 = (six::RadarModeType *) 0 ;
  six::RadarModeType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RadarModeType___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RadarModeType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadarModeType___lt__" "', argument " "1"" of type '" "six::RadarModeType const *""'"); 
  }
  arg1 = reinterpret_cast< six::RadarModeType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__RadarModeType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RadarModeType___lt__" "', argument " "2"" of type '" "six::RadarModeType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RadarModeType___lt__" "', argument " "2"" of type '" "six::RadarModeType const &""'"); 
  }
  arg2 = reinterpret_cast< six::RadarModeType * >(argp2);
  {
    try
    {
      result = (bool)((six::RadarModeType const *)arg1)->operator <((six::RadarModeType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RadarModeType___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RadarModeType *arg1 = (six::RadarModeType *) 0 ;
  six::RadarModeType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RadarModeType___gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RadarModeType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadarModeType___gt__" "', argument " "1"" of type '" "six::RadarModeType const *""'"); 
  }
  arg1 = reinterpret_cast< six::RadarModeType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__RadarModeType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RadarModeType___gt__" "', argument " "2"" of type '" "six::RadarModeType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RadarModeType___gt__" "', argument " "2"" of type '" "six::RadarModeType const &""'"); 
  }
  arg2 = reinterpret_cast< six::RadarModeType * >(argp2);
  {
    try
    {
      result = (bool)((six::RadarModeType const *)arg1)->operator >((six::RadarModeType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RadarModeType___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RadarModeType *arg1 = (six::RadarModeType *) 0 ;
  six::RadarModeType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RadarModeType___le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RadarModeType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadarModeType___le__" "', argument " "1"" of type '" "six::RadarModeType const *""'"); 
  }
  arg1 = reinterpret_cast< six::RadarModeType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__RadarModeType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RadarModeType___le__" "', argument " "2"" of type '" "six::RadarModeType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RadarModeType___le__" "', argument " "2"" of type '" "six::RadarModeType const &""'"); 
  }
  arg2 = reinterpret_cast< six::RadarModeType * >(argp2);
  {
    try
    {
      result = (bool)((six::RadarModeType const *)arg1)->operator <=((six::RadarModeType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RadarModeType___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RadarModeType *arg1 = (six::RadarModeType *) 0 ;
  six::RadarModeType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RadarModeType___ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RadarModeType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadarModeType___ge__" "', argument " "1"" of type '" "six::RadarModeType const *""'"); 
  }
  arg1 = reinterpret_cast< six::RadarModeType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__RadarModeType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RadarModeType___ge__" "', argument " "2"" of type '" "six::RadarModeType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RadarModeType___ge__" "', argument " "2"" of type '" "six::RadarModeType const &""'"); 
  }
  arg2 = reinterpret_cast< six::RadarModeType * >(argp2);
  {
    try
    {
      result = (bool)((six::RadarModeType const *)arg1)->operator >=((six::RadarModeType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RadarModeType_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)":RadarModeType_size")) SWIG_fail;
  {
    try
    {
      result = six::RadarModeType::size();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RadarModeType_value_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RadarModeType *arg1 = (six::RadarModeType *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RadarModeType_value_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RadarModeType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadarModeType_value_set" "', argument " "1"" of type '" "six::RadarModeType *""'"); 
  }
  arg1 = reinterpret_cast< six::RadarModeType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RadarModeType_value_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      if (arg1) (arg1)->value = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RadarModeType_value_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RadarModeType *arg1 = (six::RadarModeType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RadarModeType_value_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RadarModeType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadarModeType_value_get" "', argument " "1"" of type '" "six::RadarModeType *""'"); 
  }
  arg1 = reinterpret_cast< six::RadarModeType * >(argp1);
  {
    try
    {
      result = (int) ((arg1)->value);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *RadarModeType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__RadarModeType, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RegionType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RegionType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_RegionType")) SWIG_fail;
  {
    try
    {
      result = (six::RegionType *)new six::RegionType();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__RegionType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_RegionType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  six::RegionType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_RegionType",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RegionType" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try
    {
      result = (six::RegionType *)new six::RegionType(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__RegionType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_RegionType__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  six::RegionType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_RegionType",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RegionType" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      result = (six::RegionType *)new six::RegionType(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__RegionType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_RegionType(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_RegionType__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_RegionType__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RegionType__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_RegionType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::RegionType::RegionType()\n"
    "    six::RegionType::RegionType(std::string)\n"
    "    six::RegionType::RegionType(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_RegionType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RegionType *arg1 = (six::RegionType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RegionType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RegionType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RegionType" "', argument " "1"" of type '" "six::RegionType *""'"); 
  }
  arg1 = reinterpret_cast< six::RegionType * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RegionType_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RegionType *arg1 = (six::RegionType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RegionType_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RegionType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionType_toString" "', argument " "1"" of type '" "six::RegionType const *""'"); 
  }
  arg1 = reinterpret_cast< six::RegionType * >(argp1);
  {
    try
    {
      result = ((six::RegionType const *)arg1)->toString();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RegionType___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RegionType *arg1 = (six::RegionType *) 0 ;
  six::RegionType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RegionType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RegionType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionType___eq__" "', argument " "1"" of type '" "six::RegionType const *""'"); 
  }
  arg1 = reinterpret_cast< six::RegionType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__RegionType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegionType___eq__" "', argument " "2"" of type '" "six::RegionType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegionType___eq__" "', argument " "2"" of type '" "six::RegionType const &""'"); 
  }
  arg2 = reinterpret_cast< six::RegionType * >(argp2);
  {
    try
    {
      result = (bool)((six::RegionType const *)arg1)->operator ==((six::RegionType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RegionType___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RegionType *arg1 = (six::RegionType *) 0 ;
  six::RegionType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RegionType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RegionType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionType___ne__" "', argument " "1"" of type '" "six::RegionType const *""'"); 
  }
  arg1 = reinterpret_cast< six::RegionType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__RegionType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegionType___ne__" "', argument " "2"" of type '" "six::RegionType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegionType___ne__" "', argument " "2"" of type '" "six::RegionType const &""'"); 
  }
  arg2 = reinterpret_cast< six::RegionType * >(argp2);
  {
    try
    {
      result = (bool)((six::RegionType const *)arg1)->operator !=((six::RegionType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RegionType___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RegionType *arg1 = (six::RegionType *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RegionType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RegionType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionType___eq__" "', argument " "1"" of type '" "six::RegionType const *""'"); 
  }
  arg1 = reinterpret_cast< six::RegionType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RegionType___eq__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::RegionType const *)arg1)->operator ==((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RegionType___eq__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__RegionType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__RegionType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RegionType___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__RegionType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RegionType___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_RegionType___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RegionType *arg1 = (six::RegionType *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RegionType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RegionType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionType___ne__" "', argument " "1"" of type '" "six::RegionType const *""'"); 
  }
  arg1 = reinterpret_cast< six::RegionType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RegionType___ne__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::RegionType const *)arg1)->operator !=((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RegionType___ne__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__RegionType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__RegionType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RegionType___ne____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__RegionType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RegionType___ne____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_RegionType___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RegionType *arg1 = (six::RegionType *) 0 ;
  six::RegionType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RegionType___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RegionType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionType___lt__" "', argument " "1"" of type '" "six::RegionType const *""'"); 
  }
  arg1 = reinterpret_cast< six::RegionType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__RegionType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegionType___lt__" "', argument " "2"" of type '" "six::RegionType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegionType___lt__" "', argument " "2"" of type '" "six::RegionType const &""'"); 
  }
  arg2 = reinterpret_cast< six::RegionType * >(argp2);
  {
    try
    {
      result = (bool)((six::RegionType const *)arg1)->operator <((six::RegionType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RegionType___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RegionType *arg1 = (six::RegionType *) 0 ;
  six::RegionType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RegionType___gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RegionType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionType___gt__" "', argument " "1"" of type '" "six::RegionType const *""'"); 
  }
  arg1 = reinterpret_cast< six::RegionType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__RegionType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegionType___gt__" "', argument " "2"" of type '" "six::RegionType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegionType___gt__" "', argument " "2"" of type '" "six::RegionType const &""'"); 
  }
  arg2 = reinterpret_cast< six::RegionType * >(argp2);
  {
    try
    {
      result = (bool)((six::RegionType const *)arg1)->operator >((six::RegionType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RegionType___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RegionType *arg1 = (six::RegionType *) 0 ;
  six::RegionType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RegionType___le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RegionType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionType___le__" "', argument " "1"" of type '" "six::RegionType const *""'"); 
  }
  arg1 = reinterpret_cast< six::RegionType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__RegionType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegionType___le__" "', argument " "2"" of type '" "six::RegionType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegionType___le__" "', argument " "2"" of type '" "six::RegionType const &""'"); 
  }
  arg2 = reinterpret_cast< six::RegionType * >(argp2);
  {
    try
    {
      result = (bool)((six::RegionType const *)arg1)->operator <=((six::RegionType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RegionType___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RegionType *arg1 = (six::RegionType *) 0 ;
  six::RegionType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RegionType___ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RegionType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionType___ge__" "', argument " "1"" of type '" "six::RegionType const *""'"); 
  }
  arg1 = reinterpret_cast< six::RegionType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__RegionType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegionType___ge__" "', argument " "2"" of type '" "six::RegionType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegionType___ge__" "', argument " "2"" of type '" "six::RegionType const &""'"); 
  }
  arg2 = reinterpret_cast< six::RegionType * >(argp2);
  {
    try
    {
      result = (bool)((six::RegionType const *)arg1)->operator >=((six::RegionType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RegionType_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)":RegionType_size")) SWIG_fail;
  {
    try
    {
      result = six::RegionType::size();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RegionType_value_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RegionType *arg1 = (six::RegionType *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RegionType_value_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RegionType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionType_value_set" "', argument " "1"" of type '" "six::RegionType *""'"); 
  }
  arg1 = reinterpret_cast< six::RegionType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RegionType_value_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      if (arg1) (arg1)->value = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RegionType_value_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RegionType *arg1 = (six::RegionType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RegionType_value_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RegionType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionType_value_get" "', argument " "1"" of type '" "six::RegionType *""'"); 
  }
  arg1 = reinterpret_cast< six::RegionType * >(argp1);
  {
    try
    {
      result = (int) ((arg1)->value);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *RegionType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__RegionType, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RowColEnum__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RowColEnum *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_RowColEnum")) SWIG_fail;
  {
    try
    {
      result = (six::RowColEnum *)new six::RowColEnum();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__RowColEnum, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_RowColEnum__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  six::RowColEnum *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_RowColEnum",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RowColEnum" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try
    {
      result = (six::RowColEnum *)new six::RowColEnum(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__RowColEnum, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_RowColEnum__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  six::RowColEnum *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_RowColEnum",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RowColEnum" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      result = (six::RowColEnum *)new six::RowColEnum(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__RowColEnum, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_RowColEnum(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_RowColEnum__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_RowColEnum__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RowColEnum__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_RowColEnum'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::RowColEnum::RowColEnum()\n"
    "    six::RowColEnum::RowColEnum(std::string)\n"
    "    six::RowColEnum::RowColEnum(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_RowColEnum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RowColEnum *arg1 = (six::RowColEnum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RowColEnum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RowColEnum, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RowColEnum" "', argument " "1"" of type '" "six::RowColEnum *""'"); 
  }
  arg1 = reinterpret_cast< six::RowColEnum * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RowColEnum_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RowColEnum *arg1 = (six::RowColEnum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RowColEnum_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RowColEnum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RowColEnum_toString" "', argument " "1"" of type '" "six::RowColEnum const *""'"); 
  }
  arg1 = reinterpret_cast< six::RowColEnum * >(argp1);
  {
    try
    {
      result = ((six::RowColEnum const *)arg1)->toString();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RowColEnum___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RowColEnum *arg1 = (six::RowColEnum *) 0 ;
  six::RowColEnum *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RowColEnum___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RowColEnum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RowColEnum___eq__" "', argument " "1"" of type '" "six::RowColEnum const *""'"); 
  }
  arg1 = reinterpret_cast< six::RowColEnum * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__RowColEnum,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RowColEnum___eq__" "', argument " "2"" of type '" "six::RowColEnum const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RowColEnum___eq__" "', argument " "2"" of type '" "six::RowColEnum const &""'"); 
  }
  arg2 = reinterpret_cast< six::RowColEnum * >(argp2);
  {
    try
    {
      result = (bool)((six::RowColEnum const *)arg1)->operator ==((six::RowColEnum const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RowColEnum___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RowColEnum *arg1 = (six::RowColEnum *) 0 ;
  six::RowColEnum *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RowColEnum___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RowColEnum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RowColEnum___ne__" "', argument " "1"" of type '" "six::RowColEnum const *""'"); 
  }
  arg1 = reinterpret_cast< six::RowColEnum * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__RowColEnum,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RowColEnum___ne__" "', argument " "2"" of type '" "six::RowColEnum const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RowColEnum___ne__" "', argument " "2"" of type '" "six::RowColEnum const &""'"); 
  }
  arg2 = reinterpret_cast< six::RowColEnum * >(argp2);
  {
    try
    {
      result = (bool)((six::RowColEnum const *)arg1)->operator !=((six::RowColEnum const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RowColEnum___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RowColEnum *arg1 = (six::RowColEnum *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RowColEnum___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RowColEnum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RowColEnum___eq__" "', argument " "1"" of type '" "six::RowColEnum const *""'"); 
  }
  arg1 = reinterpret_cast< six::RowColEnum * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RowColEnum___eq__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::RowColEnum const *)arg1)->operator ==((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RowColEnum___eq__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__RowColEnum, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__RowColEnum, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RowColEnum___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__RowColEnum, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RowColEnum___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_RowColEnum___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RowColEnum *arg1 = (six::RowColEnum *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RowColEnum___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RowColEnum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RowColEnum___ne__" "', argument " "1"" of type '" "six::RowColEnum const *""'"); 
  }
  arg1 = reinterpret_cast< six::RowColEnum * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RowColEnum___ne__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::RowColEnum const *)arg1)->operator !=((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RowColEnum___ne__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__RowColEnum, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__RowColEnum, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RowColEnum___ne____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__RowColEnum, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RowColEnum___ne____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_RowColEnum___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RowColEnum *arg1 = (six::RowColEnum *) 0 ;
  six::RowColEnum *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RowColEnum___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RowColEnum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RowColEnum___lt__" "', argument " "1"" of type '" "six::RowColEnum const *""'"); 
  }
  arg1 = reinterpret_cast< six::RowColEnum * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__RowColEnum,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RowColEnum___lt__" "', argument " "2"" of type '" "six::RowColEnum const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RowColEnum___lt__" "', argument " "2"" of type '" "six::RowColEnum const &""'"); 
  }
  arg2 = reinterpret_cast< six::RowColEnum * >(argp2);
  {
    try
    {
      result = (bool)((six::RowColEnum const *)arg1)->operator <((six::RowColEnum const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RowColEnum___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RowColEnum *arg1 = (six::RowColEnum *) 0 ;
  six::RowColEnum *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RowColEnum___gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RowColEnum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RowColEnum___gt__" "', argument " "1"" of type '" "six::RowColEnum const *""'"); 
  }
  arg1 = reinterpret_cast< six::RowColEnum * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__RowColEnum,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RowColEnum___gt__" "', argument " "2"" of type '" "six::RowColEnum const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RowColEnum___gt__" "', argument " "2"" of type '" "six::RowColEnum const &""'"); 
  }
  arg2 = reinterpret_cast< six::RowColEnum * >(argp2);
  {
    try
    {
      result = (bool)((six::RowColEnum const *)arg1)->operator >((six::RowColEnum const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RowColEnum___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RowColEnum *arg1 = (six::RowColEnum *) 0 ;
  six::RowColEnum *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RowColEnum___le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RowColEnum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RowColEnum___le__" "', argument " "1"" of type '" "six::RowColEnum const *""'"); 
  }
  arg1 = reinterpret_cast< six::RowColEnum * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__RowColEnum,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RowColEnum___le__" "', argument " "2"" of type '" "six::RowColEnum const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RowColEnum___le__" "', argument " "2"" of type '" "six::RowColEnum const &""'"); 
  }
  arg2 = reinterpret_cast< six::RowColEnum * >(argp2);
  {
    try
    {
      result = (bool)((six::RowColEnum const *)arg1)->operator <=((six::RowColEnum const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RowColEnum___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RowColEnum *arg1 = (six::RowColEnum *) 0 ;
  six::RowColEnum *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RowColEnum___ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RowColEnum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RowColEnum___ge__" "', argument " "1"" of type '" "six::RowColEnum const *""'"); 
  }
  arg1 = reinterpret_cast< six::RowColEnum * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__RowColEnum,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RowColEnum___ge__" "', argument " "2"" of type '" "six::RowColEnum const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RowColEnum___ge__" "', argument " "2"" of type '" "six::RowColEnum const &""'"); 
  }
  arg2 = reinterpret_cast< six::RowColEnum * >(argp2);
  {
    try
    {
      result = (bool)((six::RowColEnum const *)arg1)->operator >=((six::RowColEnum const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RowColEnum_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)":RowColEnum_size")) SWIG_fail;
  {
    try
    {
      result = six::RowColEnum::size();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RowColEnum_value_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RowColEnum *arg1 = (six::RowColEnum *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RowColEnum_value_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RowColEnum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RowColEnum_value_set" "', argument " "1"" of type '" "six::RowColEnum *""'"); 
  }
  arg1 = reinterpret_cast< six::RowColEnum * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RowColEnum_value_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      if (arg1) (arg1)->value = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RowColEnum_value_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RowColEnum *arg1 = (six::RowColEnum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RowColEnum_value_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RowColEnum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RowColEnum_value_get" "', argument " "1"" of type '" "six::RowColEnum *""'"); 
  }
  arg1 = reinterpret_cast< six::RowColEnum * >(argp1);
  {
    try
    {
      result = (int) ((arg1)->value);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *RowColEnum_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__RowColEnum, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SCPType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::SCPType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SCPType")) SWIG_fail;
  {
    try
    {
      result = (six::SCPType *)new six::SCPType();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__SCPType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_SCPType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  six::SCPType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SCPType",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_SCPType" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try
    {
      result = (six::SCPType *)new six::SCPType(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__SCPType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_SCPType__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  six::SCPType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SCPType",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SCPType" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      result = (six::SCPType *)new six::SCPType(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__SCPType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_SCPType(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SCPType__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_SCPType__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SCPType__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_SCPType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::SCPType::SCPType()\n"
    "    six::SCPType::SCPType(std::string)\n"
    "    six::SCPType::SCPType(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_SCPType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::SCPType *arg1 = (six::SCPType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SCPType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__SCPType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SCPType" "', argument " "1"" of type '" "six::SCPType *""'"); 
  }
  arg1 = reinterpret_cast< six::SCPType * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SCPType_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::SCPType *arg1 = (six::SCPType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SCPType_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__SCPType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCPType_toString" "', argument " "1"" of type '" "six::SCPType const *""'"); 
  }
  arg1 = reinterpret_cast< six::SCPType * >(argp1);
  {
    try
    {
      result = ((six::SCPType const *)arg1)->toString();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SCPType___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::SCPType *arg1 = (six::SCPType *) 0 ;
  six::SCPType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SCPType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__SCPType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCPType___eq__" "', argument " "1"" of type '" "six::SCPType const *""'"); 
  }
  arg1 = reinterpret_cast< six::SCPType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__SCPType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SCPType___eq__" "', argument " "2"" of type '" "six::SCPType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SCPType___eq__" "', argument " "2"" of type '" "six::SCPType const &""'"); 
  }
  arg2 = reinterpret_cast< six::SCPType * >(argp2);
  {
    try
    {
      result = (bool)((six::SCPType const *)arg1)->operator ==((six::SCPType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SCPType___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::SCPType *arg1 = (six::SCPType *) 0 ;
  six::SCPType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SCPType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__SCPType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCPType___ne__" "', argument " "1"" of type '" "six::SCPType const *""'"); 
  }
  arg1 = reinterpret_cast< six::SCPType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__SCPType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SCPType___ne__" "', argument " "2"" of type '" "six::SCPType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SCPType___ne__" "', argument " "2"" of type '" "six::SCPType const &""'"); 
  }
  arg2 = reinterpret_cast< six::SCPType * >(argp2);
  {
    try
    {
      result = (bool)((six::SCPType const *)arg1)->operator !=((six::SCPType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SCPType___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::SCPType *arg1 = (six::SCPType *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SCPType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__SCPType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCPType___eq__" "', argument " "1"" of type '" "six::SCPType const *""'"); 
  }
  arg1 = reinterpret_cast< six::SCPType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SCPType___eq__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::SCPType const *)arg1)->operator ==((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SCPType___eq__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__SCPType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__SCPType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SCPType___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__SCPType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SCPType___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SCPType___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::SCPType *arg1 = (six::SCPType *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SCPType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__SCPType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCPType___ne__" "', argument " "1"" of type '" "six::SCPType const *""'"); 
  }
  arg1 = reinterpret_cast< six::SCPType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SCPType___ne__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::SCPType const *)arg1)->operator !=((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SCPType___ne__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__SCPType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__SCPType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SCPType___ne____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__SCPType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SCPType___ne____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SCPType___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::SCPType *arg1 = (six::SCPType *) 0 ;
  six::SCPType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SCPType___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__SCPType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCPType___lt__" "', argument " "1"" of type '" "six::SCPType const *""'"); 
  }
  arg1 = reinterpret_cast< six::SCPType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__SCPType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SCPType___lt__" "', argument " "2"" of type '" "six::SCPType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SCPType___lt__" "', argument " "2"" of type '" "six::SCPType const &""'"); 
  }
  arg2 = reinterpret_cast< six::SCPType * >(argp2);
  {
    try
    {
      result = (bool)((six::SCPType const *)arg1)->operator <((six::SCPType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SCPType___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::SCPType *arg1 = (six::SCPType *) 0 ;
  six::SCPType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SCPType___gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__SCPType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCPType___gt__" "', argument " "1"" of type '" "six::SCPType const *""'"); 
  }
  arg1 = reinterpret_cast< six::SCPType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__SCPType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SCPType___gt__" "', argument " "2"" of type '" "six::SCPType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SCPType___gt__" "', argument " "2"" of type '" "six::SCPType const &""'"); 
  }
  arg2 = reinterpret_cast< six::SCPType * >(argp2);
  {
    try
    {
      result = (bool)((six::SCPType const *)arg1)->operator >((six::SCPType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SCPType___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::SCPType *arg1 = (six::SCPType *) 0 ;
  six::SCPType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SCPType___le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__SCPType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCPType___le__" "', argument " "1"" of type '" "six::SCPType const *""'"); 
  }
  arg1 = reinterpret_cast< six::SCPType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__SCPType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SCPType___le__" "', argument " "2"" of type '" "six::SCPType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SCPType___le__" "', argument " "2"" of type '" "six::SCPType const &""'"); 
  }
  arg2 = reinterpret_cast< six::SCPType * >(argp2);
  {
    try
    {
      result = (bool)((six::SCPType const *)arg1)->operator <=((six::SCPType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SCPType___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::SCPType *arg1 = (six::SCPType *) 0 ;
  six::SCPType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SCPType___ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__SCPType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCPType___ge__" "', argument " "1"" of type '" "six::SCPType const *""'"); 
  }
  arg1 = reinterpret_cast< six::SCPType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__SCPType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SCPType___ge__" "', argument " "2"" of type '" "six::SCPType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SCPType___ge__" "', argument " "2"" of type '" "six::SCPType const &""'"); 
  }
  arg2 = reinterpret_cast< six::SCPType * >(argp2);
  {
    try
    {
      result = (bool)((six::SCPType const *)arg1)->operator >=((six::SCPType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SCPType_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)":SCPType_size")) SWIG_fail;
  {
    try
    {
      result = six::SCPType::size();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SCPType_value_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::SCPType *arg1 = (six::SCPType *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SCPType_value_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__SCPType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCPType_value_set" "', argument " "1"" of type '" "six::SCPType *""'"); 
  }
  arg1 = reinterpret_cast< six::SCPType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SCPType_value_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      if (arg1) (arg1)->value = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SCPType_value_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::SCPType *arg1 = (six::SCPType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SCPType_value_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__SCPType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCPType_value_get" "', argument " "1"" of type '" "six::SCPType *""'"); 
  }
  arg1 = reinterpret_cast< six::SCPType * >(argp1);
  {
    try
    {
      result = (int) ((arg1)->value);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *SCPType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__SCPType, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SideOfTrackType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::SideOfTrackType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SideOfTrackType")) SWIG_fail;
  {
    try
    {
      result = (six::SideOfTrackType *)new six::SideOfTrackType();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__SideOfTrackType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_SideOfTrackType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  six::SideOfTrackType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SideOfTrackType",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_SideOfTrackType" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try
    {
      result = (six::SideOfTrackType *)new six::SideOfTrackType(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__SideOfTrackType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_SideOfTrackType__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  six::SideOfTrackType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SideOfTrackType",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SideOfTrackType" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      result = (six::SideOfTrackType *)new six::SideOfTrackType(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__SideOfTrackType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_SideOfTrackType(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SideOfTrackType__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_SideOfTrackType__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SideOfTrackType__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_SideOfTrackType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::SideOfTrackType::SideOfTrackType()\n"
    "    six::SideOfTrackType::SideOfTrackType(std::string)\n"
    "    six::SideOfTrackType::SideOfTrackType(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_SideOfTrackType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::SideOfTrackType *arg1 = (six::SideOfTrackType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SideOfTrackType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__SideOfTrackType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SideOfTrackType" "', argument " "1"" of type '" "six::SideOfTrackType *""'"); 
  }
  arg1 = reinterpret_cast< six::SideOfTrackType * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SideOfTrackType_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::SideOfTrackType *arg1 = (six::SideOfTrackType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SideOfTrackType_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__SideOfTrackType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SideOfTrackType_toString" "', argument " "1"" of type '" "six::SideOfTrackType const *""'"); 
  }
  arg1 = reinterpret_cast< six::SideOfTrackType * >(argp1);
  {
    try
    {
      result = ((six::SideOfTrackType const *)arg1)->toString();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SideOfTrackType___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::SideOfTrackType *arg1 = (six::SideOfTrackType *) 0 ;
  six::SideOfTrackType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SideOfTrackType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__SideOfTrackType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SideOfTrackType___eq__" "', argument " "1"" of type '" "six::SideOfTrackType const *""'"); 
  }
  arg1 = reinterpret_cast< six::SideOfTrackType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__SideOfTrackType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SideOfTrackType___eq__" "', argument " "2"" of type '" "six::SideOfTrackType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SideOfTrackType___eq__" "', argument " "2"" of type '" "six::SideOfTrackType const &""'"); 
  }
  arg2 = reinterpret_cast< six::SideOfTrackType * >(argp2);
  {
    try
    {
      result = (bool)((six::SideOfTrackType const *)arg1)->operator ==((six::SideOfTrackType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SideOfTrackType___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::SideOfTrackType *arg1 = (six::SideOfTrackType *) 0 ;
  six::SideOfTrackType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SideOfTrackType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__SideOfTrackType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SideOfTrackType___ne__" "', argument " "1"" of type '" "six::SideOfTrackType const *""'"); 
  }
  arg1 = reinterpret_cast< six::SideOfTrackType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__SideOfTrackType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SideOfTrackType___ne__" "', argument " "2"" of type '" "six::SideOfTrackType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SideOfTrackType___ne__" "', argument " "2"" of type '" "six::SideOfTrackType const &""'"); 
  }
  arg2 = reinterpret_cast< six::SideOfTrackType * >(argp2);
  {
    try
    {
      result = (bool)((six::SideOfTrackType const *)arg1)->operator !=((six::SideOfTrackType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SideOfTrackType___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::SideOfTrackType *arg1 = (six::SideOfTrackType *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SideOfTrackType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__SideOfTrackType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SideOfTrackType___eq__" "', argument " "1"" of type '" "six::SideOfTrackType const *""'"); 
  }
  arg1 = reinterpret_cast< six::SideOfTrackType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SideOfTrackType___eq__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::SideOfTrackType const *)arg1)->operator ==((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SideOfTrackType___eq__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__SideOfTrackType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__SideOfTrackType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SideOfTrackType___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__SideOfTrackType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SideOfTrackType___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SideOfTrackType___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::SideOfTrackType *arg1 = (six::SideOfTrackType *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SideOfTrackType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__SideOfTrackType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SideOfTrackType___ne__" "', argument " "1"" of type '" "six::SideOfTrackType const *""'"); 
  }
  arg1 = reinterpret_cast< six::SideOfTrackType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SideOfTrackType___ne__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::SideOfTrackType const *)arg1)->operator !=((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SideOfTrackType___ne__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__SideOfTrackType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__SideOfTrackType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SideOfTrackType___ne____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__SideOfTrackType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SideOfTrackType___ne____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SideOfTrackType___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::SideOfTrackType *arg1 = (six::SideOfTrackType *) 0 ;
  six::SideOfTrackType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SideOfTrackType___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__SideOfTrackType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SideOfTrackType___lt__" "', argument " "1"" of type '" "six::SideOfTrackType const *""'"); 
  }
  arg1 = reinterpret_cast< six::SideOfTrackType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__SideOfTrackType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SideOfTrackType___lt__" "', argument " "2"" of type '" "six::SideOfTrackType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SideOfTrackType___lt__" "', argument " "2"" of type '" "six::SideOfTrackType const &""'"); 
  }
  arg2 = reinterpret_cast< six::SideOfTrackType * >(argp2);
  {
    try
    {
      result = (bool)((six::SideOfTrackType const *)arg1)->operator <((six::SideOfTrackType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SideOfTrackType___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::SideOfTrackType *arg1 = (six::SideOfTrackType *) 0 ;
  six::SideOfTrackType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SideOfTrackType___gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__SideOfTrackType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SideOfTrackType___gt__" "', argument " "1"" of type '" "six::SideOfTrackType const *""'"); 
  }
  arg1 = reinterpret_cast< six::SideOfTrackType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__SideOfTrackType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SideOfTrackType___gt__" "', argument " "2"" of type '" "six::SideOfTrackType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SideOfTrackType___gt__" "', argument " "2"" of type '" "six::SideOfTrackType const &""'"); 
  }
  arg2 = reinterpret_cast< six::SideOfTrackType * >(argp2);
  {
    try
    {
      result = (bool)((six::SideOfTrackType const *)arg1)->operator >((six::SideOfTrackType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SideOfTrackType___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::SideOfTrackType *arg1 = (six::SideOfTrackType *) 0 ;
  six::SideOfTrackType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SideOfTrackType___le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__SideOfTrackType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SideOfTrackType___le__" "', argument " "1"" of type '" "six::SideOfTrackType const *""'"); 
  }
  arg1 = reinterpret_cast< six::SideOfTrackType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__SideOfTrackType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SideOfTrackType___le__" "', argument " "2"" of type '" "six::SideOfTrackType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SideOfTrackType___le__" "', argument " "2"" of type '" "six::SideOfTrackType const &""'"); 
  }
  arg2 = reinterpret_cast< six::SideOfTrackType * >(argp2);
  {
    try
    {
      result = (bool)((six::SideOfTrackType const *)arg1)->operator <=((six::SideOfTrackType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SideOfTrackType___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::SideOfTrackType *arg1 = (six::SideOfTrackType *) 0 ;
  six::SideOfTrackType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SideOfTrackType___ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__SideOfTrackType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SideOfTrackType___ge__" "', argument " "1"" of type '" "six::SideOfTrackType const *""'"); 
  }
  arg1 = reinterpret_cast< six::SideOfTrackType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__SideOfTrackType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SideOfTrackType___ge__" "', argument " "2"" of type '" "six::SideOfTrackType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SideOfTrackType___ge__" "', argument " "2"" of type '" "six::SideOfTrackType const &""'"); 
  }
  arg2 = reinterpret_cast< six::SideOfTrackType * >(argp2);
  {
    try
    {
      result = (bool)((six::SideOfTrackType const *)arg1)->operator >=((six::SideOfTrackType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SideOfTrackType_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)":SideOfTrackType_size")) SWIG_fail;
  {
    try
    {
      result = six::SideOfTrackType::size();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SideOfTrackType_value_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::SideOfTrackType *arg1 = (six::SideOfTrackType *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SideOfTrackType_value_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__SideOfTrackType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SideOfTrackType_value_set" "', argument " "1"" of type '" "six::SideOfTrackType *""'"); 
  }
  arg1 = reinterpret_cast< six::SideOfTrackType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SideOfTrackType_value_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      if (arg1) (arg1)->value = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SideOfTrackType_value_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::SideOfTrackType *arg1 = (six::SideOfTrackType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SideOfTrackType_value_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__SideOfTrackType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SideOfTrackType_value_get" "', argument " "1"" of type '" "six::SideOfTrackType *""'"); 
  }
  arg1 = reinterpret_cast< six::SideOfTrackType * >(argp1);
  {
    try
    {
      result = (int) ((arg1)->value);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *SideOfTrackType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__SideOfTrackType, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SlowTimeBeamCompensationType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::SlowTimeBeamCompensationType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SlowTimeBeamCompensationType")) SWIG_fail;
  {
    try
    {
      result = (six::SlowTimeBeamCompensationType *)new six::SlowTimeBeamCompensationType();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__SlowTimeBeamCompensationType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_SlowTimeBeamCompensationType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  six::SlowTimeBeamCompensationType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SlowTimeBeamCompensationType",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_SlowTimeBeamCompensationType" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try
    {
      result = (six::SlowTimeBeamCompensationType *)new six::SlowTimeBeamCompensationType(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__SlowTimeBeamCompensationType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_SlowTimeBeamCompensationType__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  six::SlowTimeBeamCompensationType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SlowTimeBeamCompensationType",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SlowTimeBeamCompensationType" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      result = (six::SlowTimeBeamCompensationType *)new six::SlowTimeBeamCompensationType(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__SlowTimeBeamCompensationType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_SlowTimeBeamCompensationType(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SlowTimeBeamCompensationType__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_SlowTimeBeamCompensationType__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SlowTimeBeamCompensationType__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_SlowTimeBeamCompensationType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::SlowTimeBeamCompensationType::SlowTimeBeamCompensationType()\n"
    "    six::SlowTimeBeamCompensationType::SlowTimeBeamCompensationType(std::string)\n"
    "    six::SlowTimeBeamCompensationType::SlowTimeBeamCompensationType(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_SlowTimeBeamCompensationType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::SlowTimeBeamCompensationType *arg1 = (six::SlowTimeBeamCompensationType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SlowTimeBeamCompensationType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__SlowTimeBeamCompensationType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SlowTimeBeamCompensationType" "', argument " "1"" of type '" "six::SlowTimeBeamCompensationType *""'"); 
  }
  arg1 = reinterpret_cast< six::SlowTimeBeamCompensationType * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SlowTimeBeamCompensationType_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::SlowTimeBeamCompensationType *arg1 = (six::SlowTimeBeamCompensationType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SlowTimeBeamCompensationType_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__SlowTimeBeamCompensationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SlowTimeBeamCompensationType_toString" "', argument " "1"" of type '" "six::SlowTimeBeamCompensationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::SlowTimeBeamCompensationType * >(argp1);
  {
    try
    {
      result = ((six::SlowTimeBeamCompensationType const *)arg1)->toString();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SlowTimeBeamCompensationType___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::SlowTimeBeamCompensationType *arg1 = (six::SlowTimeBeamCompensationType *) 0 ;
  six::SlowTimeBeamCompensationType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SlowTimeBeamCompensationType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__SlowTimeBeamCompensationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SlowTimeBeamCompensationType___eq__" "', argument " "1"" of type '" "six::SlowTimeBeamCompensationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::SlowTimeBeamCompensationType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__SlowTimeBeamCompensationType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SlowTimeBeamCompensationType___eq__" "', argument " "2"" of type '" "six::SlowTimeBeamCompensationType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SlowTimeBeamCompensationType___eq__" "', argument " "2"" of type '" "six::SlowTimeBeamCompensationType const &""'"); 
  }
  arg2 = reinterpret_cast< six::SlowTimeBeamCompensationType * >(argp2);
  {
    try
    {
      result = (bool)((six::SlowTimeBeamCompensationType const *)arg1)->operator ==((six::SlowTimeBeamCompensationType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SlowTimeBeamCompensationType___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::SlowTimeBeamCompensationType *arg1 = (six::SlowTimeBeamCompensationType *) 0 ;
  six::SlowTimeBeamCompensationType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SlowTimeBeamCompensationType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__SlowTimeBeamCompensationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SlowTimeBeamCompensationType___ne__" "', argument " "1"" of type '" "six::SlowTimeBeamCompensationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::SlowTimeBeamCompensationType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__SlowTimeBeamCompensationType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SlowTimeBeamCompensationType___ne__" "', argument " "2"" of type '" "six::SlowTimeBeamCompensationType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SlowTimeBeamCompensationType___ne__" "', argument " "2"" of type '" "six::SlowTimeBeamCompensationType const &""'"); 
  }
  arg2 = reinterpret_cast< six::SlowTimeBeamCompensationType * >(argp2);
  {
    try
    {
      result = (bool)((six::SlowTimeBeamCompensationType const *)arg1)->operator !=((six::SlowTimeBeamCompensationType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SlowTimeBeamCompensationType___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::SlowTimeBeamCompensationType *arg1 = (six::SlowTimeBeamCompensationType *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SlowTimeBeamCompensationType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__SlowTimeBeamCompensationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SlowTimeBeamCompensationType___eq__" "', argument " "1"" of type '" "six::SlowTimeBeamCompensationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::SlowTimeBeamCompensationType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SlowTimeBeamCompensationType___eq__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::SlowTimeBeamCompensationType const *)arg1)->operator ==((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SlowTimeBeamCompensationType___eq__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__SlowTimeBeamCompensationType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__SlowTimeBeamCompensationType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SlowTimeBeamCompensationType___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__SlowTimeBeamCompensationType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SlowTimeBeamCompensationType___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SlowTimeBeamCompensationType___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::SlowTimeBeamCompensationType *arg1 = (six::SlowTimeBeamCompensationType *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SlowTimeBeamCompensationType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__SlowTimeBeamCompensationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SlowTimeBeamCompensationType___ne__" "', argument " "1"" of type '" "six::SlowTimeBeamCompensationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::SlowTimeBeamCompensationType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SlowTimeBeamCompensationType___ne__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::SlowTimeBeamCompensationType const *)arg1)->operator !=((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SlowTimeBeamCompensationType___ne__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__SlowTimeBeamCompensationType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__SlowTimeBeamCompensationType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SlowTimeBeamCompensationType___ne____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__SlowTimeBeamCompensationType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SlowTimeBeamCompensationType___ne____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SlowTimeBeamCompensationType___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::SlowTimeBeamCompensationType *arg1 = (six::SlowTimeBeamCompensationType *) 0 ;
  six::SlowTimeBeamCompensationType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SlowTimeBeamCompensationType___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__SlowTimeBeamCompensationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SlowTimeBeamCompensationType___lt__" "', argument " "1"" of type '" "six::SlowTimeBeamCompensationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::SlowTimeBeamCompensationType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__SlowTimeBeamCompensationType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SlowTimeBeamCompensationType___lt__" "', argument " "2"" of type '" "six::SlowTimeBeamCompensationType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SlowTimeBeamCompensationType___lt__" "', argument " "2"" of type '" "six::SlowTimeBeamCompensationType const &""'"); 
  }
  arg2 = reinterpret_cast< six::SlowTimeBeamCompensationType * >(argp2);
  {
    try
    {
      result = (bool)((six::SlowTimeBeamCompensationType const *)arg1)->operator <((six::SlowTimeBeamCompensationType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SlowTimeBeamCompensationType___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::SlowTimeBeamCompensationType *arg1 = (six::SlowTimeBeamCompensationType *) 0 ;
  six::SlowTimeBeamCompensationType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SlowTimeBeamCompensationType___gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__SlowTimeBeamCompensationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SlowTimeBeamCompensationType___gt__" "', argument " "1"" of type '" "six::SlowTimeBeamCompensationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::SlowTimeBeamCompensationType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__SlowTimeBeamCompensationType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SlowTimeBeamCompensationType___gt__" "', argument " "2"" of type '" "six::SlowTimeBeamCompensationType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SlowTimeBeamCompensationType___gt__" "', argument " "2"" of type '" "six::SlowTimeBeamCompensationType const &""'"); 
  }
  arg2 = reinterpret_cast< six::SlowTimeBeamCompensationType * >(argp2);
  {
    try
    {
      result = (bool)((six::SlowTimeBeamCompensationType const *)arg1)->operator >((six::SlowTimeBeamCompensationType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SlowTimeBeamCompensationType___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::SlowTimeBeamCompensationType *arg1 = (six::SlowTimeBeamCompensationType *) 0 ;
  six::SlowTimeBeamCompensationType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SlowTimeBeamCompensationType___le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__SlowTimeBeamCompensationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SlowTimeBeamCompensationType___le__" "', argument " "1"" of type '" "six::SlowTimeBeamCompensationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::SlowTimeBeamCompensationType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__SlowTimeBeamCompensationType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SlowTimeBeamCompensationType___le__" "', argument " "2"" of type '" "six::SlowTimeBeamCompensationType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SlowTimeBeamCompensationType___le__" "', argument " "2"" of type '" "six::SlowTimeBeamCompensationType const &""'"); 
  }
  arg2 = reinterpret_cast< six::SlowTimeBeamCompensationType * >(argp2);
  {
    try
    {
      result = (bool)((six::SlowTimeBeamCompensationType const *)arg1)->operator <=((six::SlowTimeBeamCompensationType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SlowTimeBeamCompensationType___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::SlowTimeBeamCompensationType *arg1 = (six::SlowTimeBeamCompensationType *) 0 ;
  six::SlowTimeBeamCompensationType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SlowTimeBeamCompensationType___ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__SlowTimeBeamCompensationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SlowTimeBeamCompensationType___ge__" "', argument " "1"" of type '" "six::SlowTimeBeamCompensationType const *""'"); 
  }
  arg1 = reinterpret_cast< six::SlowTimeBeamCompensationType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__SlowTimeBeamCompensationType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SlowTimeBeamCompensationType___ge__" "', argument " "2"" of type '" "six::SlowTimeBeamCompensationType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SlowTimeBeamCompensationType___ge__" "', argument " "2"" of type '" "six::SlowTimeBeamCompensationType const &""'"); 
  }
  arg2 = reinterpret_cast< six::SlowTimeBeamCompensationType * >(argp2);
  {
    try
    {
      result = (bool)((six::SlowTimeBeamCompensationType const *)arg1)->operator >=((six::SlowTimeBeamCompensationType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SlowTimeBeamCompensationType_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)":SlowTimeBeamCompensationType_size")) SWIG_fail;
  {
    try
    {
      result = six::SlowTimeBeamCompensationType::size();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SlowTimeBeamCompensationType_value_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::SlowTimeBeamCompensationType *arg1 = (six::SlowTimeBeamCompensationType *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SlowTimeBeamCompensationType_value_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__SlowTimeBeamCompensationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SlowTimeBeamCompensationType_value_set" "', argument " "1"" of type '" "six::SlowTimeBeamCompensationType *""'"); 
  }
  arg1 = reinterpret_cast< six::SlowTimeBeamCompensationType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SlowTimeBeamCompensationType_value_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      if (arg1) (arg1)->value = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SlowTimeBeamCompensationType_value_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::SlowTimeBeamCompensationType *arg1 = (six::SlowTimeBeamCompensationType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SlowTimeBeamCompensationType_value_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__SlowTimeBeamCompensationType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SlowTimeBeamCompensationType_value_get" "', argument " "1"" of type '" "six::SlowTimeBeamCompensationType *""'"); 
  }
  arg1 = reinterpret_cast< six::SlowTimeBeamCompensationType * >(argp1);
  {
    try
    {
      result = (int) ((arg1)->value);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *SlowTimeBeamCompensationType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__SlowTimeBeamCompensationType, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_XYZEnum__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::XYZEnum *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_XYZEnum")) SWIG_fail;
  {
    try
    {
      result = (six::XYZEnum *)new six::XYZEnum();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__XYZEnum, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_XYZEnum__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  six::XYZEnum *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_XYZEnum",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_XYZEnum" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try
    {
      result = (six::XYZEnum *)new six::XYZEnum(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__XYZEnum, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_XYZEnum__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  six::XYZEnum *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_XYZEnum",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_XYZEnum" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try
    {
      result = (six::XYZEnum *)new six::XYZEnum(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__XYZEnum, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_XYZEnum(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_XYZEnum__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_XYZEnum__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_XYZEnum__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_XYZEnum'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::XYZEnum::XYZEnum()\n"
    "    six::XYZEnum::XYZEnum(std::string)\n"
    "    six::XYZEnum::XYZEnum(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_XYZEnum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::XYZEnum *arg1 = (six::XYZEnum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_XYZEnum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__XYZEnum, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_XYZEnum" "', argument " "1"" of type '" "six::XYZEnum *""'"); 
  }
  arg1 = reinterpret_cast< six::XYZEnum * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_XYZEnum_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::XYZEnum *arg1 = (six::XYZEnum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:XYZEnum_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__XYZEnum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XYZEnum_toString" "', argument " "1"" of type '" "six::XYZEnum const *""'"); 
  }
  arg1 = reinterpret_cast< six::XYZEnum * >(argp1);
  {
    try
    {
      result = ((six::XYZEnum const *)arg1)->toString();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_XYZEnum___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::XYZEnum *arg1 = (six::XYZEnum *) 0 ;
  six::XYZEnum *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:XYZEnum___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__XYZEnum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XYZEnum___eq__" "', argument " "1"" of type '" "six::XYZEnum const *""'"); 
  }
  arg1 = reinterpret_cast< six::XYZEnum * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__XYZEnum,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XYZEnum___eq__" "', argument " "2"" of type '" "six::XYZEnum const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XYZEnum___eq__" "', argument " "2"" of type '" "six::XYZEnum const &""'"); 
  }
  arg2 = reinterpret_cast< six::XYZEnum * >(argp2);
  {
    try
    {
      result = (bool)((six::XYZEnum const *)arg1)->operator ==((six::XYZEnum const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_XYZEnum___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::XYZEnum *arg1 = (six::XYZEnum *) 0 ;
  six::XYZEnum *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:XYZEnum___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__XYZEnum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XYZEnum___ne__" "', argument " "1"" of type '" "six::XYZEnum const *""'"); 
  }
  arg1 = reinterpret_cast< six::XYZEnum * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__XYZEnum,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XYZEnum___ne__" "', argument " "2"" of type '" "six::XYZEnum const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XYZEnum___ne__" "', argument " "2"" of type '" "six::XYZEnum const &""'"); 
  }
  arg2 = reinterpret_cast< six::XYZEnum * >(argp2);
  {
    try
    {
      result = (bool)((six::XYZEnum const *)arg1)->operator !=((six::XYZEnum const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_XYZEnum___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::XYZEnum *arg1 = (six::XYZEnum *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:XYZEnum___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__XYZEnum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XYZEnum___eq__" "', argument " "1"" of type '" "six::XYZEnum const *""'"); 
  }
  arg1 = reinterpret_cast< six::XYZEnum * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XYZEnum___eq__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::XYZEnum const *)arg1)->operator ==((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_XYZEnum___eq__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__XYZEnum, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__XYZEnum, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_XYZEnum___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__XYZEnum, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_XYZEnum___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_XYZEnum___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::XYZEnum *arg1 = (six::XYZEnum *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:XYZEnum___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__XYZEnum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XYZEnum___ne__" "', argument " "1"" of type '" "six::XYZEnum const *""'"); 
  }
  arg1 = reinterpret_cast< six::XYZEnum * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XYZEnum___ne__" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  {
    try
    {
      result = (bool)((six::XYZEnum const *)arg1)->operator !=((int const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_XYZEnum___ne__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__XYZEnum, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__XYZEnum, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_XYZEnum___ne____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__XYZEnum, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_XYZEnum___ne____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_XYZEnum___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::XYZEnum *arg1 = (six::XYZEnum *) 0 ;
  six::XYZEnum *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:XYZEnum___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__XYZEnum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XYZEnum___lt__" "', argument " "1"" of type '" "six::XYZEnum const *""'"); 
  }
  arg1 = reinterpret_cast< six::XYZEnum * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__XYZEnum,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XYZEnum___lt__" "', argument " "2"" of type '" "six::XYZEnum const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XYZEnum___lt__" "', argument " "2"" of type '" "six::XYZEnum const &""'"); 
  }
  arg2 = reinterpret_cast< six::XYZEnum * >(argp2);
  {
    try
    {
      result = (bool)((six::XYZEnum const *)arg1)->operator <((six::XYZEnum const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_XYZEnum___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::XYZEnum *arg1 = (six::XYZEnum *) 0 ;
  six::XYZEnum *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:XYZEnum___gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__XYZEnum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XYZEnum___gt__" "', argument " "1"" of type '" "six::XYZEnum const *""'"); 
  }
  arg1 = reinterpret_cast< six::XYZEnum * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__XYZEnum,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XYZEnum___gt__" "', argument " "2"" of type '" "six::XYZEnum const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XYZEnum___gt__" "', argument " "2"" of type '" "six::XYZEnum const &""'"); 
  }
  arg2 = reinterpret_cast< six::XYZEnum * >(argp2);
  {
    try
    {
      result = (bool)((six::XYZEnum const *)arg1)->operator >((six::XYZEnum const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_XYZEnum___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::XYZEnum *arg1 = (six::XYZEnum *) 0 ;
  six::XYZEnum *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:XYZEnum___le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__XYZEnum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XYZEnum___le__" "', argument " "1"" of type '" "six::XYZEnum const *""'"); 
  }
  arg1 = reinterpret_cast< six::XYZEnum * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__XYZEnum,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XYZEnum___le__" "', argument " "2"" of type '" "six::XYZEnum const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XYZEnum___le__" "', argument " "2"" of type '" "six::XYZEnum const &""'"); 
  }
  arg2 = reinterpret_cast< six::XYZEnum * >(argp2);
  {
    try
    {
      result = (bool)((six::XYZEnum const *)arg1)->operator <=((six::XYZEnum const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_XYZEnum___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::XYZEnum *arg1 = (six::XYZEnum *) 0 ;
  six::XYZEnum *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:XYZEnum___ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__XYZEnum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XYZEnum___ge__" "', argument " "1"" of type '" "six::XYZEnum const *""'"); 
  }
  arg1 = reinterpret_cast< six::XYZEnum * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__XYZEnum,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XYZEnum___ge__" "', argument " "2"" of type '" "six::XYZEnum const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XYZEnum___ge__" "', argument " "2"" of type '" "six::XYZEnum const &""'"); 
  }
  arg2 = reinterpret_cast< six::XYZEnum * >(argp2);
  {
    try
    {
      result = (bool)((six::XYZEnum const *)arg1)->operator >=((six::XYZEnum const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_XYZEnum_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)":XYZEnum_size")) SWIG_fail;
  {
    try
    {
      result = six::XYZEnum::size();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_XYZEnum_value_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::XYZEnum *arg1 = (six::XYZEnum *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:XYZEnum_value_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__XYZEnum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XYZEnum_value_set" "', argument " "1"" of type '" "six::XYZEnum *""'"); 
  }
  arg1 = reinterpret_cast< six::XYZEnum * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XYZEnum_value_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      if (arg1) (arg1)->value = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_XYZEnum_value_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::XYZEnum *arg1 = (six::XYZEnum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:XYZEnum_value_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__XYZEnum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XYZEnum_value_get" "', argument " "1"" of type '" "six::XYZEnum *""'"); 
  }
  arg1 = reinterpret_cast< six::XYZEnum * >(argp1);
  {
    try
    {
      result = (int) ((arg1)->value);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *XYZEnum_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__XYZEnum, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_SCHEMA_PATH_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SCHEMA_PATH is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SCHEMA_PATH_get(void) {
  PyObject *pyobj = 0;
  
  {
    try
    {
      pyobj = SWIG_FromCharPtr(six::SCHEMA_PATH);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  return pyobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_DESValidationException__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DESValidationException *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DESValidationException")) SWIG_fail;
  {
    try
    {
      result = (six::DESValidationException *)new six::DESValidationException();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__DESValidationException, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_DESValidationException__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  except::Context *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::DESValidationException *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DESValidationException",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_except__Context,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DESValidationException" "', argument " "1"" of type '" "except::Context const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DESValidationException" "', argument " "1"" of type '" "except::Context const &""'"); 
  }
  arg1 = reinterpret_cast< except::Context * >(argp1);
  {
    try
    {
      result = (six::DESValidationException *)new six::DESValidationException((except::Context const &)*arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__DESValidationException, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_DESValidationException__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  six::DESValidationException *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DESValidationException",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DESValidationException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DESValidationException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try
    {
      result = (six::DESValidationException *)new six::DESValidationException((std::string const &)*arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__DESValidationException, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_DESValidationException__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  except::Throwable *arg1 = 0 ;
  except::Context *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  six::DESValidationException *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_DESValidationException",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_except__Throwable,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DESValidationException" "', argument " "1"" of type '" "except::Throwable const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DESValidationException" "', argument " "1"" of type '" "except::Throwable const &""'"); 
  }
  arg1 = reinterpret_cast< except::Throwable * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_except__Context,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_DESValidationException" "', argument " "2"" of type '" "except::Context const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DESValidationException" "', argument " "2"" of type '" "except::Context const &""'"); 
  }
  arg2 = reinterpret_cast< except::Context * >(argp2);
  {
    try
    {
      result = (six::DESValidationException *)new six::DESValidationException((except::Throwable const &)*arg1,(except::Context const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__DESValidationException, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_DESValidationException(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DESValidationException__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_except__Context, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DESValidationException__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DESValidationException__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_except__Throwable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_except__Context, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_DESValidationException__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DESValidationException'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::DESValidationException::DESValidationException()\n"
    "    six::DESValidationException::DESValidationException(except::Context const &)\n"
    "    six::DESValidationException::DESValidationException(std::string const &)\n"
    "    six::DESValidationException::DESValidationException(except::Throwable const &,except::Context const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_DESValidationException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DESValidationException *arg1 = (six::DESValidationException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DESValidationException",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DESValidationException, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DESValidationException" "', argument " "1"" of type '" "six::DESValidationException *""'"); 
  }
  arg1 = reinterpret_cast< six::DESValidationException * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DESValidationException_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DESValidationException *arg1 = (six::DESValidationException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DESValidationException_getType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DESValidationException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DESValidationException_getType" "', argument " "1"" of type '" "six::DESValidationException const *""'"); 
  }
  arg1 = reinterpret_cast< six::DESValidationException * >(argp1);
  {
    try
    {
      result = ((six::DESValidationException const *)arg1)->getType();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *DESValidationException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__DESValidationException, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DecorrType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  six::DecorrType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_DecorrType",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DecorrType" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DecorrType" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      result = (six::DecorrType *)new six::DecorrType(arg1,arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__DecorrType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_DecorrType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  six::DecorrType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DecorrType",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DecorrType" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try
    {
      result = (six::DecorrType *)new six::DecorrType(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__DecorrType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_DecorrType__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DecorrType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DecorrType")) SWIG_fail;
  {
    try
    {
      result = (six::DecorrType *)new six::DecorrType();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__DecorrType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_DecorrType__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DecorrType *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::DecorrType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DecorrType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_six__DecorrType,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DecorrType" "', argument " "1"" of type '" "six::DecorrType const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DecorrType" "', argument " "1"" of type '" "six::DecorrType const &""'"); 
  }
  arg1 = reinterpret_cast< six::DecorrType * >(argp1);
  {
    try
    {
      result = (six::DecorrType *)new six::DecorrType((six::DecorrType const &)*arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__DecorrType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_DecorrType(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DecorrType__SWIG_2(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_six__DecorrType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DecorrType__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_DecorrType__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_DecorrType__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DecorrType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::DecorrType::DecorrType(double,double)\n"
    "    six::DecorrType::DecorrType(double)\n"
    "    six::DecorrType::DecorrType()\n"
    "    six::DecorrType::DecorrType(six::DecorrType const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DecorrType___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DecorrType *arg1 = (six::DecorrType *) 0 ;
  six::DecorrType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecorrType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DecorrType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecorrType___eq__" "', argument " "1"" of type '" "six::DecorrType const *""'"); 
  }
  arg1 = reinterpret_cast< six::DecorrType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__DecorrType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecorrType___eq__" "', argument " "2"" of type '" "six::DecorrType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecorrType___eq__" "', argument " "2"" of type '" "six::DecorrType const &""'"); 
  }
  arg2 = reinterpret_cast< six::DecorrType * >(argp2);
  {
    try
    {
      result = (bool)((six::DecorrType const *)arg1)->operator ==((six::DecorrType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DecorrType_corrCoefZero_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DecorrType *arg1 = (six::DecorrType *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecorrType_corrCoefZero_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DecorrType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecorrType_corrCoefZero_set" "', argument " "1"" of type '" "six::DecorrType *""'"); 
  }
  arg1 = reinterpret_cast< six::DecorrType * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DecorrType_corrCoefZero_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (arg1)->corrCoefZero = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DecorrType_corrCoefZero_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DecorrType *arg1 = (six::DecorrType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DecorrType_corrCoefZero_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DecorrType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecorrType_corrCoefZero_get" "', argument " "1"" of type '" "six::DecorrType *""'"); 
  }
  arg1 = reinterpret_cast< six::DecorrType * >(argp1);
  {
    try
    {
      result = (double) ((arg1)->corrCoefZero);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DecorrType_decorrRate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DecorrType *arg1 = (six::DecorrType *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecorrType_decorrRate_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DecorrType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecorrType_decorrRate_set" "', argument " "1"" of type '" "six::DecorrType *""'"); 
  }
  arg1 = reinterpret_cast< six::DecorrType * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DecorrType_decorrRate_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (arg1)->decorrRate = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_DecorrType_decorrRate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DecorrType *arg1 = (six::DecorrType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DecorrType_decorrRate_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DecorrType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecorrType_decorrRate_get" "', argument " "1"" of type '" "six::DecorrType *""'"); 
  }
  arg1 = reinterpret_cast< six::DecorrType * >(argp1);
  {
    try
    {
      result = (double) ((arg1)->decorrRate);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_delete_DecorrType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DecorrType *arg1 = (six::DecorrType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DecorrType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__DecorrType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DecorrType" "', argument " "1"" of type '" "six::DecorrType *""'"); 
  }
  arg1 = reinterpret_cast< six::DecorrType * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *DecorrType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__DecorrType, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_Constants_IS_SIZE_MAX_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Constants_IS_SIZE_MAX is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Constants_IS_SIZE_MAX_get(void) {
  PyObject *pyobj = 0;
  
  {
    try
    {
      pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&six::Constants::IS_SIZE_MAX), SWIGTYPE_p_uint64_t,  0 );
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  return pyobj;
fail:
  return nullptr;
}


SWIGINTERN int Swig_var_Constants_GT_SIZE_MAX_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Constants_GT_SIZE_MAX is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Constants_GT_SIZE_MAX_get(void) {
  PyObject *pyobj = 0;
  
  {
    try
    {
      pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&six::Constants::GT_SIZE_MAX), SWIGTYPE_p_uint64_t,  0 );
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  return pyobj;
fail:
  return nullptr;
}


SWIGINTERN int Swig_var_Constants_ILOC_MAX_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Constants_ILOC_MAX is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Constants_ILOC_MAX_get(void) {
  PyObject *pyobj = 0;
  
  {
    try
    {
      pyobj = SWIG_From_size_t(static_cast< size_t >(six::Constants::ILOC_MAX));
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  return pyobj;
fail:
  return nullptr;
}


SWIGINTERN int Swig_var_Constants_GT_XML_KEY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Constants_GT_XML_KEY is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Constants_GT_XML_KEY_get(void) {
  PyObject *pyobj = 0;
  
  {
    try
    {
      pyobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(six::Constants::GT_XML_KEY));
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  return pyobj;
fail:
  return nullptr;
}


SWIGINTERN int Swig_var_Constants_GT_XML_TAG_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Constants_GT_XML_TAG is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Constants_GT_XML_TAG_get(void) {
  PyObject *pyobj = 0;
  
  {
    try
    {
      pyobj = SWIG_FromCharPtr(six::Constants::GT_XML_TAG);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  return pyobj;
fail:
  return nullptr;
}


SWIGINTERN int Swig_var_Constants_DES_VERSION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Constants_DES_VERSION is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Constants_DES_VERSION_get(void) {
  PyObject *pyobj = 0;
  
  {
    try
    {
      pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&six::Constants::DES_VERSION), SWIGTYPE_p_int32_t,  0 );
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  return pyobj;
fail:
  return nullptr;
}


SWIGINTERN int Swig_var_Constants_DES_VERSION_STR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Constants_DES_VERSION_STR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Constants_DES_VERSION_STR_get(void) {
  PyObject *pyobj = 0;
  
  {
    try
    {
      pyobj = SWIG_FromCharPtr(six::Constants::DES_VERSION_STR);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  return pyobj;
fail:
  return nullptr;
}


SWIGINTERN int Swig_var_Constants_DES_USER_DEFINED_SUBHEADER_TAG_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Constants_DES_USER_DEFINED_SUBHEADER_TAG is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Constants_DES_USER_DEFINED_SUBHEADER_TAG_get(void) {
  PyObject *pyobj = 0;
  
  {
    try
    {
      pyobj = SWIG_FromCharPtr(six::Constants::DES_USER_DEFINED_SUBHEADER_TAG);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  return pyobj;
fail:
  return nullptr;
}


SWIGINTERN int Swig_var_Constants_DES_USER_DEFINED_SUBHEADER_ID_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Constants_DES_USER_DEFINED_SUBHEADER_ID is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Constants_DES_USER_DEFINED_SUBHEADER_ID_get(void) {
  PyObject *pyobj = 0;
  
  {
    try
    {
      pyobj = SWIG_FromCharPtr(six::Constants::DES_USER_DEFINED_SUBHEADER_ID);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  return pyobj;
fail:
  return nullptr;
}


SWIGINTERN int Swig_var_Constants_DES_USER_DEFINED_SUBHEADER_LENGTH_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Constants_DES_USER_DEFINED_SUBHEADER_LENGTH is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Constants_DES_USER_DEFINED_SUBHEADER_LENGTH_get(void) {
  PyObject *pyobj = 0;
  
  {
    try
    {
      pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&six::Constants::DES_USER_DEFINED_SUBHEADER_LENGTH), SWIGTYPE_p_uint64_t,  0 );
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  return pyobj;
fail:
  return nullptr;
}


SWIGINTERN int Swig_var_Constants_SICD_DESSHSI_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Constants_SICD_DESSHSI is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Constants_SICD_DESSHSI_get(void) {
  PyObject *pyobj = 0;
  
  {
    try
    {
      pyobj = SWIG_FromCharPtr(six::Constants::SICD_DESSHSI);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  return pyobj;
fail:
  return nullptr;
}


SWIGINTERN int Swig_var_Constants_SIDD_DESSHSI_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Constants_SIDD_DESSHSI is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Constants_SIDD_DESSHSI_get(void) {
  PyObject *pyobj = 0;
  
  {
    try
    {
      pyobj = SWIG_FromCharPtr(six::Constants::SIDD_DESSHSI);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  return pyobj;
fail:
  return nullptr;
}


SWIGINTERN int Swig_var_Constants_EXCESS_BANDWIDTH_FACTOR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Constants_EXCESS_BANDWIDTH_FACTOR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Constants_EXCESS_BANDWIDTH_FACTOR_get(void) {
  PyObject *pyobj = 0;
  
  {
    try
    {
      pyobj = SWIG_From_double(static_cast< double >(six::Constants::EXCESS_BANDWIDTH_FACTOR));
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  return pyobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Constants_getNumBytesPerPixel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PixelType arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Constants_getNumBytesPerPixel",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_six__PixelType,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Constants_getNumBytesPerPixel" "', argument " "1"" of type '" "six::PixelType""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Constants_getNumBytesPerPixel" "', argument " "1"" of type '" "six::PixelType""'");
    } else {
      six::PixelType * temp = reinterpret_cast< six::PixelType * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try
    {
      result = (int)six::Constants::getNumBytesPerPixel(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_Constants(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Constants *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Constants")) SWIG_fail;
  {
    try
    {
      result = (six::Constants *)new six::Constants();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__Constants, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_delete_Constants(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Constants *arg1 = (six::Constants *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Constants",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Constants, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Constants" "', argument " "1"" of type '" "six::Constants *""'"); 
  }
  arg1 = reinterpret_cast< six::Constants * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *Constants_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__Constants, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ReferencePoint_ecef_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ReferencePoint *arg1 = (six::ReferencePoint *) 0 ;
  six::Vector3 *arg2 = (six::Vector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ReferencePoint_ecef_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ReferencePoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReferencePoint_ecef_set" "', argument " "1"" of type '" "six::ReferencePoint *""'"); 
  }
  arg1 = reinterpret_cast< six::ReferencePoint * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__linear__VectorNT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ReferencePoint_ecef_set" "', argument " "2"" of type '" "six::Vector3 *""'"); 
  }
  arg2 = reinterpret_cast< six::Vector3 * >(argp2);
  {
    try
    {
      if (arg1) (arg1)->ecef = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ReferencePoint_ecef_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ReferencePoint *arg1 = (six::ReferencePoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Vector3 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ReferencePoint_ecef_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ReferencePoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReferencePoint_ecef_get" "', argument " "1"" of type '" "six::ReferencePoint *""'"); 
  }
  arg1 = reinterpret_cast< six::ReferencePoint * >(argp1);
  {
    try
    {
      result = (six::Vector3 *)& ((arg1)->ecef);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__linear__VectorNT_3_double_t, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ReferencePoint_rowCol_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ReferencePoint *arg1 = (six::ReferencePoint *) 0 ;
  six::RowColDouble *arg2 = (six::RowColDouble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ReferencePoint_rowCol_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ReferencePoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReferencePoint_rowCol_set" "', argument " "1"" of type '" "six::ReferencePoint *""'"); 
  }
  arg1 = reinterpret_cast< six::ReferencePoint * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_types__RowColT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ReferencePoint_rowCol_set" "', argument " "2"" of type '" "six::RowColDouble *""'"); 
  }
  arg2 = reinterpret_cast< six::RowColDouble * >(argp2);
  {
    try
    {
      if (arg1) (arg1)->rowCol = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ReferencePoint_rowCol_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ReferencePoint *arg1 = (six::ReferencePoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::RowColDouble *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ReferencePoint_rowCol_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ReferencePoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReferencePoint_rowCol_get" "', argument " "1"" of type '" "six::ReferencePoint *""'"); 
  }
  arg1 = reinterpret_cast< six::ReferencePoint * >(argp1);
  {
    try
    {
      result = (six::RowColDouble *)& ((arg1)->rowCol);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_types__RowColT_double_t, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ReferencePoint_name_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ReferencePoint *arg1 = (six::ReferencePoint *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ReferencePoint_name_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ReferencePoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReferencePoint_name_set" "', argument " "1"" of type '" "six::ReferencePoint *""'"); 
  }
  arg1 = reinterpret_cast< six::ReferencePoint * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ReferencePoint_name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ReferencePoint_name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try
    {
      if (arg1) (arg1)->name = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ReferencePoint_name_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ReferencePoint *arg1 = (six::ReferencePoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ReferencePoint_name_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ReferencePoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReferencePoint_name_get" "', argument " "1"" of type '" "six::ReferencePoint *""'"); 
  }
  arg1 = reinterpret_cast< six::ReferencePoint * >(argp1);
  {
    try
    {
      result = (std::string *) & ((arg1)->name);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ReferencePoint__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  six::ReferencePoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_ReferencePoint",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ReferencePoint" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ReferencePoint" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ReferencePoint" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ReferencePoint" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ReferencePoint" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try
    {
      result = (six::ReferencePoint *)new six::ReferencePoint(arg1,arg2,arg3,arg4,arg5);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__ReferencePoint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ReferencePoint__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  six::ReferencePoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_ReferencePoint",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ReferencePoint" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ReferencePoint" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ReferencePoint" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ReferencePoint" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try
    {
      result = (six::ReferencePoint *)new six::ReferencePoint(arg1,arg2,arg3,arg4);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__ReferencePoint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ReferencePoint__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  six::ReferencePoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ReferencePoint",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ReferencePoint" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ReferencePoint" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ReferencePoint" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try
    {
      result = (six::ReferencePoint *)new six::ReferencePoint(arg1,arg2,arg3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__ReferencePoint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ReferencePoint__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  six::ReferencePoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ReferencePoint",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ReferencePoint" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ReferencePoint" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      result = (six::ReferencePoint *)new six::ReferencePoint(arg1,arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__ReferencePoint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ReferencePoint__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  six::ReferencePoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ReferencePoint",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ReferencePoint" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try
    {
      result = (six::ReferencePoint *)new six::ReferencePoint(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__ReferencePoint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ReferencePoint__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ReferencePoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ReferencePoint")) SWIG_fail;
  {
    try
    {
      result = (six::ReferencePoint *)new six::ReferencePoint();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__ReferencePoint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ReferencePoint__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Vector3 arg1 ;
  six::RowColDouble arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  six::ReferencePoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ReferencePoint",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_math__linear__VectorNT_3_double_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ReferencePoint" "', argument " "1"" of type '" "six::Vector3""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ReferencePoint" "', argument " "1"" of type '" "six::Vector3""'");
    } else {
      six::Vector3 * temp = reinterpret_cast< six::Vector3 * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_types__RowColT_double_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ReferencePoint" "', argument " "2"" of type '" "six::RowColDouble""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ReferencePoint" "', argument " "2"" of type '" "six::RowColDouble""'");
    } else {
      six::RowColDouble * temp = reinterpret_cast< six::RowColDouble * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try
    {
      result = (six::ReferencePoint *)new six::ReferencePoint(arg1,arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__ReferencePoint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ReferencePoint(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ReferencePoint__SWIG_5(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ReferencePoint__SWIG_4(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_math__linear__VectorNT_3_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_types__RowColT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ReferencePoint__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ReferencePoint__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], nullptr);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_ReferencePoint__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], nullptr);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], nullptr);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_ReferencePoint__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], nullptr);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], nullptr);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], nullptr);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_ReferencePoint__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ReferencePoint'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::ReferencePoint::ReferencePoint(double,double,double,double,double)\n"
    "    six::ReferencePoint::ReferencePoint(double,double,double,double)\n"
    "    six::ReferencePoint::ReferencePoint(double,double,double)\n"
    "    six::ReferencePoint::ReferencePoint(double,double)\n"
    "    six::ReferencePoint::ReferencePoint(double)\n"
    "    six::ReferencePoint::ReferencePoint()\n"
    "    six::ReferencePoint::ReferencePoint(six::Vector3,six::RowColDouble)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ReferencePoint___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ReferencePoint *arg1 = (six::ReferencePoint *) 0 ;
  six::ReferencePoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ReferencePoint___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ReferencePoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReferencePoint___eq__" "', argument " "1"" of type '" "six::ReferencePoint const *""'"); 
  }
  arg1 = reinterpret_cast< six::ReferencePoint * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__ReferencePoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ReferencePoint___eq__" "', argument " "2"" of type '" "six::ReferencePoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ReferencePoint___eq__" "', argument " "2"" of type '" "six::ReferencePoint const &""'"); 
  }
  arg2 = reinterpret_cast< six::ReferencePoint * >(argp2);
  {
    try
    {
      result = (bool)((six::ReferencePoint const *)arg1)->operator ==((six::ReferencePoint const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ReferencePoint___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ReferencePoint *arg1 = (six::ReferencePoint *) 0 ;
  six::ReferencePoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ReferencePoint___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ReferencePoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReferencePoint___ne__" "', argument " "1"" of type '" "six::ReferencePoint const *""'"); 
  }
  arg1 = reinterpret_cast< six::ReferencePoint * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__ReferencePoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ReferencePoint___ne__" "', argument " "2"" of type '" "six::ReferencePoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ReferencePoint___ne__" "', argument " "2"" of type '" "six::ReferencePoint const &""'"); 
  }
  arg2 = reinterpret_cast< six::ReferencePoint * >(argp2);
  {
    try
    {
      result = (bool)((six::ReferencePoint const *)arg1)->operator !=((six::ReferencePoint const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_delete_ReferencePoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ReferencePoint *arg1 = (six::ReferencePoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ReferencePoint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ReferencePoint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ReferencePoint" "', argument " "1"" of type '" "six::ReferencePoint *""'"); 
  }
  arg1 = reinterpret_cast< six::ReferencePoint * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *ReferencePoint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__ReferencePoint, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SCP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::SCP *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SCP")) SWIG_fail;
  {
    try
    {
      result = (six::SCP *)new six::SCP();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__SCP, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SCP_ecf_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::SCP *arg1 = (six::SCP *) 0 ;
  six::Vector3 *arg2 = (six::Vector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SCP_ecf_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__SCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCP_ecf_set" "', argument " "1"" of type '" "six::SCP *""'"); 
  }
  arg1 = reinterpret_cast< six::SCP * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__linear__VectorNT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SCP_ecf_set" "', argument " "2"" of type '" "six::Vector3 *""'"); 
  }
  arg2 = reinterpret_cast< six::Vector3 * >(argp2);
  {
    try
    {
      if (arg1) (arg1)->ecf = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SCP_ecf_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::SCP *arg1 = (six::SCP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Vector3 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SCP_ecf_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__SCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCP_ecf_get" "', argument " "1"" of type '" "six::SCP *""'"); 
  }
  arg1 = reinterpret_cast< six::SCP * >(argp1);
  {
    try
    {
      result = (six::Vector3 *)& ((arg1)->ecf);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__linear__VectorNT_3_double_t, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SCP_llh_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::SCP *arg1 = (six::SCP *) 0 ;
  six::LatLonAlt *arg2 = (six::LatLonAlt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SCP_llh_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__SCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCP_llh_set" "', argument " "1"" of type '" "six::SCP *""'"); 
  }
  arg1 = reinterpret_cast< six::SCP * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_scene__LatLonAlt, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SCP_llh_set" "', argument " "2"" of type '" "six::LatLonAlt *""'"); 
  }
  arg2 = reinterpret_cast< six::LatLonAlt * >(argp2);
  {
    try
    {
      if (arg1) (arg1)->llh = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SCP_llh_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::SCP *arg1 = (six::SCP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::LatLonAlt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SCP_llh_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__SCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCP_llh_get" "', argument " "1"" of type '" "six::SCP *""'"); 
  }
  arg1 = reinterpret_cast< six::SCP * >(argp1);
  {
    try
    {
      result = (six::LatLonAlt *)& ((arg1)->llh);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_scene__LatLonAlt, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SCP___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::SCP *arg1 = (six::SCP *) 0 ;
  six::SCP *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SCP___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__SCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCP___eq__" "', argument " "1"" of type '" "six::SCP const *""'"); 
  }
  arg1 = reinterpret_cast< six::SCP * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__SCP,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SCP___eq__" "', argument " "2"" of type '" "six::SCP const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SCP___eq__" "', argument " "2"" of type '" "six::SCP const &""'"); 
  }
  arg2 = reinterpret_cast< six::SCP * >(argp2);
  {
    try
    {
      result = (bool)((six::SCP const *)arg1)->operator ==((six::SCP const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_SCP___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::SCP *arg1 = (six::SCP *) 0 ;
  six::SCP *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SCP___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__SCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCP___ne__" "', argument " "1"" of type '" "six::SCP const *""'"); 
  }
  arg1 = reinterpret_cast< six::SCP * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__SCP,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SCP___ne__" "', argument " "2"" of type '" "six::SCP const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SCP___ne__" "', argument " "2"" of type '" "six::SCP const &""'"); 
  }
  arg2 = reinterpret_cast< six::SCP * >(argp2);
  {
    try
    {
      result = (bool)((six::SCP const *)arg1)->operator !=((six::SCP const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_delete_SCP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::SCP *arg1 = (six::SCP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SCP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__SCP, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SCP" "', argument " "1"" of type '" "six::SCP *""'"); 
  }
  arg1 = reinterpret_cast< six::SCP * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *SCP_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__SCP, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_AmplitudeTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::AmplitudeTable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_AmplitudeTable")) SWIG_fail;
  {
    try
    {
      result = (six::AmplitudeTable *)new six::AmplitudeTable();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__AmplitudeTable, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_AmplitudeTable___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::AmplitudeTable *arg1 = (six::AmplitudeTable *) 0 ;
  six::AmplitudeTable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AmplitudeTable___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__AmplitudeTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmplitudeTable___eq__" "', argument " "1"" of type '" "six::AmplitudeTable const *""'"); 
  }
  arg1 = reinterpret_cast< six::AmplitudeTable * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__AmplitudeTable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AmplitudeTable___eq__" "', argument " "2"" of type '" "six::AmplitudeTable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AmplitudeTable___eq__" "', argument " "2"" of type '" "six::AmplitudeTable const &""'"); 
  }
  arg2 = reinterpret_cast< six::AmplitudeTable * >(argp2);
  {
    try
    {
      result = (bool)((six::AmplitudeTable const *)arg1)->operator ==((six::AmplitudeTable const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_AmplitudeTable___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::AmplitudeTable *arg1 = (six::AmplitudeTable *) 0 ;
  six::AmplitudeTable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AmplitudeTable___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__AmplitudeTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmplitudeTable___ne__" "', argument " "1"" of type '" "six::AmplitudeTable const *""'"); 
  }
  arg1 = reinterpret_cast< six::AmplitudeTable * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__AmplitudeTable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AmplitudeTable___ne__" "', argument " "2"" of type '" "six::AmplitudeTable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AmplitudeTable___ne__" "', argument " "2"" of type '" "six::AmplitudeTable const &""'"); 
  }
  arg2 = reinterpret_cast< six::AmplitudeTable * >(argp2);
  {
    try
    {
      result = (bool)((six::AmplitudeTable const *)arg1)->operator !=((six::AmplitudeTable const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_AmplitudeTable_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::AmplitudeTable *arg1 = (six::AmplitudeTable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::AmplitudeTable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmplitudeTable_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__AmplitudeTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmplitudeTable_clone" "', argument " "1"" of type '" "six::AmplitudeTable const *""'"); 
  }
  arg1 = reinterpret_cast< six::AmplitudeTable * >(argp1);
  {
    try
    {
      result = (six::AmplitudeTable *)((six::AmplitudeTable const *)arg1)->clone();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__AmplitudeTable, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_delete_AmplitudeTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::AmplitudeTable *arg1 = (six::AmplitudeTable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AmplitudeTable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__AmplitudeTable, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AmplitudeTable" "', argument " "1"" of type '" "six::AmplitudeTable *""'"); 
  }
  arg1 = reinterpret_cast< six::AmplitudeTable * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *AmplitudeTable_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__AmplitudeTable, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_getImageMode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RadarModeType arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::ImageMode result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:getImageMode",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_six__RadarModeType,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getImageMode" "', argument " "1"" of type '" "six::RadarModeType""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getImageMode" "', argument " "1"" of type '" "six::RadarModeType""'");
    } else {
      six::RadarModeType * temp = reinterpret_cast< six::RadarModeType * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try
    {
      result = (six::ImageMode)six::getImageMode(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_MissingRequiredException__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MissingRequiredException *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_MissingRequiredException")) SWIG_fail;
  {
    try
    {
      result = (six::MissingRequiredException *)new six::MissingRequiredException();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__MissingRequiredException, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_MissingRequiredException__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  except::Context *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::MissingRequiredException *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MissingRequiredException",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_except__Context,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MissingRequiredException" "', argument " "1"" of type '" "except::Context const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MissingRequiredException" "', argument " "1"" of type '" "except::Context const &""'"); 
  }
  arg1 = reinterpret_cast< except::Context * >(argp1);
  {
    try
    {
      result = (six::MissingRequiredException *)new six::MissingRequiredException((except::Context const &)*arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__MissingRequiredException, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_MissingRequiredException__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  six::MissingRequiredException *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MissingRequiredException",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MissingRequiredException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MissingRequiredException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try
    {
      result = (six::MissingRequiredException *)new six::MissingRequiredException((std::string const &)*arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__MissingRequiredException, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_MissingRequiredException__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  except::Throwable *arg1 = 0 ;
  except::Context *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  six::MissingRequiredException *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_MissingRequiredException",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_except__Throwable,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MissingRequiredException" "', argument " "1"" of type '" "except::Throwable const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MissingRequiredException" "', argument " "1"" of type '" "except::Throwable const &""'"); 
  }
  arg1 = reinterpret_cast< except::Throwable * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_except__Context,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_MissingRequiredException" "', argument " "2"" of type '" "except::Context const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MissingRequiredException" "', argument " "2"" of type '" "except::Context const &""'"); 
  }
  arg2 = reinterpret_cast< except::Context * >(argp2);
  {
    try
    {
      result = (six::MissingRequiredException *)new six::MissingRequiredException((except::Throwable const &)*arg1,(except::Context const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__MissingRequiredException, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_MissingRequiredException(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_MissingRequiredException__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_except__Context, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MissingRequiredException__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MissingRequiredException__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_except__Throwable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_except__Context, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_MissingRequiredException__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_MissingRequiredException'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::MissingRequiredException::MissingRequiredException()\n"
    "    six::MissingRequiredException::MissingRequiredException(except::Context const &)\n"
    "    six::MissingRequiredException::MissingRequiredException(std::string const &)\n"
    "    six::MissingRequiredException::MissingRequiredException(except::Throwable const &,except::Context const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_MissingRequiredException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MissingRequiredException *arg1 = (six::MissingRequiredException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MissingRequiredException",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__MissingRequiredException, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MissingRequiredException" "', argument " "1"" of type '" "six::MissingRequiredException *""'"); 
  }
  arg1 = reinterpret_cast< six::MissingRequiredException * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_MissingRequiredException_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MissingRequiredException *arg1 = (six::MissingRequiredException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MissingRequiredException_getType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__MissingRequiredException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MissingRequiredException_getType" "', argument " "1"" of type '" "six::MissingRequiredException const *""'"); 
  }
  arg1 = reinterpret_cast< six::MissingRequiredException * >(argp1);
  {
    try
    {
      result = ((six::MissingRequiredException const *)arg1)->getType();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *MissingRequiredException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__MissingRequiredException, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_UninitializedValueException__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::UninitializedValueException *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_UninitializedValueException")) SWIG_fail;
  {
    try
    {
      result = (six::UninitializedValueException *)new six::UninitializedValueException();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__UninitializedValueException, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_UninitializedValueException__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  except::Context *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::UninitializedValueException *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_UninitializedValueException",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_except__Context,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_UninitializedValueException" "', argument " "1"" of type '" "except::Context const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UninitializedValueException" "', argument " "1"" of type '" "except::Context const &""'"); 
  }
  arg1 = reinterpret_cast< except::Context * >(argp1);
  {
    try
    {
      result = (six::UninitializedValueException *)new six::UninitializedValueException((except::Context const &)*arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__UninitializedValueException, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_UninitializedValueException__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  six::UninitializedValueException *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_UninitializedValueException",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_UninitializedValueException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UninitializedValueException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try
    {
      result = (six::UninitializedValueException *)new six::UninitializedValueException((std::string const &)*arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__UninitializedValueException, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_UninitializedValueException__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  except::Throwable *arg1 = 0 ;
  except::Context *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  six::UninitializedValueException *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_UninitializedValueException",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_except__Throwable,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_UninitializedValueException" "', argument " "1"" of type '" "except::Throwable const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UninitializedValueException" "', argument " "1"" of type '" "except::Throwable const &""'"); 
  }
  arg1 = reinterpret_cast< except::Throwable * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_except__Context,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_UninitializedValueException" "', argument " "2"" of type '" "except::Context const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UninitializedValueException" "', argument " "2"" of type '" "except::Context const &""'"); 
  }
  arg2 = reinterpret_cast< except::Context * >(argp2);
  {
    try
    {
      result = (six::UninitializedValueException *)new six::UninitializedValueException((except::Throwable const &)*arg1,(except::Context const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__UninitializedValueException, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_UninitializedValueException(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_UninitializedValueException__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_except__Context, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_UninitializedValueException__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_UninitializedValueException__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_except__Throwable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_except__Context, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_UninitializedValueException__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_UninitializedValueException'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::UninitializedValueException::UninitializedValueException()\n"
    "    six::UninitializedValueException::UninitializedValueException(except::Context const &)\n"
    "    six::UninitializedValueException::UninitializedValueException(std::string const &)\n"
    "    six::UninitializedValueException::UninitializedValueException(except::Throwable const &,except::Context const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_UninitializedValueException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::UninitializedValueException *arg1 = (six::UninitializedValueException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_UninitializedValueException",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__UninitializedValueException, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UninitializedValueException" "', argument " "1"" of type '" "six::UninitializedValueException *""'"); 
  }
  arg1 = reinterpret_cast< six::UninitializedValueException * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_UninitializedValueException_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::UninitializedValueException *arg1 = (six::UninitializedValueException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UninitializedValueException_getType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__UninitializedValueException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UninitializedValueException_getType" "', argument " "1"" of type '" "six::UninitializedValueException const *""'"); 
  }
  arg1 = reinterpret_cast< six::UninitializedValueException * >(argp1);
  {
    try
    {
      result = ((six::UninitializedValueException const *)arg1)->getType();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *UninitializedValueException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__UninitializedValueException, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Init(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Init *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Init")) SWIG_fail;
  {
    try
    {
      result = (six::Init *)new six::Init();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__Init, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_delete_Init(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Init *arg1 = (six::Init *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Init",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Init, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Init" "', argument " "1"" of type '" "six::Init *""'"); 
  }
  arg1 = reinterpret_cast< six::Init * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *Init_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__Init, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Parameter__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Parameter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Parameter")) SWIG_fail;
  {
    try
    {
      result = (six::Parameter *)new six::Parameter();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__Parameter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_delete_Parameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Parameter *arg1 = (six::Parameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Parameter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Parameter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Parameter" "', argument " "1"" of type '" "six::Parameter *""'"); 
  }
  arg1 = reinterpret_cast< six::Parameter * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_Parameter__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Parameter *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Parameter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Parameter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_six__Parameter,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Parameter" "', argument " "1"" of type '" "six::Parameter const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Parameter" "', argument " "1"" of type '" "six::Parameter const &""'"); 
  }
  arg1 = reinterpret_cast< six::Parameter * >(argp1);
  {
    try
    {
      result = (six::Parameter *)new six::Parameter((six::Parameter const &)*arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__Parameter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_Parameter(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Parameter__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_six__Parameter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Parameter__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Parameter'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::Parameter::Parameter()\n"
    "    six::Parameter::Parameter(six::Parameter const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Parameter_str(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Parameter *arg1 = (six::Parameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Parameter_str",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Parameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Parameter_str" "', argument " "1"" of type '" "six::Parameter const *""'"); 
  }
  arg1 = reinterpret_cast< six::Parameter * >(argp1);
  {
    try
    {
      result = ((six::Parameter const *)arg1)->str();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Parameter_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Parameter *arg1 = (six::Parameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Parameter_getName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Parameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Parameter_getName" "', argument " "1"" of type '" "six::Parameter const *""'"); 
  }
  arg1 = reinterpret_cast< six::Parameter * >(argp1);
  {
    try
    {
      result = ((six::Parameter const *)arg1)->getName();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Parameter_setName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Parameter *arg1 = (six::Parameter *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Parameter_setName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Parameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Parameter_setName" "', argument " "1"" of type '" "six::Parameter *""'"); 
  }
  arg1 = reinterpret_cast< six::Parameter * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Parameter_setName" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try
    {
      (arg1)->setName(arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Parameter___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Parameter *arg1 = (six::Parameter *) 0 ;
  six::Parameter *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Parameter___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Parameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Parameter___eq__" "', argument " "1"" of type '" "six::Parameter const *""'"); 
  }
  arg1 = reinterpret_cast< six::Parameter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__Parameter,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Parameter___eq__" "', argument " "2"" of type '" "six::Parameter const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Parameter___eq__" "', argument " "2"" of type '" "six::Parameter const &""'"); 
  }
  arg2 = reinterpret_cast< six::Parameter * >(argp2);
  {
    try
    {
      result = (bool)((six::Parameter const *)arg1)->operator ==((six::Parameter const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Parameter___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Parameter *arg1 = (six::Parameter *) 0 ;
  six::Parameter *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Parameter___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Parameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Parameter___ne__" "', argument " "1"" of type '" "six::Parameter const *""'"); 
  }
  arg1 = reinterpret_cast< six::Parameter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__Parameter,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Parameter___ne__" "', argument " "2"" of type '" "six::Parameter const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Parameter___ne__" "', argument " "2"" of type '" "six::Parameter const &""'"); 
  }
  arg2 = reinterpret_cast< six::Parameter * >(argp2);
  {
    try
    {
      result = (bool)((six::Parameter const *)arg1)->operator !=((six::Parameter const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Parameter_setValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Parameter *arg1 = (six::Parameter *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Parameter_setValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Parameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Parameter_setValue" "', argument " "1"" of type '" "six::Parameter *""'"); 
  }
  arg1 = reinterpret_cast< six::Parameter * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Parameter_setValue" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Parameter_setValue" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try
    {
      six_Parameter_setValue(arg1,(std::string const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Parameter___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Parameter *arg1 = (six::Parameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Parameter___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Parameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Parameter___str__" "', argument " "1"" of type '" "six::Parameter *""'"); 
  }
  arg1 = reinterpret_cast< six::Parameter * >(argp1);
  {
    try
    {
      result = six_Parameter___str__(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Parameter___int__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Parameter *arg1 = (six::Parameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Parameter___int__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Parameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Parameter___int__" "', argument " "1"" of type '" "six::Parameter *""'"); 
  }
  arg1 = reinterpret_cast< six::Parameter * >(argp1);
  {
    try
    {
      result = (long)six_Parameter___int__(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Parameter___float__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Parameter *arg1 = (six::Parameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Parameter___float__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Parameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Parameter___float__" "', argument " "1"" of type '" "six::Parameter *""'"); 
  }
  arg1 = reinterpret_cast< six::Parameter * >(argp1);
  {
    try
    {
      result = (double)six_Parameter___float__(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *Parameter_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__Parameter, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ParameterCollection_findParameterIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ParameterCollection *arg1 = (six::ParameterCollection *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParameterCollection_findParameterIndex",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ParameterCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParameterCollection_findParameterIndex" "', argument " "1"" of type '" "six::ParameterCollection const *""'"); 
  }
  arg1 = reinterpret_cast< six::ParameterCollection * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParameterCollection_findParameterIndex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ParameterCollection_findParameterIndex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try
    {
      result = ((six::ParameterCollection const *)arg1)->findParameterIndex((std::string const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ParameterCollection_findParameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ParameterCollection *arg1 = (six::ParameterCollection *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  six::Parameter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParameterCollection_findParameter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ParameterCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParameterCollection_findParameter" "', argument " "1"" of type '" "six::ParameterCollection const *""'"); 
  }
  arg1 = reinterpret_cast< six::ParameterCollection * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParameterCollection_findParameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ParameterCollection_findParameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try
    {
      result = (six::Parameter *) &((six::ParameterCollection const *)arg1)->findParameter((std::string const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__Parameter, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ParameterCollection_containsParameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ParameterCollection *arg1 = (six::ParameterCollection *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParameterCollection_containsParameter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ParameterCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParameterCollection_containsParameter" "', argument " "1"" of type '" "six::ParameterCollection const *""'"); 
  }
  arg1 = reinterpret_cast< six::ParameterCollection * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParameterCollection_containsParameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ParameterCollection_containsParameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try
    {
      result = (bool)((six::ParameterCollection const *)arg1)->containsParameter((std::string const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ParameterCollection_at__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ParameterCollection *arg1 = (six::ParameterCollection *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  six::Parameter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParameterCollection_at",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ParameterCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParameterCollection_at" "', argument " "1"" of type '" "six::ParameterCollection *""'"); 
  }
  arg1 = reinterpret_cast< six::ParameterCollection * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ParameterCollection_at" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      result = (six::Parameter *) &(arg1)->at(arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__Parameter, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ParameterCollection_at__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ParameterCollection *arg1 = (six::ParameterCollection *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  six::Parameter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParameterCollection_at",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ParameterCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParameterCollection_at" "', argument " "1"" of type '" "six::ParameterCollection const *""'"); 
  }
  arg1 = reinterpret_cast< six::ParameterCollection * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ParameterCollection_at" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      result = (six::Parameter *) &((six::ParameterCollection const *)arg1)->at(arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__Parameter, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ParameterCollection_at(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__ParameterCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ParameterCollection_at__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__ParameterCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ParameterCollection_at__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ParameterCollection_at'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::ParameterCollection::at(size_t)\n"
    "    six::ParameterCollection::at(size_t) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ParameterCollection_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ParameterCollection *arg1 = (six::ParameterCollection *) 0 ;
  six::Parameter *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParameterCollection_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ParameterCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParameterCollection_push_back" "', argument " "1"" of type '" "six::ParameterCollection *""'"); 
  }
  arg1 = reinterpret_cast< six::ParameterCollection * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__Parameter,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParameterCollection_push_back" "', argument " "2"" of type '" "six::Parameter const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ParameterCollection_push_back" "', argument " "2"" of type '" "six::Parameter const &""'"); 
  }
  arg2 = reinterpret_cast< six::Parameter * >(argp2);
  {
    try
    {
      (arg1)->push_back((six::Parameter const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ParameterCollection_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ParameterCollection *arg1 = (six::ParameterCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParameterCollection_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ParameterCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParameterCollection_size" "', argument " "1"" of type '" "six::ParameterCollection const *""'"); 
  }
  arg1 = reinterpret_cast< six::ParameterCollection * >(argp1);
  {
    try
    {
      result = ((six::ParameterCollection const *)arg1)->size();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ParameterCollection_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ParameterCollection *arg1 = (six::ParameterCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParameterCollection_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ParameterCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParameterCollection_empty" "', argument " "1"" of type '" "six::ParameterCollection const *""'"); 
  }
  arg1 = reinterpret_cast< six::ParameterCollection * >(argp1);
  {
    try
    {
      result = (bool)((six::ParameterCollection const *)arg1)->empty();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ParameterCollection_front__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ParameterCollection *arg1 = (six::ParameterCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Parameter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParameterCollection_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ParameterCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParameterCollection_front" "', argument " "1"" of type '" "six::ParameterCollection const *""'"); 
  }
  arg1 = reinterpret_cast< six::ParameterCollection * >(argp1);
  {
    try
    {
      result = (six::Parameter *) &((six::ParameterCollection const *)arg1)->front();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__Parameter, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ParameterCollection_back__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ParameterCollection *arg1 = (six::ParameterCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Parameter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParameterCollection_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ParameterCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParameterCollection_back" "', argument " "1"" of type '" "six::ParameterCollection const *""'"); 
  }
  arg1 = reinterpret_cast< six::ParameterCollection * >(argp1);
  {
    try
    {
      result = (six::Parameter *) &((six::ParameterCollection const *)arg1)->back();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__Parameter, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ParameterCollection_front__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ParameterCollection *arg1 = (six::ParameterCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Parameter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParameterCollection_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ParameterCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParameterCollection_front" "', argument " "1"" of type '" "six::ParameterCollection *""'"); 
  }
  arg1 = reinterpret_cast< six::ParameterCollection * >(argp1);
  {
    try
    {
      result = (six::Parameter *) &(arg1)->front();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__Parameter, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ParameterCollection_front(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__ParameterCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ParameterCollection_front__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__ParameterCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ParameterCollection_front__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ParameterCollection_front'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::ParameterCollection::front() const\n"
    "    six::ParameterCollection::front()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ParameterCollection_back__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ParameterCollection *arg1 = (six::ParameterCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Parameter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParameterCollection_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ParameterCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParameterCollection_back" "', argument " "1"" of type '" "six::ParameterCollection *""'"); 
  }
  arg1 = reinterpret_cast< six::ParameterCollection * >(argp1);
  {
    try
    {
      result = (six::Parameter *) &(arg1)->back();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__Parameter, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ParameterCollection_back(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__ParameterCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ParameterCollection_back__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__ParameterCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ParameterCollection_back__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ParameterCollection_back'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::ParameterCollection::back() const\n"
    "    six::ParameterCollection::back()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ParameterCollection___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ParameterCollection *arg1 = (six::ParameterCollection *) 0 ;
  six::ParameterCollection *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParameterCollection___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ParameterCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParameterCollection___eq__" "', argument " "1"" of type '" "six::ParameterCollection const *""'"); 
  }
  arg1 = reinterpret_cast< six::ParameterCollection * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__ParameterCollection,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParameterCollection___eq__" "', argument " "2"" of type '" "six::ParameterCollection const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ParameterCollection___eq__" "', argument " "2"" of type '" "six::ParameterCollection const &""'"); 
  }
  arg2 = reinterpret_cast< six::ParameterCollection * >(argp2);
  {
    try
    {
      result = (bool)((six::ParameterCollection const *)arg1)->operator ==((six::ParameterCollection const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ParameterCollection___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ParameterCollection *arg1 = (six::ParameterCollection *) 0 ;
  six::ParameterCollection *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParameterCollection___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ParameterCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParameterCollection___ne__" "', argument " "1"" of type '" "six::ParameterCollection const *""'"); 
  }
  arg1 = reinterpret_cast< six::ParameterCollection * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__ParameterCollection,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParameterCollection___ne__" "', argument " "2"" of type '" "six::ParameterCollection const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ParameterCollection___ne__" "', argument " "2"" of type '" "six::ParameterCollection const &""'"); 
  }
  arg2 = reinterpret_cast< six::ParameterCollection * >(argp2);
  {
    try
    {
      result = (bool)((six::ParameterCollection const *)arg1)->operator !=((six::ParameterCollection const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ParameterCollection___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ParameterCollection *arg1 = (six::ParameterCollection *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  six::Parameter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParameterCollection___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ParameterCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParameterCollection___getitem__" "', argument " "1"" of type '" "six::ParameterCollection *""'"); 
  }
  arg1 = reinterpret_cast< six::ParameterCollection * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ParameterCollection___getitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      result = (six::Parameter *) &six_ParameterCollection___getitem__(arg1,arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__Parameter, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ParameterCollection___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ParameterCollection *arg1 = (six::ParameterCollection *) 0 ;
  size_t arg2 ;
  six::Parameter *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ParameterCollection___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ParameterCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParameterCollection___setitem__" "', argument " "1"" of type '" "six::ParameterCollection *""'"); 
  }
  arg1 = reinterpret_cast< six::ParameterCollection * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ParameterCollection___setitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_six__Parameter,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ParameterCollection___setitem__" "', argument " "3"" of type '" "six::Parameter const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ParameterCollection___setitem__" "', argument " "3"" of type '" "six::Parameter const &""'"); 
  }
  arg3 = reinterpret_cast< six::Parameter * >(argp3);
  {
    try
    {
      six_ParameterCollection___setitem__(arg1,arg2,(six::Parameter const &)*arg3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ParameterCollection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ParameterCollection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ParameterCollection")) SWIG_fail;
  {
    try
    {
      result = (six::ParameterCollection *)new six::ParameterCollection();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__ParameterCollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_delete_ParameterCollection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ParameterCollection *arg1 = (six::ParameterCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ParameterCollection",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ParameterCollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ParameterCollection" "', argument " "1"" of type '" "six::ParameterCollection *""'"); 
  }
  arg1 = reinterpret_cast< six::ParameterCollection * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *ParameterCollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__ParameterCollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CollectionInformation_collectorName_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CollectionInformation *arg1 = (six::CollectionInformation *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CollectionInformation_collectorName_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CollectionInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionInformation_collectorName_set" "', argument " "1"" of type '" "six::CollectionInformation *""'"); 
  }
  arg1 = reinterpret_cast< six::CollectionInformation * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CollectionInformation_collectorName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CollectionInformation_collectorName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try
    {
      if (arg1) (arg1)->collectorName = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CollectionInformation_collectorName_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CollectionInformation *arg1 = (six::CollectionInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CollectionInformation_collectorName_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CollectionInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionInformation_collectorName_get" "', argument " "1"" of type '" "six::CollectionInformation *""'"); 
  }
  arg1 = reinterpret_cast< six::CollectionInformation * >(argp1);
  {
    try
    {
      result = (std::string *) & ((arg1)->collectorName);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CollectionInformation_illuminatorName_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CollectionInformation *arg1 = (six::CollectionInformation *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CollectionInformation_illuminatorName_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CollectionInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionInformation_illuminatorName_set" "', argument " "1"" of type '" "six::CollectionInformation *""'"); 
  }
  arg1 = reinterpret_cast< six::CollectionInformation * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CollectionInformation_illuminatorName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CollectionInformation_illuminatorName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try
    {
      if (arg1) (arg1)->illuminatorName = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CollectionInformation_illuminatorName_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CollectionInformation *arg1 = (six::CollectionInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CollectionInformation_illuminatorName_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CollectionInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionInformation_illuminatorName_get" "', argument " "1"" of type '" "six::CollectionInformation *""'"); 
  }
  arg1 = reinterpret_cast< six::CollectionInformation * >(argp1);
  {
    try
    {
      result = (std::string *) & ((arg1)->illuminatorName);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CollectionInformation_coreName_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CollectionInformation *arg1 = (six::CollectionInformation *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CollectionInformation_coreName_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CollectionInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionInformation_coreName_set" "', argument " "1"" of type '" "six::CollectionInformation *""'"); 
  }
  arg1 = reinterpret_cast< six::CollectionInformation * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CollectionInformation_coreName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CollectionInformation_coreName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try
    {
      if (arg1) (arg1)->coreName = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CollectionInformation_coreName_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CollectionInformation *arg1 = (six::CollectionInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CollectionInformation_coreName_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CollectionInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionInformation_coreName_get" "', argument " "1"" of type '" "six::CollectionInformation *""'"); 
  }
  arg1 = reinterpret_cast< six::CollectionInformation * >(argp1);
  {
    try
    {
      result = (std::string *) & ((arg1)->coreName);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CollectionInformation_collectType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CollectionInformation *arg1 = (six::CollectionInformation *) 0 ;
  six::CollectType *arg2 = (six::CollectType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CollectionInformation_collectType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CollectionInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionInformation_collectType_set" "', argument " "1"" of type '" "six::CollectionInformation *""'"); 
  }
  arg1 = reinterpret_cast< six::CollectionInformation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__CollectType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CollectionInformation_collectType_set" "', argument " "2"" of type '" "six::CollectType *""'"); 
  }
  arg2 = reinterpret_cast< six::CollectType * >(argp2);
  {
    try
    {
      if (arg1) (arg1)->collectType = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CollectionInformation_collectType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CollectionInformation *arg1 = (six::CollectionInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::CollectType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CollectionInformation_collectType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CollectionInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionInformation_collectType_get" "', argument " "1"" of type '" "six::CollectionInformation *""'"); 
  }
  arg1 = reinterpret_cast< six::CollectionInformation * >(argp1);
  {
    try
    {
      result = (six::CollectType *)& ((arg1)->collectType);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__CollectType, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CollectionInformation_radarMode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CollectionInformation *arg1 = (six::CollectionInformation *) 0 ;
  six::RadarModeType *arg2 = (six::RadarModeType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CollectionInformation_radarMode_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CollectionInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionInformation_radarMode_set" "', argument " "1"" of type '" "six::CollectionInformation *""'"); 
  }
  arg1 = reinterpret_cast< six::CollectionInformation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__RadarModeType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CollectionInformation_radarMode_set" "', argument " "2"" of type '" "six::RadarModeType *""'"); 
  }
  arg2 = reinterpret_cast< six::RadarModeType * >(argp2);
  {
    try
    {
      if (arg1) (arg1)->radarMode = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CollectionInformation_radarMode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CollectionInformation *arg1 = (six::CollectionInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::RadarModeType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CollectionInformation_radarMode_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CollectionInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionInformation_radarMode_get" "', argument " "1"" of type '" "six::CollectionInformation *""'"); 
  }
  arg1 = reinterpret_cast< six::CollectionInformation * >(argp1);
  {
    try
    {
      result = (six::RadarModeType *)& ((arg1)->radarMode);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__RadarModeType, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CollectionInformation_radarModeID_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CollectionInformation *arg1 = (six::CollectionInformation *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CollectionInformation_radarModeID_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CollectionInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionInformation_radarModeID_set" "', argument " "1"" of type '" "six::CollectionInformation *""'"); 
  }
  arg1 = reinterpret_cast< six::CollectionInformation * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CollectionInformation_radarModeID_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CollectionInformation_radarModeID_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try
    {
      if (arg1) (arg1)->radarModeID = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CollectionInformation_radarModeID_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CollectionInformation *arg1 = (six::CollectionInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CollectionInformation_radarModeID_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CollectionInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionInformation_radarModeID_get" "', argument " "1"" of type '" "six::CollectionInformation *""'"); 
  }
  arg1 = reinterpret_cast< six::CollectionInformation * >(argp1);
  {
    try
    {
      result = (std::string *) & ((arg1)->radarModeID);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CollectionInformation_releaseInfo_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CollectionInformation *arg1 = (six::CollectionInformation *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CollectionInformation_releaseInfo_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CollectionInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionInformation_releaseInfo_set" "', argument " "1"" of type '" "six::CollectionInformation *""'"); 
  }
  arg1 = reinterpret_cast< six::CollectionInformation * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CollectionInformation_releaseInfo_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CollectionInformation_releaseInfo_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try
    {
      if (arg1) (arg1)->releaseInfo = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CollectionInformation_releaseInfo_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CollectionInformation *arg1 = (six::CollectionInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CollectionInformation_releaseInfo_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CollectionInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionInformation_releaseInfo_get" "', argument " "1"" of type '" "six::CollectionInformation *""'"); 
  }
  arg1 = reinterpret_cast< six::CollectionInformation * >(argp1);
  {
    try
    {
      result = (std::string *) & ((arg1)->releaseInfo);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CollectionInformation_countryCodes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CollectionInformation *arg1 = (six::CollectionInformation *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = (std::vector< std::string,std::allocator< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CollectionInformation_countryCodes_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CollectionInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionInformation_countryCodes_set" "', argument " "1"" of type '" "six::CollectionInformation *""'"); 
  }
  arg1 = reinterpret_cast< six::CollectionInformation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CollectionInformation_countryCodes_set" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string,std::allocator< std::string > > * >(argp2);
  {
    try
    {
      if (arg1) (arg1)->countryCodes = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CollectionInformation_countryCodes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CollectionInformation *arg1 = (six::CollectionInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CollectionInformation_countryCodes_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CollectionInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionInformation_countryCodes_get" "', argument " "1"" of type '" "six::CollectionInformation *""'"); 
  }
  arg1 = reinterpret_cast< six::CollectionInformation * >(argp1);
  {
    try
    {
      result = (std::vector< std::string,std::allocator< std::string > > *)& ((arg1)->countryCodes);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CollectionInformation_parameters_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CollectionInformation *arg1 = (six::CollectionInformation *) 0 ;
  six::ParameterCollection *arg2 = (six::ParameterCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CollectionInformation_parameters_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CollectionInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionInformation_parameters_set" "', argument " "1"" of type '" "six::CollectionInformation *""'"); 
  }
  arg1 = reinterpret_cast< six::CollectionInformation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__ParameterCollection, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CollectionInformation_parameters_set" "', argument " "2"" of type '" "six::ParameterCollection *""'"); 
  }
  arg2 = reinterpret_cast< six::ParameterCollection * >(argp2);
  {
    try
    {
      if (arg1) (arg1)->parameters = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CollectionInformation_parameters_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CollectionInformation *arg1 = (six::CollectionInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::ParameterCollection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CollectionInformation_parameters_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CollectionInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionInformation_parameters_get" "', argument " "1"" of type '" "six::CollectionInformation *""'"); 
  }
  arg1 = reinterpret_cast< six::CollectionInformation * >(argp1);
  {
    try
    {
      result = (six::ParameterCollection *)& ((arg1)->parameters);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__ParameterCollection, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_CollectionInformation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CollectionInformation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_CollectionInformation")) SWIG_fail;
  {
    try
    {
      result = (six::CollectionInformation *)new six::CollectionInformation();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__CollectionInformation, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_delete_CollectionInformation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CollectionInformation *arg1 = (six::CollectionInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CollectionInformation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CollectionInformation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CollectionInformation" "', argument " "1"" of type '" "six::CollectionInformation *""'"); 
  }
  arg1 = reinterpret_cast< six::CollectionInformation * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CollectionInformation_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CollectionInformation *arg1 = (six::CollectionInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::CollectionInformation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CollectionInformation_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CollectionInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionInformation_clone" "', argument " "1"" of type '" "six::CollectionInformation const *""'"); 
  }
  arg1 = reinterpret_cast< six::CollectionInformation * >(argp1);
  {
    try
    {
      result = (six::CollectionInformation *)((six::CollectionInformation const *)arg1)->clone();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__CollectionInformation, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CollectionInformation___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CollectionInformation *arg1 = (six::CollectionInformation *) 0 ;
  six::CollectionInformation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CollectionInformation___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CollectionInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionInformation___eq__" "', argument " "1"" of type '" "six::CollectionInformation const *""'"); 
  }
  arg1 = reinterpret_cast< six::CollectionInformation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__CollectionInformation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CollectionInformation___eq__" "', argument " "2"" of type '" "six::CollectionInformation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CollectionInformation___eq__" "', argument " "2"" of type '" "six::CollectionInformation const &""'"); 
  }
  arg2 = reinterpret_cast< six::CollectionInformation * >(argp2);
  {
    try
    {
      result = (bool)((six::CollectionInformation const *)arg1)->operator ==((six::CollectionInformation const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CollectionInformation___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CollectionInformation *arg1 = (six::CollectionInformation *) 0 ;
  six::CollectionInformation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CollectionInformation___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CollectionInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionInformation___ne__" "', argument " "1"" of type '" "six::CollectionInformation const *""'"); 
  }
  arg1 = reinterpret_cast< six::CollectionInformation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__CollectionInformation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CollectionInformation___ne__" "', argument " "2"" of type '" "six::CollectionInformation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CollectionInformation___ne__" "', argument " "2"" of type '" "six::CollectionInformation const &""'"); 
  }
  arg2 = reinterpret_cast< six::CollectionInformation * >(argp2);
  {
    try
    {
      result = (bool)((six::CollectionInformation const *)arg1)->operator !=((six::CollectionInformation const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CollectionInformation_getClassificationLevel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CollectionInformation *arg1 = (six::CollectionInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CollectionInformation_getClassificationLevel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CollectionInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionInformation_getClassificationLevel" "', argument " "1"" of type '" "six::CollectionInformation const *""'"); 
  }
  arg1 = reinterpret_cast< six::CollectionInformation * >(argp1);
  {
    try
    {
      result = ((six::CollectionInformation const *)arg1)->getClassificationLevel();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CollectionInformation_setClassificationLevel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CollectionInformation *arg1 = (six::CollectionInformation *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CollectionInformation_setClassificationLevel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CollectionInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionInformation_setClassificationLevel" "', argument " "1"" of type '" "six::CollectionInformation *""'"); 
  }
  arg1 = reinterpret_cast< six::CollectionInformation * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CollectionInformation_setClassificationLevel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CollectionInformation_setClassificationLevel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try
    {
      (arg1)->setClassificationLevel((std::string const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return nullptr;
}


SWIGINTERN PyObject *CollectionInformation_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__CollectionInformation, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_Classification(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Classification *arg1 = (six::Classification *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Classification",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Classification, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Classification" "', argument " "1"" of type '" "six::Classification *""'"); 
  }
  arg1 = reinterpret_cast< six::Classification * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Classification_getLevel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Classification *arg1 = (six::Classification *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Classification_getLevel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Classification, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Classification_getLevel" "', argument " "1"" of type '" "six::Classification const *""'"); 
  }
  arg1 = reinterpret_cast< six::Classification * >(argp1);
  {
    try
    {
      result = ((six::Classification const *)arg1)->getLevel();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Classification_isUnclassified(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Classification *arg1 = (six::Classification *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Classification_isUnclassified",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Classification, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Classification_isUnclassified" "', argument " "1"" of type '" "six::Classification const *""'"); 
  }
  arg1 = reinterpret_cast< six::Classification * >(argp1);
  {
    try
    {
      result = (bool)((six::Classification const *)arg1)->isUnclassified();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Classification_setSecurity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Classification *arg1 = (six::Classification *) 0 ;
  std::string *arg2 = 0 ;
  logging::Logger *arg3 = 0 ;
  nitf::FileSecurity arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Classification_setSecurity",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Classification, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Classification_setSecurity" "', argument " "1"" of type '" "six::Classification const *""'"); 
  }
  arg1 = reinterpret_cast< six::Classification * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Classification_setSecurity" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Classification_setSecurity" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_logging__Logger,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Classification_setSecurity" "', argument " "3"" of type '" "logging::Logger &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Classification_setSecurity" "', argument " "3"" of type '" "logging::Logger &""'"); 
  }
  arg3 = reinterpret_cast< logging::Logger * >(argp3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_nitf__FileSecurity,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Classification_setSecurity" "', argument " "4"" of type '" "nitf::FileSecurity""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Classification_setSecurity" "', argument " "4"" of type '" "nitf::FileSecurity""'");
    } else {
      nitf::FileSecurity * temp = reinterpret_cast< nitf::FileSecurity * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    try
    {
      ((six::Classification const *)arg1)->setSecurity((std::string const &)*arg2,*arg3,arg4);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Classification_put(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Classification *arg1 = (six::Classification *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Classification_put",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Classification, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Classification_put" "', argument " "1"" of type '" "six::Classification const *""'"); 
  }
  arg1 = reinterpret_cast< six::Classification * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Classification_put" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Classification_put" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try
    {
      result = (std::ostream *) &((six::Classification const *)arg1)->put(*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Classification_fileOptions_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Classification *arg1 = (six::Classification *) 0 ;
  Options arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Classification_fileOptions_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Classification, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Classification_fileOptions_set" "', argument " "1"" of type '" "six::Classification *""'"); 
  }
  arg1 = reinterpret_cast< six::Classification * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Options,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Classification_fileOptions_set" "', argument " "2"" of type '" "Options""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Classification_fileOptions_set" "', argument " "2"" of type '" "Options""'");
    } else {
      Options * temp = reinterpret_cast< Options * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try
    {
      if (arg1) (arg1)->fileOptions = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Classification_fileOptions_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Classification *arg1 = (six::Classification *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Options result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Classification_fileOptions_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Classification, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Classification_fileOptions_get" "', argument " "1"" of type '" "six::Classification *""'"); 
  }
  arg1 = reinterpret_cast< six::Classification * >(argp1);
  {
    try
    {
      result =  ((arg1)->fileOptions);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new Options(static_cast< const Options& >(result))), SWIGTYPE_p_Options, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *Classification_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__Classification, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CorrCoefs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CorrCoefs *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_CorrCoefs")) SWIG_fail;
  {
    try
    {
      result = (six::CorrCoefs *)new six::CorrCoefs();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__CorrCoefs, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CorrCoefs_p1p2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CorrCoefs *arg1 = (six::CorrCoefs *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CorrCoefs_p1p2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CorrCoefs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CorrCoefs_p1p2_set" "', argument " "1"" of type '" "six::CorrCoefs *""'"); 
  }
  arg1 = reinterpret_cast< six::CorrCoefs * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CorrCoefs_p1p2_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (arg1)->p1p2 = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CorrCoefs_p1p2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CorrCoefs *arg1 = (six::CorrCoefs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CorrCoefs_p1p2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CorrCoefs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CorrCoefs_p1p2_get" "', argument " "1"" of type '" "six::CorrCoefs *""'"); 
  }
  arg1 = reinterpret_cast< six::CorrCoefs * >(argp1);
  {
    try
    {
      result = (double) ((arg1)->p1p2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CorrCoefs_p1p3_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CorrCoefs *arg1 = (six::CorrCoefs *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CorrCoefs_p1p3_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CorrCoefs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CorrCoefs_p1p3_set" "', argument " "1"" of type '" "six::CorrCoefs *""'"); 
  }
  arg1 = reinterpret_cast< six::CorrCoefs * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CorrCoefs_p1p3_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (arg1)->p1p3 = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CorrCoefs_p1p3_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CorrCoefs *arg1 = (six::CorrCoefs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CorrCoefs_p1p3_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CorrCoefs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CorrCoefs_p1p3_get" "', argument " "1"" of type '" "six::CorrCoefs *""'"); 
  }
  arg1 = reinterpret_cast< six::CorrCoefs * >(argp1);
  {
    try
    {
      result = (double) ((arg1)->p1p3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CorrCoefs_p1v1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CorrCoefs *arg1 = (six::CorrCoefs *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CorrCoefs_p1v1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CorrCoefs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CorrCoefs_p1v1_set" "', argument " "1"" of type '" "six::CorrCoefs *""'"); 
  }
  arg1 = reinterpret_cast< six::CorrCoefs * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CorrCoefs_p1v1_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (arg1)->p1v1 = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CorrCoefs_p1v1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CorrCoefs *arg1 = (six::CorrCoefs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CorrCoefs_p1v1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CorrCoefs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CorrCoefs_p1v1_get" "', argument " "1"" of type '" "six::CorrCoefs *""'"); 
  }
  arg1 = reinterpret_cast< six::CorrCoefs * >(argp1);
  {
    try
    {
      result = (double) ((arg1)->p1v1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CorrCoefs_p1v2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CorrCoefs *arg1 = (six::CorrCoefs *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CorrCoefs_p1v2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CorrCoefs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CorrCoefs_p1v2_set" "', argument " "1"" of type '" "six::CorrCoefs *""'"); 
  }
  arg1 = reinterpret_cast< six::CorrCoefs * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CorrCoefs_p1v2_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (arg1)->p1v2 = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CorrCoefs_p1v2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CorrCoefs *arg1 = (six::CorrCoefs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CorrCoefs_p1v2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CorrCoefs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CorrCoefs_p1v2_get" "', argument " "1"" of type '" "six::CorrCoefs *""'"); 
  }
  arg1 = reinterpret_cast< six::CorrCoefs * >(argp1);
  {
    try
    {
      result = (double) ((arg1)->p1v2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CorrCoefs_p1v3_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CorrCoefs *arg1 = (six::CorrCoefs *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CorrCoefs_p1v3_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CorrCoefs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CorrCoefs_p1v3_set" "', argument " "1"" of type '" "six::CorrCoefs *""'"); 
  }
  arg1 = reinterpret_cast< six::CorrCoefs * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CorrCoefs_p1v3_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (arg1)->p1v3 = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CorrCoefs_p1v3_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CorrCoefs *arg1 = (six::CorrCoefs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CorrCoefs_p1v3_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CorrCoefs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CorrCoefs_p1v3_get" "', argument " "1"" of type '" "six::CorrCoefs *""'"); 
  }
  arg1 = reinterpret_cast< six::CorrCoefs * >(argp1);
  {
    try
    {
      result = (double) ((arg1)->p1v3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CorrCoefs_p2p3_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CorrCoefs *arg1 = (six::CorrCoefs *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CorrCoefs_p2p3_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CorrCoefs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CorrCoefs_p2p3_set" "', argument " "1"" of type '" "six::CorrCoefs *""'"); 
  }
  arg1 = reinterpret_cast< six::CorrCoefs * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CorrCoefs_p2p3_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (arg1)->p2p3 = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CorrCoefs_p2p3_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CorrCoefs *arg1 = (six::CorrCoefs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CorrCoefs_p2p3_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CorrCoefs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CorrCoefs_p2p3_get" "', argument " "1"" of type '" "six::CorrCoefs *""'"); 
  }
  arg1 = reinterpret_cast< six::CorrCoefs * >(argp1);
  {
    try
    {
      result = (double) ((arg1)->p2p3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CorrCoefs_p2v1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CorrCoefs *arg1 = (six::CorrCoefs *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CorrCoefs_p2v1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CorrCoefs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CorrCoefs_p2v1_set" "', argument " "1"" of type '" "six::CorrCoefs *""'"); 
  }
  arg1 = reinterpret_cast< six::CorrCoefs * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CorrCoefs_p2v1_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (arg1)->p2v1 = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CorrCoefs_p2v1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CorrCoefs *arg1 = (six::CorrCoefs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CorrCoefs_p2v1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CorrCoefs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CorrCoefs_p2v1_get" "', argument " "1"" of type '" "six::CorrCoefs *""'"); 
  }
  arg1 = reinterpret_cast< six::CorrCoefs * >(argp1);
  {
    try
    {
      result = (double) ((arg1)->p2v1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CorrCoefs_p2v2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CorrCoefs *arg1 = (six::CorrCoefs *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CorrCoefs_p2v2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CorrCoefs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CorrCoefs_p2v2_set" "', argument " "1"" of type '" "six::CorrCoefs *""'"); 
  }
  arg1 = reinterpret_cast< six::CorrCoefs * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CorrCoefs_p2v2_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (arg1)->p2v2 = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CorrCoefs_p2v2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CorrCoefs *arg1 = (six::CorrCoefs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CorrCoefs_p2v2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CorrCoefs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CorrCoefs_p2v2_get" "', argument " "1"" of type '" "six::CorrCoefs *""'"); 
  }
  arg1 = reinterpret_cast< six::CorrCoefs * >(argp1);
  {
    try
    {
      result = (double) ((arg1)->p2v2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CorrCoefs_p2v3_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CorrCoefs *arg1 = (six::CorrCoefs *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CorrCoefs_p2v3_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CorrCoefs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CorrCoefs_p2v3_set" "', argument " "1"" of type '" "six::CorrCoefs *""'"); 
  }
  arg1 = reinterpret_cast< six::CorrCoefs * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CorrCoefs_p2v3_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (arg1)->p2v3 = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CorrCoefs_p2v3_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CorrCoefs *arg1 = (six::CorrCoefs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CorrCoefs_p2v3_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CorrCoefs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CorrCoefs_p2v3_get" "', argument " "1"" of type '" "six::CorrCoefs *""'"); 
  }
  arg1 = reinterpret_cast< six::CorrCoefs * >(argp1);
  {
    try
    {
      result = (double) ((arg1)->p2v3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CorrCoefs_p3v1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CorrCoefs *arg1 = (six::CorrCoefs *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CorrCoefs_p3v1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CorrCoefs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CorrCoefs_p3v1_set" "', argument " "1"" of type '" "six::CorrCoefs *""'"); 
  }
  arg1 = reinterpret_cast< six::CorrCoefs * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CorrCoefs_p3v1_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (arg1)->p3v1 = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CorrCoefs_p3v1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CorrCoefs *arg1 = (six::CorrCoefs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CorrCoefs_p3v1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CorrCoefs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CorrCoefs_p3v1_get" "', argument " "1"" of type '" "six::CorrCoefs *""'"); 
  }
  arg1 = reinterpret_cast< six::CorrCoefs * >(argp1);
  {
    try
    {
      result = (double) ((arg1)->p3v1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CorrCoefs_p3v2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CorrCoefs *arg1 = (six::CorrCoefs *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CorrCoefs_p3v2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CorrCoefs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CorrCoefs_p3v2_set" "', argument " "1"" of type '" "six::CorrCoefs *""'"); 
  }
  arg1 = reinterpret_cast< six::CorrCoefs * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CorrCoefs_p3v2_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (arg1)->p3v2 = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CorrCoefs_p3v2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CorrCoefs *arg1 = (six::CorrCoefs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CorrCoefs_p3v2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CorrCoefs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CorrCoefs_p3v2_get" "', argument " "1"" of type '" "six::CorrCoefs *""'"); 
  }
  arg1 = reinterpret_cast< six::CorrCoefs * >(argp1);
  {
    try
    {
      result = (double) ((arg1)->p3v2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CorrCoefs_p3v3_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CorrCoefs *arg1 = (six::CorrCoefs *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CorrCoefs_p3v3_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CorrCoefs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CorrCoefs_p3v3_set" "', argument " "1"" of type '" "six::CorrCoefs *""'"); 
  }
  arg1 = reinterpret_cast< six::CorrCoefs * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CorrCoefs_p3v3_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (arg1)->p3v3 = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CorrCoefs_p3v3_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CorrCoefs *arg1 = (six::CorrCoefs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CorrCoefs_p3v3_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CorrCoefs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CorrCoefs_p3v3_get" "', argument " "1"" of type '" "six::CorrCoefs *""'"); 
  }
  arg1 = reinterpret_cast< six::CorrCoefs * >(argp1);
  {
    try
    {
      result = (double) ((arg1)->p3v3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CorrCoefs_v1v2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CorrCoefs *arg1 = (six::CorrCoefs *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CorrCoefs_v1v2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CorrCoefs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CorrCoefs_v1v2_set" "', argument " "1"" of type '" "six::CorrCoefs *""'"); 
  }
  arg1 = reinterpret_cast< six::CorrCoefs * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CorrCoefs_v1v2_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (arg1)->v1v2 = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CorrCoefs_v1v2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CorrCoefs *arg1 = (six::CorrCoefs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CorrCoefs_v1v2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CorrCoefs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CorrCoefs_v1v2_get" "', argument " "1"" of type '" "six::CorrCoefs *""'"); 
  }
  arg1 = reinterpret_cast< six::CorrCoefs * >(argp1);
  {
    try
    {
      result = (double) ((arg1)->v1v2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CorrCoefs_v1v3_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CorrCoefs *arg1 = (six::CorrCoefs *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CorrCoefs_v1v3_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CorrCoefs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CorrCoefs_v1v3_set" "', argument " "1"" of type '" "six::CorrCoefs *""'"); 
  }
  arg1 = reinterpret_cast< six::CorrCoefs * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CorrCoefs_v1v3_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (arg1)->v1v3 = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CorrCoefs_v1v3_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CorrCoefs *arg1 = (six::CorrCoefs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CorrCoefs_v1v3_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CorrCoefs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CorrCoefs_v1v3_get" "', argument " "1"" of type '" "six::CorrCoefs *""'"); 
  }
  arg1 = reinterpret_cast< six::CorrCoefs * >(argp1);
  {
    try
    {
      result = (double) ((arg1)->v1v3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CorrCoefs_v2v3_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CorrCoefs *arg1 = (six::CorrCoefs *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CorrCoefs_v2v3_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CorrCoefs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CorrCoefs_v2v3_set" "', argument " "1"" of type '" "six::CorrCoefs *""'"); 
  }
  arg1 = reinterpret_cast< six::CorrCoefs * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CorrCoefs_v2v3_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (arg1)->v2v3 = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CorrCoefs_v2v3_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CorrCoefs *arg1 = (six::CorrCoefs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CorrCoefs_v2v3_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CorrCoefs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CorrCoefs_v2v3_get" "', argument " "1"" of type '" "six::CorrCoefs *""'"); 
  }
  arg1 = reinterpret_cast< six::CorrCoefs * >(argp1);
  {
    try
    {
      result = (double) ((arg1)->v2v3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CorrCoefs___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CorrCoefs *arg1 = (six::CorrCoefs *) 0 ;
  six::CorrCoefs *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CorrCoefs___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CorrCoefs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CorrCoefs___eq__" "', argument " "1"" of type '" "six::CorrCoefs const *""'"); 
  }
  arg1 = reinterpret_cast< six::CorrCoefs * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__CorrCoefs,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CorrCoefs___eq__" "', argument " "2"" of type '" "six::CorrCoefs const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CorrCoefs___eq__" "', argument " "2"" of type '" "six::CorrCoefs const &""'"); 
  }
  arg2 = reinterpret_cast< six::CorrCoefs * >(argp2);
  {
    try
    {
      result = (bool)((six::CorrCoefs const *)arg1)->operator ==((six::CorrCoefs const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CorrCoefs___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CorrCoefs *arg1 = (six::CorrCoefs *) 0 ;
  six::CorrCoefs *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CorrCoefs___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CorrCoefs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CorrCoefs___ne__" "', argument " "1"" of type '" "six::CorrCoefs const *""'"); 
  }
  arg1 = reinterpret_cast< six::CorrCoefs * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__CorrCoefs,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CorrCoefs___ne__" "', argument " "2"" of type '" "six::CorrCoefs const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CorrCoefs___ne__" "', argument " "2"" of type '" "six::CorrCoefs const &""'"); 
  }
  arg2 = reinterpret_cast< six::CorrCoefs * >(argp2);
  {
    try
    {
      result = (bool)((six::CorrCoefs const *)arg1)->operator !=((six::CorrCoefs const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_delete_CorrCoefs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CorrCoefs *arg1 = (six::CorrCoefs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CorrCoefs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CorrCoefs, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CorrCoefs" "', argument " "1"" of type '" "six::CorrCoefs *""'"); 
  }
  arg1 = reinterpret_cast< six::CorrCoefs * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *CorrCoefs_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__CorrCoefs, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PosVelError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PosVelError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_PosVelError")) SWIG_fail;
  {
    try
    {
      result = (six::PosVelError *)new six::PosVelError();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__PosVelError, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PosVelError_frame_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PosVelError *arg1 = (six::PosVelError *) 0 ;
  six::FrameType *arg2 = (six::FrameType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PosVelError_frame_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PosVelError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PosVelError_frame_set" "', argument " "1"" of type '" "six::PosVelError *""'"); 
  }
  arg1 = reinterpret_cast< six::PosVelError * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_scene__FrameType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PosVelError_frame_set" "', argument " "2"" of type '" "six::FrameType *""'"); 
  }
  arg2 = reinterpret_cast< six::FrameType * >(argp2);
  {
    try
    {
      if (arg1) (arg1)->frame = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PosVelError_frame_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PosVelError *arg1 = (six::PosVelError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::FrameType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PosVelError_frame_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PosVelError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PosVelError_frame_get" "', argument " "1"" of type '" "six::PosVelError *""'"); 
  }
  arg1 = reinterpret_cast< six::PosVelError * >(argp1);
  {
    try
    {
      result = (six::FrameType *)& ((arg1)->frame);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_scene__FrameType, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PosVelError_p1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PosVelError *arg1 = (six::PosVelError *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PosVelError_p1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PosVelError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PosVelError_p1_set" "', argument " "1"" of type '" "six::PosVelError *""'"); 
  }
  arg1 = reinterpret_cast< six::PosVelError * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PosVelError_p1_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (arg1)->p1 = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PosVelError_p1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PosVelError *arg1 = (six::PosVelError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PosVelError_p1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PosVelError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PosVelError_p1_get" "', argument " "1"" of type '" "six::PosVelError *""'"); 
  }
  arg1 = reinterpret_cast< six::PosVelError * >(argp1);
  {
    try
    {
      result = (double) ((arg1)->p1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PosVelError_p2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PosVelError *arg1 = (six::PosVelError *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PosVelError_p2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PosVelError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PosVelError_p2_set" "', argument " "1"" of type '" "six::PosVelError *""'"); 
  }
  arg1 = reinterpret_cast< six::PosVelError * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PosVelError_p2_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (arg1)->p2 = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PosVelError_p2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PosVelError *arg1 = (six::PosVelError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PosVelError_p2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PosVelError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PosVelError_p2_get" "', argument " "1"" of type '" "six::PosVelError *""'"); 
  }
  arg1 = reinterpret_cast< six::PosVelError * >(argp1);
  {
    try
    {
      result = (double) ((arg1)->p2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PosVelError_p3_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PosVelError *arg1 = (six::PosVelError *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PosVelError_p3_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PosVelError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PosVelError_p3_set" "', argument " "1"" of type '" "six::PosVelError *""'"); 
  }
  arg1 = reinterpret_cast< six::PosVelError * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PosVelError_p3_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (arg1)->p3 = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PosVelError_p3_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PosVelError *arg1 = (six::PosVelError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PosVelError_p3_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PosVelError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PosVelError_p3_get" "', argument " "1"" of type '" "six::PosVelError *""'"); 
  }
  arg1 = reinterpret_cast< six::PosVelError * >(argp1);
  {
    try
    {
      result = (double) ((arg1)->p3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PosVelError_v1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PosVelError *arg1 = (six::PosVelError *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PosVelError_v1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PosVelError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PosVelError_v1_set" "', argument " "1"" of type '" "six::PosVelError *""'"); 
  }
  arg1 = reinterpret_cast< six::PosVelError * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PosVelError_v1_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (arg1)->v1 = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PosVelError_v1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PosVelError *arg1 = (six::PosVelError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PosVelError_v1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PosVelError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PosVelError_v1_get" "', argument " "1"" of type '" "six::PosVelError *""'"); 
  }
  arg1 = reinterpret_cast< six::PosVelError * >(argp1);
  {
    try
    {
      result = (double) ((arg1)->v1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PosVelError_v2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PosVelError *arg1 = (six::PosVelError *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PosVelError_v2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PosVelError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PosVelError_v2_set" "', argument " "1"" of type '" "six::PosVelError *""'"); 
  }
  arg1 = reinterpret_cast< six::PosVelError * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PosVelError_v2_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (arg1)->v2 = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PosVelError_v2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PosVelError *arg1 = (six::PosVelError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PosVelError_v2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PosVelError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PosVelError_v2_get" "', argument " "1"" of type '" "six::PosVelError *""'"); 
  }
  arg1 = reinterpret_cast< six::PosVelError * >(argp1);
  {
    try
    {
      result = (double) ((arg1)->v2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PosVelError_v3_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PosVelError *arg1 = (six::PosVelError *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PosVelError_v3_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PosVelError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PosVelError_v3_set" "', argument " "1"" of type '" "six::PosVelError *""'"); 
  }
  arg1 = reinterpret_cast< six::PosVelError * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PosVelError_v3_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (arg1)->v3 = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PosVelError_v3_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PosVelError *arg1 = (six::PosVelError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PosVelError_v3_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PosVelError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PosVelError_v3_get" "', argument " "1"" of type '" "six::PosVelError *""'"); 
  }
  arg1 = reinterpret_cast< six::PosVelError * >(argp1);
  {
    try
    {
      result = (double) ((arg1)->v3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PosVelError_corrCoefs_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PosVelError *arg1 = (six::PosVelError *) 0 ;
  mem::ScopedCopyablePtr< six::CorrCoefs > *arg2 = (mem::ScopedCopyablePtr< six::CorrCoefs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PosVelError_corrCoefs_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PosVelError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PosVelError_corrCoefs_set" "', argument " "1"" of type '" "six::PosVelError *""'"); 
  }
  arg1 = reinterpret_cast< six::PosVelError * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PosVelError_corrCoefs_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::CorrCoefs > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::CorrCoefs > * >(argp2);
  {
    try
    {
      if (arg1) (arg1)->corrCoefs = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PosVelError_corrCoefs_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PosVelError *arg1 = (six::PosVelError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::CorrCoefs > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PosVelError_corrCoefs_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PosVelError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PosVelError_corrCoefs_get" "', argument " "1"" of type '" "six::PosVelError *""'"); 
  }
  arg1 = reinterpret_cast< six::PosVelError * >(argp1);
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::CorrCoefs > *)& ((arg1)->corrCoefs);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PosVelError_positionDecorr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PosVelError *arg1 = (six::PosVelError *) 0 ;
  six::DecorrType *arg2 = (six::DecorrType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PosVelError_positionDecorr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PosVelError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PosVelError_positionDecorr_set" "', argument " "1"" of type '" "six::PosVelError *""'"); 
  }
  arg1 = reinterpret_cast< six::PosVelError * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__DecorrType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PosVelError_positionDecorr_set" "', argument " "2"" of type '" "six::DecorrType *""'"); 
  }
  arg2 = reinterpret_cast< six::DecorrType * >(argp2);
  {
    try
    {
      if (arg1) (arg1)->positionDecorr = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PosVelError_positionDecorr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PosVelError *arg1 = (six::PosVelError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::DecorrType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PosVelError_positionDecorr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PosVelError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PosVelError_positionDecorr_get" "', argument " "1"" of type '" "six::PosVelError *""'"); 
  }
  arg1 = reinterpret_cast< six::PosVelError * >(argp1);
  {
    try
    {
      result = (six::DecorrType *)& ((arg1)->positionDecorr);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__DecorrType, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PosVelError___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PosVelError *arg1 = (six::PosVelError *) 0 ;
  six::PosVelError *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PosVelError___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PosVelError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PosVelError___eq__" "', argument " "1"" of type '" "six::PosVelError const *""'"); 
  }
  arg1 = reinterpret_cast< six::PosVelError * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__PosVelError,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PosVelError___eq__" "', argument " "2"" of type '" "six::PosVelError const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PosVelError___eq__" "', argument " "2"" of type '" "six::PosVelError const &""'"); 
  }
  arg2 = reinterpret_cast< six::PosVelError * >(argp2);
  {
    try
    {
      result = (bool)((six::PosVelError const *)arg1)->operator ==((six::PosVelError const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_PosVelError___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PosVelError *arg1 = (six::PosVelError *) 0 ;
  six::PosVelError *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PosVelError___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PosVelError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PosVelError___ne__" "', argument " "1"" of type '" "six::PosVelError const *""'"); 
  }
  arg1 = reinterpret_cast< six::PosVelError * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__PosVelError,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PosVelError___ne__" "', argument " "2"" of type '" "six::PosVelError const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PosVelError___ne__" "', argument " "2"" of type '" "six::PosVelError const &""'"); 
  }
  arg2 = reinterpret_cast< six::PosVelError * >(argp2);
  {
    try
    {
      result = (bool)((six::PosVelError const *)arg1)->operator !=((six::PosVelError const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_delete_PosVelError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PosVelError *arg1 = (six::PosVelError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PosVelError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PosVelError, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PosVelError" "', argument " "1"" of type '" "six::PosVelError *""'"); 
  }
  arg1 = reinterpret_cast< six::PosVelError * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *PosVelError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__PosVelError, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_RadarSensor_rangeBias_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RadarSensor *arg1 = (six::RadarSensor *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RadarSensor_rangeBias_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RadarSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadarSensor_rangeBias_set" "', argument " "1"" of type '" "six::RadarSensor *""'"); 
  }
  arg1 = reinterpret_cast< six::RadarSensor * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RadarSensor_rangeBias_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (arg1)->rangeBias = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RadarSensor_rangeBias_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RadarSensor *arg1 = (six::RadarSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RadarSensor_rangeBias_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RadarSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadarSensor_rangeBias_get" "', argument " "1"" of type '" "six::RadarSensor *""'"); 
  }
  arg1 = reinterpret_cast< six::RadarSensor * >(argp1);
  {
    try
    {
      result = (double) ((arg1)->rangeBias);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RadarSensor_clockFreqSF_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RadarSensor *arg1 = (six::RadarSensor *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RadarSensor_clockFreqSF_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RadarSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadarSensor_clockFreqSF_set" "', argument " "1"" of type '" "six::RadarSensor *""'"); 
  }
  arg1 = reinterpret_cast< six::RadarSensor * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RadarSensor_clockFreqSF_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (arg1)->clockFreqSF = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RadarSensor_clockFreqSF_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RadarSensor *arg1 = (six::RadarSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RadarSensor_clockFreqSF_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RadarSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadarSensor_clockFreqSF_get" "', argument " "1"" of type '" "six::RadarSensor *""'"); 
  }
  arg1 = reinterpret_cast< six::RadarSensor * >(argp1);
  {
    try
    {
      result = (double) ((arg1)->clockFreqSF);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RadarSensor_transmitFreqSF_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RadarSensor *arg1 = (six::RadarSensor *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RadarSensor_transmitFreqSF_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RadarSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadarSensor_transmitFreqSF_set" "', argument " "1"" of type '" "six::RadarSensor *""'"); 
  }
  arg1 = reinterpret_cast< six::RadarSensor * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RadarSensor_transmitFreqSF_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (arg1)->transmitFreqSF = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RadarSensor_transmitFreqSF_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RadarSensor *arg1 = (six::RadarSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RadarSensor_transmitFreqSF_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RadarSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadarSensor_transmitFreqSF_get" "', argument " "1"" of type '" "six::RadarSensor *""'"); 
  }
  arg1 = reinterpret_cast< six::RadarSensor * >(argp1);
  {
    try
    {
      result = (double) ((arg1)->transmitFreqSF);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RadarSensor_rangeBiasDecorr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RadarSensor *arg1 = (six::RadarSensor *) 0 ;
  six::DecorrType *arg2 = (six::DecorrType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RadarSensor_rangeBiasDecorr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RadarSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadarSensor_rangeBiasDecorr_set" "', argument " "1"" of type '" "six::RadarSensor *""'"); 
  }
  arg1 = reinterpret_cast< six::RadarSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__DecorrType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RadarSensor_rangeBiasDecorr_set" "', argument " "2"" of type '" "six::DecorrType *""'"); 
  }
  arg2 = reinterpret_cast< six::DecorrType * >(argp2);
  {
    try
    {
      if (arg1) (arg1)->rangeBiasDecorr = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RadarSensor_rangeBiasDecorr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RadarSensor *arg1 = (six::RadarSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::DecorrType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RadarSensor_rangeBiasDecorr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RadarSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadarSensor_rangeBiasDecorr_get" "', argument " "1"" of type '" "six::RadarSensor *""'"); 
  }
  arg1 = reinterpret_cast< six::RadarSensor * >(argp1);
  {
    try
    {
      result = (six::DecorrType *)& ((arg1)->rangeBiasDecorr);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__DecorrType, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_RadarSensor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RadarSensor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_RadarSensor")) SWIG_fail;
  {
    try
    {
      result = (six::RadarSensor *)new six::RadarSensor();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__RadarSensor, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RadarSensor___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RadarSensor *arg1 = (six::RadarSensor *) 0 ;
  six::RadarSensor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RadarSensor___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RadarSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadarSensor___eq__" "', argument " "1"" of type '" "six::RadarSensor const *""'"); 
  }
  arg1 = reinterpret_cast< six::RadarSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__RadarSensor,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RadarSensor___eq__" "', argument " "2"" of type '" "six::RadarSensor const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RadarSensor___eq__" "', argument " "2"" of type '" "six::RadarSensor const &""'"); 
  }
  arg2 = reinterpret_cast< six::RadarSensor * >(argp2);
  {
    try
    {
      result = (bool)((six::RadarSensor const *)arg1)->operator ==((six::RadarSensor const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_RadarSensor___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RadarSensor *arg1 = (six::RadarSensor *) 0 ;
  six::RadarSensor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RadarSensor___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RadarSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadarSensor___ne__" "', argument " "1"" of type '" "six::RadarSensor const *""'"); 
  }
  arg1 = reinterpret_cast< six::RadarSensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__RadarSensor,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RadarSensor___ne__" "', argument " "2"" of type '" "six::RadarSensor const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RadarSensor___ne__" "', argument " "2"" of type '" "six::RadarSensor const &""'"); 
  }
  arg2 = reinterpret_cast< six::RadarSensor * >(argp2);
  {
    try
    {
      result = (bool)((six::RadarSensor const *)arg1)->operator !=((six::RadarSensor const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_delete_RadarSensor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RadarSensor *arg1 = (six::RadarSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RadarSensor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RadarSensor, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RadarSensor" "', argument " "1"" of type '" "six::RadarSensor *""'"); 
  }
  arg1 = reinterpret_cast< six::RadarSensor * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *RadarSensor_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__RadarSensor, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_TropoError_tropoRangeVertical_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::TropoError *arg1 = (six::TropoError *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TropoError_tropoRangeVertical_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__TropoError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TropoError_tropoRangeVertical_set" "', argument " "1"" of type '" "six::TropoError *""'"); 
  }
  arg1 = reinterpret_cast< six::TropoError * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TropoError_tropoRangeVertical_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (arg1)->tropoRangeVertical = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_TropoError_tropoRangeVertical_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::TropoError *arg1 = (six::TropoError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TropoError_tropoRangeVertical_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__TropoError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TropoError_tropoRangeVertical_get" "', argument " "1"" of type '" "six::TropoError *""'"); 
  }
  arg1 = reinterpret_cast< six::TropoError * >(argp1);
  {
    try
    {
      result = (double) ((arg1)->tropoRangeVertical);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_TropoError_tropoRangeSlant_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::TropoError *arg1 = (six::TropoError *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TropoError_tropoRangeSlant_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__TropoError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TropoError_tropoRangeSlant_set" "', argument " "1"" of type '" "six::TropoError *""'"); 
  }
  arg1 = reinterpret_cast< six::TropoError * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TropoError_tropoRangeSlant_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (arg1)->tropoRangeSlant = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_TropoError_tropoRangeSlant_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::TropoError *arg1 = (six::TropoError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TropoError_tropoRangeSlant_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__TropoError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TropoError_tropoRangeSlant_get" "', argument " "1"" of type '" "six::TropoError *""'"); 
  }
  arg1 = reinterpret_cast< six::TropoError * >(argp1);
  {
    try
    {
      result = (double) ((arg1)->tropoRangeSlant);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_TropoError_tropoRangeDecorr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::TropoError *arg1 = (six::TropoError *) 0 ;
  six::DecorrType *arg2 = (six::DecorrType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TropoError_tropoRangeDecorr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__TropoError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TropoError_tropoRangeDecorr_set" "', argument " "1"" of type '" "six::TropoError *""'"); 
  }
  arg1 = reinterpret_cast< six::TropoError * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__DecorrType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TropoError_tropoRangeDecorr_set" "', argument " "2"" of type '" "six::DecorrType *""'"); 
  }
  arg2 = reinterpret_cast< six::DecorrType * >(argp2);
  {
    try
    {
      if (arg1) (arg1)->tropoRangeDecorr = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_TropoError_tropoRangeDecorr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::TropoError *arg1 = (six::TropoError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::DecorrType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TropoError_tropoRangeDecorr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__TropoError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TropoError_tropoRangeDecorr_get" "', argument " "1"" of type '" "six::TropoError *""'"); 
  }
  arg1 = reinterpret_cast< six::TropoError * >(argp1);
  {
    try
    {
      result = (six::DecorrType *)& ((arg1)->tropoRangeDecorr);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__DecorrType, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_TropoError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::TropoError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_TropoError")) SWIG_fail;
  {
    try
    {
      result = (six::TropoError *)new six::TropoError();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__TropoError, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_TropoError___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::TropoError *arg1 = (six::TropoError *) 0 ;
  six::TropoError *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TropoError___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__TropoError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TropoError___eq__" "', argument " "1"" of type '" "six::TropoError const *""'"); 
  }
  arg1 = reinterpret_cast< six::TropoError * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__TropoError,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TropoError___eq__" "', argument " "2"" of type '" "six::TropoError const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TropoError___eq__" "', argument " "2"" of type '" "six::TropoError const &""'"); 
  }
  arg2 = reinterpret_cast< six::TropoError * >(argp2);
  {
    try
    {
      result = (bool)((six::TropoError const *)arg1)->operator ==((six::TropoError const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_TropoError___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::TropoError *arg1 = (six::TropoError *) 0 ;
  six::TropoError *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TropoError___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__TropoError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TropoError___ne__" "', argument " "1"" of type '" "six::TropoError const *""'"); 
  }
  arg1 = reinterpret_cast< six::TropoError * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__TropoError,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TropoError___ne__" "', argument " "2"" of type '" "six::TropoError const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TropoError___ne__" "', argument " "2"" of type '" "six::TropoError const &""'"); 
  }
  arg2 = reinterpret_cast< six::TropoError * >(argp2);
  {
    try
    {
      result = (bool)((six::TropoError const *)arg1)->operator !=((six::TropoError const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_delete_TropoError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::TropoError *arg1 = (six::TropoError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TropoError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__TropoError, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TropoError" "', argument " "1"" of type '" "six::TropoError *""'"); 
  }
  arg1 = reinterpret_cast< six::TropoError * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *TropoError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__TropoError, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IonoError_ionoRangeVertical_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::IonoError *arg1 = (six::IonoError *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IonoError_ionoRangeVertical_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__IonoError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IonoError_ionoRangeVertical_set" "', argument " "1"" of type '" "six::IonoError *""'"); 
  }
  arg1 = reinterpret_cast< six::IonoError * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IonoError_ionoRangeVertical_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (arg1)->ionoRangeVertical = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_IonoError_ionoRangeVertical_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::IonoError *arg1 = (six::IonoError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IonoError_ionoRangeVertical_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__IonoError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IonoError_ionoRangeVertical_get" "', argument " "1"" of type '" "six::IonoError *""'"); 
  }
  arg1 = reinterpret_cast< six::IonoError * >(argp1);
  {
    try
    {
      result = (double) ((arg1)->ionoRangeVertical);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_IonoError_ionoRangeRateVertical_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::IonoError *arg1 = (six::IonoError *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IonoError_ionoRangeRateVertical_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__IonoError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IonoError_ionoRangeRateVertical_set" "', argument " "1"" of type '" "six::IonoError *""'"); 
  }
  arg1 = reinterpret_cast< six::IonoError * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IonoError_ionoRangeRateVertical_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (arg1)->ionoRangeRateVertical = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_IonoError_ionoRangeRateVertical_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::IonoError *arg1 = (six::IonoError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IonoError_ionoRangeRateVertical_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__IonoError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IonoError_ionoRangeRateVertical_get" "', argument " "1"" of type '" "six::IonoError *""'"); 
  }
  arg1 = reinterpret_cast< six::IonoError * >(argp1);
  {
    try
    {
      result = (double) ((arg1)->ionoRangeRateVertical);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_IonoError_ionoRgRgRateCC_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::IonoError *arg1 = (six::IonoError *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IonoError_ionoRgRgRateCC_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__IonoError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IonoError_ionoRgRgRateCC_set" "', argument " "1"" of type '" "six::IonoError *""'"); 
  }
  arg1 = reinterpret_cast< six::IonoError * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IonoError_ionoRgRgRateCC_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (arg1)->ionoRgRgRateCC = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_IonoError_ionoRgRgRateCC_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::IonoError *arg1 = (six::IonoError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IonoError_ionoRgRgRateCC_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__IonoError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IonoError_ionoRgRgRateCC_get" "', argument " "1"" of type '" "six::IonoError *""'"); 
  }
  arg1 = reinterpret_cast< six::IonoError * >(argp1);
  {
    try
    {
      result = (double) ((arg1)->ionoRgRgRateCC);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_IonoError_ionoRangeVertDecorr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::IonoError *arg1 = (six::IonoError *) 0 ;
  six::DecorrType *arg2 = (six::DecorrType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IonoError_ionoRangeVertDecorr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__IonoError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IonoError_ionoRangeVertDecorr_set" "', argument " "1"" of type '" "six::IonoError *""'"); 
  }
  arg1 = reinterpret_cast< six::IonoError * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__DecorrType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IonoError_ionoRangeVertDecorr_set" "', argument " "2"" of type '" "six::DecorrType *""'"); 
  }
  arg2 = reinterpret_cast< six::DecorrType * >(argp2);
  {
    try
    {
      if (arg1) (arg1)->ionoRangeVertDecorr = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_IonoError_ionoRangeVertDecorr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::IonoError *arg1 = (six::IonoError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::DecorrType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IonoError_ionoRangeVertDecorr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__IonoError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IonoError_ionoRangeVertDecorr_get" "', argument " "1"" of type '" "six::IonoError *""'"); 
  }
  arg1 = reinterpret_cast< six::IonoError * >(argp1);
  {
    try
    {
      result = (six::DecorrType *)& ((arg1)->ionoRangeVertDecorr);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__DecorrType, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_IonoError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::IonoError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_IonoError")) SWIG_fail;
  {
    try
    {
      result = (six::IonoError *)new six::IonoError();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__IonoError, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_IonoError___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::IonoError *arg1 = (six::IonoError *) 0 ;
  six::IonoError *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IonoError___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__IonoError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IonoError___eq__" "', argument " "1"" of type '" "six::IonoError const *""'"); 
  }
  arg1 = reinterpret_cast< six::IonoError * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__IonoError,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IonoError___eq__" "', argument " "2"" of type '" "six::IonoError const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IonoError___eq__" "', argument " "2"" of type '" "six::IonoError const &""'"); 
  }
  arg2 = reinterpret_cast< six::IonoError * >(argp2);
  {
    try
    {
      result = (bool)((six::IonoError const *)arg1)->operator ==((six::IonoError const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_IonoError___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::IonoError *arg1 = (six::IonoError *) 0 ;
  six::IonoError *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IonoError___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__IonoError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IonoError___ne__" "', argument " "1"" of type '" "six::IonoError const *""'"); 
  }
  arg1 = reinterpret_cast< six::IonoError * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__IonoError,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IonoError___ne__" "', argument " "2"" of type '" "six::IonoError const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IonoError___ne__" "', argument " "2"" of type '" "six::IonoError const &""'"); 
  }
  arg2 = reinterpret_cast< six::IonoError * >(argp2);
  {
    try
    {
      result = (bool)((six::IonoError const *)arg1)->operator !=((six::IonoError const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_delete_IonoError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::IonoError *arg1 = (six::IonoError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IonoError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__IonoError, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IonoError" "', argument " "1"" of type '" "six::IonoError *""'"); 
  }
  arg1 = reinterpret_cast< six::IonoError * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *IonoError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__IonoError, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Components(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Components *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Components")) SWIG_fail;
  {
    try
    {
      result = (six::Components *)new six::Components();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__Components, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Components_posVelError_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Components *arg1 = (six::Components *) 0 ;
  mem::ScopedCopyablePtr< six::PosVelError > *arg2 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Components_posVelError_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Components, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Components_posVelError_set" "', argument " "1"" of type '" "six::Components *""'"); 
  }
  arg1 = reinterpret_cast< six::Components * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Components_posVelError_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp2);
  {
    try
    {
      if (arg1) (arg1)->posVelError = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Components_posVelError_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Components *arg1 = (six::Components *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::PosVelError > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Components_posVelError_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Components, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Components_posVelError_get" "', argument " "1"" of type '" "six::Components *""'"); 
  }
  arg1 = reinterpret_cast< six::Components * >(argp1);
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::PosVelError > *)& ((arg1)->posVelError);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Components_radarSensor_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Components *arg1 = (six::Components *) 0 ;
  mem::ScopedCopyablePtr< six::RadarSensor > *arg2 = (mem::ScopedCopyablePtr< six::RadarSensor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Components_radarSensor_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Components, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Components_radarSensor_set" "', argument " "1"" of type '" "six::Components *""'"); 
  }
  arg1 = reinterpret_cast< six::Components * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Components_radarSensor_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::RadarSensor > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::RadarSensor > * >(argp2);
  {
    try
    {
      if (arg1) (arg1)->radarSensor = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Components_radarSensor_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Components *arg1 = (six::Components *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::RadarSensor > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Components_radarSensor_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Components, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Components_radarSensor_get" "', argument " "1"" of type '" "six::Components *""'"); 
  }
  arg1 = reinterpret_cast< six::Components * >(argp1);
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::RadarSensor > *)& ((arg1)->radarSensor);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Components_tropoError_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Components *arg1 = (six::Components *) 0 ;
  mem::ScopedCopyablePtr< six::TropoError > *arg2 = (mem::ScopedCopyablePtr< six::TropoError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Components_tropoError_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Components, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Components_tropoError_set" "', argument " "1"" of type '" "six::Components *""'"); 
  }
  arg1 = reinterpret_cast< six::Components * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Components_tropoError_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::TropoError > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::TropoError > * >(argp2);
  {
    try
    {
      if (arg1) (arg1)->tropoError = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Components_tropoError_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Components *arg1 = (six::Components *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::TropoError > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Components_tropoError_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Components, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Components_tropoError_get" "', argument " "1"" of type '" "six::Components *""'"); 
  }
  arg1 = reinterpret_cast< six::Components * >(argp1);
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::TropoError > *)& ((arg1)->tropoError);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Components_ionoError_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Components *arg1 = (six::Components *) 0 ;
  mem::ScopedCopyablePtr< six::IonoError > *arg2 = (mem::ScopedCopyablePtr< six::IonoError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Components_ionoError_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Components, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Components_ionoError_set" "', argument " "1"" of type '" "six::Components *""'"); 
  }
  arg1 = reinterpret_cast< six::Components * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Components_ionoError_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::IonoError > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::IonoError > * >(argp2);
  {
    try
    {
      if (arg1) (arg1)->ionoError = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Components_ionoError_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Components *arg1 = (six::Components *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::IonoError > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Components_ionoError_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Components, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Components_ionoError_get" "', argument " "1"" of type '" "six::Components *""'"); 
  }
  arg1 = reinterpret_cast< six::Components * >(argp1);
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::IonoError > *)& ((arg1)->ionoError);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Components___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Components *arg1 = (six::Components *) 0 ;
  six::Components *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Components___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Components, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Components___eq__" "', argument " "1"" of type '" "six::Components const *""'"); 
  }
  arg1 = reinterpret_cast< six::Components * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__Components,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Components___eq__" "', argument " "2"" of type '" "six::Components const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Components___eq__" "', argument " "2"" of type '" "six::Components const &""'"); 
  }
  arg2 = reinterpret_cast< six::Components * >(argp2);
  {
    try
    {
      result = (bool)((six::Components const *)arg1)->operator ==((six::Components const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Components___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Components *arg1 = (six::Components *) 0 ;
  six::Components *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Components___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Components, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Components___ne__" "', argument " "1"" of type '" "six::Components const *""'"); 
  }
  arg1 = reinterpret_cast< six::Components * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__Components,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Components___ne__" "', argument " "2"" of type '" "six::Components const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Components___ne__" "', argument " "2"" of type '" "six::Components const &""'"); 
  }
  arg2 = reinterpret_cast< six::Components * >(argp2);
  {
    try
    {
      result = (bool)((six::Components const *)arg1)->operator !=((six::Components const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_delete_Components(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Components *arg1 = (six::Components *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Components",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Components, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Components" "', argument " "1"" of type '" "six::Components *""'"); 
  }
  arg1 = reinterpret_cast< six::Components * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *Components_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__Components, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CompositeSCP__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CompositeSCP::SCPType arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  six::CompositeSCP *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CompositeSCP",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_CompositeSCP" "', argument " "1"" of type '" "six::CompositeSCP::SCPType""'");
  } 
  arg1 = static_cast< six::CompositeSCP::SCPType >(val1);
  {
    try
    {
      result = (six::CompositeSCP *)new six::CompositeSCP(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__CompositeSCP, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_CompositeSCP__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CompositeSCP *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_CompositeSCP")) SWIG_fail;
  {
    try
    {
      result = (six::CompositeSCP *)new six::CompositeSCP();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__CompositeSCP, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_CompositeSCP(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_CompositeSCP__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_CompositeSCP__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_CompositeSCP'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::CompositeSCP::CompositeSCP(six::CompositeSCP::SCPType)\n"
    "    six::CompositeSCP::CompositeSCP()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CompositeSCP_scpType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CompositeSCP *arg1 = (six::CompositeSCP *) 0 ;
  six::CompositeSCP::SCPType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CompositeSCP_scpType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CompositeSCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeSCP_scpType_set" "', argument " "1"" of type '" "six::CompositeSCP *""'"); 
  }
  arg1 = reinterpret_cast< six::CompositeSCP * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CompositeSCP_scpType_set" "', argument " "2"" of type '" "six::CompositeSCP::SCPType""'");
  } 
  arg2 = static_cast< six::CompositeSCP::SCPType >(val2);
  {
    try
    {
      if (arg1) (arg1)->scpType = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CompositeSCP_scpType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CompositeSCP *arg1 = (six::CompositeSCP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::CompositeSCP::SCPType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeSCP_scpType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CompositeSCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeSCP_scpType_get" "', argument " "1"" of type '" "six::CompositeSCP *""'"); 
  }
  arg1 = reinterpret_cast< six::CompositeSCP * >(argp1);
  {
    try
    {
      result = (six::CompositeSCP::SCPType) ((arg1)->scpType);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CompositeSCP_xErr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CompositeSCP *arg1 = (six::CompositeSCP *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CompositeSCP_xErr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CompositeSCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeSCP_xErr_set" "', argument " "1"" of type '" "six::CompositeSCP *""'"); 
  }
  arg1 = reinterpret_cast< six::CompositeSCP * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CompositeSCP_xErr_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (arg1)->xErr = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CompositeSCP_xErr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CompositeSCP *arg1 = (six::CompositeSCP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeSCP_xErr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CompositeSCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeSCP_xErr_get" "', argument " "1"" of type '" "six::CompositeSCP *""'"); 
  }
  arg1 = reinterpret_cast< six::CompositeSCP * >(argp1);
  {
    try
    {
      result = (double) ((arg1)->xErr);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CompositeSCP_yErr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CompositeSCP *arg1 = (six::CompositeSCP *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CompositeSCP_yErr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CompositeSCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeSCP_yErr_set" "', argument " "1"" of type '" "six::CompositeSCP *""'"); 
  }
  arg1 = reinterpret_cast< six::CompositeSCP * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CompositeSCP_yErr_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (arg1)->yErr = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CompositeSCP_yErr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CompositeSCP *arg1 = (six::CompositeSCP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeSCP_yErr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CompositeSCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeSCP_yErr_get" "', argument " "1"" of type '" "six::CompositeSCP *""'"); 
  }
  arg1 = reinterpret_cast< six::CompositeSCP * >(argp1);
  {
    try
    {
      result = (double) ((arg1)->yErr);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CompositeSCP_xyErr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CompositeSCP *arg1 = (six::CompositeSCP *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CompositeSCP_xyErr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CompositeSCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeSCP_xyErr_set" "', argument " "1"" of type '" "six::CompositeSCP *""'"); 
  }
  arg1 = reinterpret_cast< six::CompositeSCP * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CompositeSCP_xyErr_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (arg1)->xyErr = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CompositeSCP_xyErr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CompositeSCP *arg1 = (six::CompositeSCP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeSCP_xyErr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CompositeSCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeSCP_xyErr_get" "', argument " "1"" of type '" "six::CompositeSCP *""'"); 
  }
  arg1 = reinterpret_cast< six::CompositeSCP * >(argp1);
  {
    try
    {
      result = (double) ((arg1)->xyErr);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CompositeSCP___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CompositeSCP *arg1 = (six::CompositeSCP *) 0 ;
  six::CompositeSCP *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CompositeSCP___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CompositeSCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeSCP___eq__" "', argument " "1"" of type '" "six::CompositeSCP const *""'"); 
  }
  arg1 = reinterpret_cast< six::CompositeSCP * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__CompositeSCP,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CompositeSCP___eq__" "', argument " "2"" of type '" "six::CompositeSCP const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CompositeSCP___eq__" "', argument " "2"" of type '" "six::CompositeSCP const &""'"); 
  }
  arg2 = reinterpret_cast< six::CompositeSCP * >(argp2);
  {
    try
    {
      result = (bool)((six::CompositeSCP const *)arg1)->operator ==((six::CompositeSCP const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_CompositeSCP___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CompositeSCP *arg1 = (six::CompositeSCP *) 0 ;
  six::CompositeSCP *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CompositeSCP___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CompositeSCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeSCP___ne__" "', argument " "1"" of type '" "six::CompositeSCP const *""'"); 
  }
  arg1 = reinterpret_cast< six::CompositeSCP * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__CompositeSCP,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CompositeSCP___ne__" "', argument " "2"" of type '" "six::CompositeSCP const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CompositeSCP___ne__" "', argument " "2"" of type '" "six::CompositeSCP const &""'"); 
  }
  arg2 = reinterpret_cast< six::CompositeSCP * >(argp2);
  {
    try
    {
      result = (bool)((six::CompositeSCP const *)arg1)->operator !=((six::CompositeSCP const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_delete_CompositeSCP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CompositeSCP *arg1 = (six::CompositeSCP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CompositeSCP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CompositeSCP, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CompositeSCP" "', argument " "1"" of type '" "six::CompositeSCP *""'"); 
  }
  arg1 = reinterpret_cast< six::CompositeSCP * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *CompositeSCP_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__CompositeSCP, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ErrorStatistics_compositeSCP_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ErrorStatistics *arg1 = (six::ErrorStatistics *) 0 ;
  mem::ScopedCopyablePtr< six::CompositeSCP > *arg2 = (mem::ScopedCopyablePtr< six::CompositeSCP > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ErrorStatistics_compositeSCP_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ErrorStatistics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ErrorStatistics_compositeSCP_set" "', argument " "1"" of type '" "six::ErrorStatistics *""'"); 
  }
  arg1 = reinterpret_cast< six::ErrorStatistics * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ErrorStatistics_compositeSCP_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::CompositeSCP > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::CompositeSCP > * >(argp2);
  {
    try
    {
      if (arg1) (arg1)->compositeSCP = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ErrorStatistics_compositeSCP_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ErrorStatistics *arg1 = (six::ErrorStatistics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::CompositeSCP > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ErrorStatistics_compositeSCP_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ErrorStatistics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ErrorStatistics_compositeSCP_get" "', argument " "1"" of type '" "six::ErrorStatistics *""'"); 
  }
  arg1 = reinterpret_cast< six::ErrorStatistics * >(argp1);
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::CompositeSCP > *)& ((arg1)->compositeSCP);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ErrorStatistics_components_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ErrorStatistics *arg1 = (six::ErrorStatistics *) 0 ;
  mem::ScopedCopyablePtr< six::Components > *arg2 = (mem::ScopedCopyablePtr< six::Components > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ErrorStatistics_components_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ErrorStatistics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ErrorStatistics_components_set" "', argument " "1"" of type '" "six::ErrorStatistics *""'"); 
  }
  arg1 = reinterpret_cast< six::ErrorStatistics * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ErrorStatistics_components_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::Components > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::Components > * >(argp2);
  {
    try
    {
      if (arg1) (arg1)->components = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ErrorStatistics_components_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ErrorStatistics *arg1 = (six::ErrorStatistics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::Components > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ErrorStatistics_components_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ErrorStatistics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ErrorStatistics_components_get" "', argument " "1"" of type '" "six::ErrorStatistics *""'"); 
  }
  arg1 = reinterpret_cast< six::ErrorStatistics * >(argp1);
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::Components > *)& ((arg1)->components);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ErrorStatistics_additionalParameters_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ErrorStatistics *arg1 = (six::ErrorStatistics *) 0 ;
  six::ParameterCollection *arg2 = (six::ParameterCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ErrorStatistics_additionalParameters_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ErrorStatistics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ErrorStatistics_additionalParameters_set" "', argument " "1"" of type '" "six::ErrorStatistics *""'"); 
  }
  arg1 = reinterpret_cast< six::ErrorStatistics * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__ParameterCollection, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ErrorStatistics_additionalParameters_set" "', argument " "2"" of type '" "six::ParameterCollection *""'"); 
  }
  arg2 = reinterpret_cast< six::ParameterCollection * >(argp2);
  {
    try
    {
      if (arg1) (arg1)->additionalParameters = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ErrorStatistics_additionalParameters_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ErrorStatistics *arg1 = (six::ErrorStatistics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::ParameterCollection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ErrorStatistics_additionalParameters_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ErrorStatistics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ErrorStatistics_additionalParameters_get" "', argument " "1"" of type '" "six::ErrorStatistics *""'"); 
  }
  arg1 = reinterpret_cast< six::ErrorStatistics * >(argp1);
  {
    try
    {
      result = (six::ParameterCollection *)& ((arg1)->additionalParameters);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__ParameterCollection, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ErrorStatistics(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ErrorStatistics *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ErrorStatistics")) SWIG_fail;
  {
    try
    {
      result = (six::ErrorStatistics *)new six::ErrorStatistics();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__ErrorStatistics, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ErrorStatistics___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ErrorStatistics *arg1 = (six::ErrorStatistics *) 0 ;
  six::ErrorStatistics *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ErrorStatistics___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ErrorStatistics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ErrorStatistics___eq__" "', argument " "1"" of type '" "six::ErrorStatistics const *""'"); 
  }
  arg1 = reinterpret_cast< six::ErrorStatistics * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__ErrorStatistics,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ErrorStatistics___eq__" "', argument " "2"" of type '" "six::ErrorStatistics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ErrorStatistics___eq__" "', argument " "2"" of type '" "six::ErrorStatistics const &""'"); 
  }
  arg2 = reinterpret_cast< six::ErrorStatistics * >(argp2);
  {
    try
    {
      result = (bool)((six::ErrorStatistics const *)arg1)->operator ==((six::ErrorStatistics const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ErrorStatistics___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ErrorStatistics *arg1 = (six::ErrorStatistics *) 0 ;
  six::ErrorStatistics *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ErrorStatistics___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ErrorStatistics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ErrorStatistics___ne__" "', argument " "1"" of type '" "six::ErrorStatistics const *""'"); 
  }
  arg1 = reinterpret_cast< six::ErrorStatistics * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__ErrorStatistics,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ErrorStatistics___ne__" "', argument " "2"" of type '" "six::ErrorStatistics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ErrorStatistics___ne__" "', argument " "2"" of type '" "six::ErrorStatistics const &""'"); 
  }
  arg2 = reinterpret_cast< six::ErrorStatistics * >(argp2);
  {
    try
    {
      result = (bool)((six::ErrorStatistics const *)arg1)->operator !=((six::ErrorStatistics const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_delete_ErrorStatistics(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ErrorStatistics *arg1 = (six::ErrorStatistics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ErrorStatistics",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ErrorStatistics, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ErrorStatistics" "', argument " "1"" of type '" "six::ErrorStatistics *""'"); 
  }
  arg1 = reinterpret_cast< six::ErrorStatistics * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *ErrorStatistics_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__ErrorStatistics, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MatchCollect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MatchCollect *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_MatchCollect")) SWIG_fail;
  {
    try
    {
      result = (six::MatchCollect *)new six::MatchCollect();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__MatchCollect, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_MatchCollect_coreName_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MatchCollect *arg1 = (six::MatchCollect *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatchCollect_coreName_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__MatchCollect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchCollect_coreName_set" "', argument " "1"" of type '" "six::MatchCollect *""'"); 
  }
  arg1 = reinterpret_cast< six::MatchCollect * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatchCollect_coreName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatchCollect_coreName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try
    {
      if (arg1) (arg1)->coreName = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_MatchCollect_coreName_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MatchCollect *arg1 = (six::MatchCollect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MatchCollect_coreName_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__MatchCollect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchCollect_coreName_get" "', argument " "1"" of type '" "six::MatchCollect *""'"); 
  }
  arg1 = reinterpret_cast< six::MatchCollect * >(argp1);
  {
    try
    {
      result = (std::string *) & ((arg1)->coreName);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_MatchCollect_matchIndex_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MatchCollect *arg1 = (six::MatchCollect *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatchCollect_matchIndex_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__MatchCollect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchCollect_matchIndex_set" "', argument " "1"" of type '" "six::MatchCollect *""'"); 
  }
  arg1 = reinterpret_cast< six::MatchCollect * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatchCollect_matchIndex_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      if (arg1) (arg1)->matchIndex = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_MatchCollect_matchIndex_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MatchCollect *arg1 = (six::MatchCollect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MatchCollect_matchIndex_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__MatchCollect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchCollect_matchIndex_get" "', argument " "1"" of type '" "six::MatchCollect *""'"); 
  }
  arg1 = reinterpret_cast< six::MatchCollect * >(argp1);
  {
    try
    {
      result = (int) ((arg1)->matchIndex);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_MatchCollect_parameters_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MatchCollect *arg1 = (six::MatchCollect *) 0 ;
  six::ParameterCollection *arg2 = (six::ParameterCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatchCollect_parameters_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__MatchCollect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchCollect_parameters_set" "', argument " "1"" of type '" "six::MatchCollect *""'"); 
  }
  arg1 = reinterpret_cast< six::MatchCollect * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__ParameterCollection, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatchCollect_parameters_set" "', argument " "2"" of type '" "six::ParameterCollection *""'"); 
  }
  arg2 = reinterpret_cast< six::ParameterCollection * >(argp2);
  {
    try
    {
      if (arg1) (arg1)->parameters = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_MatchCollect_parameters_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MatchCollect *arg1 = (six::MatchCollect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::ParameterCollection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MatchCollect_parameters_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__MatchCollect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchCollect_parameters_get" "', argument " "1"" of type '" "six::MatchCollect *""'"); 
  }
  arg1 = reinterpret_cast< six::MatchCollect * >(argp1);
  {
    try
    {
      result = (six::ParameterCollection *)& ((arg1)->parameters);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__ParameterCollection, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_MatchCollect___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MatchCollect *arg1 = (six::MatchCollect *) 0 ;
  six::MatchCollect *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatchCollect___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__MatchCollect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchCollect___eq__" "', argument " "1"" of type '" "six::MatchCollect const *""'"); 
  }
  arg1 = reinterpret_cast< six::MatchCollect * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__MatchCollect,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatchCollect___eq__" "', argument " "2"" of type '" "six::MatchCollect const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatchCollect___eq__" "', argument " "2"" of type '" "six::MatchCollect const &""'"); 
  }
  arg2 = reinterpret_cast< six::MatchCollect * >(argp2);
  {
    try
    {
      result = (bool)((six::MatchCollect const *)arg1)->operator ==((six::MatchCollect const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_MatchCollect___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MatchCollect *arg1 = (six::MatchCollect *) 0 ;
  six::MatchCollect *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatchCollect___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__MatchCollect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchCollect___ne__" "', argument " "1"" of type '" "six::MatchCollect const *""'"); 
  }
  arg1 = reinterpret_cast< six::MatchCollect * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__MatchCollect,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatchCollect___ne__" "', argument " "2"" of type '" "six::MatchCollect const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatchCollect___ne__" "', argument " "2"" of type '" "six::MatchCollect const &""'"); 
  }
  arg2 = reinterpret_cast< six::MatchCollect * >(argp2);
  {
    try
    {
      result = (bool)((six::MatchCollect const *)arg1)->operator !=((six::MatchCollect const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_delete_MatchCollect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MatchCollect *arg1 = (six::MatchCollect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MatchCollect",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__MatchCollect, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MatchCollect" "', argument " "1"" of type '" "six::MatchCollect *""'"); 
  }
  arg1 = reinterpret_cast< six::MatchCollect * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *MatchCollect_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__MatchCollect, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MatchType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MatchType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_MatchType")) SWIG_fail;
  {
    try
    {
      result = (six::MatchType *)new six::MatchType();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__MatchType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_MatchType_collectorName_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MatchType *arg1 = (six::MatchType *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatchType_collectorName_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__MatchType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchType_collectorName_set" "', argument " "1"" of type '" "six::MatchType *""'"); 
  }
  arg1 = reinterpret_cast< six::MatchType * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatchType_collectorName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatchType_collectorName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try
    {
      if (arg1) (arg1)->collectorName = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_MatchType_collectorName_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MatchType *arg1 = (six::MatchType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MatchType_collectorName_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__MatchType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchType_collectorName_get" "', argument " "1"" of type '" "six::MatchType *""'"); 
  }
  arg1 = reinterpret_cast< six::MatchType * >(argp1);
  {
    try
    {
      result = (std::string *) & ((arg1)->collectorName);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_MatchType_illuminatorName_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MatchType *arg1 = (six::MatchType *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatchType_illuminatorName_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__MatchType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchType_illuminatorName_set" "', argument " "1"" of type '" "six::MatchType *""'"); 
  }
  arg1 = reinterpret_cast< six::MatchType * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatchType_illuminatorName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatchType_illuminatorName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try
    {
      if (arg1) (arg1)->illuminatorName = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_MatchType_illuminatorName_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MatchType *arg1 = (six::MatchType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MatchType_illuminatorName_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__MatchType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchType_illuminatorName_get" "', argument " "1"" of type '" "six::MatchType *""'"); 
  }
  arg1 = reinterpret_cast< six::MatchType * >(argp1);
  {
    try
    {
      result = (std::string *) & ((arg1)->illuminatorName);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_MatchType_matchType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MatchType *arg1 = (six::MatchType *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = (std::vector< std::string,std::allocator< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatchType_matchType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__MatchType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchType_matchType_set" "', argument " "1"" of type '" "six::MatchType *""'"); 
  }
  arg1 = reinterpret_cast< six::MatchType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatchType_matchType_set" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string,std::allocator< std::string > > * >(argp2);
  {
    try
    {
      if (arg1) (arg1)->matchType = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_MatchType_matchType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MatchType *arg1 = (six::MatchType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MatchType_matchType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__MatchType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchType_matchType_get" "', argument " "1"" of type '" "six::MatchType *""'"); 
  }
  arg1 = reinterpret_cast< six::MatchType * >(argp1);
  {
    try
    {
      result = (std::vector< std::string,std::allocator< std::string > > *)& ((arg1)->matchType);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_MatchType_typeID_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MatchType *arg1 = (six::MatchType *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatchType_typeID_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__MatchType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchType_typeID_set" "', argument " "1"" of type '" "six::MatchType *""'"); 
  }
  arg1 = reinterpret_cast< six::MatchType * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatchType_typeID_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatchType_typeID_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try
    {
      if (arg1) (arg1)->typeID = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_MatchType_typeID_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MatchType *arg1 = (six::MatchType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MatchType_typeID_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__MatchType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchType_typeID_get" "', argument " "1"" of type '" "six::MatchType *""'"); 
  }
  arg1 = reinterpret_cast< six::MatchType * >(argp1);
  {
    try
    {
      result = (std::string *) & ((arg1)->typeID);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_MatchType_currentIndex_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MatchType *arg1 = (six::MatchType *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatchType_currentIndex_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__MatchType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchType_currentIndex_set" "', argument " "1"" of type '" "six::MatchType *""'"); 
  }
  arg1 = reinterpret_cast< six::MatchType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatchType_currentIndex_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      if (arg1) (arg1)->currentIndex = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_MatchType_currentIndex_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MatchType *arg1 = (six::MatchType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MatchType_currentIndex_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__MatchType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchType_currentIndex_get" "', argument " "1"" of type '" "six::MatchType *""'"); 
  }
  arg1 = reinterpret_cast< six::MatchType * >(argp1);
  {
    try
    {
      result = (int) ((arg1)->currentIndex);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_MatchType_matchCollects_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MatchType *arg1 = (six::MatchType *) 0 ;
  std::vector< six::MatchCollect,std::allocator< six::MatchCollect > > *arg2 = (std::vector< six::MatchCollect,std::allocator< six::MatchCollect > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatchType_matchCollects_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__MatchType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchType_matchCollects_set" "', argument " "1"" of type '" "six::MatchType *""'"); 
  }
  arg1 = reinterpret_cast< six::MatchType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatchType_matchCollects_set" "', argument " "2"" of type '" "std::vector< six::MatchCollect,std::allocator< six::MatchCollect > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< six::MatchCollect,std::allocator< six::MatchCollect > > * >(argp2);
  {
    try
    {
      if (arg1) (arg1)->matchCollects = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_MatchType_matchCollects_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MatchType *arg1 = (six::MatchType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::MatchCollect,std::allocator< six::MatchCollect > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MatchType_matchCollects_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__MatchType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchType_matchCollects_get" "', argument " "1"" of type '" "six::MatchType *""'"); 
  }
  arg1 = reinterpret_cast< six::MatchType * >(argp1);
  {
    try
    {
      result = (std::vector< six::MatchCollect,std::allocator< six::MatchCollect > > *)& ((arg1)->matchCollects);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_MatchType___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MatchType *arg1 = (six::MatchType *) 0 ;
  six::MatchType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatchType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__MatchType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchType___eq__" "', argument " "1"" of type '" "six::MatchType const *""'"); 
  }
  arg1 = reinterpret_cast< six::MatchType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__MatchType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatchType___eq__" "', argument " "2"" of type '" "six::MatchType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatchType___eq__" "', argument " "2"" of type '" "six::MatchType const &""'"); 
  }
  arg2 = reinterpret_cast< six::MatchType * >(argp2);
  {
    try
    {
      result = (bool)((six::MatchType const *)arg1)->operator ==((six::MatchType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_MatchType___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MatchType *arg1 = (six::MatchType *) 0 ;
  six::MatchType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatchType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__MatchType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchType___ne__" "', argument " "1"" of type '" "six::MatchType const *""'"); 
  }
  arg1 = reinterpret_cast< six::MatchType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__MatchType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatchType___ne__" "', argument " "2"" of type '" "six::MatchType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatchType___ne__" "', argument " "2"" of type '" "six::MatchType const &""'"); 
  }
  arg2 = reinterpret_cast< six::MatchType * >(argp2);
  {
    try
    {
      result = (bool)((six::MatchType const *)arg1)->operator !=((six::MatchType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_delete_MatchType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MatchType *arg1 = (six::MatchType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MatchType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__MatchType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MatchType" "', argument " "1"" of type '" "six::MatchType *""'"); 
  }
  arg1 = reinterpret_cast< six::MatchType * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *MatchType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__MatchType, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MatchInformation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MatchInformation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_MatchInformation")) SWIG_fail;
  {
    try
    {
      result = (six::MatchInformation *)new six::MatchInformation();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__MatchInformation, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_MatchInformation_types_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MatchInformation *arg1 = (six::MatchInformation *) 0 ;
  std::vector< six::MatchType,std::allocator< six::MatchType > > *arg2 = (std::vector< six::MatchType,std::allocator< six::MatchType > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatchInformation_types_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__MatchInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchInformation_types_set" "', argument " "1"" of type '" "six::MatchInformation *""'"); 
  }
  arg1 = reinterpret_cast< six::MatchInformation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatchInformation_types_set" "', argument " "2"" of type '" "std::vector< six::MatchType,std::allocator< six::MatchType > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< six::MatchType,std::allocator< six::MatchType > > * >(argp2);
  {
    try
    {
      if (arg1) (arg1)->types = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_MatchInformation_types_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MatchInformation *arg1 = (six::MatchInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::MatchType,std::allocator< six::MatchType > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MatchInformation_types_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__MatchInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchInformation_types_get" "', argument " "1"" of type '" "six::MatchInformation *""'"); 
  }
  arg1 = reinterpret_cast< six::MatchInformation * >(argp1);
  {
    try
    {
      result = (std::vector< six::MatchType,std::allocator< six::MatchType > > *)& ((arg1)->types);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_MatchInformation___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MatchInformation *arg1 = (six::MatchInformation *) 0 ;
  six::MatchInformation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatchInformation___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__MatchInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchInformation___eq__" "', argument " "1"" of type '" "six::MatchInformation const *""'"); 
  }
  arg1 = reinterpret_cast< six::MatchInformation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__MatchInformation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatchInformation___eq__" "', argument " "2"" of type '" "six::MatchInformation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatchInformation___eq__" "', argument " "2"" of type '" "six::MatchInformation const &""'"); 
  }
  arg2 = reinterpret_cast< six::MatchInformation * >(argp2);
  {
    try
    {
      result = (bool)((six::MatchInformation const *)arg1)->operator ==((six::MatchInformation const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_MatchInformation___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MatchInformation *arg1 = (six::MatchInformation *) 0 ;
  six::MatchInformation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatchInformation___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__MatchInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchInformation___ne__" "', argument " "1"" of type '" "six::MatchInformation const *""'"); 
  }
  arg1 = reinterpret_cast< six::MatchInformation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__MatchInformation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatchInformation___ne__" "', argument " "2"" of type '" "six::MatchInformation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatchInformation___ne__" "', argument " "2"" of type '" "six::MatchInformation const &""'"); 
  }
  arg2 = reinterpret_cast< six::MatchInformation * >(argp2);
  {
    try
    {
      result = (bool)((six::MatchInformation const *)arg1)->operator !=((six::MatchInformation const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_delete_MatchInformation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MatchInformation *arg1 = (six::MatchInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MatchInformation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__MatchInformation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MatchInformation" "', argument " "1"" of type '" "six::MatchInformation *""'"); 
  }
  arg1 = reinterpret_cast< six::MatchInformation * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *MatchInformation_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__MatchInformation, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_NoiseLevel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::NoiseLevel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NoiseLevel")) SWIG_fail;
  {
    try
    {
      result = (six::NoiseLevel *)new six::NoiseLevel();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__NoiseLevel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_NoiseLevel_noiseType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::NoiseLevel *arg1 = (six::NoiseLevel *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NoiseLevel_noiseType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__NoiseLevel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NoiseLevel_noiseType_set" "', argument " "1"" of type '" "six::NoiseLevel *""'"); 
  }
  arg1 = reinterpret_cast< six::NoiseLevel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NoiseLevel_noiseType_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NoiseLevel_noiseType_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try
    {
      if (arg1) (arg1)->noiseType = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_NoiseLevel_noiseType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::NoiseLevel *arg1 = (six::NoiseLevel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NoiseLevel_noiseType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__NoiseLevel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NoiseLevel_noiseType_get" "', argument " "1"" of type '" "six::NoiseLevel *""'"); 
  }
  arg1 = reinterpret_cast< six::NoiseLevel * >(argp1);
  {
    try
    {
      result = (std::string *) & ((arg1)->noiseType);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_NoiseLevel_noisePoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::NoiseLevel *arg1 = (six::NoiseLevel *) 0 ;
  six::Poly2D *arg2 = (six::Poly2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NoiseLevel_noisePoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__NoiseLevel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NoiseLevel_noisePoly_set" "', argument " "1"" of type '" "six::NoiseLevel *""'"); 
  }
  arg1 = reinterpret_cast< six::NoiseLevel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NoiseLevel_noisePoly_set" "', argument " "2"" of type '" "six::Poly2D *""'"); 
  }
  arg2 = reinterpret_cast< six::Poly2D * >(argp2);
  {
    try
    {
      if (arg1) (arg1)->noisePoly = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_NoiseLevel_noisePoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::NoiseLevel *arg1 = (six::NoiseLevel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Poly2D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NoiseLevel_noisePoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__NoiseLevel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NoiseLevel_noisePoly_get" "', argument " "1"" of type '" "six::NoiseLevel *""'"); 
  }
  arg1 = reinterpret_cast< six::NoiseLevel * >(argp1);
  {
    try
    {
      result = (six::Poly2D *)& ((arg1)->noisePoly);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_NoiseLevel___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::NoiseLevel *arg1 = (six::NoiseLevel *) 0 ;
  six::NoiseLevel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NoiseLevel___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__NoiseLevel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NoiseLevel___eq__" "', argument " "1"" of type '" "six::NoiseLevel const *""'"); 
  }
  arg1 = reinterpret_cast< six::NoiseLevel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__NoiseLevel,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NoiseLevel___eq__" "', argument " "2"" of type '" "six::NoiseLevel const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NoiseLevel___eq__" "', argument " "2"" of type '" "six::NoiseLevel const &""'"); 
  }
  arg2 = reinterpret_cast< six::NoiseLevel * >(argp2);
  {
    try
    {
      result = (bool)((six::NoiseLevel const *)arg1)->operator ==((six::NoiseLevel const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_NoiseLevel___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::NoiseLevel *arg1 = (six::NoiseLevel *) 0 ;
  six::NoiseLevel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NoiseLevel___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__NoiseLevel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NoiseLevel___ne__" "', argument " "1"" of type '" "six::NoiseLevel const *""'"); 
  }
  arg1 = reinterpret_cast< six::NoiseLevel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__NoiseLevel,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NoiseLevel___ne__" "', argument " "2"" of type '" "six::NoiseLevel const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NoiseLevel___ne__" "', argument " "2"" of type '" "six::NoiseLevel const &""'"); 
  }
  arg2 = reinterpret_cast< six::NoiseLevel * >(argp2);
  {
    try
    {
      result = (bool)((six::NoiseLevel const *)arg1)->operator !=((six::NoiseLevel const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_delete_NoiseLevel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::NoiseLevel *arg1 = (six::NoiseLevel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NoiseLevel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__NoiseLevel, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NoiseLevel" "', argument " "1"" of type '" "six::NoiseLevel *""'"); 
  }
  arg1 = reinterpret_cast< six::NoiseLevel * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *NoiseLevel_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__NoiseLevel, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_Radiometric_NL_ABSOLUTE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Radiometric_NL_ABSOLUTE is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Radiometric_NL_ABSOLUTE_get(void) {
  PyObject *pyobj = 0;
  
  {
    try
    {
      pyobj = SWIG_FromCharPtr(six::Radiometric::NL_ABSOLUTE);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  return pyobj;
fail:
  return nullptr;
}


SWIGINTERN int Swig_var_Radiometric_NL_RELATIVE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Radiometric_NL_RELATIVE is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Radiometric_NL_RELATIVE_get(void) {
  PyObject *pyobj = 0;
  
  {
    try
    {
      pyobj = SWIG_FromCharPtr(six::Radiometric::NL_RELATIVE);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  return pyobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_Radiometric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Radiometric *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Radiometric")) SWIG_fail;
  {
    try
    {
      result = (six::Radiometric *)new six::Radiometric();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__Radiometric, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Radiometric_noiseLevel_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Radiometric *arg1 = (six::Radiometric *) 0 ;
  six::NoiseLevel *arg2 = (six::NoiseLevel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Radiometric_noiseLevel_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Radiometric, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Radiometric_noiseLevel_set" "', argument " "1"" of type '" "six::Radiometric *""'"); 
  }
  arg1 = reinterpret_cast< six::Radiometric * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__NoiseLevel, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Radiometric_noiseLevel_set" "', argument " "2"" of type '" "six::NoiseLevel *""'"); 
  }
  arg2 = reinterpret_cast< six::NoiseLevel * >(argp2);
  {
    try
    {
      if (arg1) (arg1)->noiseLevel = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Radiometric_noiseLevel_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Radiometric *arg1 = (six::Radiometric *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::NoiseLevel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Radiometric_noiseLevel_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Radiometric, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Radiometric_noiseLevel_get" "', argument " "1"" of type '" "six::Radiometric *""'"); 
  }
  arg1 = reinterpret_cast< six::Radiometric * >(argp1);
  {
    try
    {
      result = (six::NoiseLevel *)& ((arg1)->noiseLevel);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__NoiseLevel, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Radiometric_rcsSFPoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Radiometric *arg1 = (six::Radiometric *) 0 ;
  six::Poly2D *arg2 = (six::Poly2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Radiometric_rcsSFPoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Radiometric, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Radiometric_rcsSFPoly_set" "', argument " "1"" of type '" "six::Radiometric *""'"); 
  }
  arg1 = reinterpret_cast< six::Radiometric * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Radiometric_rcsSFPoly_set" "', argument " "2"" of type '" "six::Poly2D *""'"); 
  }
  arg2 = reinterpret_cast< six::Poly2D * >(argp2);
  {
    try
    {
      if (arg1) (arg1)->rcsSFPoly = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Radiometric_rcsSFPoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Radiometric *arg1 = (six::Radiometric *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Poly2D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Radiometric_rcsSFPoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Radiometric, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Radiometric_rcsSFPoly_get" "', argument " "1"" of type '" "six::Radiometric *""'"); 
  }
  arg1 = reinterpret_cast< six::Radiometric * >(argp1);
  {
    try
    {
      result = (six::Poly2D *)& ((arg1)->rcsSFPoly);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Radiometric_betaZeroSFPoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Radiometric *arg1 = (six::Radiometric *) 0 ;
  six::Poly2D *arg2 = (six::Poly2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Radiometric_betaZeroSFPoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Radiometric, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Radiometric_betaZeroSFPoly_set" "', argument " "1"" of type '" "six::Radiometric *""'"); 
  }
  arg1 = reinterpret_cast< six::Radiometric * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Radiometric_betaZeroSFPoly_set" "', argument " "2"" of type '" "six::Poly2D *""'"); 
  }
  arg2 = reinterpret_cast< six::Poly2D * >(argp2);
  {
    try
    {
      if (arg1) (arg1)->betaZeroSFPoly = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Radiometric_betaZeroSFPoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Radiometric *arg1 = (six::Radiometric *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Poly2D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Radiometric_betaZeroSFPoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Radiometric, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Radiometric_betaZeroSFPoly_get" "', argument " "1"" of type '" "six::Radiometric *""'"); 
  }
  arg1 = reinterpret_cast< six::Radiometric * >(argp1);
  {
    try
    {
      result = (six::Poly2D *)& ((arg1)->betaZeroSFPoly);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Radiometric_sigmaZeroSFPoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Radiometric *arg1 = (six::Radiometric *) 0 ;
  six::Poly2D *arg2 = (six::Poly2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Radiometric_sigmaZeroSFPoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Radiometric, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Radiometric_sigmaZeroSFPoly_set" "', argument " "1"" of type '" "six::Radiometric *""'"); 
  }
  arg1 = reinterpret_cast< six::Radiometric * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Radiometric_sigmaZeroSFPoly_set" "', argument " "2"" of type '" "six::Poly2D *""'"); 
  }
  arg2 = reinterpret_cast< six::Poly2D * >(argp2);
  {
    try
    {
      if (arg1) (arg1)->sigmaZeroSFPoly = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Radiometric_sigmaZeroSFPoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Radiometric *arg1 = (six::Radiometric *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Poly2D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Radiometric_sigmaZeroSFPoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Radiometric, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Radiometric_sigmaZeroSFPoly_get" "', argument " "1"" of type '" "six::Radiometric *""'"); 
  }
  arg1 = reinterpret_cast< six::Radiometric * >(argp1);
  {
    try
    {
      result = (six::Poly2D *)& ((arg1)->sigmaZeroSFPoly);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Radiometric_sigmaZeroSFIncidenceMap_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Radiometric *arg1 = (six::Radiometric *) 0 ;
  six::AppliedType *arg2 = (six::AppliedType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Radiometric_sigmaZeroSFIncidenceMap_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Radiometric, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Radiometric_sigmaZeroSFIncidenceMap_set" "', argument " "1"" of type '" "six::Radiometric *""'"); 
  }
  arg1 = reinterpret_cast< six::Radiometric * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__AppliedType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Radiometric_sigmaZeroSFIncidenceMap_set" "', argument " "2"" of type '" "six::AppliedType *""'"); 
  }
  arg2 = reinterpret_cast< six::AppliedType * >(argp2);
  {
    try
    {
      if (arg1) (arg1)->sigmaZeroSFIncidenceMap = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Radiometric_sigmaZeroSFIncidenceMap_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Radiometric *arg1 = (six::Radiometric *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::AppliedType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Radiometric_sigmaZeroSFIncidenceMap_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Radiometric, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Radiometric_sigmaZeroSFIncidenceMap_get" "', argument " "1"" of type '" "six::Radiometric *""'"); 
  }
  arg1 = reinterpret_cast< six::Radiometric * >(argp1);
  {
    try
    {
      result = (six::AppliedType *)& ((arg1)->sigmaZeroSFIncidenceMap);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__AppliedType, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Radiometric_gammaZeroSFPoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Radiometric *arg1 = (six::Radiometric *) 0 ;
  six::Poly2D *arg2 = (six::Poly2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Radiometric_gammaZeroSFPoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Radiometric, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Radiometric_gammaZeroSFPoly_set" "', argument " "1"" of type '" "six::Radiometric *""'"); 
  }
  arg1 = reinterpret_cast< six::Radiometric * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Radiometric_gammaZeroSFPoly_set" "', argument " "2"" of type '" "six::Poly2D *""'"); 
  }
  arg2 = reinterpret_cast< six::Poly2D * >(argp2);
  {
    try
    {
      if (arg1) (arg1)->gammaZeroSFPoly = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Radiometric_gammaZeroSFPoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Radiometric *arg1 = (six::Radiometric *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Poly2D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Radiometric_gammaZeroSFPoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Radiometric, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Radiometric_gammaZeroSFPoly_get" "', argument " "1"" of type '" "six::Radiometric *""'"); 
  }
  arg1 = reinterpret_cast< six::Radiometric * >(argp1);
  {
    try
    {
      result = (six::Poly2D *)& ((arg1)->gammaZeroSFPoly);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Radiometric_gammaZeroSFIncidenceMap_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Radiometric *arg1 = (six::Radiometric *) 0 ;
  six::AppliedType *arg2 = (six::AppliedType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Radiometric_gammaZeroSFIncidenceMap_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Radiometric, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Radiometric_gammaZeroSFIncidenceMap_set" "', argument " "1"" of type '" "six::Radiometric *""'"); 
  }
  arg1 = reinterpret_cast< six::Radiometric * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__AppliedType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Radiometric_gammaZeroSFIncidenceMap_set" "', argument " "2"" of type '" "six::AppliedType *""'"); 
  }
  arg2 = reinterpret_cast< six::AppliedType * >(argp2);
  {
    try
    {
      if (arg1) (arg1)->gammaZeroSFIncidenceMap = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Radiometric_gammaZeroSFIncidenceMap_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Radiometric *arg1 = (six::Radiometric *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::AppliedType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Radiometric_gammaZeroSFIncidenceMap_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Radiometric, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Radiometric_gammaZeroSFIncidenceMap_get" "', argument " "1"" of type '" "six::Radiometric *""'"); 
  }
  arg1 = reinterpret_cast< six::Radiometric * >(argp1);
  {
    try
    {
      result = (six::AppliedType *)& ((arg1)->gammaZeroSFIncidenceMap);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__AppliedType, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Radiometric___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Radiometric *arg1 = (six::Radiometric *) 0 ;
  six::Radiometric *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Radiometric___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Radiometric, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Radiometric___eq__" "', argument " "1"" of type '" "six::Radiometric const *""'"); 
  }
  arg1 = reinterpret_cast< six::Radiometric * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__Radiometric,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Radiometric___eq__" "', argument " "2"" of type '" "six::Radiometric const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Radiometric___eq__" "', argument " "2"" of type '" "six::Radiometric const &""'"); 
  }
  arg2 = reinterpret_cast< six::Radiometric * >(argp2);
  {
    try
    {
      result = (bool)((six::Radiometric const *)arg1)->operator ==((six::Radiometric const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Radiometric___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Radiometric *arg1 = (six::Radiometric *) 0 ;
  six::Radiometric *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Radiometric___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Radiometric, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Radiometric___ne__" "', argument " "1"" of type '" "six::Radiometric const *""'"); 
  }
  arg1 = reinterpret_cast< six::Radiometric * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__Radiometric,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Radiometric___ne__" "', argument " "2"" of type '" "six::Radiometric const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Radiometric___ne__" "', argument " "2"" of type '" "six::Radiometric const &""'"); 
  }
  arg2 = reinterpret_cast< six::Radiometric * >(argp2);
  {
    try
    {
      result = (bool)((six::Radiometric const *)arg1)->operator !=((six::Radiometric const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_delete_Radiometric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Radiometric *arg1 = (six::Radiometric *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Radiometric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Radiometric, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Radiometric" "', argument " "1"" of type '" "six::Radiometric *""'"); 
  }
  arg1 = reinterpret_cast< six::Radiometric * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *Radiometric_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__Radiometric, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_Data(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Data *arg1 = (six::Data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Data",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Data, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Data" "', argument " "1"" of type '" "six::Data *""'"); 
  }
  arg1 = reinterpret_cast< six::Data * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Data_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Data *arg1 = (six::Data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Data *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Data_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Data_clone" "', argument " "1"" of type '" "six::Data const *""'"); 
  }
  arg1 = reinterpret_cast< six::Data * >(argp1);
  {
    try
    {
      result = (six::Data *)((six::Data const *)arg1)->clone();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__Data, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Data_getDataType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Data *arg1 = (six::Data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::DataType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Data_getDataType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Data_getDataType" "', argument " "1"" of type '" "six::Data const *""'"); 
  }
  arg1 = reinterpret_cast< six::Data * >(argp1);
  {
    try
    {
      result = ((six::Data const *)arg1)->getDataType();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new six::DataType(static_cast< const six::DataType& >(result))), SWIGTYPE_p_six__DataType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Data_getPixelType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Data *arg1 = (six::Data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::PixelType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Data_getPixelType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Data_getPixelType" "', argument " "1"" of type '" "six::Data const *""'"); 
  }
  arg1 = reinterpret_cast< six::Data * >(argp1);
  {
    try
    {
      result = ((six::Data const *)arg1)->getPixelType();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new six::PixelType(static_cast< const six::PixelType& >(result))), SWIGTYPE_p_six__PixelType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Data_setPixelType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Data *arg1 = (six::Data *) 0 ;
  six::PixelType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Data_setPixelType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Data_setPixelType" "', argument " "1"" of type '" "six::Data *""'"); 
  }
  arg1 = reinterpret_cast< six::Data * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__PixelType,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Data_setPixelType" "', argument " "2"" of type '" "six::PixelType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Data_setPixelType" "', argument " "2"" of type '" "six::PixelType""'");
    } else {
      six::PixelType * temp = reinterpret_cast< six::PixelType * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try
    {
      (arg1)->setPixelType(arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Data_getNumRows(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Data *arg1 = (six::Data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Data_getNumRows",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Data_getNumRows" "', argument " "1"" of type '" "six::Data const *""'"); 
  }
  arg1 = reinterpret_cast< six::Data * >(argp1);
  {
    try
    {
      result = ((six::Data const *)arg1)->getNumRows();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Data_setNumRows(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Data *arg1 = (six::Data *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Data_setNumRows",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Data_setNumRows" "', argument " "1"" of type '" "six::Data *""'"); 
  }
  arg1 = reinterpret_cast< six::Data * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Data_setNumRows" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      (arg1)->setNumRows(arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Data_getNumCols(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Data *arg1 = (six::Data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Data_getNumCols",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Data_getNumCols" "', argument " "1"" of type '" "six::Data const *""'"); 
  }
  arg1 = reinterpret_cast< six::Data * >(argp1);
  {
    try
    {
      result = ((six::Data const *)arg1)->getNumCols();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Data_setNumCols(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Data *arg1 = (six::Data *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Data_setNumCols",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Data_setNumCols" "', argument " "1"" of type '" "six::Data *""'"); 
  }
  arg1 = reinterpret_cast< six::Data * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Data_setNumCols" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      (arg1)->setNumCols(arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Data_getImageCorners(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Data *arg1 = (six::Data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::LatLonCorners result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Data_getImageCorners",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Data_getImageCorners" "', argument " "1"" of type '" "six::Data const *""'"); 
  }
  arg1 = reinterpret_cast< six::Data * >(argp1);
  {
    try
    {
      result = ((six::Data const *)arg1)->getImageCorners();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new six::LatLonCorners(static_cast< const six::LatLonCorners& >(result))), SWIGTYPE_p_six__CornersT_scene__LatLon_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Data_setImageCorners(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Data *arg1 = (six::Data *) 0 ;
  six::LatLonCorners *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Data_setImageCorners",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Data_setImageCorners" "', argument " "1"" of type '" "six::Data *""'"); 
  }
  arg1 = reinterpret_cast< six::Data * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__CornersT_scene__LatLon_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Data_setImageCorners" "', argument " "2"" of type '" "six::LatLonCorners const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Data_setImageCorners" "', argument " "2"" of type '" "six::LatLonCorners const &""'"); 
  }
  arg2 = reinterpret_cast< six::LatLonCorners * >(argp2);
  {
    try
    {
      (arg1)->setImageCorners((six::LatLonCorners const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Data_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Data *arg1 = (six::Data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Data_getName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Data_getName" "', argument " "1"" of type '" "six::Data const *""'"); 
  }
  arg1 = reinterpret_cast< six::Data * >(argp1);
  {
    try
    {
      result = ((six::Data const *)arg1)->getName();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Data_setName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Data *arg1 = (six::Data *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Data_setName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Data_setName" "', argument " "1"" of type '" "six::Data *""'"); 
  }
  arg1 = reinterpret_cast< six::Data * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Data_setName" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try
    {
      (arg1)->setName(arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Data_getSource(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Data *arg1 = (six::Data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Data_getSource",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Data_getSource" "', argument " "1"" of type '" "six::Data const *""'"); 
  }
  arg1 = reinterpret_cast< six::Data * >(argp1);
  {
    try
    {
      result = ((six::Data const *)arg1)->getSource();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Data_setSource(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Data *arg1 = (six::Data *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Data_setSource",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Data_setSource" "', argument " "1"" of type '" "six::Data *""'"); 
  }
  arg1 = reinterpret_cast< six::Data * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Data_setSource" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try
    {
      (arg1)->setSource(arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Data_getCreationTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Data *arg1 = (six::Data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::DateTime result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Data_getCreationTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Data_getCreationTime" "', argument " "1"" of type '" "six::Data const *""'"); 
  }
  arg1 = reinterpret_cast< six::Data * >(argp1);
  {
    try
    {
      result = ((six::Data const *)arg1)->getCreationTime();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new six::DateTime(static_cast< const six::DateTime& >(result))), SWIGTYPE_p_nitf__DateTime, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Data_setCreationTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Data *arg1 = (six::Data *) 0 ;
  six::DateTime arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Data_setCreationTime",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Data_setCreationTime" "', argument " "1"" of type '" "six::Data *""'"); 
  }
  arg1 = reinterpret_cast< six::Data * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_nitf__DateTime,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Data_setCreationTime" "', argument " "2"" of type '" "six::DateTime""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Data_setCreationTime" "', argument " "2"" of type '" "six::DateTime""'");
    } else {
      six::DateTime * temp = reinterpret_cast< six::DateTime * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try
    {
      (arg1)->setCreationTime(arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Data_getCollectionStartDateTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Data *arg1 = (six::Data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::DateTime result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Data_getCollectionStartDateTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Data_getCollectionStartDateTime" "', argument " "1"" of type '" "six::Data const *""'"); 
  }
  arg1 = reinterpret_cast< six::Data * >(argp1);
  {
    try
    {
      result = ((six::Data const *)arg1)->getCollectionStartDateTime();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new six::DateTime(static_cast< const six::DateTime& >(result))), SWIGTYPE_p_nitf__DateTime, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Data_getNumBytesPerPixel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Data *arg1 = (six::Data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Data_getNumBytesPerPixel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Data_getNumBytesPerPixel" "', argument " "1"" of type '" "six::Data const *""'"); 
  }
  arg1 = reinterpret_cast< six::Data * >(argp1);
  {
    try
    {
      result = ((six::Data const *)arg1)->getNumBytesPerPixel();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Data_getNumChannels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Data *arg1 = (six::Data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Data_getNumChannels",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Data_getNumChannels" "', argument " "1"" of type '" "six::Data const *""'"); 
  }
  arg1 = reinterpret_cast< six::Data * >(argp1);
  {
    try
    {
      result = ((six::Data const *)arg1)->getNumChannels();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Data_getClassification__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Data *arg1 = (six::Data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Classification *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Data_getClassification",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Data_getClassification" "', argument " "1"" of type '" "six::Data const *""'"); 
  }
  arg1 = reinterpret_cast< six::Data * >(argp1);
  {
    try
    {
      result = (six::Classification *) &((six::Data const *)arg1)->getClassification();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__Classification, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Data_getClassification__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Data *arg1 = (six::Data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Classification *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Data_getClassification",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Data_getClassification" "', argument " "1"" of type '" "six::Data *""'"); 
  }
  arg1 = reinterpret_cast< six::Data * >(argp1);
  {
    try
    {
      result = (six::Classification *) &(arg1)->getClassification();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__Classification, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Data_getClassification(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__Data, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Data_getClassification__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__Data, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Data_getClassification__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Data_getClassification'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::Data::getClassification() const\n"
    "    six::Data::getClassification()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Data_getDisplayLUT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Data *arg1 = (six::Data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::LUT > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Data_getDisplayLUT",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Data_getDisplayLUT" "', argument " "1"" of type '" "six::Data *""'"); 
  }
  arg1 = reinterpret_cast< six::Data * >(argp1);
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::LUT > *) &(arg1)->getDisplayLUT();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__LUT_t, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Data_getVendorID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Data *arg1 = (six::Data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Data_getVendorID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Data_getVendorID" "', argument " "1"" of type '" "six::Data const *""'"); 
  }
  arg1 = reinterpret_cast< six::Data * >(argp1);
  {
    try
    {
      result = ((six::Data const *)arg1)->getVendorID();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Data_getVersion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Data *arg1 = (six::Data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Data_getVersion",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Data_getVersion" "', argument " "1"" of type '" "six::Data const *""'"); 
  }
  arg1 = reinterpret_cast< six::Data * >(argp1);
  {
    try
    {
      result = ((six::Data const *)arg1)->getVersion();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Data_setVersion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Data *arg1 = (six::Data *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Data_setVersion",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Data_setVersion" "', argument " "1"" of type '" "six::Data *""'"); 
  }
  arg1 = reinterpret_cast< six::Data * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Data_setVersion" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Data_setVersion" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try
    {
      (arg1)->setVersion((std::string const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return nullptr;
}


SWIGINTERN PyObject *Data_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__Data, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_XMLControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::XMLControl *arg1 = (six::XMLControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_XMLControl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__XMLControl, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_XMLControl" "', argument " "1"" of type '" "six::XMLControl *""'"); 
  }
  arg1 = reinterpret_cast< six::XMLControl * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_XMLControl_setLogger__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::XMLControl *arg1 = (six::XMLControl *) 0 ;
  logging::Logger *arg2 = (logging::Logger *) 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:XMLControl_setLogger",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__XMLControl, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLControl_setLogger" "', argument " "1"" of type '" "six::XMLControl *""'"); 
  }
  arg1 = reinterpret_cast< six::XMLControl * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_logging__Logger, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XMLControl_setLogger" "', argument " "2"" of type '" "logging::Logger *""'"); 
  }
  arg2 = reinterpret_cast< logging::Logger * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "XMLControl_setLogger" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try
    {
      (arg1)->setLogger(arg2,arg3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_XMLControl_setLogger__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::XMLControl *arg1 = (six::XMLControl *) 0 ;
  logging::Logger *arg2 = (logging::Logger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:XMLControl_setLogger",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__XMLControl, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLControl_setLogger" "', argument " "1"" of type '" "six::XMLControl *""'"); 
  }
  arg1 = reinterpret_cast< six::XMLControl * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_logging__Logger, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XMLControl_setLogger" "', argument " "2"" of type '" "logging::Logger *""'"); 
  }
  arg2 = reinterpret_cast< logging::Logger * >(argp2);
  {
    try
    {
      (arg1)->setLogger(arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_XMLControl_setLogger(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__XMLControl, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_logging__Logger, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_XMLControl_setLogger__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__XMLControl, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_logging__Logger, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], nullptr);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_XMLControl_setLogger__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'XMLControl_setLogger'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::XMLControl::setLogger(logging::Logger *,bool)\n"
    "    six::XMLControl::setLogger(logging::Logger *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_XMLControl_validate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xml::lite::Document *arg1 = (xml::lite::Document *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  logging::Logger *arg3 = (logging::Logger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:XMLControl_validate",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xml__lite__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLControl_validate" "', argument " "1"" of type '" "xml::lite::Document const *""'"); 
  }
  arg1 = reinterpret_cast< xml::lite::Document * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XMLControl_validate" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XMLControl_validate" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_logging__Logger, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "XMLControl_validate" "', argument " "3"" of type '" "logging::Logger *""'"); 
  }
  arg3 = reinterpret_cast< logging::Logger * >(argp3);
  {
    try
    {
      six::XMLControl::validate((xml::lite::Document const *)arg1,(std::vector< std::string,std::allocator< std::string > > const &)*arg2,arg3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_XMLControl_loadSchemaPaths(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string,std::allocator< std::string > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:XMLControl_loadSchemaPaths",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLControl_loadSchemaPaths" "', argument " "1"" of type '" "std::vector< std::string,std::allocator< std::string > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XMLControl_loadSchemaPaths" "', argument " "1"" of type '" "std::vector< std::string,std::allocator< std::string > > &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string,std::allocator< std::string > > * >(argp1);
  {
    try
    {
      six::XMLControl::loadSchemaPaths(*arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}

SWIGINTERN PyObject *_wrap_XMLControl_dataTypeToString__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DataType arg1 ;
  bool arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:XMLControl_dataTypeToString",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_six__DataType,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLControl_dataTypeToString" "', argument " "1"" of type '" "six::DataType""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XMLControl_dataTypeToString" "', argument " "1"" of type '" "six::DataType""'");
    } else {
      six::DataType * temp = reinterpret_cast< six::DataType * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XMLControl_dataTypeToString" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try
    {
      result = six::XMLControl::dataTypeToString(arg1,arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_XMLControl_dataTypeToString__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::DataType arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:XMLControl_dataTypeToString",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_six__DataType,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLControl_dataTypeToString" "', argument " "1"" of type '" "six::DataType""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XMLControl_dataTypeToString" "', argument " "1"" of type '" "six::DataType""'");
    } else {
      six::DataType * temp = reinterpret_cast< six::DataType * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try
    {
      result = six::XMLControl::dataTypeToString(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_XMLControl_dataTypeToString(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_six__DataType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_XMLControl_dataTypeToString__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_six__DataType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_XMLControl_dataTypeToString__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'XMLControl_dataTypeToString'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::XMLControl::dataTypeToString(six::DataType,bool)\n"
    "    six::XMLControl::dataTypeToString(six::DataType)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_XMLControl_splitVersion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:XMLControl_splitVersion",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLControl_splitVersion" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XMLControl_splitVersion" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XMLControl_splitVersion" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XMLControl_splitVersion" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string,std::allocator< std::string > > * >(argp2);
  {
    try
    {
      six::XMLControl::splitVersion((std::string const &)*arg1,*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return nullptr;
}


SWIGINTERN PyObject *XMLControl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__XMLControl, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_remapZeroTo360(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:remapZeroTo360",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "remapZeroTo360" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try
    {
      result = (double)six::remapZeroTo360(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_loadPluginDir(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:loadPluginDir",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "loadPluginDir" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "loadPluginDir" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try
    {
      six::loadPluginDir((std::string const &)*arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_loadXmlDataContentHandler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":loadXmlDataContentHandler")) SWIG_fail;
  {
    try
    {
      six::loadXmlDataContentHandler();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_parseData__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  XMLControlRegistry *arg1 = 0 ;
  ::io::InputStream *arg2 = 0 ;
  six::DataType arg3 ;
  std::vector< std::string,std::allocator< std::string > > *arg4 = 0 ;
  logging::Logger *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  mem::AutoPtr< six::Data > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:parseData",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_XMLControlRegistry,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parseData" "', argument " "1"" of type '" "XMLControlRegistry const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parseData" "', argument " "1"" of type '" "XMLControlRegistry const &""'"); 
  }
  arg1 = reinterpret_cast< XMLControlRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_io__InputStream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parseData" "', argument " "2"" of type '" "::io::InputStream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parseData" "', argument " "2"" of type '" "::io::InputStream &""'"); 
  }
  arg2 = reinterpret_cast< ::io::InputStream * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_six__DataType,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "parseData" "', argument " "3"" of type '" "six::DataType""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parseData" "', argument " "3"" of type '" "six::DataType""'");
    } else {
      six::DataType * temp = reinterpret_cast< six::DataType * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "parseData" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parseData" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg4 = ptr;
  }
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_logging__Logger,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "parseData" "', argument " "5"" of type '" "logging::Logger &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parseData" "', argument " "5"" of type '" "logging::Logger &""'"); 
  }
  arg5 = reinterpret_cast< logging::Logger * >(argp5);
  {
    try
    {
      result = six::parseData((XMLControlRegistry const &)*arg1,*arg2,arg3,(std::vector< std::string,std::allocator< std::string > > const &)*arg4,*arg5);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj((&result)->release(), SWIGTYPE_p_six__Data, SWIG_POINTER_OWN |  0 );
  
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_parseData__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  XMLControlRegistry *arg1 = 0 ;
  ::io::InputStream *arg2 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  logging::Logger *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  mem::AutoPtr< six::Data > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:parseData",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_XMLControlRegistry,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parseData" "', argument " "1"" of type '" "XMLControlRegistry const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parseData" "', argument " "1"" of type '" "XMLControlRegistry const &""'"); 
  }
  arg1 = reinterpret_cast< XMLControlRegistry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_io__InputStream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parseData" "', argument " "2"" of type '" "::io::InputStream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parseData" "', argument " "2"" of type '" "::io::InputStream &""'"); 
  }
  arg2 = reinterpret_cast< ::io::InputStream * >(argp2);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "parseData" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parseData" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_logging__Logger,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "parseData" "', argument " "4"" of type '" "logging::Logger &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parseData" "', argument " "4"" of type '" "logging::Logger &""'"); 
  }
  arg4 = reinterpret_cast< logging::Logger * >(argp4);
  {
    try
    {
      result = six::parseData((XMLControlRegistry const &)*arg1,*arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3,*arg4);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj((&result)->release(), SWIGTYPE_p_six__Data, SWIG_POINTER_OWN |  0 );
  
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_parseData(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_XMLControlRegistry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_io__InputStream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::string,std::allocator< std::string > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_logging__Logger, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_parseData__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_XMLControlRegistry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_io__InputStream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_six__DataType, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< std::string,std::allocator< std::string > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_logging__Logger, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_parseData__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'parseData'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::parseData(XMLControlRegistry const &,::io::InputStream &,six::DataType,std::vector< std::string,std::allocator< std::string > > const &,logging::Logger &)\n"
    "    six::parseData(XMLControlRegistry const &,::io::InputStream &,std::vector< std::string,std::allocator< std::string > > const &,logging::Logger &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_parseDataFromFile__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  XMLControlRegistry *arg1 = 0 ;
  std::string *arg2 = 0 ;
  six::DataType arg3 ;
  std::vector< std::string,std::allocator< std::string > > *arg4 = 0 ;
  logging::Logger *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  mem::AutoPtr< six::Data > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:parseDataFromFile",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_XMLControlRegistry,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parseDataFromFile" "', argument " "1"" of type '" "XMLControlRegistry const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parseDataFromFile" "', argument " "1"" of type '" "XMLControlRegistry const &""'"); 
  }
  arg1 = reinterpret_cast< XMLControlRegistry * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parseDataFromFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parseDataFromFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_six__DataType,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "parseDataFromFile" "', argument " "3"" of type '" "six::DataType""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parseDataFromFile" "', argument " "3"" of type '" "six::DataType""'");
    } else {
      six::DataType * temp = reinterpret_cast< six::DataType * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "parseDataFromFile" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parseDataFromFile" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg4 = ptr;
  }
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_logging__Logger,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "parseDataFromFile" "', argument " "5"" of type '" "logging::Logger &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parseDataFromFile" "', argument " "5"" of type '" "logging::Logger &""'"); 
  }
  arg5 = reinterpret_cast< logging::Logger * >(argp5);
  {
    try
    {
      result = six::parseDataFromFile((XMLControlRegistry const &)*arg1,(std::string const &)*arg2,arg3,(std::vector< std::string,std::allocator< std::string > > const &)*arg4,*arg5);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj((&result)->release(), SWIGTYPE_p_six__Data, SWIG_POINTER_OWN |  0 );
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_parseDataFromFile__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  XMLControlRegistry *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  logging::Logger *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  mem::AutoPtr< six::Data > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:parseDataFromFile",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_XMLControlRegistry,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parseDataFromFile" "', argument " "1"" of type '" "XMLControlRegistry const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parseDataFromFile" "', argument " "1"" of type '" "XMLControlRegistry const &""'"); 
  }
  arg1 = reinterpret_cast< XMLControlRegistry * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parseDataFromFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parseDataFromFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "parseDataFromFile" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parseDataFromFile" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_logging__Logger,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "parseDataFromFile" "', argument " "4"" of type '" "logging::Logger &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parseDataFromFile" "', argument " "4"" of type '" "logging::Logger &""'"); 
  }
  arg4 = reinterpret_cast< logging::Logger * >(argp4);
  {
    try
    {
      result = six::parseDataFromFile((XMLControlRegistry const &)*arg1,(std::string const &)*arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3,*arg4);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj((&result)->release(), SWIGTYPE_p_six__Data, SWIG_POINTER_OWN |  0 );
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_parseDataFromFile(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_XMLControlRegistry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::string,std::allocator< std::string > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_logging__Logger, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_parseDataFromFile__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_XMLControlRegistry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_six__DataType, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< std::string,std::allocator< std::string > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_logging__Logger, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_parseDataFromFile__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'parseDataFromFile'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::parseDataFromFile(XMLControlRegistry const &,std::string const &,six::DataType,std::vector< std::string,std::allocator< std::string > > const &,logging::Logger &)\n"
    "    six::parseDataFromFile(XMLControlRegistry const &,std::string const &,std::vector< std::string,std::allocator< std::string > > const &,logging::Logger &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_parseDataFromString__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  XMLControlRegistry *arg1 = 0 ;
  std::string *arg2 = 0 ;
  six::DataType arg3 ;
  std::vector< std::string,std::allocator< std::string > > *arg4 = 0 ;
  logging::Logger *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  mem::AutoPtr< six::Data > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:parseDataFromString",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_XMLControlRegistry,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parseDataFromString" "', argument " "1"" of type '" "XMLControlRegistry const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parseDataFromString" "', argument " "1"" of type '" "XMLControlRegistry const &""'"); 
  }
  arg1 = reinterpret_cast< XMLControlRegistry * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parseDataFromString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parseDataFromString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_six__DataType,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "parseDataFromString" "', argument " "3"" of type '" "six::DataType""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parseDataFromString" "', argument " "3"" of type '" "six::DataType""'");
    } else {
      six::DataType * temp = reinterpret_cast< six::DataType * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "parseDataFromString" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parseDataFromString" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg4 = ptr;
  }
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_logging__Logger,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "parseDataFromString" "', argument " "5"" of type '" "logging::Logger &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parseDataFromString" "', argument " "5"" of type '" "logging::Logger &""'"); 
  }
  arg5 = reinterpret_cast< logging::Logger * >(argp5);
  {
    try
    {
      result = six::parseDataFromString((XMLControlRegistry const &)*arg1,(std::string const &)*arg2,arg3,(std::vector< std::string,std::allocator< std::string > > const &)*arg4,*arg5);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj((&result)->release(), SWIGTYPE_p_six__Data, SWIG_POINTER_OWN |  0 );
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_parseDataFromString__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  XMLControlRegistry *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  logging::Logger *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  mem::AutoPtr< six::Data > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:parseDataFromString",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_XMLControlRegistry,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parseDataFromString" "', argument " "1"" of type '" "XMLControlRegistry const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parseDataFromString" "', argument " "1"" of type '" "XMLControlRegistry const &""'"); 
  }
  arg1 = reinterpret_cast< XMLControlRegistry * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parseDataFromString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parseDataFromString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "parseDataFromString" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parseDataFromString" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_logging__Logger,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "parseDataFromString" "', argument " "4"" of type '" "logging::Logger &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parseDataFromString" "', argument " "4"" of type '" "logging::Logger &""'"); 
  }
  arg4 = reinterpret_cast< logging::Logger * >(argp4);
  {
    try
    {
      result = six::parseDataFromString((XMLControlRegistry const &)*arg1,(std::string const &)*arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3,*arg4);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj((&result)->release(), SWIGTYPE_p_six__Data, SWIG_POINTER_OWN |  0 );
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_parseDataFromString(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_XMLControlRegistry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::string,std::allocator< std::string > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_logging__Logger, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_parseDataFromString__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_XMLControlRegistry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_six__DataType, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< std::string,std::allocator< std::string > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_logging__Logger, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_parseDataFromString__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'parseDataFromString'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::parseDataFromString(XMLControlRegistry const &,std::string const &,six::DataType,std::vector< std::string,std::allocator< std::string > > const &,logging::Logger &)\n"
    "    six::parseDataFromString(XMLControlRegistry const &,std::string const &,std::vector< std::string,std::allocator< std::string > > const &,logging::Logger &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_getErrors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ErrorStatistics *arg1 = (six::ErrorStatistics *) 0 ;
  types::RgAz< double > *arg2 = 0 ;
  scene::Errors *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:getErrors",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ErrorStatistics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getErrors" "', argument " "1"" of type '" "six::ErrorStatistics const *""'"); 
  }
  arg1 = reinterpret_cast< six::ErrorStatistics * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_types__RgAzT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "getErrors" "', argument " "2"" of type '" "types::RgAz< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getErrors" "', argument " "2"" of type '" "types::RgAz< double > const &""'"); 
  }
  arg2 = reinterpret_cast< types::RgAz< double > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_scene__Errors,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "getErrors" "', argument " "3"" of type '" "scene::Errors &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getErrors" "', argument " "3"" of type '" "scene::Errors &""'"); 
  }
  arg3 = reinterpret_cast< scene::Errors * >(argp3);
  {
    try
    {
      six::getErrors((six::ErrorStatistics const *)arg1,(types::RgAz< double > const &)*arg2,*arg3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_findSchemaPath(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:findSchemaPath",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "findSchemaPath" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "findSchemaPath" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try
    {
      result = six::findSchemaPath((std::string const &)*arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_delete_Options(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Options *arg1 = (six::Options *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Options",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Options, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Options" "', argument " "1"" of type '" "six::Options *""'"); 
  }
  arg1 = reinterpret_cast< six::Options * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Options_getParameter__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Options *arg1 = (six::Options *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  six::Parameter result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Options_getParameter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Options_getParameter" "', argument " "1"" of type '" "six::Options const *""'"); 
  }
  arg1 = reinterpret_cast< six::Options * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Options_getParameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Options_getParameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try
    {
      result = ((six::Options const *)arg1)->getParameter((std::string const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new six::Parameter(static_cast< const six::Parameter& >(result))), SWIGTYPE_p_six__Parameter, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Options_getParameter__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Options *arg1 = (six::Options *) 0 ;
  std::string *arg2 = 0 ;
  six::Parameter arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  six::Parameter result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Options_getParameter",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Options_getParameter" "', argument " "1"" of type '" "six::Options const *""'"); 
  }
  arg1 = reinterpret_cast< six::Options * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Options_getParameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Options_getParameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_six__Parameter,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Options_getParameter" "', argument " "3"" of type '" "six::Parameter""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Options_getParameter" "', argument " "3"" of type '" "six::Parameter""'");
    } else {
      six::Parameter * temp = reinterpret_cast< six::Parameter * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try
    {
      result = ((six::Options const *)arg1)->getParameter((std::string const &)*arg2,arg3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new six::Parameter(static_cast< const six::Parameter& >(result))), SWIGTYPE_p_six__Parameter, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Options_getParameter(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__Options, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Options_getParameter__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__Options, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_six__Parameter, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Options_getParameter__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Options_getParameter'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::Options::getParameter(std::string const &) const\n"
    "    six::Options::getParameter(std::string const &,six::Parameter) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Options_setParameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Options *arg1 = (six::Options *) 0 ;
  std::string *arg2 = 0 ;
  six::Parameter arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Options_setParameter",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Options_setParameter" "', argument " "1"" of type '" "six::Options *""'"); 
  }
  arg1 = reinterpret_cast< six::Options * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Options_setParameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Options_setParameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_six__Parameter,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Options_setParameter" "', argument " "3"" of type '" "six::Parameter""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Options_setParameter" "', argument " "3"" of type '" "six::Parameter""'");
    } else {
      six::Parameter * temp = reinterpret_cast< six::Parameter * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try
    {
      (arg1)->setParameter((std::string const &)*arg2,arg3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Options_hasParameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Options *arg1 = (six::Options *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Options_hasParameter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Options_hasParameter" "', argument " "1"" of type '" "six::Options const *""'"); 
  }
  arg1 = reinterpret_cast< six::Options * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Options_hasParameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Options_hasParameter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try
    {
      result = (bool)((six::Options const *)arg1)->hasParameter((std::string const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Options_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Options *arg1 = (six::Options *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::map< std::string,six::Parameter >::const_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Options_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Options_begin" "', argument " "1"" of type '" "six::Options const *""'"); 
  }
  arg1 = reinterpret_cast< six::Options * >(argp1);
  {
    try
    {
      result = ((six::Options const *)arg1)->begin();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new six::Options::ParameterIter(static_cast< const six::Options::ParameterIter& >(result))), SWIGTYPE_p_std__mapT_std__string_six__Parameter_t__const_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Options_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Options *arg1 = (six::Options *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::map< std::string,six::Parameter >::const_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Options_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Options_end" "', argument " "1"" of type '" "six::Options const *""'"); 
  }
  arg1 = reinterpret_cast< six::Options * >(argp1);
  {
    try
    {
      result = ((six::Options const *)arg1)->end();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new six::Options::ParameterIter(static_cast< const six::Options::ParameterIter& >(result))), SWIGTYPE_p_std__mapT_std__string_six__Parameter_t__const_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Options___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Options *arg1 = (six::Options *) 0 ;
  six::Options *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Options___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Options___eq__" "', argument " "1"" of type '" "six::Options const *""'"); 
  }
  arg1 = reinterpret_cast< six::Options * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__Options,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Options___eq__" "', argument " "2"" of type '" "six::Options const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Options___eq__" "', argument " "2"" of type '" "six::Options const &""'"); 
  }
  arg2 = reinterpret_cast< six::Options * >(argp2);
  {
    try
    {
      result = (bool)((six::Options const *)arg1)->operator ==((six::Options const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_Options___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Options *arg1 = (six::Options *) 0 ;
  six::Options *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Options___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Options___ne__" "', argument " "1"" of type '" "six::Options const *""'"); 
  }
  arg1 = reinterpret_cast< six::Options * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__Options,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Options___ne__" "', argument " "2"" of type '" "six::Options const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Options___ne__" "', argument " "2"" of type '" "six::Options const &""'"); 
  }
  arg2 = reinterpret_cast< six::Options * >(argp2);
  {
    try
    {
      result = (bool)((six::Options const *)arg1)->operator !=((six::Options const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_Options(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Options *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Options")) SWIG_fail;
  {
    try
    {
      result = (six::Options *)new six::Options();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__Options, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *Options_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__Options, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_XMLControlCreator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::XMLControlCreator *arg1 = (six::XMLControlCreator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_XMLControlCreator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__XMLControlCreator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_XMLControlCreator" "', argument " "1"" of type '" "six::XMLControlCreator *""'"); 
  }
  arg1 = reinterpret_cast< six::XMLControlCreator * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_XMLControlCreator_newXMLControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::XMLControlCreator *arg1 = (six::XMLControlCreator *) 0 ;
  logging::Logger *arg2 = (logging::Logger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  six::XMLControl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:XMLControlCreator_newXMLControl",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__XMLControlCreator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLControlCreator_newXMLControl" "', argument " "1"" of type '" "six::XMLControlCreator const *""'"); 
  }
  arg1 = reinterpret_cast< six::XMLControlCreator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_logging__Logger, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XMLControlCreator_newXMLControl" "', argument " "2"" of type '" "logging::Logger *""'"); 
  }
  arg2 = reinterpret_cast< logging::Logger * >(argp2);
  {
    try
    {
      result = (six::XMLControl *)((six::XMLControlCreator const *)arg1)->newXMLControl(arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__XMLControl, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *XMLControlCreator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__XMLControlCreator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_XMLControlRegistry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::XMLControlRegistry *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_XMLControlRegistry")) SWIG_fail;
  {
    try
    {
      result = (six::XMLControlRegistry *)new six::XMLControlRegistry();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__XMLControlRegistry, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_delete_XMLControlRegistry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::XMLControlRegistry *arg1 = (six::XMLControlRegistry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_XMLControlRegistry",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__XMLControlRegistry, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_XMLControlRegistry" "', argument " "1"" of type '" "six::XMLControlRegistry *""'"); 
  }
  arg1 = reinterpret_cast< six::XMLControlRegistry * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_XMLControlRegistry_addCreator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::XMLControlRegistry *arg1 = (six::XMLControlRegistry *) 0 ;
  std::string *arg2 = 0 ;
  mem::AutoPtr< six::XMLControlCreator > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:XMLControlRegistry_addCreator",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__XMLControlRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLControlRegistry_addCreator" "', argument " "1"" of type '" "six::XMLControlRegistry *""'"); 
  }
  arg1 = reinterpret_cast< six::XMLControlRegistry * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XMLControlRegistry_addCreator" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XMLControlRegistry_addCreator" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__auto_ptrT_six__XMLControlCreator_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "XMLControlRegistry_addCreator" "', argument " "3"" of type '" "mem::AutoPtr< six::XMLControlCreator >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XMLControlRegistry_addCreator" "', argument " "3"" of type '" "mem::AutoPtr< six::XMLControlCreator >""'");
    } else {
      mem::AutoPtr< six::XMLControlCreator > * temp = reinterpret_cast< mem::AutoPtr< six::XMLControlCreator > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try
    {
      (arg1)->addCreator_((std::string const &)*arg2,arg3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_XMLControlRegistry_addCreator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::XMLControlRegistry *arg1 = (six::XMLControlRegistry *) 0 ;
  std::string *arg2 = 0 ;
  six::XMLControlCreator *arg3 = (six::XMLControlCreator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:XMLControlRegistry_addCreator",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__XMLControlRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLControlRegistry_addCreator" "', argument " "1"" of type '" "six::XMLControlRegistry *""'"); 
  }
  arg1 = reinterpret_cast< six::XMLControlRegistry * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XMLControlRegistry_addCreator" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XMLControlRegistry_addCreator" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_six__XMLControlCreator, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "XMLControlRegistry_addCreator" "', argument " "3"" of type '" "six::XMLControlCreator *""'"); 
  }
  arg3 = reinterpret_cast< six::XMLControlCreator * >(argp3);
  {
    try
    {
      (arg1)->addCreator((std::string const &)*arg2,arg3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_XMLControlRegistry_addCreator__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::XMLControlRegistry *arg1 = (six::XMLControlRegistry *) 0 ;
  six::DataType arg2 ;
  mem::AutoPtr< six::XMLControlCreator > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:XMLControlRegistry_addCreator",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__XMLControlRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLControlRegistry_addCreator" "', argument " "1"" of type '" "six::XMLControlRegistry *""'"); 
  }
  arg1 = reinterpret_cast< six::XMLControlRegistry * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__DataType,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XMLControlRegistry_addCreator" "', argument " "2"" of type '" "six::DataType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XMLControlRegistry_addCreator" "', argument " "2"" of type '" "six::DataType""'");
    } else {
      six::DataType * temp = reinterpret_cast< six::DataType * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__auto_ptrT_six__XMLControlCreator_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "XMLControlRegistry_addCreator" "', argument " "3"" of type '" "mem::AutoPtr< six::XMLControlCreator >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XMLControlRegistry_addCreator" "', argument " "3"" of type '" "mem::AutoPtr< six::XMLControlCreator >""'");
    } else {
      mem::AutoPtr< six::XMLControlCreator > * temp = reinterpret_cast< mem::AutoPtr< six::XMLControlCreator > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try
    {
      (arg1)->addCreator_(arg2,arg3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_XMLControlRegistry_addCreator__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::XMLControlRegistry *arg1 = (six::XMLControlRegistry *) 0 ;
  six::DataType arg2 ;
  six::XMLControlCreator *arg3 = (six::XMLControlCreator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:XMLControlRegistry_addCreator",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__XMLControlRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLControlRegistry_addCreator" "', argument " "1"" of type '" "six::XMLControlRegistry *""'"); 
  }
  arg1 = reinterpret_cast< six::XMLControlRegistry * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__DataType,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XMLControlRegistry_addCreator" "', argument " "2"" of type '" "six::DataType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XMLControlRegistry_addCreator" "', argument " "2"" of type '" "six::DataType""'");
    } else {
      six::DataType * temp = reinterpret_cast< six::DataType * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_six__XMLControlCreator, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "XMLControlRegistry_addCreator" "', argument " "3"" of type '" "six::XMLControlCreator *""'"); 
  }
  arg3 = reinterpret_cast< six::XMLControlCreator * >(argp3);
  {
    try
    {
      (arg1)->addCreator(arg2,arg3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_XMLControlRegistry_addCreator(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__XMLControlRegistry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__DataType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__auto_ptrT_six__XMLControlCreator_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_XMLControlRegistry_addCreator__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__XMLControlRegistry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__DataType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_six__XMLControlCreator, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_XMLControlRegistry_addCreator__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__XMLControlRegistry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__auto_ptrT_six__XMLControlCreator_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_XMLControlRegistry_addCreator__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__XMLControlRegistry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_six__XMLControlCreator, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_XMLControlRegistry_addCreator__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'XMLControlRegistry_addCreator'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::XMLControlRegistry::addCreator(std::string const &,mem::AutoPtr< six::XMLControlCreator >)\n"
    "    six::XMLControlRegistry::addCreator(std::string const &,six::XMLControlCreator *)\n"
    "    six::XMLControlRegistry::addCreator(six::DataType,mem::AutoPtr< six::XMLControlCreator >)\n"
    "    six::XMLControlRegistry::addCreator(six::DataType,six::XMLControlCreator *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_XMLControlRegistry_newXMLControl__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::XMLControlRegistry *arg1 = (six::XMLControlRegistry *) 0 ;
  std::string *arg2 = 0 ;
  logging::Logger *arg3 = (logging::Logger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  six::XMLControl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:XMLControlRegistry_newXMLControl",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__XMLControlRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLControlRegistry_newXMLControl" "', argument " "1"" of type '" "six::XMLControlRegistry const *""'"); 
  }
  arg1 = reinterpret_cast< six::XMLControlRegistry * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XMLControlRegistry_newXMLControl" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XMLControlRegistry_newXMLControl" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_logging__Logger, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "XMLControlRegistry_newXMLControl" "', argument " "3"" of type '" "logging::Logger *""'"); 
  }
  arg3 = reinterpret_cast< logging::Logger * >(argp3);
  {
    try
    {
      result = (six::XMLControl *)((six::XMLControlRegistry const *)arg1)->newXMLControl((std::string const &)*arg2,arg3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__XMLControl, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_XMLControlRegistry_newXMLControl__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::XMLControlRegistry *arg1 = (six::XMLControlRegistry *) 0 ;
  six::DataType arg2 ;
  logging::Logger *arg3 = (logging::Logger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  six::XMLControl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:XMLControlRegistry_newXMLControl",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__XMLControlRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLControlRegistry_newXMLControl" "', argument " "1"" of type '" "six::XMLControlRegistry const *""'"); 
  }
  arg1 = reinterpret_cast< six::XMLControlRegistry * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__DataType,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XMLControlRegistry_newXMLControl" "', argument " "2"" of type '" "six::DataType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XMLControlRegistry_newXMLControl" "', argument " "2"" of type '" "six::DataType""'");
    } else {
      six::DataType * temp = reinterpret_cast< six::DataType * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_logging__Logger, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "XMLControlRegistry_newXMLControl" "', argument " "3"" of type '" "logging::Logger *""'"); 
  }
  arg3 = reinterpret_cast< logging::Logger * >(argp3);
  {
    try
    {
      result = (six::XMLControl *)((six::XMLControlRegistry const *)arg1)->newXMLControl(arg2,arg3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__XMLControl, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_XMLControlRegistry_newXMLControl(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__XMLControlRegistry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__DataType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_logging__Logger, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_XMLControlRegistry_newXMLControl__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__XMLControlRegistry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_logging__Logger, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_XMLControlRegistry_newXMLControl__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'XMLControlRegistry_newXMLControl'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::XMLControlRegistry::newXMLControl(std::string const &,logging::Logger *) const\n"
    "    six::XMLControlRegistry::newXMLControl(six::DataType,logging::Logger *) const\n");
  return 0;
}


SWIGINTERN PyObject *XMLControlRegistry_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__XMLControlRegistry, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_GeoInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::GeoInfo *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_GeoInfo")) SWIG_fail;
  {
    try
    {
      result = (six::GeoInfo *)new six::GeoInfo();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__GeoInfo, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_delete_GeoInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::GeoInfo *arg1 = (six::GeoInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GeoInfo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__GeoInfo, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GeoInfo" "', argument " "1"" of type '" "six::GeoInfo *""'"); 
  }
  arg1 = reinterpret_cast< six::GeoInfo * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_GeoInfo_name_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::GeoInfo *arg1 = (six::GeoInfo *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GeoInfo_name_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__GeoInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoInfo_name_set" "', argument " "1"" of type '" "six::GeoInfo *""'"); 
  }
  arg1 = reinterpret_cast< six::GeoInfo * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoInfo_name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoInfo_name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try
    {
      if (arg1) (arg1)->name = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_GeoInfo_name_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::GeoInfo *arg1 = (six::GeoInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GeoInfo_name_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__GeoInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoInfo_name_get" "', argument " "1"" of type '" "six::GeoInfo *""'"); 
  }
  arg1 = reinterpret_cast< six::GeoInfo * >(argp1);
  {
    try
    {
      result = (std::string *) & ((arg1)->name);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_GeoInfo_geoInfos_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::GeoInfo *arg1 = (six::GeoInfo *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > > *arg2 = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GeoInfo_geoInfos_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__GeoInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoInfo_geoInfos_set" "', argument " "1"" of type '" "six::GeoInfo *""'"); 
  }
  arg1 = reinterpret_cast< six::GeoInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoInfo_geoInfos_set" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > > * >(argp2);
  {
    try
    {
      if (arg1) (arg1)->geoInfos = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_GeoInfo_geoInfos_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::GeoInfo *arg1 = (six::GeoInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GeoInfo_geoInfos_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__GeoInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoInfo_geoInfos_get" "', argument " "1"" of type '" "six::GeoInfo *""'"); 
  }
  arg1 = reinterpret_cast< six::GeoInfo * >(argp1);
  {
    try
    {
      result = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > > *)& ((arg1)->geoInfos);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_GeoInfo_desc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::GeoInfo *arg1 = (six::GeoInfo *) 0 ;
  six::ParameterCollection *arg2 = (six::ParameterCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GeoInfo_desc_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__GeoInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoInfo_desc_set" "', argument " "1"" of type '" "six::GeoInfo *""'"); 
  }
  arg1 = reinterpret_cast< six::GeoInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__ParameterCollection, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoInfo_desc_set" "', argument " "2"" of type '" "six::ParameterCollection *""'"); 
  }
  arg2 = reinterpret_cast< six::ParameterCollection * >(argp2);
  {
    try
    {
      if (arg1) (arg1)->desc = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_GeoInfo_desc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::GeoInfo *arg1 = (six::GeoInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::ParameterCollection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GeoInfo_desc_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__GeoInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoInfo_desc_get" "', argument " "1"" of type '" "six::GeoInfo *""'"); 
  }
  arg1 = reinterpret_cast< six::GeoInfo * >(argp1);
  {
    try
    {
      result = (six::ParameterCollection *)& ((arg1)->desc);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__ParameterCollection, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_GeoInfo_geometryLatLon_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::GeoInfo *arg1 = (six::GeoInfo *) 0 ;
  std::vector< six::LatLon,std::allocator< six::LatLon > > *arg2 = (std::vector< six::LatLon,std::allocator< six::LatLon > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GeoInfo_geometryLatLon_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__GeoInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoInfo_geometryLatLon_set" "', argument " "1"" of type '" "six::GeoInfo *""'"); 
  }
  arg1 = reinterpret_cast< six::GeoInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoInfo_geometryLatLon_set" "', argument " "2"" of type '" "std::vector< six::LatLon,std::allocator< six::LatLon > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< six::LatLon,std::allocator< six::LatLon > > * >(argp2);
  {
    try
    {
      if (arg1) (arg1)->geometryLatLon = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_GeoInfo_geometryLatLon_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::GeoInfo *arg1 = (six::GeoInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::LatLon,std::allocator< six::LatLon > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GeoInfo_geometryLatLon_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__GeoInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoInfo_geometryLatLon_get" "', argument " "1"" of type '" "six::GeoInfo *""'"); 
  }
  arg1 = reinterpret_cast< six::GeoInfo * >(argp1);
  {
    try
    {
      result = (std::vector< six::LatLon,std::allocator< six::LatLon > > *)& ((arg1)->geometryLatLon);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_GeoInfo___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::GeoInfo *arg1 = (six::GeoInfo *) 0 ;
  six::GeoInfo *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GeoInfo___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__GeoInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoInfo___eq__" "', argument " "1"" of type '" "six::GeoInfo const *""'"); 
  }
  arg1 = reinterpret_cast< six::GeoInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__GeoInfo,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoInfo___eq__" "', argument " "2"" of type '" "six::GeoInfo const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoInfo___eq__" "', argument " "2"" of type '" "six::GeoInfo const &""'"); 
  }
  arg2 = reinterpret_cast< six::GeoInfo * >(argp2);
  {
    try
    {
      result = (bool)((six::GeoInfo const *)arg1)->operator ==((six::GeoInfo const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_GeoInfo___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::GeoInfo *arg1 = (six::GeoInfo *) 0 ;
  six::GeoInfo *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GeoInfo___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__GeoInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoInfo___ne__" "', argument " "1"" of type '" "six::GeoInfo const *""'"); 
  }
  arg1 = reinterpret_cast< six::GeoInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__GeoInfo,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoInfo___ne__" "', argument " "2"" of type '" "six::GeoInfo const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoInfo___ne__" "', argument " "2"" of type '" "six::GeoInfo const &""'"); 
  }
  arg2 = reinterpret_cast< six::GeoInfo * >(argp2);
  {
    try
    {
      result = (bool)((six::GeoInfo const *)arg1)->operator !=((six::GeoInfo const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *GeoInfo_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__GeoInfo, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap___lshift__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  six::GeoInfo *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__GeoInfo,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "six::GeoInfo const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "six::GeoInfo const &""'"); 
  }
  arg2 = reinterpret_cast< six::GeoInfo * >(argp2);
  {
    try
    {
      result = (std::ostream *) &six::operator <<(*arg1,(six::GeoInfo const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_GeoDataBase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::GeoDataBase *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_GeoDataBase")) SWIG_fail;
  {
    try
    {
      result = (six::GeoDataBase *)new six::GeoDataBase();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__GeoDataBase, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_GeoDataBase_earthModel_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::GeoDataBase *arg1 = (six::GeoDataBase *) 0 ;
  six::EarthModelType *arg2 = (six::EarthModelType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GeoDataBase_earthModel_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__GeoDataBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDataBase_earthModel_set" "', argument " "1"" of type '" "six::GeoDataBase *""'"); 
  }
  arg1 = reinterpret_cast< six::GeoDataBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__EarthModelType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoDataBase_earthModel_set" "', argument " "2"" of type '" "six::EarthModelType *""'"); 
  }
  arg2 = reinterpret_cast< six::EarthModelType * >(argp2);
  {
    try
    {
      if (arg1) (arg1)->earthModel = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_GeoDataBase_earthModel_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::GeoDataBase *arg1 = (six::GeoDataBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::EarthModelType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GeoDataBase_earthModel_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__GeoDataBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDataBase_earthModel_get" "', argument " "1"" of type '" "six::GeoDataBase *""'"); 
  }
  arg1 = reinterpret_cast< six::GeoDataBase * >(argp1);
  {
    try
    {
      result = (six::EarthModelType *)& ((arg1)->earthModel);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__EarthModelType, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_GeoDataBase_imageCorners_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::GeoDataBase *arg1 = (six::GeoDataBase *) 0 ;
  six::LatLonCorners *arg2 = (six::LatLonCorners *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GeoDataBase_imageCorners_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__GeoDataBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDataBase_imageCorners_set" "', argument " "1"" of type '" "six::GeoDataBase *""'"); 
  }
  arg1 = reinterpret_cast< six::GeoDataBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__CornersT_scene__LatLon_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoDataBase_imageCorners_set" "', argument " "2"" of type '" "six::LatLonCorners *""'"); 
  }
  arg2 = reinterpret_cast< six::LatLonCorners * >(argp2);
  {
    try
    {
      if (arg1) (arg1)->imageCorners = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_GeoDataBase_imageCorners_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::GeoDataBase *arg1 = (six::GeoDataBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::LatLonCorners *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GeoDataBase_imageCorners_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__GeoDataBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDataBase_imageCorners_get" "', argument " "1"" of type '" "six::GeoDataBase *""'"); 
  }
  arg1 = reinterpret_cast< six::GeoDataBase * >(argp1);
  {
    try
    {
      result = (six::LatLonCorners *)& ((arg1)->imageCorners);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__CornersT_scene__LatLon_t, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_GeoDataBase_validData_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::GeoDataBase *arg1 = (six::GeoDataBase *) 0 ;
  std::vector< six::LatLon,std::allocator< six::LatLon > > *arg2 = (std::vector< six::LatLon,std::allocator< six::LatLon > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GeoDataBase_validData_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__GeoDataBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDataBase_validData_set" "', argument " "1"" of type '" "six::GeoDataBase *""'"); 
  }
  arg1 = reinterpret_cast< six::GeoDataBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoDataBase_validData_set" "', argument " "2"" of type '" "std::vector< six::LatLon,std::allocator< six::LatLon > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< six::LatLon,std::allocator< six::LatLon > > * >(argp2);
  {
    try
    {
      if (arg1) (arg1)->validData = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_GeoDataBase_validData_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::GeoDataBase *arg1 = (six::GeoDataBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::LatLon,std::allocator< six::LatLon > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GeoDataBase_validData_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__GeoDataBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDataBase_validData_get" "', argument " "1"" of type '" "six::GeoDataBase *""'"); 
  }
  arg1 = reinterpret_cast< six::GeoDataBase * >(argp1);
  {
    try
    {
      result = (std::vector< six::LatLon,std::allocator< six::LatLon > > *)& ((arg1)->validData);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_GeoDataBase_geoInfos_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::GeoDataBase *arg1 = (six::GeoDataBase *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > > *arg2 = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GeoDataBase_geoInfos_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__GeoDataBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDataBase_geoInfos_set" "', argument " "1"" of type '" "six::GeoDataBase *""'"); 
  }
  arg1 = reinterpret_cast< six::GeoDataBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoDataBase_geoInfos_set" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > > * >(argp2);
  {
    try
    {
      if (arg1) (arg1)->geoInfos = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_GeoDataBase_geoInfos_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::GeoDataBase *arg1 = (six::GeoDataBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GeoDataBase_geoInfos_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__GeoDataBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDataBase_geoInfos_get" "', argument " "1"" of type '" "six::GeoDataBase *""'"); 
  }
  arg1 = reinterpret_cast< six::GeoDataBase * >(argp1);
  {
    try
    {
      result = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > > *)& ((arg1)->geoInfos);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_GeoDataBase___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::GeoDataBase *arg1 = (six::GeoDataBase *) 0 ;
  six::GeoDataBase *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GeoDataBase___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__GeoDataBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDataBase___eq__" "', argument " "1"" of type '" "six::GeoDataBase const *""'"); 
  }
  arg1 = reinterpret_cast< six::GeoDataBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__GeoDataBase,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoDataBase___eq__" "', argument " "2"" of type '" "six::GeoDataBase const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDataBase___eq__" "', argument " "2"" of type '" "six::GeoDataBase const &""'"); 
  }
  arg2 = reinterpret_cast< six::GeoDataBase * >(argp2);
  {
    try
    {
      result = (bool)((six::GeoDataBase const *)arg1)->operator ==((six::GeoDataBase const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_GeoDataBase___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::GeoDataBase *arg1 = (six::GeoDataBase *) 0 ;
  six::GeoDataBase *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GeoDataBase___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__GeoDataBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDataBase___ne__" "', argument " "1"" of type '" "six::GeoDataBase const *""'"); 
  }
  arg1 = reinterpret_cast< six::GeoDataBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__GeoDataBase,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoDataBase___ne__" "', argument " "2"" of type '" "six::GeoDataBase const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDataBase___ne__" "', argument " "2"" of type '" "six::GeoDataBase const &""'"); 
  }
  arg2 = reinterpret_cast< six::GeoDataBase * >(argp2);
  {
    try
    {
      result = (bool)((six::GeoDataBase const *)arg1)->operator !=((six::GeoDataBase const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_delete_GeoDataBase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::GeoDataBase *arg1 = (six::GeoDataBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GeoDataBase",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__GeoDataBase, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GeoDataBase" "', argument " "1"" of type '" "six::GeoDataBase *""'"); 
  }
  arg1 = reinterpret_cast< six::GeoDataBase * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *GeoDataBase_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__GeoDataBase, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LatLonCorners(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Corners< scene::LatLon > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_LatLonCorners")) SWIG_fail;
  {
    try
    {
      result = (six::Corners< scene::LatLon > *)new six::Corners< scene::LatLon >();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__CornersT_scene__LatLon_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_LatLonCorners_getCorner__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Corners< scene::LatLon > *arg1 = (six::Corners< scene::LatLon > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  scene::LatLon *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LatLonCorners_getCorner",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CornersT_scene__LatLon_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LatLonCorners_getCorner" "', argument " "1"" of type '" "six::Corners< scene::LatLon > const *""'"); 
  }
  arg1 = reinterpret_cast< six::Corners< scene::LatLon > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LatLonCorners_getCorner" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      result = (scene::LatLon *) &((six::Corners< scene::LatLon > const *)arg1)->getCorner(arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_scene__LatLon, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_LatLonCorners_getCorner__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Corners< scene::LatLon > *arg1 = (six::Corners< scene::LatLon > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  scene::LatLon *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LatLonCorners_getCorner",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CornersT_scene__LatLon_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LatLonCorners_getCorner" "', argument " "1"" of type '" "six::Corners< scene::LatLon > *""'"); 
  }
  arg1 = reinterpret_cast< six::Corners< scene::LatLon > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LatLonCorners_getCorner" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      result = (scene::LatLon *) &(arg1)->getCorner(arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_scene__LatLon, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_LatLonCorners_getCorner(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__CornersT_scene__LatLon_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LatLonCorners_getCorner__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__CornersT_scene__LatLon_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LatLonCorners_getCorner__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'LatLonCorners_getCorner'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::Corners< scene::LatLon >::getCorner(size_t) const\n"
    "    six::Corners< scene::LatLon >::getCorner(size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LatLonCorners___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Corners< scene::LatLon > *arg1 = (six::Corners< scene::LatLon > *) 0 ;
  six::Corners< scene::LatLon > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LatLonCorners___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CornersT_scene__LatLon_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LatLonCorners___eq__" "', argument " "1"" of type '" "six::Corners< scene::LatLon > const *""'"); 
  }
  arg1 = reinterpret_cast< six::Corners< scene::LatLon > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__CornersT_scene__LatLon_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LatLonCorners___eq__" "', argument " "2"" of type '" "six::Corners< scene::LatLon > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LatLonCorners___eq__" "', argument " "2"" of type '" "six::Corners< scene::LatLon > const &""'"); 
  }
  arg2 = reinterpret_cast< six::Corners< scene::LatLon > * >(argp2);
  {
    try
    {
      result = (bool)((six::Corners< scene::LatLon > const *)arg1)->operator ==((six::Corners< scene::LatLon > const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_LatLonCorners___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Corners< scene::LatLon > *arg1 = (six::Corners< scene::LatLon > *) 0 ;
  six::Corners< scene::LatLon > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LatLonCorners___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CornersT_scene__LatLon_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LatLonCorners___ne__" "', argument " "1"" of type '" "six::Corners< scene::LatLon > const *""'"); 
  }
  arg1 = reinterpret_cast< six::Corners< scene::LatLon > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__CornersT_scene__LatLon_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LatLonCorners___ne__" "', argument " "2"" of type '" "six::Corners< scene::LatLon > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LatLonCorners___ne__" "', argument " "2"" of type '" "six::Corners< scene::LatLon > const &""'"); 
  }
  arg2 = reinterpret_cast< six::Corners< scene::LatLon > * >(argp2);
  {
    try
    {
      result = (bool)((six::Corners< scene::LatLon > const *)arg1)->operator !=((six::Corners< scene::LatLon > const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_LatLonCorners_upperLeft_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Corners< scene::LatLon > *arg1 = (six::Corners< scene::LatLon > *) 0 ;
  scene::LatLon *arg2 = (scene::LatLon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LatLonCorners_upperLeft_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CornersT_scene__LatLon_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LatLonCorners_upperLeft_set" "', argument " "1"" of type '" "six::Corners< scene::LatLon > *""'"); 
  }
  arg1 = reinterpret_cast< six::Corners< scene::LatLon > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_scene__LatLon, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LatLonCorners_upperLeft_set" "', argument " "2"" of type '" "scene::LatLon *""'"); 
  }
  arg2 = reinterpret_cast< scene::LatLon * >(argp2);
  {
    try
    {
      if (arg1) (arg1)->upperLeft = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_LatLonCorners_upperLeft_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Corners< scene::LatLon > *arg1 = (six::Corners< scene::LatLon > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  scene::LatLon *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LatLonCorners_upperLeft_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CornersT_scene__LatLon_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LatLonCorners_upperLeft_get" "', argument " "1"" of type '" "six::Corners< scene::LatLon > *""'"); 
  }
  arg1 = reinterpret_cast< six::Corners< scene::LatLon > * >(argp1);
  {
    try
    {
      result = (scene::LatLon *)& ((arg1)->upperLeft);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_scene__LatLon, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_LatLonCorners_upperRight_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Corners< scene::LatLon > *arg1 = (six::Corners< scene::LatLon > *) 0 ;
  scene::LatLon *arg2 = (scene::LatLon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LatLonCorners_upperRight_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CornersT_scene__LatLon_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LatLonCorners_upperRight_set" "', argument " "1"" of type '" "six::Corners< scene::LatLon > *""'"); 
  }
  arg1 = reinterpret_cast< six::Corners< scene::LatLon > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_scene__LatLon, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LatLonCorners_upperRight_set" "', argument " "2"" of type '" "scene::LatLon *""'"); 
  }
  arg2 = reinterpret_cast< scene::LatLon * >(argp2);
  {
    try
    {
      if (arg1) (arg1)->upperRight = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_LatLonCorners_upperRight_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Corners< scene::LatLon > *arg1 = (six::Corners< scene::LatLon > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  scene::LatLon *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LatLonCorners_upperRight_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CornersT_scene__LatLon_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LatLonCorners_upperRight_get" "', argument " "1"" of type '" "six::Corners< scene::LatLon > *""'"); 
  }
  arg1 = reinterpret_cast< six::Corners< scene::LatLon > * >(argp1);
  {
    try
    {
      result = (scene::LatLon *)& ((arg1)->upperRight);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_scene__LatLon, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_LatLonCorners_lowerRight_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Corners< scene::LatLon > *arg1 = (six::Corners< scene::LatLon > *) 0 ;
  scene::LatLon *arg2 = (scene::LatLon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LatLonCorners_lowerRight_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CornersT_scene__LatLon_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LatLonCorners_lowerRight_set" "', argument " "1"" of type '" "six::Corners< scene::LatLon > *""'"); 
  }
  arg1 = reinterpret_cast< six::Corners< scene::LatLon > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_scene__LatLon, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LatLonCorners_lowerRight_set" "', argument " "2"" of type '" "scene::LatLon *""'"); 
  }
  arg2 = reinterpret_cast< scene::LatLon * >(argp2);
  {
    try
    {
      if (arg1) (arg1)->lowerRight = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_LatLonCorners_lowerRight_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Corners< scene::LatLon > *arg1 = (six::Corners< scene::LatLon > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  scene::LatLon *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LatLonCorners_lowerRight_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CornersT_scene__LatLon_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LatLonCorners_lowerRight_get" "', argument " "1"" of type '" "six::Corners< scene::LatLon > *""'"); 
  }
  arg1 = reinterpret_cast< six::Corners< scene::LatLon > * >(argp1);
  {
    try
    {
      result = (scene::LatLon *)& ((arg1)->lowerRight);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_scene__LatLon, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_LatLonCorners_lowerLeft_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Corners< scene::LatLon > *arg1 = (six::Corners< scene::LatLon > *) 0 ;
  scene::LatLon *arg2 = (scene::LatLon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LatLonCorners_lowerLeft_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CornersT_scene__LatLon_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LatLonCorners_lowerLeft_set" "', argument " "1"" of type '" "six::Corners< scene::LatLon > *""'"); 
  }
  arg1 = reinterpret_cast< six::Corners< scene::LatLon > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_scene__LatLon, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LatLonCorners_lowerLeft_set" "', argument " "2"" of type '" "scene::LatLon *""'"); 
  }
  arg2 = reinterpret_cast< scene::LatLon * >(argp2);
  {
    try
    {
      if (arg1) (arg1)->lowerLeft = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_LatLonCorners_lowerLeft_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Corners< scene::LatLon > *arg1 = (six::Corners< scene::LatLon > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  scene::LatLon *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LatLonCorners_lowerLeft_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CornersT_scene__LatLon_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LatLonCorners_lowerLeft_get" "', argument " "1"" of type '" "six::Corners< scene::LatLon > *""'"); 
  }
  arg1 = reinterpret_cast< six::Corners< scene::LatLon > * >(argp1);
  {
    try
    {
      result = (scene::LatLon *)& ((arg1)->lowerLeft);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_scene__LatLon, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_delete_LatLonCorners(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Corners< scene::LatLon > *arg1 = (six::Corners< scene::LatLon > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LatLonCorners",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CornersT_scene__LatLon_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LatLonCorners" "', argument " "1"" of type '" "six::Corners< scene::LatLon > *""'"); 
  }
  arg1 = reinterpret_cast< six::Corners< scene::LatLon > * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *LatLonCorners_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__CornersT_scene__LatLon_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LatLonAltCorners(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Corners< scene::LatLonAlt > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_LatLonAltCorners")) SWIG_fail;
  {
    try
    {
      result = (six::Corners< scene::LatLonAlt > *)new six::Corners< scene::LatLonAlt >();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__CornersT_scene__LatLonAlt_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_LatLonAltCorners_getCorner__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Corners< scene::LatLonAlt > *arg1 = (six::Corners< scene::LatLonAlt > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  scene::LatLonAlt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LatLonAltCorners_getCorner",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CornersT_scene__LatLonAlt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LatLonAltCorners_getCorner" "', argument " "1"" of type '" "six::Corners< scene::LatLonAlt > const *""'"); 
  }
  arg1 = reinterpret_cast< six::Corners< scene::LatLonAlt > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LatLonAltCorners_getCorner" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      result = (scene::LatLonAlt *) &((six::Corners< scene::LatLonAlt > const *)arg1)->getCorner(arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_scene__LatLonAlt, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_LatLonAltCorners_getCorner__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Corners< scene::LatLonAlt > *arg1 = (six::Corners< scene::LatLonAlt > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  scene::LatLonAlt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LatLonAltCorners_getCorner",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CornersT_scene__LatLonAlt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LatLonAltCorners_getCorner" "', argument " "1"" of type '" "six::Corners< scene::LatLonAlt > *""'"); 
  }
  arg1 = reinterpret_cast< six::Corners< scene::LatLonAlt > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LatLonAltCorners_getCorner" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      result = (scene::LatLonAlt *) &(arg1)->getCorner(arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_scene__LatLonAlt, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_LatLonAltCorners_getCorner(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__CornersT_scene__LatLonAlt_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LatLonAltCorners_getCorner__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__CornersT_scene__LatLonAlt_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LatLonAltCorners_getCorner__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'LatLonAltCorners_getCorner'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::Corners< scene::LatLonAlt >::getCorner(size_t) const\n"
    "    six::Corners< scene::LatLonAlt >::getCorner(size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LatLonAltCorners___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Corners< scene::LatLonAlt > *arg1 = (six::Corners< scene::LatLonAlt > *) 0 ;
  six::Corners< scene::LatLonAlt > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LatLonAltCorners___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CornersT_scene__LatLonAlt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LatLonAltCorners___eq__" "', argument " "1"" of type '" "six::Corners< scene::LatLonAlt > const *""'"); 
  }
  arg1 = reinterpret_cast< six::Corners< scene::LatLonAlt > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__CornersT_scene__LatLonAlt_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LatLonAltCorners___eq__" "', argument " "2"" of type '" "six::Corners< scene::LatLonAlt > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LatLonAltCorners___eq__" "', argument " "2"" of type '" "six::Corners< scene::LatLonAlt > const &""'"); 
  }
  arg2 = reinterpret_cast< six::Corners< scene::LatLonAlt > * >(argp2);
  {
    try
    {
      result = (bool)((six::Corners< scene::LatLonAlt > const *)arg1)->operator ==((six::Corners< scene::LatLonAlt > const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_LatLonAltCorners___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Corners< scene::LatLonAlt > *arg1 = (six::Corners< scene::LatLonAlt > *) 0 ;
  six::Corners< scene::LatLonAlt > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LatLonAltCorners___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CornersT_scene__LatLonAlt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LatLonAltCorners___ne__" "', argument " "1"" of type '" "six::Corners< scene::LatLonAlt > const *""'"); 
  }
  arg1 = reinterpret_cast< six::Corners< scene::LatLonAlt > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__CornersT_scene__LatLonAlt_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LatLonAltCorners___ne__" "', argument " "2"" of type '" "six::Corners< scene::LatLonAlt > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LatLonAltCorners___ne__" "', argument " "2"" of type '" "six::Corners< scene::LatLonAlt > const &""'"); 
  }
  arg2 = reinterpret_cast< six::Corners< scene::LatLonAlt > * >(argp2);
  {
    try
    {
      result = (bool)((six::Corners< scene::LatLonAlt > const *)arg1)->operator !=((six::Corners< scene::LatLonAlt > const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_LatLonAltCorners_upperLeft_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Corners< scene::LatLonAlt > *arg1 = (six::Corners< scene::LatLonAlt > *) 0 ;
  scene::LatLonAlt *arg2 = (scene::LatLonAlt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LatLonAltCorners_upperLeft_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CornersT_scene__LatLonAlt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LatLonAltCorners_upperLeft_set" "', argument " "1"" of type '" "six::Corners< scene::LatLonAlt > *""'"); 
  }
  arg1 = reinterpret_cast< six::Corners< scene::LatLonAlt > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_scene__LatLonAlt, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LatLonAltCorners_upperLeft_set" "', argument " "2"" of type '" "scene::LatLonAlt *""'"); 
  }
  arg2 = reinterpret_cast< scene::LatLonAlt * >(argp2);
  {
    try
    {
      if (arg1) (arg1)->upperLeft = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_LatLonAltCorners_upperLeft_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Corners< scene::LatLonAlt > *arg1 = (six::Corners< scene::LatLonAlt > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  scene::LatLonAlt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LatLonAltCorners_upperLeft_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CornersT_scene__LatLonAlt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LatLonAltCorners_upperLeft_get" "', argument " "1"" of type '" "six::Corners< scene::LatLonAlt > *""'"); 
  }
  arg1 = reinterpret_cast< six::Corners< scene::LatLonAlt > * >(argp1);
  {
    try
    {
      result = (scene::LatLonAlt *)& ((arg1)->upperLeft);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_scene__LatLonAlt, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_LatLonAltCorners_upperRight_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Corners< scene::LatLonAlt > *arg1 = (six::Corners< scene::LatLonAlt > *) 0 ;
  scene::LatLonAlt *arg2 = (scene::LatLonAlt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LatLonAltCorners_upperRight_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CornersT_scene__LatLonAlt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LatLonAltCorners_upperRight_set" "', argument " "1"" of type '" "six::Corners< scene::LatLonAlt > *""'"); 
  }
  arg1 = reinterpret_cast< six::Corners< scene::LatLonAlt > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_scene__LatLonAlt, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LatLonAltCorners_upperRight_set" "', argument " "2"" of type '" "scene::LatLonAlt *""'"); 
  }
  arg2 = reinterpret_cast< scene::LatLonAlt * >(argp2);
  {
    try
    {
      if (arg1) (arg1)->upperRight = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_LatLonAltCorners_upperRight_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Corners< scene::LatLonAlt > *arg1 = (six::Corners< scene::LatLonAlt > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  scene::LatLonAlt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LatLonAltCorners_upperRight_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CornersT_scene__LatLonAlt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LatLonAltCorners_upperRight_get" "', argument " "1"" of type '" "six::Corners< scene::LatLonAlt > *""'"); 
  }
  arg1 = reinterpret_cast< six::Corners< scene::LatLonAlt > * >(argp1);
  {
    try
    {
      result = (scene::LatLonAlt *)& ((arg1)->upperRight);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_scene__LatLonAlt, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_LatLonAltCorners_lowerRight_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Corners< scene::LatLonAlt > *arg1 = (six::Corners< scene::LatLonAlt > *) 0 ;
  scene::LatLonAlt *arg2 = (scene::LatLonAlt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LatLonAltCorners_lowerRight_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CornersT_scene__LatLonAlt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LatLonAltCorners_lowerRight_set" "', argument " "1"" of type '" "six::Corners< scene::LatLonAlt > *""'"); 
  }
  arg1 = reinterpret_cast< six::Corners< scene::LatLonAlt > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_scene__LatLonAlt, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LatLonAltCorners_lowerRight_set" "', argument " "2"" of type '" "scene::LatLonAlt *""'"); 
  }
  arg2 = reinterpret_cast< scene::LatLonAlt * >(argp2);
  {
    try
    {
      if (arg1) (arg1)->lowerRight = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_LatLonAltCorners_lowerRight_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Corners< scene::LatLonAlt > *arg1 = (six::Corners< scene::LatLonAlt > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  scene::LatLonAlt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LatLonAltCorners_lowerRight_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CornersT_scene__LatLonAlt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LatLonAltCorners_lowerRight_get" "', argument " "1"" of type '" "six::Corners< scene::LatLonAlt > *""'"); 
  }
  arg1 = reinterpret_cast< six::Corners< scene::LatLonAlt > * >(argp1);
  {
    try
    {
      result = (scene::LatLonAlt *)& ((arg1)->lowerRight);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_scene__LatLonAlt, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_LatLonAltCorners_lowerLeft_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Corners< scene::LatLonAlt > *arg1 = (six::Corners< scene::LatLonAlt > *) 0 ;
  scene::LatLonAlt *arg2 = (scene::LatLonAlt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LatLonAltCorners_lowerLeft_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CornersT_scene__LatLonAlt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LatLonAltCorners_lowerLeft_set" "', argument " "1"" of type '" "six::Corners< scene::LatLonAlt > *""'"); 
  }
  arg1 = reinterpret_cast< six::Corners< scene::LatLonAlt > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_scene__LatLonAlt, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LatLonAltCorners_lowerLeft_set" "', argument " "2"" of type '" "scene::LatLonAlt *""'"); 
  }
  arg2 = reinterpret_cast< scene::LatLonAlt * >(argp2);
  {
    try
    {
      if (arg1) (arg1)->lowerLeft = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_LatLonAltCorners_lowerLeft_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Corners< scene::LatLonAlt > *arg1 = (six::Corners< scene::LatLonAlt > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  scene::LatLonAlt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LatLonAltCorners_lowerLeft_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CornersT_scene__LatLonAlt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LatLonAltCorners_lowerLeft_get" "', argument " "1"" of type '" "six::Corners< scene::LatLonAlt > *""'"); 
  }
  arg1 = reinterpret_cast< six::Corners< scene::LatLonAlt > * >(argp1);
  {
    try
    {
      result = (scene::LatLonAlt *)& ((arg1)->lowerLeft);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_scene__LatLonAlt, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_delete_LatLonAltCorners(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Corners< scene::LatLonAlt > *arg1 = (six::Corners< scene::LatLonAlt > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LatLonAltCorners",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CornersT_scene__LatLonAlt_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LatLonAltCorners" "', argument " "1"" of type '" "six::Corners< scene::LatLonAlt > *""'"); 
  }
  arg1 = reinterpret_cast< six::Corners< scene::LatLonAlt > * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *LatLonAltCorners_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__CornersT_scene__LatLonAlt_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_VectorMatchCollect_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchCollect > *arg1 = (std::vector< six::MatchCollect > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchCollect_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_iterator" "', argument " "1"" of type '" "std::vector< six::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchCollect > * >(argp1);
  {
    try
    {
      result = (swig::SwigPyIterator *)std_vector_Sl_six_MatchCollect_Sg__iterator(arg1,arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchCollect > *arg1 = (std::vector< six::MatchCollect > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchCollect___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect___nonzero__" "', argument " "1"" of type '" "std::vector< six::MatchCollect > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchCollect > * >(argp1);
  {
    try
    {
      result = (bool)std_vector_Sl_six_MatchCollect_Sg____nonzero__((std::vector< six::MatchCollect > const *)arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchCollect > *arg1 = (std::vector< six::MatchCollect > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchCollect___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect___bool__" "', argument " "1"" of type '" "std::vector< six::MatchCollect > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchCollect > * >(argp1);
  {
    try
    {
      result = (bool)std_vector_Sl_six_MatchCollect_Sg____bool__((std::vector< six::MatchCollect > const *)arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchCollect > *arg1 = (std::vector< six::MatchCollect > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::MatchCollect >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchCollect___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect___len__" "', argument " "1"" of type '" "std::vector< six::MatchCollect > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchCollect > * >(argp1);
  {
    try
    {
      result = std_vector_Sl_six_MatchCollect_Sg____len__((std::vector< six::MatchCollect > const *)arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchCollect > *arg1 = (std::vector< six::MatchCollect > *) 0 ;
  std::vector< six::MatchCollect >::difference_type arg2 ;
  std::vector< six::MatchCollect >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< six::MatchCollect,std::allocator< six::MatchCollect > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorMatchCollect___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect___getslice__" "', argument " "1"" of type '" "std::vector< six::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchCollect > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorMatchCollect___getslice__" "', argument " "2"" of type '" "std::vector< six::MatchCollect >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< six::MatchCollect >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorMatchCollect___getslice__" "', argument " "3"" of type '" "std::vector< six::MatchCollect >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< six::MatchCollect >::difference_type >(val3);
  {
    try
    {
      try {
        result = (std::vector< six::MatchCollect,std::allocator< six::MatchCollect > > *)std_vector_Sl_six_MatchCollect_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchCollect > *arg1 = (std::vector< six::MatchCollect > *) 0 ;
  std::vector< six::MatchCollect >::difference_type arg2 ;
  std::vector< six::MatchCollect >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorMatchCollect___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect___setslice__" "', argument " "1"" of type '" "std::vector< six::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchCollect > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorMatchCollect___setslice__" "', argument " "2"" of type '" "std::vector< six::MatchCollect >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< six::MatchCollect >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorMatchCollect___setslice__" "', argument " "3"" of type '" "std::vector< six::MatchCollect >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< six::MatchCollect >::difference_type >(val3);
  {
    try
    {
      try {
        std_vector_Sl_six_MatchCollect_Sg____setslice____SWIG_0(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchCollect > *arg1 = (std::vector< six::MatchCollect > *) 0 ;
  std::vector< six::MatchCollect >::difference_type arg2 ;
  std::vector< six::MatchCollect >::difference_type arg3 ;
  std::vector< six::MatchCollect,std::allocator< six::MatchCollect > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorMatchCollect___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect___setslice__" "', argument " "1"" of type '" "std::vector< six::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchCollect > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorMatchCollect___setslice__" "', argument " "2"" of type '" "std::vector< six::MatchCollect >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< six::MatchCollect >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorMatchCollect___setslice__" "', argument " "3"" of type '" "std::vector< six::MatchCollect >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< six::MatchCollect >::difference_type >(val3);
  {
    std::vector< six::MatchCollect,std::allocator< six::MatchCollect > > *ptr = (std::vector< six::MatchCollect,std::allocator< six::MatchCollect > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorMatchCollect___setslice__" "', argument " "4"" of type '" "std::vector< six::MatchCollect,std::allocator< six::MatchCollect > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorMatchCollect___setslice__" "', argument " "4"" of type '" "std::vector< six::MatchCollect,std::allocator< six::MatchCollect > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try
    {
      try {
        std_vector_Sl_six_MatchCollect_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< six::MatchCollect,std::allocator< six::MatchCollect > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< six::MatchCollect,std::allocator< six::MatchCollect > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], nullptr);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VectorMatchCollect___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< six::MatchCollect,std::allocator< six::MatchCollect > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], nullptr);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< six::MatchCollect,std::allocator< six::MatchCollect > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorMatchCollect___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorMatchCollect___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< six::MatchCollect >::__setslice__(std::vector< six::MatchCollect >::difference_type,std::vector< six::MatchCollect >::difference_type)\n"
    "    std::vector< six::MatchCollect >::__setslice__(std::vector< six::MatchCollect >::difference_type,std::vector< six::MatchCollect >::difference_type,std::vector< six::MatchCollect,std::allocator< six::MatchCollect > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchCollect > *arg1 = (std::vector< six::MatchCollect > *) 0 ;
  std::vector< six::MatchCollect >::difference_type arg2 ;
  std::vector< six::MatchCollect >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorMatchCollect___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect___delslice__" "', argument " "1"" of type '" "std::vector< six::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchCollect > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorMatchCollect___delslice__" "', argument " "2"" of type '" "std::vector< six::MatchCollect >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< six::MatchCollect >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorMatchCollect___delslice__" "', argument " "3"" of type '" "std::vector< six::MatchCollect >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< six::MatchCollect >::difference_type >(val3);
  {
    try
    {
      try {
        std_vector_Sl_six_MatchCollect_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchCollect > *arg1 = (std::vector< six::MatchCollect > *) 0 ;
  std::vector< six::MatchCollect >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorMatchCollect___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect___delitem__" "', argument " "1"" of type '" "std::vector< six::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchCollect > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorMatchCollect___delitem__" "', argument " "2"" of type '" "std::vector< six::MatchCollect >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< six::MatchCollect >::difference_type >(val2);
  {
    try
    {
      try {
        std_vector_Sl_six_MatchCollect_Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchCollect > *arg1 = (std::vector< six::MatchCollect > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< six::MatchCollect,std::allocator< six::MatchCollect > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorMatchCollect___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect___getitem__" "', argument " "1"" of type '" "std::vector< six::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchCollect > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorMatchCollect___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try
    {
      try {
        result = (std::vector< six::MatchCollect,std::allocator< six::MatchCollect > > *)std_vector_Sl_six_MatchCollect_Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchCollect > *arg1 = (std::vector< six::MatchCollect > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< six::MatchCollect,std::allocator< six::MatchCollect > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorMatchCollect___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect___setitem__" "', argument " "1"" of type '" "std::vector< six::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchCollect > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorMatchCollect___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector< six::MatchCollect,std::allocator< six::MatchCollect > > *ptr = (std::vector< six::MatchCollect,std::allocator< six::MatchCollect > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorMatchCollect___setitem__" "', argument " "3"" of type '" "std::vector< six::MatchCollect,std::allocator< six::MatchCollect > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorMatchCollect___setitem__" "', argument " "3"" of type '" "std::vector< six::MatchCollect,std::allocator< six::MatchCollect > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try
    {
      try {
        std_vector_Sl_six_MatchCollect_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< six::MatchCollect,std::allocator< six::MatchCollect > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchCollect > *arg1 = (std::vector< six::MatchCollect > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorMatchCollect___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect___setitem__" "', argument " "1"" of type '" "std::vector< six::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchCollect > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorMatchCollect___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try
    {
      try {
        std_vector_Sl_six_MatchCollect_Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchCollect > *arg1 = (std::vector< six::MatchCollect > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorMatchCollect___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect___delitem__" "', argument " "1"" of type '" "std::vector< six::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchCollect > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorMatchCollect___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try
    {
      try {
        std_vector_Sl_six_MatchCollect_Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< six::MatchCollect,std::allocator< six::MatchCollect > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorMatchCollect___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< six::MatchCollect,std::allocator< six::MatchCollect > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorMatchCollect___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorMatchCollect___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< six::MatchCollect >::__delitem__(std::vector< six::MatchCollect >::difference_type)\n"
    "    std::vector< six::MatchCollect >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchCollect > *arg1 = (std::vector< six::MatchCollect > *) 0 ;
  std::vector< six::MatchCollect >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< six::MatchCollect >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorMatchCollect___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect___getitem__" "', argument " "1"" of type '" "std::vector< six::MatchCollect > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchCollect > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorMatchCollect___getitem__" "', argument " "2"" of type '" "std::vector< six::MatchCollect >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< six::MatchCollect >::difference_type >(val2);
  {
    try
    {
      try {
        result = (std::vector< six::MatchCollect >::value_type *) &std_vector_Sl_six_MatchCollect_Sg____getitem____SWIG_1((std::vector< six::MatchCollect > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__MatchCollect, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< six::MatchCollect,std::allocator< six::MatchCollect > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorMatchCollect___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< six::MatchCollect,std::allocator< six::MatchCollect > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorMatchCollect___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorMatchCollect___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< six::MatchCollect >::__getitem__(PySliceObject *)\n"
    "    std::vector< six::MatchCollect >::__getitem__(std::vector< six::MatchCollect >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchCollect > *arg1 = (std::vector< six::MatchCollect > *) 0 ;
  std::vector< six::MatchCollect >::difference_type arg2 ;
  std::vector< six::MatchCollect >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorMatchCollect___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect___setitem__" "', argument " "1"" of type '" "std::vector< six::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchCollect > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorMatchCollect___setitem__" "', argument " "2"" of type '" "std::vector< six::MatchCollect >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< six::MatchCollect >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_six__MatchCollect,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorMatchCollect___setitem__" "', argument " "3"" of type '" "std::vector< six::MatchCollect >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorMatchCollect___setitem__" "', argument " "3"" of type '" "std::vector< six::MatchCollect >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< six::MatchCollect >::value_type * >(argp3);
  {
    try
    {
      try {
        std_vector_Sl_six_MatchCollect_Sg____setitem____SWIG_2(arg1,arg2,(six::MatchCollect const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< six::MatchCollect,std::allocator< six::MatchCollect > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorMatchCollect___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< six::MatchCollect,std::allocator< six::MatchCollect > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< six::MatchCollect,std::allocator< six::MatchCollect > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorMatchCollect___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< six::MatchCollect,std::allocator< six::MatchCollect > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_six__MatchCollect, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorMatchCollect___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorMatchCollect___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< six::MatchCollect >::__setitem__(PySliceObject *,std::vector< six::MatchCollect,std::allocator< six::MatchCollect > > const &)\n"
    "    std::vector< six::MatchCollect >::__setitem__(PySliceObject *)\n"
    "    std::vector< six::MatchCollect >::__setitem__(std::vector< six::MatchCollect >::difference_type,std::vector< six::MatchCollect >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchCollect > *arg1 = (std::vector< six::MatchCollect > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::MatchCollect >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchCollect_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_pop" "', argument " "1"" of type '" "std::vector< six::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchCollect > * >(argp1);
  {
    try
    {
      try {
        result = std_vector_Sl_six_MatchCollect_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< six::MatchCollect >::value_type(static_cast< const std::vector< six::MatchCollect >::value_type& >(result))), SWIGTYPE_p_six__MatchCollect, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchCollect > *arg1 = (std::vector< six::MatchCollect > *) 0 ;
  std::vector< six::MatchCollect >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorMatchCollect_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_append" "', argument " "1"" of type '" "std::vector< six::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchCollect > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__MatchCollect,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorMatchCollect_append" "', argument " "2"" of type '" "std::vector< six::MatchCollect >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorMatchCollect_append" "', argument " "2"" of type '" "std::vector< six::MatchCollect >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< six::MatchCollect >::value_type * >(argp2);
  {
    try
    {
      std_vector_Sl_six_MatchCollect_Sg__append(arg1,(six::MatchCollect const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_VectorMatchCollect__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchCollect > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VectorMatchCollect")) SWIG_fail;
  {
    try
    {
      result = (std::vector< six::MatchCollect > *)new std::vector< six::MatchCollect >();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_VectorMatchCollect__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchCollect > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< six::MatchCollect > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorMatchCollect",&obj0)) SWIG_fail;
  {
    std::vector< six::MatchCollect,std::allocator< six::MatchCollect > > *ptr = (std::vector< six::MatchCollect,std::allocator< six::MatchCollect > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorMatchCollect" "', argument " "1"" of type '" "std::vector< six::MatchCollect > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorMatchCollect" "', argument " "1"" of type '" "std::vector< six::MatchCollect > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try
    {
      result = (std::vector< six::MatchCollect > *)new std::vector< six::MatchCollect >((std::vector< six::MatchCollect > const &)*arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchCollect > *arg1 = (std::vector< six::MatchCollect > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchCollect_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_empty" "', argument " "1"" of type '" "std::vector< six::MatchCollect > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchCollect > * >(argp1);
  {
    try
    {
      result = (bool)((std::vector< six::MatchCollect > const *)arg1)->empty();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchCollect > *arg1 = (std::vector< six::MatchCollect > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::MatchCollect >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchCollect_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_size" "', argument " "1"" of type '" "std::vector< six::MatchCollect > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchCollect > * >(argp1);
  {
    try
    {
      result = ((std::vector< six::MatchCollect > const *)arg1)->size();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchCollect > *arg1 = (std::vector< six::MatchCollect > *) 0 ;
  std::vector< six::MatchCollect > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorMatchCollect_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_swap" "', argument " "1"" of type '" "std::vector< six::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchCollect > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorMatchCollect_swap" "', argument " "2"" of type '" "std::vector< six::MatchCollect > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorMatchCollect_swap" "', argument " "2"" of type '" "std::vector< six::MatchCollect > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< six::MatchCollect > * >(argp2);
  {
    try
    {
      (arg1)->swap(*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchCollect > *arg1 = (std::vector< six::MatchCollect > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::MatchCollect >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchCollect_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_begin" "', argument " "1"" of type '" "std::vector< six::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchCollect > * >(argp1);
  {
    try
    {
      result = (arg1)->begin();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< six::MatchCollect >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchCollect > *arg1 = (std::vector< six::MatchCollect > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::MatchCollect >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchCollect_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_end" "', argument " "1"" of type '" "std::vector< six::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchCollect > * >(argp1);
  {
    try
    {
      result = (arg1)->end();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< six::MatchCollect >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchCollect > *arg1 = (std::vector< six::MatchCollect > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::MatchCollect >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchCollect_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_rbegin" "', argument " "1"" of type '" "std::vector< six::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchCollect > * >(argp1);
  {
    try
    {
      result = (arg1)->rbegin();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< six::MatchCollect >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchCollect > *arg1 = (std::vector< six::MatchCollect > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::MatchCollect >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchCollect_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_rend" "', argument " "1"" of type '" "std::vector< six::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchCollect > * >(argp1);
  {
    try
    {
      result = (arg1)->rend();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< six::MatchCollect >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchCollect > *arg1 = (std::vector< six::MatchCollect > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchCollect_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_clear" "', argument " "1"" of type '" "std::vector< six::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchCollect > * >(argp1);
  {
    try
    {
      (arg1)->clear();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchCollect > *arg1 = (std::vector< six::MatchCollect > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< six::MatchCollect > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchCollect_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_get_allocator" "', argument " "1"" of type '" "std::vector< six::MatchCollect > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchCollect > * >(argp1);
  {
    try
    {
      result = ((std::vector< six::MatchCollect > const *)arg1)->get_allocator();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< six::MatchCollect >::allocator_type(static_cast< const std::vector< six::MatchCollect >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_six__MatchCollect_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_VectorMatchCollect__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchCollect >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::MatchCollect > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorMatchCollect",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorMatchCollect" "', argument " "1"" of type '" "std::vector< six::MatchCollect >::size_type""'");
  } 
  arg1 = static_cast< std::vector< six::MatchCollect >::size_type >(val1);
  {
    try
    {
      result = (std::vector< six::MatchCollect > *)new std::vector< six::MatchCollect >(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchCollect > *arg1 = (std::vector< six::MatchCollect > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchCollect_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_pop_back" "', argument " "1"" of type '" "std::vector< six::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchCollect > * >(argp1);
  {
    try
    {
      (arg1)->pop_back();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchCollect > *arg1 = (std::vector< six::MatchCollect > *) 0 ;
  std::vector< six::MatchCollect >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorMatchCollect_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_resize" "', argument " "1"" of type '" "std::vector< six::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchCollect > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorMatchCollect_resize" "', argument " "2"" of type '" "std::vector< six::MatchCollect >::size_type""'");
  } 
  arg2 = static_cast< std::vector< six::MatchCollect >::size_type >(val2);
  {
    try
    {
      (arg1)->resize(arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchCollect > *arg1 = (std::vector< six::MatchCollect > *) 0 ;
  std::vector< six::MatchCollect >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< six::MatchCollect >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorMatchCollect_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_erase" "', argument " "1"" of type '" "std::vector< six::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchCollect > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorMatchCollect_erase" "', argument " "2"" of type '" "std::vector< six::MatchCollect >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< six::MatchCollect >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< six::MatchCollect >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorMatchCollect_erase" "', argument " "2"" of type '" "std::vector< six::MatchCollect >::iterator""'");
    }
  }
  {
    try
    {
      result = std_vector_Sl_six_MatchCollect_Sg__erase__SWIG_0(arg1,arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< six::MatchCollect >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchCollect > *arg1 = (std::vector< six::MatchCollect > *) 0 ;
  std::vector< six::MatchCollect >::iterator arg2 ;
  std::vector< six::MatchCollect >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< six::MatchCollect >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorMatchCollect_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_erase" "', argument " "1"" of type '" "std::vector< six::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchCollect > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorMatchCollect_erase" "', argument " "2"" of type '" "std::vector< six::MatchCollect >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< six::MatchCollect >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< six::MatchCollect >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorMatchCollect_erase" "', argument " "2"" of type '" "std::vector< six::MatchCollect >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorMatchCollect_erase" "', argument " "3"" of type '" "std::vector< six::MatchCollect >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< six::MatchCollect >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< six::MatchCollect >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorMatchCollect_erase" "', argument " "3"" of type '" "std::vector< six::MatchCollect >::iterator""'");
    }
  }
  {
    try
    {
      result = std_vector_Sl_six_MatchCollect_Sg__erase__SWIG_1(arg1,arg2,arg3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< six::MatchCollect >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< six::MatchCollect,std::allocator< six::MatchCollect > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< six::MatchCollect >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_VectorMatchCollect_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< six::MatchCollect,std::allocator< six::MatchCollect > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< six::MatchCollect >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< six::MatchCollect >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_VectorMatchCollect_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorMatchCollect_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< six::MatchCollect >::erase(std::vector< six::MatchCollect >::iterator)\n"
    "    std::vector< six::MatchCollect >::erase(std::vector< six::MatchCollect >::iterator,std::vector< six::MatchCollect >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_VectorMatchCollect__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchCollect >::size_type arg1 ;
  std::vector< six::MatchCollect >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< six::MatchCollect > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_VectorMatchCollect",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorMatchCollect" "', argument " "1"" of type '" "std::vector< six::MatchCollect >::size_type""'");
  } 
  arg1 = static_cast< std::vector< six::MatchCollect >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__MatchCollect,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VectorMatchCollect" "', argument " "2"" of type '" "std::vector< six::MatchCollect >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorMatchCollect" "', argument " "2"" of type '" "std::vector< six::MatchCollect >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< six::MatchCollect >::value_type * >(argp2);
  {
    try
    {
      result = (std::vector< six::MatchCollect > *)new std::vector< six::MatchCollect >(arg1,(std::vector< six::MatchCollect >::value_type const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_VectorMatchCollect(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VectorMatchCollect__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VectorMatchCollect__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< six::MatchCollect,std::allocator< six::MatchCollect > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorMatchCollect__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__MatchCollect, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VectorMatchCollect__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_VectorMatchCollect'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< six::MatchCollect >::vector()\n"
    "    std::vector< six::MatchCollect >::vector(std::vector< six::MatchCollect > const &)\n"
    "    std::vector< six::MatchCollect >::vector(std::vector< six::MatchCollect >::size_type)\n"
    "    std::vector< six::MatchCollect >::vector(std::vector< six::MatchCollect >::size_type,std::vector< six::MatchCollect >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchCollect > *arg1 = (std::vector< six::MatchCollect > *) 0 ;
  std::vector< six::MatchCollect >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorMatchCollect_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_push_back" "', argument " "1"" of type '" "std::vector< six::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchCollect > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__MatchCollect,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorMatchCollect_push_back" "', argument " "2"" of type '" "std::vector< six::MatchCollect >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorMatchCollect_push_back" "', argument " "2"" of type '" "std::vector< six::MatchCollect >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< six::MatchCollect >::value_type * >(argp2);
  {
    try
    {
      (arg1)->push_back((std::vector< six::MatchCollect >::value_type const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchCollect > *arg1 = (std::vector< six::MatchCollect > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::MatchCollect >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchCollect_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_front" "', argument " "1"" of type '" "std::vector< six::MatchCollect > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchCollect > * >(argp1);
  {
    try
    {
      result = (std::vector< six::MatchCollect >::value_type *) &((std::vector< six::MatchCollect > const *)arg1)->front();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__MatchCollect, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchCollect > *arg1 = (std::vector< six::MatchCollect > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::MatchCollect >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchCollect_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_back" "', argument " "1"" of type '" "std::vector< six::MatchCollect > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchCollect > * >(argp1);
  {
    try
    {
      result = (std::vector< six::MatchCollect >::value_type *) &((std::vector< six::MatchCollect > const *)arg1)->back();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__MatchCollect, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchCollect > *arg1 = (std::vector< six::MatchCollect > *) 0 ;
  std::vector< six::MatchCollect >::size_type arg2 ;
  std::vector< six::MatchCollect >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorMatchCollect_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_assign" "', argument " "1"" of type '" "std::vector< six::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchCollect > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorMatchCollect_assign" "', argument " "2"" of type '" "std::vector< six::MatchCollect >::size_type""'");
  } 
  arg2 = static_cast< std::vector< six::MatchCollect >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_six__MatchCollect,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorMatchCollect_assign" "', argument " "3"" of type '" "std::vector< six::MatchCollect >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorMatchCollect_assign" "', argument " "3"" of type '" "std::vector< six::MatchCollect >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< six::MatchCollect >::value_type * >(argp3);
  {
    try
    {
      (arg1)->assign(arg2,(std::vector< six::MatchCollect >::value_type const &)*arg3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchCollect > *arg1 = (std::vector< six::MatchCollect > *) 0 ;
  std::vector< six::MatchCollect >::size_type arg2 ;
  std::vector< six::MatchCollect >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorMatchCollect_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_resize" "', argument " "1"" of type '" "std::vector< six::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchCollect > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorMatchCollect_resize" "', argument " "2"" of type '" "std::vector< six::MatchCollect >::size_type""'");
  } 
  arg2 = static_cast< std::vector< six::MatchCollect >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_six__MatchCollect,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorMatchCollect_resize" "', argument " "3"" of type '" "std::vector< six::MatchCollect >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorMatchCollect_resize" "', argument " "3"" of type '" "std::vector< six::MatchCollect >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< six::MatchCollect >::value_type * >(argp3);
  {
    try
    {
      (arg1)->resize(arg2,(std::vector< six::MatchCollect >::value_type const &)*arg3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< six::MatchCollect,std::allocator< six::MatchCollect > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorMatchCollect_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< six::MatchCollect,std::allocator< six::MatchCollect > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_six__MatchCollect, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorMatchCollect_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorMatchCollect_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< six::MatchCollect >::resize(std::vector< six::MatchCollect >::size_type)\n"
    "    std::vector< six::MatchCollect >::resize(std::vector< six::MatchCollect >::size_type,std::vector< six::MatchCollect >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchCollect > *arg1 = (std::vector< six::MatchCollect > *) 0 ;
  std::vector< six::MatchCollect >::iterator arg2 ;
  std::vector< six::MatchCollect >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< six::MatchCollect >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorMatchCollect_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_insert" "', argument " "1"" of type '" "std::vector< six::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchCollect > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorMatchCollect_insert" "', argument " "2"" of type '" "std::vector< six::MatchCollect >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< six::MatchCollect >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< six::MatchCollect >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorMatchCollect_insert" "', argument " "2"" of type '" "std::vector< six::MatchCollect >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_six__MatchCollect,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorMatchCollect_insert" "', argument " "3"" of type '" "std::vector< six::MatchCollect >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorMatchCollect_insert" "', argument " "3"" of type '" "std::vector< six::MatchCollect >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< six::MatchCollect >::value_type * >(argp3);
  {
    try
    {
      result = std_vector_Sl_six_MatchCollect_Sg__insert__SWIG_0(arg1,arg2,(six::MatchCollect const &)*arg3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< six::MatchCollect >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchCollect > *arg1 = (std::vector< six::MatchCollect > *) 0 ;
  std::vector< six::MatchCollect >::iterator arg2 ;
  std::vector< six::MatchCollect >::size_type arg3 ;
  std::vector< six::MatchCollect >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorMatchCollect_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_insert" "', argument " "1"" of type '" "std::vector< six::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchCollect > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorMatchCollect_insert" "', argument " "2"" of type '" "std::vector< six::MatchCollect >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< six::MatchCollect >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< six::MatchCollect >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorMatchCollect_insert" "', argument " "2"" of type '" "std::vector< six::MatchCollect >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorMatchCollect_insert" "', argument " "3"" of type '" "std::vector< six::MatchCollect >::size_type""'");
  } 
  arg3 = static_cast< std::vector< six::MatchCollect >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_six__MatchCollect,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorMatchCollect_insert" "', argument " "4"" of type '" "std::vector< six::MatchCollect >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorMatchCollect_insert" "', argument " "4"" of type '" "std::vector< six::MatchCollect >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< six::MatchCollect >::value_type * >(argp4);
  {
    try
    {
      std_vector_Sl_six_MatchCollect_Sg__insert__SWIG_1(arg1,arg2,arg3,(six::MatchCollect const &)*arg4);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< six::MatchCollect,std::allocator< six::MatchCollect > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< six::MatchCollect >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_six__MatchCollect, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorMatchCollect_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< six::MatchCollect,std::allocator< six::MatchCollect > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< six::MatchCollect >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], nullptr);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_six__MatchCollect, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorMatchCollect_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorMatchCollect_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< six::MatchCollect >::insert(std::vector< six::MatchCollect >::iterator,std::vector< six::MatchCollect >::value_type const &)\n"
    "    std::vector< six::MatchCollect >::insert(std::vector< six::MatchCollect >::iterator,std::vector< six::MatchCollect >::size_type,std::vector< six::MatchCollect >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchCollect > *arg1 = (std::vector< six::MatchCollect > *) 0 ;
  std::vector< six::MatchCollect >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorMatchCollect_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_reserve" "', argument " "1"" of type '" "std::vector< six::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchCollect > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorMatchCollect_reserve" "', argument " "2"" of type '" "std::vector< six::MatchCollect >::size_type""'");
  } 
  arg2 = static_cast< std::vector< six::MatchCollect >::size_type >(val2);
  {
    try
    {
      (arg1)->reserve(arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchCollect > *arg1 = (std::vector< six::MatchCollect > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::MatchCollect >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchCollect_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_capacity" "', argument " "1"" of type '" "std::vector< six::MatchCollect > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchCollect > * >(argp1);
  {
    try
    {
      result = ((std::vector< six::MatchCollect > const *)arg1)->capacity();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_delete_VectorMatchCollect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchCollect > *arg1 = (std::vector< six::MatchCollect > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VectorMatchCollect",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorMatchCollect" "', argument " "1"" of type '" "std::vector< six::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchCollect > * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *VectorMatchCollect_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_VectorMatchType_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchType > *arg1 = (std::vector< six::MatchType > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchType_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchType_iterator" "', argument " "1"" of type '" "std::vector< six::MatchType > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchType > * >(argp1);
  {
    try
    {
      result = (swig::SwigPyIterator *)std_vector_Sl_six_MatchType_Sg__iterator(arg1,arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchType___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchType > *arg1 = (std::vector< six::MatchType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchType___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchType___nonzero__" "', argument " "1"" of type '" "std::vector< six::MatchType > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchType > * >(argp1);
  {
    try
    {
      result = (bool)std_vector_Sl_six_MatchType_Sg____nonzero__((std::vector< six::MatchType > const *)arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchType___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchType > *arg1 = (std::vector< six::MatchType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchType___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchType___bool__" "', argument " "1"" of type '" "std::vector< six::MatchType > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchType > * >(argp1);
  {
    try
    {
      result = (bool)std_vector_Sl_six_MatchType_Sg____bool__((std::vector< six::MatchType > const *)arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchType___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchType > *arg1 = (std::vector< six::MatchType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::MatchType >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchType___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchType___len__" "', argument " "1"" of type '" "std::vector< six::MatchType > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchType > * >(argp1);
  {
    try
    {
      result = std_vector_Sl_six_MatchType_Sg____len__((std::vector< six::MatchType > const *)arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchType___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchType > *arg1 = (std::vector< six::MatchType > *) 0 ;
  std::vector< six::MatchType >::difference_type arg2 ;
  std::vector< six::MatchType >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< six::MatchType,std::allocator< six::MatchType > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorMatchType___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchType___getslice__" "', argument " "1"" of type '" "std::vector< six::MatchType > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchType > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorMatchType___getslice__" "', argument " "2"" of type '" "std::vector< six::MatchType >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< six::MatchType >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorMatchType___getslice__" "', argument " "3"" of type '" "std::vector< six::MatchType >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< six::MatchType >::difference_type >(val3);
  {
    try
    {
      try {
        result = (std::vector< six::MatchType,std::allocator< six::MatchType > > *)std_vector_Sl_six_MatchType_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchType___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchType > *arg1 = (std::vector< six::MatchType > *) 0 ;
  std::vector< six::MatchType >::difference_type arg2 ;
  std::vector< six::MatchType >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorMatchType___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchType___setslice__" "', argument " "1"" of type '" "std::vector< six::MatchType > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchType > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorMatchType___setslice__" "', argument " "2"" of type '" "std::vector< six::MatchType >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< six::MatchType >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorMatchType___setslice__" "', argument " "3"" of type '" "std::vector< six::MatchType >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< six::MatchType >::difference_type >(val3);
  {
    try
    {
      try {
        std_vector_Sl_six_MatchType_Sg____setslice____SWIG_0(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchType___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchType > *arg1 = (std::vector< six::MatchType > *) 0 ;
  std::vector< six::MatchType >::difference_type arg2 ;
  std::vector< six::MatchType >::difference_type arg3 ;
  std::vector< six::MatchType,std::allocator< six::MatchType > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorMatchType___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchType___setslice__" "', argument " "1"" of type '" "std::vector< six::MatchType > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchType > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorMatchType___setslice__" "', argument " "2"" of type '" "std::vector< six::MatchType >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< six::MatchType >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorMatchType___setslice__" "', argument " "3"" of type '" "std::vector< six::MatchType >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< six::MatchType >::difference_type >(val3);
  {
    std::vector< six::MatchType,std::allocator< six::MatchType > > *ptr = (std::vector< six::MatchType,std::allocator< six::MatchType > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorMatchType___setslice__" "', argument " "4"" of type '" "std::vector< six::MatchType,std::allocator< six::MatchType > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorMatchType___setslice__" "', argument " "4"" of type '" "std::vector< six::MatchType,std::allocator< six::MatchType > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try
    {
      try {
        std_vector_Sl_six_MatchType_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< six::MatchType,std::allocator< six::MatchType > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchType___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< six::MatchType,std::allocator< six::MatchType > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], nullptr);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VectorMatchType___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< six::MatchType,std::allocator< six::MatchType > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], nullptr);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< six::MatchType,std::allocator< six::MatchType > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorMatchType___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorMatchType___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< six::MatchType >::__setslice__(std::vector< six::MatchType >::difference_type,std::vector< six::MatchType >::difference_type)\n"
    "    std::vector< six::MatchType >::__setslice__(std::vector< six::MatchType >::difference_type,std::vector< six::MatchType >::difference_type,std::vector< six::MatchType,std::allocator< six::MatchType > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorMatchType___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchType > *arg1 = (std::vector< six::MatchType > *) 0 ;
  std::vector< six::MatchType >::difference_type arg2 ;
  std::vector< six::MatchType >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorMatchType___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchType___delslice__" "', argument " "1"" of type '" "std::vector< six::MatchType > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchType > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorMatchType___delslice__" "', argument " "2"" of type '" "std::vector< six::MatchType >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< six::MatchType >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorMatchType___delslice__" "', argument " "3"" of type '" "std::vector< six::MatchType >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< six::MatchType >::difference_type >(val3);
  {
    try
    {
      try {
        std_vector_Sl_six_MatchType_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchType___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchType > *arg1 = (std::vector< six::MatchType > *) 0 ;
  std::vector< six::MatchType >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorMatchType___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchType___delitem__" "', argument " "1"" of type '" "std::vector< six::MatchType > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchType > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorMatchType___delitem__" "', argument " "2"" of type '" "std::vector< six::MatchType >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< six::MatchType >::difference_type >(val2);
  {
    try
    {
      try {
        std_vector_Sl_six_MatchType_Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchType___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchType > *arg1 = (std::vector< six::MatchType > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< six::MatchType,std::allocator< six::MatchType > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorMatchType___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchType___getitem__" "', argument " "1"" of type '" "std::vector< six::MatchType > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchType > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorMatchType___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try
    {
      try {
        result = (std::vector< six::MatchType,std::allocator< six::MatchType > > *)std_vector_Sl_six_MatchType_Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchType___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchType > *arg1 = (std::vector< six::MatchType > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< six::MatchType,std::allocator< six::MatchType > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorMatchType___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchType___setitem__" "', argument " "1"" of type '" "std::vector< six::MatchType > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchType > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorMatchType___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector< six::MatchType,std::allocator< six::MatchType > > *ptr = (std::vector< six::MatchType,std::allocator< six::MatchType > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorMatchType___setitem__" "', argument " "3"" of type '" "std::vector< six::MatchType,std::allocator< six::MatchType > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorMatchType___setitem__" "', argument " "3"" of type '" "std::vector< six::MatchType,std::allocator< six::MatchType > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try
    {
      try {
        std_vector_Sl_six_MatchType_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< six::MatchType,std::allocator< six::MatchType > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchType___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchType > *arg1 = (std::vector< six::MatchType > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorMatchType___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchType___setitem__" "', argument " "1"" of type '" "std::vector< six::MatchType > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchType > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorMatchType___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try
    {
      try {
        std_vector_Sl_six_MatchType_Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchType___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchType > *arg1 = (std::vector< six::MatchType > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorMatchType___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchType___delitem__" "', argument " "1"" of type '" "std::vector< six::MatchType > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchType > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorMatchType___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try
    {
      try {
        std_vector_Sl_six_MatchType_Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchType___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< six::MatchType,std::allocator< six::MatchType > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorMatchType___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< six::MatchType,std::allocator< six::MatchType > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorMatchType___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorMatchType___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< six::MatchType >::__delitem__(std::vector< six::MatchType >::difference_type)\n"
    "    std::vector< six::MatchType >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorMatchType___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchType > *arg1 = (std::vector< six::MatchType > *) 0 ;
  std::vector< six::MatchType >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< six::MatchType >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorMatchType___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchType___getitem__" "', argument " "1"" of type '" "std::vector< six::MatchType > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchType > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorMatchType___getitem__" "', argument " "2"" of type '" "std::vector< six::MatchType >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< six::MatchType >::difference_type >(val2);
  {
    try
    {
      try {
        result = (std::vector< six::MatchType >::value_type *) &std_vector_Sl_six_MatchType_Sg____getitem____SWIG_1((std::vector< six::MatchType > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__MatchType, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchType___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< six::MatchType,std::allocator< six::MatchType > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorMatchType___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< six::MatchType,std::allocator< six::MatchType > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorMatchType___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorMatchType___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< six::MatchType >::__getitem__(PySliceObject *)\n"
    "    std::vector< six::MatchType >::__getitem__(std::vector< six::MatchType >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorMatchType___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchType > *arg1 = (std::vector< six::MatchType > *) 0 ;
  std::vector< six::MatchType >::difference_type arg2 ;
  std::vector< six::MatchType >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorMatchType___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchType___setitem__" "', argument " "1"" of type '" "std::vector< six::MatchType > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchType > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorMatchType___setitem__" "', argument " "2"" of type '" "std::vector< six::MatchType >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< six::MatchType >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_six__MatchType,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorMatchType___setitem__" "', argument " "3"" of type '" "std::vector< six::MatchType >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorMatchType___setitem__" "', argument " "3"" of type '" "std::vector< six::MatchType >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< six::MatchType >::value_type * >(argp3);
  {
    try
    {
      try {
        std_vector_Sl_six_MatchType_Sg____setitem____SWIG_2(arg1,arg2,(six::MatchType const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchType___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< six::MatchType,std::allocator< six::MatchType > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorMatchType___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< six::MatchType,std::allocator< six::MatchType > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< six::MatchType,std::allocator< six::MatchType > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorMatchType___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< six::MatchType,std::allocator< six::MatchType > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_six__MatchType, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorMatchType___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorMatchType___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< six::MatchType >::__setitem__(PySliceObject *,std::vector< six::MatchType,std::allocator< six::MatchType > > const &)\n"
    "    std::vector< six::MatchType >::__setitem__(PySliceObject *)\n"
    "    std::vector< six::MatchType >::__setitem__(std::vector< six::MatchType >::difference_type,std::vector< six::MatchType >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorMatchType_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchType > *arg1 = (std::vector< six::MatchType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::MatchType >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchType_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchType_pop" "', argument " "1"" of type '" "std::vector< six::MatchType > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchType > * >(argp1);
  {
    try
    {
      try {
        result = std_vector_Sl_six_MatchType_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< six::MatchType >::value_type(static_cast< const std::vector< six::MatchType >::value_type& >(result))), SWIGTYPE_p_six__MatchType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchType_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchType > *arg1 = (std::vector< six::MatchType > *) 0 ;
  std::vector< six::MatchType >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorMatchType_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchType_append" "', argument " "1"" of type '" "std::vector< six::MatchType > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchType > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__MatchType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorMatchType_append" "', argument " "2"" of type '" "std::vector< six::MatchType >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorMatchType_append" "', argument " "2"" of type '" "std::vector< six::MatchType >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< six::MatchType >::value_type * >(argp2);
  {
    try
    {
      std_vector_Sl_six_MatchType_Sg__append(arg1,(six::MatchType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_VectorMatchType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchType > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VectorMatchType")) SWIG_fail;
  {
    try
    {
      result = (std::vector< six::MatchType > *)new std::vector< six::MatchType >();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_VectorMatchType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchType > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< six::MatchType > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorMatchType",&obj0)) SWIG_fail;
  {
    std::vector< six::MatchType,std::allocator< six::MatchType > > *ptr = (std::vector< six::MatchType,std::allocator< six::MatchType > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorMatchType" "', argument " "1"" of type '" "std::vector< six::MatchType > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorMatchType" "', argument " "1"" of type '" "std::vector< six::MatchType > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try
    {
      result = (std::vector< six::MatchType > *)new std::vector< six::MatchType >((std::vector< six::MatchType > const &)*arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchType_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchType > *arg1 = (std::vector< six::MatchType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchType_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchType_empty" "', argument " "1"" of type '" "std::vector< six::MatchType > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchType > * >(argp1);
  {
    try
    {
      result = (bool)((std::vector< six::MatchType > const *)arg1)->empty();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchType_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchType > *arg1 = (std::vector< six::MatchType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::MatchType >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchType_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchType_size" "', argument " "1"" of type '" "std::vector< six::MatchType > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchType > * >(argp1);
  {
    try
    {
      result = ((std::vector< six::MatchType > const *)arg1)->size();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchType_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchType > *arg1 = (std::vector< six::MatchType > *) 0 ;
  std::vector< six::MatchType > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorMatchType_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchType_swap" "', argument " "1"" of type '" "std::vector< six::MatchType > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchType > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorMatchType_swap" "', argument " "2"" of type '" "std::vector< six::MatchType > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorMatchType_swap" "', argument " "2"" of type '" "std::vector< six::MatchType > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< six::MatchType > * >(argp2);
  {
    try
    {
      (arg1)->swap(*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchType_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchType > *arg1 = (std::vector< six::MatchType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::MatchType >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchType_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchType_begin" "', argument " "1"" of type '" "std::vector< six::MatchType > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchType > * >(argp1);
  {
    try
    {
      result = (arg1)->begin();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< six::MatchType >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchType_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchType > *arg1 = (std::vector< six::MatchType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::MatchType >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchType_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchType_end" "', argument " "1"" of type '" "std::vector< six::MatchType > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchType > * >(argp1);
  {
    try
    {
      result = (arg1)->end();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< six::MatchType >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchType_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchType > *arg1 = (std::vector< six::MatchType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::MatchType >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchType_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchType_rbegin" "', argument " "1"" of type '" "std::vector< six::MatchType > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchType > * >(argp1);
  {
    try
    {
      result = (arg1)->rbegin();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< six::MatchType >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchType_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchType > *arg1 = (std::vector< six::MatchType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::MatchType >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchType_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchType_rend" "', argument " "1"" of type '" "std::vector< six::MatchType > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchType > * >(argp1);
  {
    try
    {
      result = (arg1)->rend();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< six::MatchType >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchType_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchType > *arg1 = (std::vector< six::MatchType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchType_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchType_clear" "', argument " "1"" of type '" "std::vector< six::MatchType > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchType > * >(argp1);
  {
    try
    {
      (arg1)->clear();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchType_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchType > *arg1 = (std::vector< six::MatchType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< six::MatchType > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchType_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchType_get_allocator" "', argument " "1"" of type '" "std::vector< six::MatchType > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchType > * >(argp1);
  {
    try
    {
      result = ((std::vector< six::MatchType > const *)arg1)->get_allocator();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< six::MatchType >::allocator_type(static_cast< const std::vector< six::MatchType >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_six__MatchType_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_VectorMatchType__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchType >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::MatchType > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorMatchType",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorMatchType" "', argument " "1"" of type '" "std::vector< six::MatchType >::size_type""'");
  } 
  arg1 = static_cast< std::vector< six::MatchType >::size_type >(val1);
  {
    try
    {
      result = (std::vector< six::MatchType > *)new std::vector< six::MatchType >(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchType_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchType > *arg1 = (std::vector< six::MatchType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchType_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchType_pop_back" "', argument " "1"" of type '" "std::vector< six::MatchType > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchType > * >(argp1);
  {
    try
    {
      (arg1)->pop_back();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchType_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchType > *arg1 = (std::vector< six::MatchType > *) 0 ;
  std::vector< six::MatchType >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorMatchType_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchType_resize" "', argument " "1"" of type '" "std::vector< six::MatchType > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchType > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorMatchType_resize" "', argument " "2"" of type '" "std::vector< six::MatchType >::size_type""'");
  } 
  arg2 = static_cast< std::vector< six::MatchType >::size_type >(val2);
  {
    try
    {
      (arg1)->resize(arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchType_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchType > *arg1 = (std::vector< six::MatchType > *) 0 ;
  std::vector< six::MatchType >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< six::MatchType >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorMatchType_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchType_erase" "', argument " "1"" of type '" "std::vector< six::MatchType > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchType > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorMatchType_erase" "', argument " "2"" of type '" "std::vector< six::MatchType >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< six::MatchType >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< six::MatchType >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorMatchType_erase" "', argument " "2"" of type '" "std::vector< six::MatchType >::iterator""'");
    }
  }
  {
    try
    {
      result = std_vector_Sl_six_MatchType_Sg__erase__SWIG_0(arg1,arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< six::MatchType >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchType_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchType > *arg1 = (std::vector< six::MatchType > *) 0 ;
  std::vector< six::MatchType >::iterator arg2 ;
  std::vector< six::MatchType >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< six::MatchType >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorMatchType_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchType_erase" "', argument " "1"" of type '" "std::vector< six::MatchType > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchType > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorMatchType_erase" "', argument " "2"" of type '" "std::vector< six::MatchType >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< six::MatchType >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< six::MatchType >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorMatchType_erase" "', argument " "2"" of type '" "std::vector< six::MatchType >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorMatchType_erase" "', argument " "3"" of type '" "std::vector< six::MatchType >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< six::MatchType >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< six::MatchType >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorMatchType_erase" "', argument " "3"" of type '" "std::vector< six::MatchType >::iterator""'");
    }
  }
  {
    try
    {
      result = std_vector_Sl_six_MatchType_Sg__erase__SWIG_1(arg1,arg2,arg3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< six::MatchType >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchType_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< six::MatchType,std::allocator< six::MatchType > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< six::MatchType >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_VectorMatchType_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< six::MatchType,std::allocator< six::MatchType > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< six::MatchType >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< six::MatchType >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_VectorMatchType_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorMatchType_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< six::MatchType >::erase(std::vector< six::MatchType >::iterator)\n"
    "    std::vector< six::MatchType >::erase(std::vector< six::MatchType >::iterator,std::vector< six::MatchType >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_VectorMatchType__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchType >::size_type arg1 ;
  std::vector< six::MatchType >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< six::MatchType > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_VectorMatchType",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorMatchType" "', argument " "1"" of type '" "std::vector< six::MatchType >::size_type""'");
  } 
  arg1 = static_cast< std::vector< six::MatchType >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__MatchType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VectorMatchType" "', argument " "2"" of type '" "std::vector< six::MatchType >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorMatchType" "', argument " "2"" of type '" "std::vector< six::MatchType >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< six::MatchType >::value_type * >(argp2);
  {
    try
    {
      result = (std::vector< six::MatchType > *)new std::vector< six::MatchType >(arg1,(std::vector< six::MatchType >::value_type const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_VectorMatchType(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VectorMatchType__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VectorMatchType__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< six::MatchType,std::allocator< six::MatchType > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorMatchType__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__MatchType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VectorMatchType__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_VectorMatchType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< six::MatchType >::vector()\n"
    "    std::vector< six::MatchType >::vector(std::vector< six::MatchType > const &)\n"
    "    std::vector< six::MatchType >::vector(std::vector< six::MatchType >::size_type)\n"
    "    std::vector< six::MatchType >::vector(std::vector< six::MatchType >::size_type,std::vector< six::MatchType >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorMatchType_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchType > *arg1 = (std::vector< six::MatchType > *) 0 ;
  std::vector< six::MatchType >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorMatchType_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchType_push_back" "', argument " "1"" of type '" "std::vector< six::MatchType > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchType > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__MatchType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorMatchType_push_back" "', argument " "2"" of type '" "std::vector< six::MatchType >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorMatchType_push_back" "', argument " "2"" of type '" "std::vector< six::MatchType >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< six::MatchType >::value_type * >(argp2);
  {
    try
    {
      (arg1)->push_back((std::vector< six::MatchType >::value_type const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchType_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchType > *arg1 = (std::vector< six::MatchType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::MatchType >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchType_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchType_front" "', argument " "1"" of type '" "std::vector< six::MatchType > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchType > * >(argp1);
  {
    try
    {
      result = (std::vector< six::MatchType >::value_type *) &((std::vector< six::MatchType > const *)arg1)->front();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__MatchType, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchType_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchType > *arg1 = (std::vector< six::MatchType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::MatchType >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchType_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchType_back" "', argument " "1"" of type '" "std::vector< six::MatchType > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchType > * >(argp1);
  {
    try
    {
      result = (std::vector< six::MatchType >::value_type *) &((std::vector< six::MatchType > const *)arg1)->back();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__MatchType, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchType_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchType > *arg1 = (std::vector< six::MatchType > *) 0 ;
  std::vector< six::MatchType >::size_type arg2 ;
  std::vector< six::MatchType >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorMatchType_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchType_assign" "', argument " "1"" of type '" "std::vector< six::MatchType > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchType > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorMatchType_assign" "', argument " "2"" of type '" "std::vector< six::MatchType >::size_type""'");
  } 
  arg2 = static_cast< std::vector< six::MatchType >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_six__MatchType,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorMatchType_assign" "', argument " "3"" of type '" "std::vector< six::MatchType >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorMatchType_assign" "', argument " "3"" of type '" "std::vector< six::MatchType >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< six::MatchType >::value_type * >(argp3);
  {
    try
    {
      (arg1)->assign(arg2,(std::vector< six::MatchType >::value_type const &)*arg3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchType_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchType > *arg1 = (std::vector< six::MatchType > *) 0 ;
  std::vector< six::MatchType >::size_type arg2 ;
  std::vector< six::MatchType >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorMatchType_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchType_resize" "', argument " "1"" of type '" "std::vector< six::MatchType > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchType > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorMatchType_resize" "', argument " "2"" of type '" "std::vector< six::MatchType >::size_type""'");
  } 
  arg2 = static_cast< std::vector< six::MatchType >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_six__MatchType,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorMatchType_resize" "', argument " "3"" of type '" "std::vector< six::MatchType >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorMatchType_resize" "', argument " "3"" of type '" "std::vector< six::MatchType >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< six::MatchType >::value_type * >(argp3);
  {
    try
    {
      (arg1)->resize(arg2,(std::vector< six::MatchType >::value_type const &)*arg3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchType_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< six::MatchType,std::allocator< six::MatchType > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorMatchType_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< six::MatchType,std::allocator< six::MatchType > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_six__MatchType, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorMatchType_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorMatchType_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< six::MatchType >::resize(std::vector< six::MatchType >::size_type)\n"
    "    std::vector< six::MatchType >::resize(std::vector< six::MatchType >::size_type,std::vector< six::MatchType >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorMatchType_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchType > *arg1 = (std::vector< six::MatchType > *) 0 ;
  std::vector< six::MatchType >::iterator arg2 ;
  std::vector< six::MatchType >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< six::MatchType >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorMatchType_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchType_insert" "', argument " "1"" of type '" "std::vector< six::MatchType > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchType > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorMatchType_insert" "', argument " "2"" of type '" "std::vector< six::MatchType >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< six::MatchType >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< six::MatchType >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorMatchType_insert" "', argument " "2"" of type '" "std::vector< six::MatchType >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_six__MatchType,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorMatchType_insert" "', argument " "3"" of type '" "std::vector< six::MatchType >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorMatchType_insert" "', argument " "3"" of type '" "std::vector< six::MatchType >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< six::MatchType >::value_type * >(argp3);
  {
    try
    {
      result = std_vector_Sl_six_MatchType_Sg__insert__SWIG_0(arg1,arg2,(six::MatchType const &)*arg3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< six::MatchType >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchType_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchType > *arg1 = (std::vector< six::MatchType > *) 0 ;
  std::vector< six::MatchType >::iterator arg2 ;
  std::vector< six::MatchType >::size_type arg3 ;
  std::vector< six::MatchType >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorMatchType_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchType_insert" "', argument " "1"" of type '" "std::vector< six::MatchType > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchType > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorMatchType_insert" "', argument " "2"" of type '" "std::vector< six::MatchType >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< six::MatchType >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< six::MatchType >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorMatchType_insert" "', argument " "2"" of type '" "std::vector< six::MatchType >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorMatchType_insert" "', argument " "3"" of type '" "std::vector< six::MatchType >::size_type""'");
  } 
  arg3 = static_cast< std::vector< six::MatchType >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_six__MatchType,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorMatchType_insert" "', argument " "4"" of type '" "std::vector< six::MatchType >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorMatchType_insert" "', argument " "4"" of type '" "std::vector< six::MatchType >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< six::MatchType >::value_type * >(argp4);
  {
    try
    {
      std_vector_Sl_six_MatchType_Sg__insert__SWIG_1(arg1,arg2,arg3,(six::MatchType const &)*arg4);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchType_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< six::MatchType,std::allocator< six::MatchType > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< six::MatchType >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_six__MatchType, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorMatchType_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< six::MatchType,std::allocator< six::MatchType > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< six::MatchType >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], nullptr);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_six__MatchType, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorMatchType_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorMatchType_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< six::MatchType >::insert(std::vector< six::MatchType >::iterator,std::vector< six::MatchType >::value_type const &)\n"
    "    std::vector< six::MatchType >::insert(std::vector< six::MatchType >::iterator,std::vector< six::MatchType >::size_type,std::vector< six::MatchType >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorMatchType_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchType > *arg1 = (std::vector< six::MatchType > *) 0 ;
  std::vector< six::MatchType >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorMatchType_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchType_reserve" "', argument " "1"" of type '" "std::vector< six::MatchType > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchType > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorMatchType_reserve" "', argument " "2"" of type '" "std::vector< six::MatchType >::size_type""'");
  } 
  arg2 = static_cast< std::vector< six::MatchType >::size_type >(val2);
  {
    try
    {
      (arg1)->reserve(arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorMatchType_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchType > *arg1 = (std::vector< six::MatchType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::MatchType >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchType_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchType_capacity" "', argument " "1"" of type '" "std::vector< six::MatchType > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchType > * >(argp1);
  {
    try
    {
      result = ((std::vector< six::MatchType > const *)arg1)->capacity();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_delete_VectorMatchType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::MatchType > *arg1 = (std::vector< six::MatchType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VectorMatchType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorMatchType" "', argument " "1"" of type '" "std::vector< six::MatchType > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::MatchType > * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *VectorMatchType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::MatchType > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableMatchType_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_iterator" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > > * >(argp1);
  {
    try
    {
      result = (swig::SwigPyIterator *)std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_MatchType_Sg__Sg__iterator(arg1,arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::MatchType > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableMatchType___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType___nonzero__" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > > * >(argp1);
  {
    try
    {
      result = (bool)std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_MatchType_Sg__Sg____nonzero__((std::vector< mem::ScopedCopyablePtr< six::MatchType > > const *)arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::MatchType > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableMatchType___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType___bool__" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > > * >(argp1);
  {
    try
    {
      result = (bool)std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_MatchType_Sg__Sg____bool__((std::vector< mem::ScopedCopyablePtr< six::MatchType > > const *)arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::MatchType > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableMatchType___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType___len__" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > > * >(argp1);
  {
    try
    {
      result = std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_MatchType_Sg__Sg____len__((std::vector< mem::ScopedCopyablePtr< six::MatchType > > const *)arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::MatchType > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type arg2 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCopyableMatchType___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType___getslice__" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCopyableMatchType___getslice__" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorScopedCopyableMatchType___getslice__" "', argument " "3"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type >(val3);
  {
    try
    {
      try {
        result = (std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > > *)std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_MatchType_Sg__Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::MatchType > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type arg2 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCopyableMatchType___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType___setslice__" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCopyableMatchType___setslice__" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorScopedCopyableMatchType___setslice__" "', argument " "3"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type >(val3);
  {
    try
    {
      try {
        std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_MatchType_Sg__Sg____setslice____SWIG_0(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::MatchType > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type arg2 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type arg3 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorScopedCopyableMatchType___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType___setslice__" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCopyableMatchType___setslice__" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorScopedCopyableMatchType___setslice__" "', argument " "3"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type >(val3);
  {
    std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > > *ptr = (std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorScopedCopyableMatchType___setslice__" "', argument " "4"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCopyableMatchType___setslice__" "', argument " "4"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try
    {
      try {
        std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_MatchType_Sg__Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], nullptr);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VectorScopedCopyableMatchType___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], nullptr);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorScopedCopyableMatchType___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorScopedCopyableMatchType___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< mem::ScopedCopyablePtr< six::MatchType > >::__setslice__(std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type,std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type)\n"
    "    std::vector< mem::ScopedCopyablePtr< six::MatchType > >::__setslice__(std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type,std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type,std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::MatchType > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type arg2 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCopyableMatchType___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType___delslice__" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCopyableMatchType___delslice__" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorScopedCopyableMatchType___delslice__" "', argument " "3"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type >(val3);
  {
    try
    {
      try {
        std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_MatchType_Sg__Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::MatchType > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCopyableMatchType___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType___delitem__" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCopyableMatchType___delitem__" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type >(val2);
  {
    try
    {
      try {
        std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_MatchType_Sg__Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::MatchType > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCopyableMatchType___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType___getitem__" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCopyableMatchType___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try
    {
      try {
        result = (std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > > *)std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_MatchType_Sg__Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::MatchType > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCopyableMatchType___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType___setitem__" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCopyableMatchType___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > > *ptr = (std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorScopedCopyableMatchType___setitem__" "', argument " "3"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCopyableMatchType___setitem__" "', argument " "3"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try
    {
      try {
        std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_MatchType_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::MatchType > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCopyableMatchType___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType___setitem__" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCopyableMatchType___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try
    {
      try {
        std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_MatchType_Sg__Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::MatchType > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCopyableMatchType___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType___delitem__" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCopyableMatchType___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try
    {
      try {
        std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_MatchType_Sg__Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorScopedCopyableMatchType___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorScopedCopyableMatchType___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorScopedCopyableMatchType___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< mem::ScopedCopyablePtr< six::MatchType > >::__delitem__(std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type)\n"
    "    std::vector< mem::ScopedCopyablePtr< six::MatchType > >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::MatchType > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCopyableMatchType___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType___getitem__" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCopyableMatchType___getitem__" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type >(val2);
  {
    try
    {
      try {
        result = (std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type *) &std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_MatchType_Sg__Sg____getitem____SWIG_1((std::vector< mem::ScopedCopyablePtr< six::MatchType > > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchType_t, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorScopedCopyableMatchType___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorScopedCopyableMatchType___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorScopedCopyableMatchType___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< mem::ScopedCopyablePtr< six::MatchType > >::__getitem__(PySliceObject *)\n"
    "    std::vector< mem::ScopedCopyablePtr< six::MatchType > >::__getitem__(std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::MatchType > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type arg2 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCopyableMatchType___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType___setitem__" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCopyableMatchType___setitem__" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchType_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorScopedCopyableMatchType___setitem__" "', argument " "3"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCopyableMatchType___setitem__" "', argument " "3"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type * >(argp3);
  {
    try
    {
      try {
        std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_MatchType_Sg__Sg____setitem____SWIG_2(arg1,arg2,(mem::ScopedCopyablePtr< six::MatchType > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorScopedCopyableMatchType___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorScopedCopyableMatchType___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchType_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorScopedCopyableMatchType___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorScopedCopyableMatchType___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< mem::ScopedCopyablePtr< six::MatchType > >::__setitem__(PySliceObject *,std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > > const &)\n"
    "    std::vector< mem::ScopedCopyablePtr< six::MatchType > >::__setitem__(PySliceObject *)\n"
    "    std::vector< mem::ScopedCopyablePtr< six::MatchType > >::__setitem__(std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type,std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::MatchType > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableMatchType_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_pop" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > > * >(argp1);
  {
    try
    {
      try {
        result = std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_MatchType_Sg__Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type(static_cast< const std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type& >(result))), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchType_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::MatchType > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCopyableMatchType_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_append" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchType_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorScopedCopyableMatchType_append" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCopyableMatchType_append" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type * >(argp2);
  {
    try
    {
      std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_MatchType_Sg__Sg__append(arg1,(mem::ScopedCopyablePtr< six::MatchType > const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_VectorScopedCopyableMatchType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VectorScopedCopyableMatchType")) SWIG_fail;
  {
    try
    {
      result = (std::vector< mem::ScopedCopyablePtr< six::MatchType > > *)new std::vector< mem::ScopedCopyablePtr< six::MatchType > >();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_VectorScopedCopyableMatchType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorScopedCopyableMatchType",&obj0)) SWIG_fail;
  {
    std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > > *ptr = (std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorScopedCopyableMatchType" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorScopedCopyableMatchType" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try
    {
      result = (std::vector< mem::ScopedCopyablePtr< six::MatchType > > *)new std::vector< mem::ScopedCopyablePtr< six::MatchType > >((std::vector< mem::ScopedCopyablePtr< six::MatchType > > const &)*arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::MatchType > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableMatchType_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_empty" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > > * >(argp1);
  {
    try
    {
      result = (bool)((std::vector< mem::ScopedCopyablePtr< six::MatchType > > const *)arg1)->empty();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::MatchType > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableMatchType_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_size" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > > * >(argp1);
  {
    try
    {
      result = ((std::vector< mem::ScopedCopyablePtr< six::MatchType > > const *)arg1)->size();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::MatchType > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCopyableMatchType_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_swap" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorScopedCopyableMatchType_swap" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCopyableMatchType_swap" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > > * >(argp2);
  {
    try
    {
      (arg1)->swap(*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::MatchType > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableMatchType_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_begin" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > > * >(argp1);
  {
    try
    {
      result = (arg1)->begin();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::MatchType > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableMatchType_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_end" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > > * >(argp1);
  {
    try
    {
      result = (arg1)->end();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::MatchType > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableMatchType_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_rbegin" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > > * >(argp1);
  {
    try
    {
      result = (arg1)->rbegin();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCopyablePtr< six::MatchType > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::MatchType > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableMatchType_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_rend" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > > * >(argp1);
  {
    try
    {
      result = (arg1)->rend();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCopyablePtr< six::MatchType > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::MatchType > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableMatchType_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_clear" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > > * >(argp1);
  {
    try
    {
      (arg1)->clear();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::MatchType > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< mem::ScopedCopyablePtr< six::MatchType > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableMatchType_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_get_allocator" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > > * >(argp1);
  {
    try
    {
      result = ((std::vector< mem::ScopedCopyablePtr< six::MatchType > > const *)arg1)->get_allocator();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< mem::ScopedCopyablePtr< six::MatchType > >::allocator_type(static_cast< const std::vector< mem::ScopedCopyablePtr< six::MatchType > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_VectorScopedCopyableMatchType__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorScopedCopyableMatchType",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorScopedCopyableMatchType" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > >::size_type >(val1);
  {
    try
    {
      result = (std::vector< mem::ScopedCopyablePtr< six::MatchType > > *)new std::vector< mem::ScopedCopyablePtr< six::MatchType > >(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::MatchType > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableMatchType_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_pop_back" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > > * >(argp1);
  {
    try
    {
      (arg1)->pop_back();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::MatchType > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCopyableMatchType_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_resize" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCopyableMatchType_resize" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > >::size_type >(val2);
  {
    try
    {
      (arg1)->resize(arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::MatchType > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCopyableMatchType_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_erase" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCopyableMatchType_erase" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCopyableMatchType_erase" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator""'");
    }
  }
  {
    try
    {
      result = std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_MatchType_Sg__Sg__erase__SWIG_0(arg1,arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::MatchType > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator arg2 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCopyableMatchType_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_erase" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCopyableMatchType_erase" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCopyableMatchType_erase" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCopyableMatchType_erase" "', argument " "3"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCopyableMatchType_erase" "', argument " "3"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator""'");
    }
  }
  {
    try
    {
      result = std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_MatchType_Sg__Sg__erase__SWIG_1(arg1,arg2,arg3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_VectorScopedCopyableMatchType_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_VectorScopedCopyableMatchType_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorScopedCopyableMatchType_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< mem::ScopedCopyablePtr< six::MatchType > >::erase(std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator)\n"
    "    std::vector< mem::ScopedCopyablePtr< six::MatchType > >::erase(std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator,std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_VectorScopedCopyableMatchType__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > >::size_type arg1 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_VectorScopedCopyableMatchType",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorScopedCopyableMatchType" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchType_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VectorScopedCopyableMatchType" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorScopedCopyableMatchType" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type * >(argp2);
  {
    try
    {
      result = (std::vector< mem::ScopedCopyablePtr< six::MatchType > > *)new std::vector< mem::ScopedCopyablePtr< six::MatchType > >(arg1,(std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_VectorScopedCopyableMatchType(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VectorScopedCopyableMatchType__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VectorScopedCopyableMatchType__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorScopedCopyableMatchType__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchType_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VectorScopedCopyableMatchType__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_VectorScopedCopyableMatchType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< mem::ScopedCopyablePtr< six::MatchType > >::vector()\n"
    "    std::vector< mem::ScopedCopyablePtr< six::MatchType > >::vector(std::vector< mem::ScopedCopyablePtr< six::MatchType > > const &)\n"
    "    std::vector< mem::ScopedCopyablePtr< six::MatchType > >::vector(std::vector< mem::ScopedCopyablePtr< six::MatchType > >::size_type)\n"
    "    std::vector< mem::ScopedCopyablePtr< six::MatchType > >::vector(std::vector< mem::ScopedCopyablePtr< six::MatchType > >::size_type,std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::MatchType > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCopyableMatchType_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_push_back" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchType_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorScopedCopyableMatchType_push_back" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCopyableMatchType_push_back" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type * >(argp2);
  {
    try
    {
      (arg1)->push_back((std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::MatchType > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableMatchType_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_front" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > > * >(argp1);
  {
    try
    {
      result = (std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type *) &((std::vector< mem::ScopedCopyablePtr< six::MatchType > > const *)arg1)->front();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchType_t, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::MatchType > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableMatchType_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_back" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > > * >(argp1);
  {
    try
    {
      result = (std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type *) &((std::vector< mem::ScopedCopyablePtr< six::MatchType > > const *)arg1)->back();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchType_t, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::MatchType > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > >::size_type arg2 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCopyableMatchType_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_assign" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCopyableMatchType_assign" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchType_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorScopedCopyableMatchType_assign" "', argument " "3"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCopyableMatchType_assign" "', argument " "3"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type * >(argp3);
  {
    try
    {
      (arg1)->assign(arg2,(std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type const &)*arg3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::MatchType > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > >::size_type arg2 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCopyableMatchType_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_resize" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCopyableMatchType_resize" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchType_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorScopedCopyableMatchType_resize" "', argument " "3"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCopyableMatchType_resize" "', argument " "3"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type * >(argp3);
  {
    try
    {
      (arg1)->resize(arg2,(std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type const &)*arg3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorScopedCopyableMatchType_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchType_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorScopedCopyableMatchType_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorScopedCopyableMatchType_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< mem::ScopedCopyablePtr< six::MatchType > >::resize(std::vector< mem::ScopedCopyablePtr< six::MatchType > >::size_type)\n"
    "    std::vector< mem::ScopedCopyablePtr< six::MatchType > >::resize(std::vector< mem::ScopedCopyablePtr< six::MatchType > >::size_type,std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::MatchType > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator arg2 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCopyableMatchType_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_insert" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCopyableMatchType_insert" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCopyableMatchType_insert" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchType_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorScopedCopyableMatchType_insert" "', argument " "3"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCopyableMatchType_insert" "', argument " "3"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type * >(argp3);
  {
    try
    {
      result = std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_MatchType_Sg__Sg__insert__SWIG_0(arg1,arg2,(mem::ScopedCopyablePtr< six::MatchType > const &)*arg3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::MatchType > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator arg2 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > >::size_type arg3 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorScopedCopyableMatchType_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_insert" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCopyableMatchType_insert" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCopyableMatchType_insert" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorScopedCopyableMatchType_insert" "', argument " "3"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchType_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorScopedCopyableMatchType_insert" "', argument " "4"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCopyableMatchType_insert" "', argument " "4"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type * >(argp4);
  {
    try
    {
      std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_MatchType_Sg__Sg__insert__SWIG_1(arg1,arg2,arg3,(mem::ScopedCopyablePtr< six::MatchType > const &)*arg4);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchType_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorScopedCopyableMatchType_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], nullptr);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchType_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorScopedCopyableMatchType_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorScopedCopyableMatchType_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< mem::ScopedCopyablePtr< six::MatchType > >::insert(std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator,std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type const &)\n"
    "    std::vector< mem::ScopedCopyablePtr< six::MatchType > >::insert(std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator,std::vector< mem::ScopedCopyablePtr< six::MatchType > >::size_type,std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::MatchType > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCopyableMatchType_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_reserve" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCopyableMatchType_reserve" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > >::size_type >(val2);
  {
    try
    {
      (arg1)->reserve(arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::MatchType > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableMatchType_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_capacity" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > > * >(argp1);
  {
    try
    {
      result = ((std::vector< mem::ScopedCopyablePtr< six::MatchType > > const *)arg1)->capacity();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_delete_VectorScopedCopyableMatchType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::MatchType > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VectorScopedCopyableMatchType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorScopedCopyableMatchType" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::MatchType > > * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *VectorScopedCopyableMatchType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_VectorScopedCopyableGeoInfo_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableGeoInfo_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableGeoInfo_iterator" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > * >(argp1);
  {
    try
    {
      result = (swig::SwigPyIterator *)std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_GeoInfo_Sg__Sg__iterator(arg1,arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableGeoInfo___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableGeoInfo___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableGeoInfo___nonzero__" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > * >(argp1);
  {
    try
    {
      result = (bool)std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_GeoInfo_Sg__Sg____nonzero__((std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > const *)arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableGeoInfo___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableGeoInfo___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableGeoInfo___bool__" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > * >(argp1);
  {
    try
    {
      result = (bool)std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_GeoInfo_Sg__Sg____bool__((std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > const *)arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableGeoInfo___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableGeoInfo___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableGeoInfo___len__" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > * >(argp1);
  {
    try
    {
      result = std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_GeoInfo_Sg__Sg____len__((std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > const *)arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableGeoInfo___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type arg2 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCopyableGeoInfo___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableGeoInfo___getslice__" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCopyableGeoInfo___getslice__" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorScopedCopyableGeoInfo___getslice__" "', argument " "3"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type >(val3);
  {
    try
    {
      try {
        result = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > > *)std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_GeoInfo_Sg__Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableGeoInfo___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type arg2 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCopyableGeoInfo___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableGeoInfo___setslice__" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCopyableGeoInfo___setslice__" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorScopedCopyableGeoInfo___setslice__" "', argument " "3"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type >(val3);
  {
    try
    {
      try {
        std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_GeoInfo_Sg__Sg____setslice____SWIG_0(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableGeoInfo___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type arg2 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type arg3 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorScopedCopyableGeoInfo___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableGeoInfo___setslice__" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCopyableGeoInfo___setslice__" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorScopedCopyableGeoInfo___setslice__" "', argument " "3"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type >(val3);
  {
    std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > > *ptr = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorScopedCopyableGeoInfo___setslice__" "', argument " "4"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCopyableGeoInfo___setslice__" "', argument " "4"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try
    {
      try {
        std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_GeoInfo_Sg__Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableGeoInfo___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], nullptr);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VectorScopedCopyableGeoInfo___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], nullptr);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorScopedCopyableGeoInfo___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorScopedCopyableGeoInfo___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::__setslice__(std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type,std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type)\n"
    "    std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::__setslice__(std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type,std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type,std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableGeoInfo___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type arg2 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCopyableGeoInfo___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableGeoInfo___delslice__" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCopyableGeoInfo___delslice__" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorScopedCopyableGeoInfo___delslice__" "', argument " "3"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type >(val3);
  {
    try
    {
      try {
        std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_GeoInfo_Sg__Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableGeoInfo___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCopyableGeoInfo___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableGeoInfo___delitem__" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCopyableGeoInfo___delitem__" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type >(val2);
  {
    try
    {
      try {
        std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_GeoInfo_Sg__Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableGeoInfo___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCopyableGeoInfo___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableGeoInfo___getitem__" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCopyableGeoInfo___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try
    {
      try {
        result = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > > *)std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_GeoInfo_Sg__Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableGeoInfo___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCopyableGeoInfo___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableGeoInfo___setitem__" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCopyableGeoInfo___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > > *ptr = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorScopedCopyableGeoInfo___setitem__" "', argument " "3"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCopyableGeoInfo___setitem__" "', argument " "3"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try
    {
      try {
        std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_GeoInfo_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableGeoInfo___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCopyableGeoInfo___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableGeoInfo___setitem__" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCopyableGeoInfo___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try
    {
      try {
        std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_GeoInfo_Sg__Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableGeoInfo___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCopyableGeoInfo___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableGeoInfo___delitem__" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCopyableGeoInfo___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try
    {
      try {
        std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_GeoInfo_Sg__Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableGeoInfo___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorScopedCopyableGeoInfo___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorScopedCopyableGeoInfo___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorScopedCopyableGeoInfo___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::__delitem__(std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type)\n"
    "    std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableGeoInfo___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCopyableGeoInfo___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableGeoInfo___getitem__" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCopyableGeoInfo___getitem__" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type >(val2);
  {
    try
    {
      try {
        result = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type *) &std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_GeoInfo_Sg__Sg____getitem____SWIG_1((std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__GeoInfo_t, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableGeoInfo___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorScopedCopyableGeoInfo___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorScopedCopyableGeoInfo___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorScopedCopyableGeoInfo___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::__getitem__(PySliceObject *)\n"
    "    std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::__getitem__(std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableGeoInfo___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type arg2 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCopyableGeoInfo___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableGeoInfo___setitem__" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCopyableGeoInfo___setitem__" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__GeoInfo_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorScopedCopyableGeoInfo___setitem__" "', argument " "3"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCopyableGeoInfo___setitem__" "', argument " "3"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type * >(argp3);
  {
    try
    {
      try {
        std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_GeoInfo_Sg__Sg____setitem____SWIG_2(arg1,arg2,(mem::ScopedCopyablePtr< six::GeoInfo > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableGeoInfo___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorScopedCopyableGeoInfo___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorScopedCopyableGeoInfo___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__GeoInfo_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorScopedCopyableGeoInfo___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorScopedCopyableGeoInfo___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::__setitem__(PySliceObject *,std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > > const &)\n"
    "    std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::__setitem__(PySliceObject *)\n"
    "    std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::__setitem__(std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type,std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableGeoInfo_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableGeoInfo_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableGeoInfo_pop" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > * >(argp1);
  {
    try
    {
      try {
        result = std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_GeoInfo_Sg__Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type(static_cast< const std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type& >(result))), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__GeoInfo_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableGeoInfo_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCopyableGeoInfo_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableGeoInfo_append" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__GeoInfo_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorScopedCopyableGeoInfo_append" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCopyableGeoInfo_append" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type * >(argp2);
  {
    try
    {
      std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_GeoInfo_Sg__Sg__append(arg1,(mem::ScopedCopyablePtr< six::GeoInfo > const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_VectorScopedCopyableGeoInfo__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VectorScopedCopyableGeoInfo")) SWIG_fail;
  {
    try
    {
      result = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *)new std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_VectorScopedCopyableGeoInfo__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorScopedCopyableGeoInfo",&obj0)) SWIG_fail;
  {
    std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > > *ptr = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorScopedCopyableGeoInfo" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorScopedCopyableGeoInfo" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try
    {
      result = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *)new std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >((std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > const &)*arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableGeoInfo_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableGeoInfo_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableGeoInfo_empty" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > * >(argp1);
  {
    try
    {
      result = (bool)((std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > const *)arg1)->empty();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableGeoInfo_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableGeoInfo_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableGeoInfo_size" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > * >(argp1);
  {
    try
    {
      result = ((std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > const *)arg1)->size();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableGeoInfo_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCopyableGeoInfo_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableGeoInfo_swap" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorScopedCopyableGeoInfo_swap" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCopyableGeoInfo_swap" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > * >(argp2);
  {
    try
    {
      (arg1)->swap(*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableGeoInfo_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableGeoInfo_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableGeoInfo_begin" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > * >(argp1);
  {
    try
    {
      result = (arg1)->begin();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableGeoInfo_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableGeoInfo_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableGeoInfo_end" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > * >(argp1);
  {
    try
    {
      result = (arg1)->end();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableGeoInfo_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableGeoInfo_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableGeoInfo_rbegin" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > * >(argp1);
  {
    try
    {
      result = (arg1)->rbegin();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableGeoInfo_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableGeoInfo_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableGeoInfo_rend" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > * >(argp1);
  {
    try
    {
      result = (arg1)->rend();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableGeoInfo_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableGeoInfo_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableGeoInfo_clear" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > * >(argp1);
  {
    try
    {
      (arg1)->clear();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableGeoInfo_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableGeoInfo_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableGeoInfo_get_allocator" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > * >(argp1);
  {
    try
    {
      result = ((std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > const *)arg1)->get_allocator();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::allocator_type(static_cast< const std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_VectorScopedCopyableGeoInfo__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorScopedCopyableGeoInfo",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorScopedCopyableGeoInfo" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::size_type >(val1);
  {
    try
    {
      result = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *)new std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableGeoInfo_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableGeoInfo_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableGeoInfo_pop_back" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > * >(argp1);
  {
    try
    {
      (arg1)->pop_back();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableGeoInfo_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCopyableGeoInfo_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableGeoInfo_resize" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCopyableGeoInfo_resize" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::size_type >(val2);
  {
    try
    {
      (arg1)->resize(arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableGeoInfo_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCopyableGeoInfo_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableGeoInfo_erase" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCopyableGeoInfo_erase" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCopyableGeoInfo_erase" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator""'");
    }
  }
  {
    try
    {
      result = std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_GeoInfo_Sg__Sg__erase__SWIG_0(arg1,arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableGeoInfo_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator arg2 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCopyableGeoInfo_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableGeoInfo_erase" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCopyableGeoInfo_erase" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCopyableGeoInfo_erase" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCopyableGeoInfo_erase" "', argument " "3"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCopyableGeoInfo_erase" "', argument " "3"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator""'");
    }
  }
  {
    try
    {
      result = std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_GeoInfo_Sg__Sg__erase__SWIG_1(arg1,arg2,arg3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableGeoInfo_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_VectorScopedCopyableGeoInfo_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_VectorScopedCopyableGeoInfo_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorScopedCopyableGeoInfo_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::erase(std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator)\n"
    "    std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::erase(std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator,std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_VectorScopedCopyableGeoInfo__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::size_type arg1 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_VectorScopedCopyableGeoInfo",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorScopedCopyableGeoInfo" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__GeoInfo_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VectorScopedCopyableGeoInfo" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorScopedCopyableGeoInfo" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type * >(argp2);
  {
    try
    {
      result = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *)new std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >(arg1,(std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_VectorScopedCopyableGeoInfo(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VectorScopedCopyableGeoInfo__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VectorScopedCopyableGeoInfo__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorScopedCopyableGeoInfo__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], nullptr);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__GeoInfo_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VectorScopedCopyableGeoInfo__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_VectorScopedCopyableGeoInfo'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::vector()\n"
    "    std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::vector(std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > const &)\n"
    "    std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::vector(std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::size_type)\n"
    "    std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::vector(std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::size_type,std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableGeoInfo_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCopyableGeoInfo_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableGeoInfo_push_back" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__GeoInfo_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorScopedCopyableGeoInfo_push_back" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCopyableGeoInfo_push_back" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type * >(argp2);
  {
    try
    {
      (arg1)->push_back((std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableGeoInfo_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableGeoInfo_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableGeoInfo_front" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > * >(argp1);
  {
    try
    {
      result = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type *) &((std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > const *)arg1)->front();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__GeoInfo_t, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableGeoInfo_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableGeoInfo_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableGeoInfo_back" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > * >(argp1);
  {
    try
    {
      result = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type *) &((std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > const *)arg1)->back();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__GeoInfo_t, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableGeoInfo_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::size_type arg2 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCopyableGeoInfo_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableGeoInfo_assign" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCopyableGeoInfo_assign" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__GeoInfo_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorScopedCopyableGeoInfo_assign" "', argument " "3"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCopyableGeoInfo_assign" "', argument " "3"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type * >(argp3);
  {
    try
    {
      (arg1)->assign(arg2,(std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type const &)*arg3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableGeoInfo_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::size_type arg2 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCopyableGeoInfo_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableGeoInfo_resize" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCopyableGeoInfo_resize" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__GeoInfo_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorScopedCopyableGeoInfo_resize" "', argument " "3"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCopyableGeoInfo_resize" "', argument " "3"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type * >(argp3);
  {
    try
    {
      (arg1)->resize(arg2,(std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type const &)*arg3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableGeoInfo_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorScopedCopyableGeoInfo_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], nullptr);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__GeoInfo_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorScopedCopyableGeoInfo_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorScopedCopyableGeoInfo_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::resize(std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::size_type)\n"
    "    std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::resize(std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::size_type,std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableGeoInfo_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator arg2 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCopyableGeoInfo_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableGeoInfo_insert" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCopyableGeoInfo_insert" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCopyableGeoInfo_insert" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__GeoInfo_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorScopedCopyableGeoInfo_insert" "', argument " "3"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCopyableGeoInfo_insert" "', argument " "3"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type * >(argp3);
  {
    try
    {
      result = std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_GeoInfo_Sg__Sg__insert__SWIG_0(arg1,arg2,(mem::ScopedCopyablePtr< six::GeoInfo > const &)*arg3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableGeoInfo_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator arg2 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::size_type arg3 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorScopedCopyableGeoInfo_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableGeoInfo_insert" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCopyableGeoInfo_insert" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCopyableGeoInfo_insert" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorScopedCopyableGeoInfo_insert" "', argument " "3"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__GeoInfo_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorScopedCopyableGeoInfo_insert" "', argument " "4"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCopyableGeoInfo_insert" "', argument " "4"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type * >(argp4);
  {
    try
    {
      std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_GeoInfo_Sg__Sg__insert__SWIG_1(arg1,arg2,arg3,(mem::ScopedCopyablePtr< six::GeoInfo > const &)*arg4);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableGeoInfo_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__GeoInfo_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorScopedCopyableGeoInfo_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], nullptr);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__GeoInfo_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorScopedCopyableGeoInfo_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorScopedCopyableGeoInfo_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::insert(std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator,std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type const &)\n"
    "    std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::insert(std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator,std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::size_type,std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableGeoInfo_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCopyableGeoInfo_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableGeoInfo_reserve" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCopyableGeoInfo_reserve" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::size_type >(val2);
  {
    try
    {
      (arg1)->reserve(arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableGeoInfo_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableGeoInfo_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableGeoInfo_capacity" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > * >(argp1);
  {
    try
    {
      result = ((std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > const *)arg1)->capacity();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_delete_VectorScopedCopyableGeoInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VectorScopedCopyableGeoInfo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorScopedCopyableGeoInfo" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *VectorScopedCopyableGeoInfo_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_StdAutoRadiometric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::AutoPtr< six::Radiometric > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_StdAutoRadiometric")) SWIG_fail;
  {
    try
    {
      result = (mem::AutoPtr< six::Radiometric > *)new mem::AutoPtr< six::Radiometric >();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__auto_ptrT_six__Radiometric_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_delete_StdAutoRadiometric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::AutoPtr< six::Radiometric > *arg1 = (mem::AutoPtr< six::Radiometric > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_StdAutoRadiometric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__auto_ptrT_six__Radiometric_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StdAutoRadiometric" "', argument " "1"" of type '" "mem::AutoPtr< six::Radiometric > *""'"); 
  }
  arg1 = reinterpret_cast< mem::AutoPtr< six::Radiometric > * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *StdAutoRadiometric_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__auto_ptrT_six__Radiometric_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCopyableRadiometric__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Radiometric *arg1 = (six::Radiometric *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::Radiometric > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableRadiometric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Radiometric, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableRadiometric" "', argument " "1"" of type '" "six::Radiometric *""'"); 
  }
  arg1 = reinterpret_cast< six::Radiometric * >(argp1);
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::Radiometric > *)new mem::ScopedCopyablePtr< six::Radiometric >(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableRadiometric__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCopyableRadiometric")) SWIG_fail;
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::Radiometric > *)new mem::ScopedCopyablePtr< six::Radiometric >();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableRadiometric__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::Radiometric > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableRadiometric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableRadiometric" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCopyableRadiometric" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp1);
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::Radiometric > *)new mem::ScopedCopyablePtr< six::Radiometric >((mem::ScopedCopyablePtr< six::Radiometric > const &)*arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableRadiometric(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCopyableRadiometric__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__Radiometric, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableRadiometric__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableRadiometric__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ScopedCopyableRadiometric'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCopyablePtr< six::Radiometric >::ScopedCopyablePtr(six::Radiometric *)\n"
    "    mem::ScopedCopyablePtr< six::Radiometric >::ScopedCopyablePtr()\n"
    "    mem::ScopedCopyablePtr< six::Radiometric >::ScopedCopyablePtr(mem::ScopedCopyablePtr< six::Radiometric > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadiometric___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *arg1 = (mem::ScopedCopyablePtr< six::Radiometric > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRadiometric___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadiometric___nonzero__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp1);
  {
    try
    {
      result = (bool)((mem::ScopedCopyablePtr< six::Radiometric > const *)arg1)->operator bool();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadiometric_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *arg1 = (mem::ScopedCopyablePtr< six::Radiometric > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Radiometric *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRadiometric_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadiometric_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp1);
  {
    try
    {
      result = (six::Radiometric *)((mem::ScopedCopyablePtr< six::Radiometric > const *)arg1)->get();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__Radiometric, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadiometric___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *arg1 = (mem::ScopedCopyablePtr< six::Radiometric > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Radiometric *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRadiometric___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadiometric___ref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp1);
  {
    try
    {
      result = (six::Radiometric *) &((mem::ScopedCopyablePtr< six::Radiometric > const *)arg1)->operator *();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__Radiometric, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadiometric___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *arg1 = (mem::ScopedCopyablePtr< six::Radiometric > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Radiometric *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRadiometric___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadiometric___deref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp1);
  {
    try
    {
      result = (six::Radiometric *)((mem::ScopedCopyablePtr< six::Radiometric > const *)arg1)->operator ->();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__Radiometric, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadiometric_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *arg1 = (mem::ScopedCopyablePtr< six::Radiometric > *) 0 ;
  six::Radiometric *arg2 = (six::Radiometric *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRadiometric_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadiometric_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__Radiometric, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableRadiometric_reset" "', argument " "2"" of type '" "six::Radiometric *""'"); 
  }
  arg2 = reinterpret_cast< six::Radiometric * >(argp2);
  {
    try
    {
      (arg1)->reset(arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadiometric_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *arg1 = (mem::ScopedCopyablePtr< six::Radiometric > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRadiometric_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadiometric_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp1);
  {
    try
    {
      (arg1)->reset();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadiometric_reset(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCopyableRadiometric_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__Radiometric, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCopyableRadiometric_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ScopedCopyableRadiometric_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCopyablePtr< six::Radiometric >::reset(six::Radiometric *)\n"
    "    mem::ScopedCopyablePtr< six::Radiometric >::reset()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCopyableRadiometric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *arg1 = (mem::ScopedCopyablePtr< six::Radiometric > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCopyableRadiometric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCopyableRadiometric" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadiometric_NL_ABSOLUTE_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *arg1 = (mem::ScopedCopyablePtr< six::Radiometric > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRadiometric_NL_ABSOLUTE_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadiometric_NL_ABSOLUTE_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp1);
  {
    try
    {
      result = (char *)(char *) (six::Radiometric::NL_ABSOLUTE);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadiometric_NL_RELATIVE_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *arg1 = (mem::ScopedCopyablePtr< six::Radiometric > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRadiometric_NL_RELATIVE_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadiometric_NL_RELATIVE_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp1);
  {
    try
    {
      result = (char *)(char *) (six::Radiometric::NL_RELATIVE);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadiometric_noiseLevel_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *arg1 = (mem::ScopedCopyablePtr< six::Radiometric > *) 0 ;
  six::NoiseLevel *arg2 = (six::NoiseLevel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRadiometric_noiseLevel_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadiometric_noiseLevel_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__NoiseLevel, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableRadiometric_noiseLevel_set" "', argument " "2"" of type '" "six::NoiseLevel *""'"); 
  }
  arg2 = reinterpret_cast< six::NoiseLevel * >(argp2);
  {
    try
    {
      if (arg1) (*arg1)->noiseLevel = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadiometric_noiseLevel_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *arg1 = (mem::ScopedCopyablePtr< six::Radiometric > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::NoiseLevel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRadiometric_noiseLevel_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadiometric_noiseLevel_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp1);
  {
    try
    {
      result = (six::NoiseLevel *)& ((*arg1)->noiseLevel);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__NoiseLevel, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadiometric_rcsSFPoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *arg1 = (mem::ScopedCopyablePtr< six::Radiometric > *) 0 ;
  six::Poly2D *arg2 = (six::Poly2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRadiometric_rcsSFPoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadiometric_rcsSFPoly_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableRadiometric_rcsSFPoly_set" "', argument " "2"" of type '" "six::Poly2D *""'"); 
  }
  arg2 = reinterpret_cast< six::Poly2D * >(argp2);
  {
    try
    {
      if (arg1) (*arg1)->rcsSFPoly = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadiometric_rcsSFPoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *arg1 = (mem::ScopedCopyablePtr< six::Radiometric > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Poly2D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRadiometric_rcsSFPoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadiometric_rcsSFPoly_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp1);
  {
    try
    {
      result = (six::Poly2D *)& ((*arg1)->rcsSFPoly);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadiometric_betaZeroSFPoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *arg1 = (mem::ScopedCopyablePtr< six::Radiometric > *) 0 ;
  six::Poly2D *arg2 = (six::Poly2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRadiometric_betaZeroSFPoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadiometric_betaZeroSFPoly_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableRadiometric_betaZeroSFPoly_set" "', argument " "2"" of type '" "six::Poly2D *""'"); 
  }
  arg2 = reinterpret_cast< six::Poly2D * >(argp2);
  {
    try
    {
      if (arg1) (*arg1)->betaZeroSFPoly = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadiometric_betaZeroSFPoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *arg1 = (mem::ScopedCopyablePtr< six::Radiometric > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Poly2D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRadiometric_betaZeroSFPoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadiometric_betaZeroSFPoly_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp1);
  {
    try
    {
      result = (six::Poly2D *)& ((*arg1)->betaZeroSFPoly);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadiometric_sigmaZeroSFPoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *arg1 = (mem::ScopedCopyablePtr< six::Radiometric > *) 0 ;
  six::Poly2D *arg2 = (six::Poly2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRadiometric_sigmaZeroSFPoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadiometric_sigmaZeroSFPoly_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableRadiometric_sigmaZeroSFPoly_set" "', argument " "2"" of type '" "six::Poly2D *""'"); 
  }
  arg2 = reinterpret_cast< six::Poly2D * >(argp2);
  {
    try
    {
      if (arg1) (*arg1)->sigmaZeroSFPoly = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadiometric_sigmaZeroSFPoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *arg1 = (mem::ScopedCopyablePtr< six::Radiometric > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Poly2D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRadiometric_sigmaZeroSFPoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadiometric_sigmaZeroSFPoly_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp1);
  {
    try
    {
      result = (six::Poly2D *)& ((*arg1)->sigmaZeroSFPoly);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadiometric_sigmaZeroSFIncidenceMap_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *arg1 = (mem::ScopedCopyablePtr< six::Radiometric > *) 0 ;
  six::AppliedType *arg2 = (six::AppliedType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRadiometric_sigmaZeroSFIncidenceMap_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadiometric_sigmaZeroSFIncidenceMap_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__AppliedType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableRadiometric_sigmaZeroSFIncidenceMap_set" "', argument " "2"" of type '" "six::AppliedType *""'"); 
  }
  arg2 = reinterpret_cast< six::AppliedType * >(argp2);
  {
    try
    {
      if (arg1) (*arg1)->sigmaZeroSFIncidenceMap = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadiometric_sigmaZeroSFIncidenceMap_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *arg1 = (mem::ScopedCopyablePtr< six::Radiometric > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::AppliedType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRadiometric_sigmaZeroSFIncidenceMap_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadiometric_sigmaZeroSFIncidenceMap_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp1);
  {
    try
    {
      result = (six::AppliedType *)& ((*arg1)->sigmaZeroSFIncidenceMap);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__AppliedType, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadiometric_gammaZeroSFPoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *arg1 = (mem::ScopedCopyablePtr< six::Radiometric > *) 0 ;
  six::Poly2D *arg2 = (six::Poly2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRadiometric_gammaZeroSFPoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadiometric_gammaZeroSFPoly_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableRadiometric_gammaZeroSFPoly_set" "', argument " "2"" of type '" "six::Poly2D *""'"); 
  }
  arg2 = reinterpret_cast< six::Poly2D * >(argp2);
  {
    try
    {
      if (arg1) (*arg1)->gammaZeroSFPoly = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadiometric_gammaZeroSFPoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *arg1 = (mem::ScopedCopyablePtr< six::Radiometric > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Poly2D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRadiometric_gammaZeroSFPoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadiometric_gammaZeroSFPoly_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp1);
  {
    try
    {
      result = (six::Poly2D *)& ((*arg1)->gammaZeroSFPoly);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadiometric_gammaZeroSFIncidenceMap_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *arg1 = (mem::ScopedCopyablePtr< six::Radiometric > *) 0 ;
  six::AppliedType *arg2 = (six::AppliedType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRadiometric_gammaZeroSFIncidenceMap_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadiometric_gammaZeroSFIncidenceMap_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__AppliedType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableRadiometric_gammaZeroSFIncidenceMap_set" "', argument " "2"" of type '" "six::AppliedType *""'"); 
  }
  arg2 = reinterpret_cast< six::AppliedType * >(argp2);
  {
    try
    {
      if (arg1) (*arg1)->gammaZeroSFIncidenceMap = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadiometric_gammaZeroSFIncidenceMap_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *arg1 = (mem::ScopedCopyablePtr< six::Radiometric > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::AppliedType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRadiometric_gammaZeroSFIncidenceMap_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadiometric_gammaZeroSFIncidenceMap_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp1);
  {
    try
    {
      result = (six::AppliedType *)& ((*arg1)->gammaZeroSFIncidenceMap);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__AppliedType, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadiometric___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *arg1 = (mem::ScopedCopyablePtr< six::Radiometric > *) 0 ;
  six::Radiometric *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRadiometric___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadiometric___eq__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__Radiometric,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableRadiometric___eq__" "', argument " "2"" of type '" "six::Radiometric const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCopyableRadiometric___eq__" "', argument " "2"" of type '" "six::Radiometric const &""'"); 
  }
  arg2 = reinterpret_cast< six::Radiometric * >(argp2);
  {
    try
    {
      result = (bool)(*arg1)->operator ==((six::Radiometric const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadiometric___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *arg1 = (mem::ScopedCopyablePtr< six::Radiometric > *) 0 ;
  six::Radiometric *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRadiometric___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadiometric___ne__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__Radiometric,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableRadiometric___ne__" "', argument " "2"" of type '" "six::Radiometric const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCopyableRadiometric___ne__" "', argument " "2"" of type '" "six::Radiometric const &""'"); 
  }
  arg2 = reinterpret_cast< six::Radiometric * >(argp2);
  {
    try
    {
      result = (bool)(*arg1)->operator !=((six::Radiometric const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *ScopedCopyableRadiometric_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_makeScopedCopyableRadiometric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > result;
  
  if (!PyArg_ParseTuple(args,(char *)":makeScopedCopyableRadiometric")) SWIG_fail;
  {
    try
    {
      result = makeScopedCopyableRadiometric();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new mem::ScopedCopyablePtr< six::Radiometric >(static_cast< const mem::ScopedCopyablePtr< six::Radiometric >& >(result))), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_StdAutoErrorStatistics(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::AutoPtr< six::ErrorStatistics > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_StdAutoErrorStatistics")) SWIG_fail;
  {
    try
    {
      result = (mem::AutoPtr< six::ErrorStatistics > *)new mem::AutoPtr< six::ErrorStatistics >();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__auto_ptrT_six__ErrorStatistics_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_delete_StdAutoErrorStatistics(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::AutoPtr< six::ErrorStatistics > *arg1 = (mem::AutoPtr< six::ErrorStatistics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_StdAutoErrorStatistics",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__auto_ptrT_six__ErrorStatistics_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StdAutoErrorStatistics" "', argument " "1"" of type '" "mem::AutoPtr< six::ErrorStatistics > *""'"); 
  }
  arg1 = reinterpret_cast< mem::AutoPtr< six::ErrorStatistics > * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *StdAutoErrorStatistics_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__auto_ptrT_six__ErrorStatistics_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCopyableErrorStatistics__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ErrorStatistics *arg1 = (six::ErrorStatistics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::ErrorStatistics > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableErrorStatistics",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ErrorStatistics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableErrorStatistics" "', argument " "1"" of type '" "six::ErrorStatistics *""'"); 
  }
  arg1 = reinterpret_cast< six::ErrorStatistics * >(argp1);
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::ErrorStatistics > *)new mem::ScopedCopyablePtr< six::ErrorStatistics >(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableErrorStatistics__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::ErrorStatistics > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCopyableErrorStatistics")) SWIG_fail;
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::ErrorStatistics > *)new mem::ScopedCopyablePtr< six::ErrorStatistics >();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableErrorStatistics__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::ErrorStatistics > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::ErrorStatistics > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableErrorStatistics",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableErrorStatistics" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::ErrorStatistics > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCopyableErrorStatistics" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::ErrorStatistics > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::ErrorStatistics > * >(argp1);
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::ErrorStatistics > *)new mem::ScopedCopyablePtr< six::ErrorStatistics >((mem::ScopedCopyablePtr< six::ErrorStatistics > const &)*arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableErrorStatistics(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCopyableErrorStatistics__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__ErrorStatistics, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableErrorStatistics__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableErrorStatistics__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ScopedCopyableErrorStatistics'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCopyablePtr< six::ErrorStatistics >::ScopedCopyablePtr(six::ErrorStatistics *)\n"
    "    mem::ScopedCopyablePtr< six::ErrorStatistics >::ScopedCopyablePtr()\n"
    "    mem::ScopedCopyablePtr< six::ErrorStatistics >::ScopedCopyablePtr(mem::ScopedCopyablePtr< six::ErrorStatistics > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableErrorStatistics___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::ErrorStatistics > *arg1 = (mem::ScopedCopyablePtr< six::ErrorStatistics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableErrorStatistics___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableErrorStatistics___nonzero__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::ErrorStatistics > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::ErrorStatistics > * >(argp1);
  {
    try
    {
      result = (bool)((mem::ScopedCopyablePtr< six::ErrorStatistics > const *)arg1)->operator bool();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableErrorStatistics_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::ErrorStatistics > *arg1 = (mem::ScopedCopyablePtr< six::ErrorStatistics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::ErrorStatistics *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableErrorStatistics_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableErrorStatistics_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::ErrorStatistics > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::ErrorStatistics > * >(argp1);
  {
    try
    {
      result = (six::ErrorStatistics *)((mem::ScopedCopyablePtr< six::ErrorStatistics > const *)arg1)->get();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__ErrorStatistics, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableErrorStatistics___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::ErrorStatistics > *arg1 = (mem::ScopedCopyablePtr< six::ErrorStatistics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::ErrorStatistics *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableErrorStatistics___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableErrorStatistics___ref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::ErrorStatistics > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::ErrorStatistics > * >(argp1);
  {
    try
    {
      result = (six::ErrorStatistics *) &((mem::ScopedCopyablePtr< six::ErrorStatistics > const *)arg1)->operator *();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__ErrorStatistics, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableErrorStatistics___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::ErrorStatistics > *arg1 = (mem::ScopedCopyablePtr< six::ErrorStatistics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::ErrorStatistics *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableErrorStatistics___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableErrorStatistics___deref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::ErrorStatistics > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::ErrorStatistics > * >(argp1);
  {
    try
    {
      result = (six::ErrorStatistics *)((mem::ScopedCopyablePtr< six::ErrorStatistics > const *)arg1)->operator ->();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__ErrorStatistics, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableErrorStatistics_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::ErrorStatistics > *arg1 = (mem::ScopedCopyablePtr< six::ErrorStatistics > *) 0 ;
  six::ErrorStatistics *arg2 = (six::ErrorStatistics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableErrorStatistics_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableErrorStatistics_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::ErrorStatistics > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::ErrorStatistics > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__ErrorStatistics, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableErrorStatistics_reset" "', argument " "2"" of type '" "six::ErrorStatistics *""'"); 
  }
  arg2 = reinterpret_cast< six::ErrorStatistics * >(argp2);
  {
    try
    {
      (arg1)->reset(arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableErrorStatistics_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::ErrorStatistics > *arg1 = (mem::ScopedCopyablePtr< six::ErrorStatistics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableErrorStatistics_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableErrorStatistics_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::ErrorStatistics > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::ErrorStatistics > * >(argp1);
  {
    try
    {
      (arg1)->reset();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableErrorStatistics_reset(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCopyableErrorStatistics_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__ErrorStatistics, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCopyableErrorStatistics_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ScopedCopyableErrorStatistics_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCopyablePtr< six::ErrorStatistics >::reset(six::ErrorStatistics *)\n"
    "    mem::ScopedCopyablePtr< six::ErrorStatistics >::reset()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCopyableErrorStatistics(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::ErrorStatistics > *arg1 = (mem::ScopedCopyablePtr< six::ErrorStatistics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCopyableErrorStatistics",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCopyableErrorStatistics" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::ErrorStatistics > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::ErrorStatistics > * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableErrorStatistics_compositeSCP_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::ErrorStatistics > *arg1 = (mem::ScopedCopyablePtr< six::ErrorStatistics > *) 0 ;
  mem::ScopedCopyablePtr< six::CompositeSCP > *arg2 = (mem::ScopedCopyablePtr< six::CompositeSCP > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableErrorStatistics_compositeSCP_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableErrorStatistics_compositeSCP_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::ErrorStatistics > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::ErrorStatistics > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableErrorStatistics_compositeSCP_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::CompositeSCP > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::CompositeSCP > * >(argp2);
  {
    try
    {
      if (arg1) (*arg1)->compositeSCP = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableErrorStatistics_compositeSCP_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::ErrorStatistics > *arg1 = (mem::ScopedCopyablePtr< six::ErrorStatistics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::CompositeSCP > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableErrorStatistics_compositeSCP_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableErrorStatistics_compositeSCP_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::ErrorStatistics > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::ErrorStatistics > * >(argp1);
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::CompositeSCP > *)& ((*arg1)->compositeSCP);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableErrorStatistics_components_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::ErrorStatistics > *arg1 = (mem::ScopedCopyablePtr< six::ErrorStatistics > *) 0 ;
  mem::ScopedCopyablePtr< six::Components > *arg2 = (mem::ScopedCopyablePtr< six::Components > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableErrorStatistics_components_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableErrorStatistics_components_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::ErrorStatistics > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::ErrorStatistics > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableErrorStatistics_components_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::Components > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::Components > * >(argp2);
  {
    try
    {
      if (arg1) (*arg1)->components = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableErrorStatistics_components_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::ErrorStatistics > *arg1 = (mem::ScopedCopyablePtr< six::ErrorStatistics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::Components > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableErrorStatistics_components_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableErrorStatistics_components_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::ErrorStatistics > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::ErrorStatistics > * >(argp1);
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::Components > *)& ((*arg1)->components);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableErrorStatistics_additionalParameters_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::ErrorStatistics > *arg1 = (mem::ScopedCopyablePtr< six::ErrorStatistics > *) 0 ;
  six::ParameterCollection *arg2 = (six::ParameterCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableErrorStatistics_additionalParameters_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableErrorStatistics_additionalParameters_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::ErrorStatistics > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::ErrorStatistics > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__ParameterCollection, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableErrorStatistics_additionalParameters_set" "', argument " "2"" of type '" "six::ParameterCollection *""'"); 
  }
  arg2 = reinterpret_cast< six::ParameterCollection * >(argp2);
  {
    try
    {
      if (arg1) (*arg1)->additionalParameters = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableErrorStatistics_additionalParameters_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::ErrorStatistics > *arg1 = (mem::ScopedCopyablePtr< six::ErrorStatistics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::ParameterCollection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableErrorStatistics_additionalParameters_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableErrorStatistics_additionalParameters_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::ErrorStatistics > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::ErrorStatistics > * >(argp1);
  {
    try
    {
      result = (six::ParameterCollection *)& ((*arg1)->additionalParameters);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__ParameterCollection, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableErrorStatistics___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::ErrorStatistics > *arg1 = (mem::ScopedCopyablePtr< six::ErrorStatistics > *) 0 ;
  six::ErrorStatistics *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableErrorStatistics___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableErrorStatistics___eq__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::ErrorStatistics > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::ErrorStatistics > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__ErrorStatistics,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableErrorStatistics___eq__" "', argument " "2"" of type '" "six::ErrorStatistics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCopyableErrorStatistics___eq__" "', argument " "2"" of type '" "six::ErrorStatistics const &""'"); 
  }
  arg2 = reinterpret_cast< six::ErrorStatistics * >(argp2);
  {
    try
    {
      result = (bool)(*arg1)->operator ==((six::ErrorStatistics const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableErrorStatistics___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::ErrorStatistics > *arg1 = (mem::ScopedCopyablePtr< six::ErrorStatistics > *) 0 ;
  six::ErrorStatistics *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableErrorStatistics___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableErrorStatistics___ne__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::ErrorStatistics > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::ErrorStatistics > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__ErrorStatistics,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableErrorStatistics___ne__" "', argument " "2"" of type '" "six::ErrorStatistics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCopyableErrorStatistics___ne__" "', argument " "2"" of type '" "six::ErrorStatistics const &""'"); 
  }
  arg2 = reinterpret_cast< six::ErrorStatistics * >(argp2);
  {
    try
    {
      result = (bool)(*arg1)->operator !=((six::ErrorStatistics const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *ScopedCopyableErrorStatistics_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_makeScopedCopyableErrorStatistics(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::ErrorStatistics > result;
  
  if (!PyArg_ParseTuple(args,(char *)":makeScopedCopyableErrorStatistics")) SWIG_fail;
  {
    try
    {
      result = makeScopedCopyableErrorStatistics();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new mem::ScopedCopyablePtr< six::ErrorStatistics >(static_cast< const mem::ScopedCopyablePtr< six::ErrorStatistics >& >(result))), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_StdAutoComponents(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::AutoPtr< six::Components > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_StdAutoComponents")) SWIG_fail;
  {
    try
    {
      result = (mem::AutoPtr< six::Components > *)new mem::AutoPtr< six::Components >();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__auto_ptrT_six__Components_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_delete_StdAutoComponents(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::AutoPtr< six::Components > *arg1 = (mem::AutoPtr< six::Components > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_StdAutoComponents",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__auto_ptrT_six__Components_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StdAutoComponents" "', argument " "1"" of type '" "mem::AutoPtr< six::Components > *""'"); 
  }
  arg1 = reinterpret_cast< mem::AutoPtr< six::Components > * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *StdAutoComponents_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__auto_ptrT_six__Components_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCopyableComponents__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Components *arg1 = (six::Components *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::Components > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableComponents",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Components, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableComponents" "', argument " "1"" of type '" "six::Components *""'"); 
  }
  arg1 = reinterpret_cast< six::Components * >(argp1);
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::Components > *)new mem::ScopedCopyablePtr< six::Components >(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableComponents__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Components > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCopyableComponents")) SWIG_fail;
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::Components > *)new mem::ScopedCopyablePtr< six::Components >();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableComponents__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Components > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::Components > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableComponents",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableComponents" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Components > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCopyableComponents" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Components > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Components > * >(argp1);
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::Components > *)new mem::ScopedCopyablePtr< six::Components >((mem::ScopedCopyablePtr< six::Components > const &)*arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableComponents(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCopyableComponents__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__Components, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableComponents__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableComponents__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ScopedCopyableComponents'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCopyablePtr< six::Components >::ScopedCopyablePtr(six::Components *)\n"
    "    mem::ScopedCopyablePtr< six::Components >::ScopedCopyablePtr()\n"
    "    mem::ScopedCopyablePtr< six::Components >::ScopedCopyablePtr(mem::ScopedCopyablePtr< six::Components > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableComponents___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Components > *arg1 = (mem::ScopedCopyablePtr< six::Components > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableComponents___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableComponents___nonzero__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Components > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Components > * >(argp1);
  {
    try
    {
      result = (bool)((mem::ScopedCopyablePtr< six::Components > const *)arg1)->operator bool();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableComponents_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Components > *arg1 = (mem::ScopedCopyablePtr< six::Components > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Components *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableComponents_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableComponents_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Components > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Components > * >(argp1);
  {
    try
    {
      result = (six::Components *)((mem::ScopedCopyablePtr< six::Components > const *)arg1)->get();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__Components, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableComponents___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Components > *arg1 = (mem::ScopedCopyablePtr< six::Components > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Components *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableComponents___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableComponents___ref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Components > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Components > * >(argp1);
  {
    try
    {
      result = (six::Components *) &((mem::ScopedCopyablePtr< six::Components > const *)arg1)->operator *();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__Components, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableComponents___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Components > *arg1 = (mem::ScopedCopyablePtr< six::Components > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Components *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableComponents___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableComponents___deref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Components > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Components > * >(argp1);
  {
    try
    {
      result = (six::Components *)((mem::ScopedCopyablePtr< six::Components > const *)arg1)->operator ->();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__Components, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableComponents_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Components > *arg1 = (mem::ScopedCopyablePtr< six::Components > *) 0 ;
  six::Components *arg2 = (six::Components *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableComponents_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableComponents_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Components > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Components > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__Components, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableComponents_reset" "', argument " "2"" of type '" "six::Components *""'"); 
  }
  arg2 = reinterpret_cast< six::Components * >(argp2);
  {
    try
    {
      (arg1)->reset(arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableComponents_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Components > *arg1 = (mem::ScopedCopyablePtr< six::Components > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableComponents_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableComponents_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Components > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Components > * >(argp1);
  {
    try
    {
      (arg1)->reset();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableComponents_reset(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCopyableComponents_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__Components, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCopyableComponents_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ScopedCopyableComponents_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCopyablePtr< six::Components >::reset(six::Components *)\n"
    "    mem::ScopedCopyablePtr< six::Components >::reset()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCopyableComponents(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Components > *arg1 = (mem::ScopedCopyablePtr< six::Components > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCopyableComponents",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCopyableComponents" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Components > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Components > * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableComponents_posVelError_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Components > *arg1 = (mem::ScopedCopyablePtr< six::Components > *) 0 ;
  mem::ScopedCopyablePtr< six::PosVelError > *arg2 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableComponents_posVelError_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableComponents_posVelError_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Components > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Components > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableComponents_posVelError_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp2);
  {
    try
    {
      if (arg1) (*arg1)->posVelError = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableComponents_posVelError_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Components > *arg1 = (mem::ScopedCopyablePtr< six::Components > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::PosVelError > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableComponents_posVelError_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableComponents_posVelError_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Components > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Components > * >(argp1);
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::PosVelError > *)& ((*arg1)->posVelError);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableComponents_radarSensor_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Components > *arg1 = (mem::ScopedCopyablePtr< six::Components > *) 0 ;
  mem::ScopedCopyablePtr< six::RadarSensor > *arg2 = (mem::ScopedCopyablePtr< six::RadarSensor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableComponents_radarSensor_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableComponents_radarSensor_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Components > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Components > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableComponents_radarSensor_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::RadarSensor > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::RadarSensor > * >(argp2);
  {
    try
    {
      if (arg1) (*arg1)->radarSensor = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableComponents_radarSensor_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Components > *arg1 = (mem::ScopedCopyablePtr< six::Components > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::RadarSensor > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableComponents_radarSensor_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableComponents_radarSensor_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Components > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Components > * >(argp1);
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::RadarSensor > *)& ((*arg1)->radarSensor);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableComponents_tropoError_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Components > *arg1 = (mem::ScopedCopyablePtr< six::Components > *) 0 ;
  mem::ScopedCopyablePtr< six::TropoError > *arg2 = (mem::ScopedCopyablePtr< six::TropoError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableComponents_tropoError_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableComponents_tropoError_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Components > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Components > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableComponents_tropoError_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::TropoError > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::TropoError > * >(argp2);
  {
    try
    {
      if (arg1) (*arg1)->tropoError = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableComponents_tropoError_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Components > *arg1 = (mem::ScopedCopyablePtr< six::Components > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::TropoError > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableComponents_tropoError_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableComponents_tropoError_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Components > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Components > * >(argp1);
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::TropoError > *)& ((*arg1)->tropoError);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableComponents_ionoError_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Components > *arg1 = (mem::ScopedCopyablePtr< six::Components > *) 0 ;
  mem::ScopedCopyablePtr< six::IonoError > *arg2 = (mem::ScopedCopyablePtr< six::IonoError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableComponents_ionoError_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableComponents_ionoError_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Components > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Components > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableComponents_ionoError_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::IonoError > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::IonoError > * >(argp2);
  {
    try
    {
      if (arg1) (*arg1)->ionoError = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableComponents_ionoError_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Components > *arg1 = (mem::ScopedCopyablePtr< six::Components > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::IonoError > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableComponents_ionoError_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableComponents_ionoError_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Components > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Components > * >(argp1);
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::IonoError > *)& ((*arg1)->ionoError);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableComponents___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Components > *arg1 = (mem::ScopedCopyablePtr< six::Components > *) 0 ;
  six::Components *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableComponents___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableComponents___eq__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Components > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Components > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__Components,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableComponents___eq__" "', argument " "2"" of type '" "six::Components const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCopyableComponents___eq__" "', argument " "2"" of type '" "six::Components const &""'"); 
  }
  arg2 = reinterpret_cast< six::Components * >(argp2);
  {
    try
    {
      result = (bool)(*arg1)->operator ==((six::Components const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableComponents___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Components > *arg1 = (mem::ScopedCopyablePtr< six::Components > *) 0 ;
  six::Components *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableComponents___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableComponents___ne__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Components > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Components > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__Components,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableComponents___ne__" "', argument " "2"" of type '" "six::Components const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCopyableComponents___ne__" "', argument " "2"" of type '" "six::Components const &""'"); 
  }
  arg2 = reinterpret_cast< six::Components * >(argp2);
  {
    try
    {
      result = (bool)(*arg1)->operator !=((six::Components const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *ScopedCopyableComponents_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_makeScopedCopyableComponents(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Components > result;
  
  if (!PyArg_ParseTuple(args,(char *)":makeScopedCopyableComponents")) SWIG_fail;
  {
    try
    {
      result = makeScopedCopyableComponents();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new mem::ScopedCopyablePtr< six::Components >(static_cast< const mem::ScopedCopyablePtr< six::Components >& >(result))), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_StdAutoCorrCoefs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::AutoPtr< six::CorrCoefs > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_StdAutoCorrCoefs")) SWIG_fail;
  {
    try
    {
      result = (mem::AutoPtr< six::CorrCoefs > *)new mem::AutoPtr< six::CorrCoefs >();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__auto_ptrT_six__CorrCoefs_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_delete_StdAutoCorrCoefs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::AutoPtr< six::CorrCoefs > *arg1 = (mem::AutoPtr< six::CorrCoefs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_StdAutoCorrCoefs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__auto_ptrT_six__CorrCoefs_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StdAutoCorrCoefs" "', argument " "1"" of type '" "mem::AutoPtr< six::CorrCoefs > *""'"); 
  }
  arg1 = reinterpret_cast< mem::AutoPtr< six::CorrCoefs > * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *StdAutoCorrCoefs_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__auto_ptrT_six__CorrCoefs_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCopyableCorrCoefs__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CorrCoefs *arg1 = (six::CorrCoefs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::CorrCoefs > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableCorrCoefs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CorrCoefs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableCorrCoefs" "', argument " "1"" of type '" "six::CorrCoefs *""'"); 
  }
  arg1 = reinterpret_cast< six::CorrCoefs * >(argp1);
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::CorrCoefs > *)new mem::ScopedCopyablePtr< six::CorrCoefs >(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableCorrCoefs__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CorrCoefs > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCopyableCorrCoefs")) SWIG_fail;
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::CorrCoefs > *)new mem::ScopedCopyablePtr< six::CorrCoefs >();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableCorrCoefs__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CorrCoefs > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::CorrCoefs > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableCorrCoefs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableCorrCoefs" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CorrCoefs > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCopyableCorrCoefs" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CorrCoefs > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CorrCoefs > * >(argp1);
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::CorrCoefs > *)new mem::ScopedCopyablePtr< six::CorrCoefs >((mem::ScopedCopyablePtr< six::CorrCoefs > const &)*arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableCorrCoefs(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCopyableCorrCoefs__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__CorrCoefs, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableCorrCoefs__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableCorrCoefs__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ScopedCopyableCorrCoefs'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCopyablePtr< six::CorrCoefs >::ScopedCopyablePtr(six::CorrCoefs *)\n"
    "    mem::ScopedCopyablePtr< six::CorrCoefs >::ScopedCopyablePtr()\n"
    "    mem::ScopedCopyablePtr< six::CorrCoefs >::ScopedCopyablePtr(mem::ScopedCopyablePtr< six::CorrCoefs > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCorrCoefs___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CorrCoefs > *arg1 = (mem::ScopedCopyablePtr< six::CorrCoefs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableCorrCoefs___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCorrCoefs___nonzero__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CorrCoefs > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CorrCoefs > * >(argp1);
  {
    try
    {
      result = (bool)((mem::ScopedCopyablePtr< six::CorrCoefs > const *)arg1)->operator bool();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCorrCoefs_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CorrCoefs > *arg1 = (mem::ScopedCopyablePtr< six::CorrCoefs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::CorrCoefs *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableCorrCoefs_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCorrCoefs_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CorrCoefs > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CorrCoefs > * >(argp1);
  {
    try
    {
      result = (six::CorrCoefs *)((mem::ScopedCopyablePtr< six::CorrCoefs > const *)arg1)->get();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__CorrCoefs, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCorrCoefs___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CorrCoefs > *arg1 = (mem::ScopedCopyablePtr< six::CorrCoefs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::CorrCoefs *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableCorrCoefs___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCorrCoefs___ref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CorrCoefs > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CorrCoefs > * >(argp1);
  {
    try
    {
      result = (six::CorrCoefs *) &((mem::ScopedCopyablePtr< six::CorrCoefs > const *)arg1)->operator *();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__CorrCoefs, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCorrCoefs___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CorrCoefs > *arg1 = (mem::ScopedCopyablePtr< six::CorrCoefs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::CorrCoefs *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableCorrCoefs___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCorrCoefs___deref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CorrCoefs > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CorrCoefs > * >(argp1);
  {
    try
    {
      result = (six::CorrCoefs *)((mem::ScopedCopyablePtr< six::CorrCoefs > const *)arg1)->operator ->();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__CorrCoefs, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCorrCoefs_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CorrCoefs > *arg1 = (mem::ScopedCopyablePtr< six::CorrCoefs > *) 0 ;
  six::CorrCoefs *arg2 = (six::CorrCoefs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableCorrCoefs_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCorrCoefs_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CorrCoefs > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CorrCoefs > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__CorrCoefs, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableCorrCoefs_reset" "', argument " "2"" of type '" "six::CorrCoefs *""'"); 
  }
  arg2 = reinterpret_cast< six::CorrCoefs * >(argp2);
  {
    try
    {
      (arg1)->reset(arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCorrCoefs_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CorrCoefs > *arg1 = (mem::ScopedCopyablePtr< six::CorrCoefs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableCorrCoefs_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCorrCoefs_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CorrCoefs > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CorrCoefs > * >(argp1);
  {
    try
    {
      (arg1)->reset();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCorrCoefs_reset(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCopyableCorrCoefs_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__CorrCoefs, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCopyableCorrCoefs_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ScopedCopyableCorrCoefs_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCopyablePtr< six::CorrCoefs >::reset(six::CorrCoefs *)\n"
    "    mem::ScopedCopyablePtr< six::CorrCoefs >::reset()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCopyableCorrCoefs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CorrCoefs > *arg1 = (mem::ScopedCopyablePtr< six::CorrCoefs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCopyableCorrCoefs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCopyableCorrCoefs" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CorrCoefs > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CorrCoefs > * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCorrCoefs_p1p2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CorrCoefs > *arg1 = (mem::ScopedCopyablePtr< six::CorrCoefs > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableCorrCoefs_p1p2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCorrCoefs_p1p2_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CorrCoefs > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CorrCoefs > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableCorrCoefs_p1p2_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (*arg1)->p1p2 = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCorrCoefs_p1p2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CorrCoefs > *arg1 = (mem::ScopedCopyablePtr< six::CorrCoefs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableCorrCoefs_p1p2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCorrCoefs_p1p2_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CorrCoefs > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CorrCoefs > * >(argp1);
  {
    try
    {
      result = (double) ((*arg1)->p1p2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCorrCoefs_p1p3_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CorrCoefs > *arg1 = (mem::ScopedCopyablePtr< six::CorrCoefs > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableCorrCoefs_p1p3_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCorrCoefs_p1p3_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CorrCoefs > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CorrCoefs > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableCorrCoefs_p1p3_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (*arg1)->p1p3 = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCorrCoefs_p1p3_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CorrCoefs > *arg1 = (mem::ScopedCopyablePtr< six::CorrCoefs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableCorrCoefs_p1p3_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCorrCoefs_p1p3_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CorrCoefs > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CorrCoefs > * >(argp1);
  {
    try
    {
      result = (double) ((*arg1)->p1p3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCorrCoefs_p1v1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CorrCoefs > *arg1 = (mem::ScopedCopyablePtr< six::CorrCoefs > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableCorrCoefs_p1v1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCorrCoefs_p1v1_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CorrCoefs > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CorrCoefs > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableCorrCoefs_p1v1_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (*arg1)->p1v1 = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCorrCoefs_p1v1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CorrCoefs > *arg1 = (mem::ScopedCopyablePtr< six::CorrCoefs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableCorrCoefs_p1v1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCorrCoefs_p1v1_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CorrCoefs > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CorrCoefs > * >(argp1);
  {
    try
    {
      result = (double) ((*arg1)->p1v1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCorrCoefs_p1v2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CorrCoefs > *arg1 = (mem::ScopedCopyablePtr< six::CorrCoefs > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableCorrCoefs_p1v2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCorrCoefs_p1v2_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CorrCoefs > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CorrCoefs > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableCorrCoefs_p1v2_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (*arg1)->p1v2 = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCorrCoefs_p1v2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CorrCoefs > *arg1 = (mem::ScopedCopyablePtr< six::CorrCoefs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableCorrCoefs_p1v2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCorrCoefs_p1v2_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CorrCoefs > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CorrCoefs > * >(argp1);
  {
    try
    {
      result = (double) ((*arg1)->p1v2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCorrCoefs_p1v3_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CorrCoefs > *arg1 = (mem::ScopedCopyablePtr< six::CorrCoefs > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableCorrCoefs_p1v3_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCorrCoefs_p1v3_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CorrCoefs > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CorrCoefs > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableCorrCoefs_p1v3_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (*arg1)->p1v3 = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCorrCoefs_p1v3_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CorrCoefs > *arg1 = (mem::ScopedCopyablePtr< six::CorrCoefs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableCorrCoefs_p1v3_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCorrCoefs_p1v3_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CorrCoefs > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CorrCoefs > * >(argp1);
  {
    try
    {
      result = (double) ((*arg1)->p1v3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCorrCoefs_p2p3_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CorrCoefs > *arg1 = (mem::ScopedCopyablePtr< six::CorrCoefs > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableCorrCoefs_p2p3_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCorrCoefs_p2p3_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CorrCoefs > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CorrCoefs > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableCorrCoefs_p2p3_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (*arg1)->p2p3 = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCorrCoefs_p2p3_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CorrCoefs > *arg1 = (mem::ScopedCopyablePtr< six::CorrCoefs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableCorrCoefs_p2p3_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCorrCoefs_p2p3_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CorrCoefs > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CorrCoefs > * >(argp1);
  {
    try
    {
      result = (double) ((*arg1)->p2p3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCorrCoefs_p2v1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CorrCoefs > *arg1 = (mem::ScopedCopyablePtr< six::CorrCoefs > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableCorrCoefs_p2v1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCorrCoefs_p2v1_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CorrCoefs > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CorrCoefs > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableCorrCoefs_p2v1_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (*arg1)->p2v1 = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCorrCoefs_p2v1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CorrCoefs > *arg1 = (mem::ScopedCopyablePtr< six::CorrCoefs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableCorrCoefs_p2v1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCorrCoefs_p2v1_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CorrCoefs > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CorrCoefs > * >(argp1);
  {
    try
    {
      result = (double) ((*arg1)->p2v1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCorrCoefs_p2v2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CorrCoefs > *arg1 = (mem::ScopedCopyablePtr< six::CorrCoefs > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableCorrCoefs_p2v2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCorrCoefs_p2v2_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CorrCoefs > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CorrCoefs > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableCorrCoefs_p2v2_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (*arg1)->p2v2 = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCorrCoefs_p2v2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CorrCoefs > *arg1 = (mem::ScopedCopyablePtr< six::CorrCoefs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableCorrCoefs_p2v2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCorrCoefs_p2v2_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CorrCoefs > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CorrCoefs > * >(argp1);
  {
    try
    {
      result = (double) ((*arg1)->p2v2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCorrCoefs_p2v3_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CorrCoefs > *arg1 = (mem::ScopedCopyablePtr< six::CorrCoefs > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableCorrCoefs_p2v3_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCorrCoefs_p2v3_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CorrCoefs > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CorrCoefs > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableCorrCoefs_p2v3_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (*arg1)->p2v3 = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCorrCoefs_p2v3_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CorrCoefs > *arg1 = (mem::ScopedCopyablePtr< six::CorrCoefs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableCorrCoefs_p2v3_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCorrCoefs_p2v3_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CorrCoefs > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CorrCoefs > * >(argp1);
  {
    try
    {
      result = (double) ((*arg1)->p2v3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCorrCoefs_p3v1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CorrCoefs > *arg1 = (mem::ScopedCopyablePtr< six::CorrCoefs > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableCorrCoefs_p3v1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCorrCoefs_p3v1_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CorrCoefs > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CorrCoefs > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableCorrCoefs_p3v1_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (*arg1)->p3v1 = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCorrCoefs_p3v1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CorrCoefs > *arg1 = (mem::ScopedCopyablePtr< six::CorrCoefs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableCorrCoefs_p3v1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCorrCoefs_p3v1_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CorrCoefs > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CorrCoefs > * >(argp1);
  {
    try
    {
      result = (double) ((*arg1)->p3v1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCorrCoefs_p3v2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CorrCoefs > *arg1 = (mem::ScopedCopyablePtr< six::CorrCoefs > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableCorrCoefs_p3v2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCorrCoefs_p3v2_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CorrCoefs > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CorrCoefs > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableCorrCoefs_p3v2_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (*arg1)->p3v2 = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCorrCoefs_p3v2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CorrCoefs > *arg1 = (mem::ScopedCopyablePtr< six::CorrCoefs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableCorrCoefs_p3v2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCorrCoefs_p3v2_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CorrCoefs > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CorrCoefs > * >(argp1);
  {
    try
    {
      result = (double) ((*arg1)->p3v2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCorrCoefs_p3v3_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CorrCoefs > *arg1 = (mem::ScopedCopyablePtr< six::CorrCoefs > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableCorrCoefs_p3v3_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCorrCoefs_p3v3_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CorrCoefs > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CorrCoefs > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableCorrCoefs_p3v3_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (*arg1)->p3v3 = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCorrCoefs_p3v3_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CorrCoefs > *arg1 = (mem::ScopedCopyablePtr< six::CorrCoefs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableCorrCoefs_p3v3_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCorrCoefs_p3v3_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CorrCoefs > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CorrCoefs > * >(argp1);
  {
    try
    {
      result = (double) ((*arg1)->p3v3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCorrCoefs_v1v2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CorrCoefs > *arg1 = (mem::ScopedCopyablePtr< six::CorrCoefs > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableCorrCoefs_v1v2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCorrCoefs_v1v2_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CorrCoefs > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CorrCoefs > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableCorrCoefs_v1v2_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (*arg1)->v1v2 = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCorrCoefs_v1v2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CorrCoefs > *arg1 = (mem::ScopedCopyablePtr< six::CorrCoefs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableCorrCoefs_v1v2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCorrCoefs_v1v2_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CorrCoefs > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CorrCoefs > * >(argp1);
  {
    try
    {
      result = (double) ((*arg1)->v1v2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCorrCoefs_v1v3_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CorrCoefs > *arg1 = (mem::ScopedCopyablePtr< six::CorrCoefs > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableCorrCoefs_v1v3_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCorrCoefs_v1v3_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CorrCoefs > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CorrCoefs > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableCorrCoefs_v1v3_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (*arg1)->v1v3 = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCorrCoefs_v1v3_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CorrCoefs > *arg1 = (mem::ScopedCopyablePtr< six::CorrCoefs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableCorrCoefs_v1v3_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCorrCoefs_v1v3_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CorrCoefs > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CorrCoefs > * >(argp1);
  {
    try
    {
      result = (double) ((*arg1)->v1v3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCorrCoefs_v2v3_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CorrCoefs > *arg1 = (mem::ScopedCopyablePtr< six::CorrCoefs > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableCorrCoefs_v2v3_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCorrCoefs_v2v3_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CorrCoefs > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CorrCoefs > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableCorrCoefs_v2v3_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (*arg1)->v2v3 = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCorrCoefs_v2v3_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CorrCoefs > *arg1 = (mem::ScopedCopyablePtr< six::CorrCoefs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableCorrCoefs_v2v3_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCorrCoefs_v2v3_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CorrCoefs > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CorrCoefs > * >(argp1);
  {
    try
    {
      result = (double) ((*arg1)->v2v3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCorrCoefs___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CorrCoefs > *arg1 = (mem::ScopedCopyablePtr< six::CorrCoefs > *) 0 ;
  six::CorrCoefs *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableCorrCoefs___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCorrCoefs___eq__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CorrCoefs > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CorrCoefs > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__CorrCoefs,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableCorrCoefs___eq__" "', argument " "2"" of type '" "six::CorrCoefs const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCopyableCorrCoefs___eq__" "', argument " "2"" of type '" "six::CorrCoefs const &""'"); 
  }
  arg2 = reinterpret_cast< six::CorrCoefs * >(argp2);
  {
    try
    {
      result = (bool)(*arg1)->operator ==((six::CorrCoefs const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCorrCoefs___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CorrCoefs > *arg1 = (mem::ScopedCopyablePtr< six::CorrCoefs > *) 0 ;
  six::CorrCoefs *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableCorrCoefs___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCorrCoefs___ne__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CorrCoefs > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CorrCoefs > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__CorrCoefs,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableCorrCoefs___ne__" "', argument " "2"" of type '" "six::CorrCoefs const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCopyableCorrCoefs___ne__" "', argument " "2"" of type '" "six::CorrCoefs const &""'"); 
  }
  arg2 = reinterpret_cast< six::CorrCoefs * >(argp2);
  {
    try
    {
      result = (bool)(*arg1)->operator !=((six::CorrCoefs const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *ScopedCopyableCorrCoefs_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_makeScopedCopyableCorrCoefs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CorrCoefs > result;
  
  if (!PyArg_ParseTuple(args,(char *)":makeScopedCopyableCorrCoefs")) SWIG_fail;
  {
    try
    {
      result = makeScopedCopyableCorrCoefs();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new mem::ScopedCopyablePtr< six::CorrCoefs >(static_cast< const mem::ScopedCopyablePtr< six::CorrCoefs >& >(result))), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_StdAutoPosVelError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::AutoPtr< six::PosVelError > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_StdAutoPosVelError")) SWIG_fail;
  {
    try
    {
      result = (mem::AutoPtr< six::PosVelError > *)new mem::AutoPtr< six::PosVelError >();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__auto_ptrT_six__PosVelError_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_delete_StdAutoPosVelError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::AutoPtr< six::PosVelError > *arg1 = (mem::AutoPtr< six::PosVelError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_StdAutoPosVelError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__auto_ptrT_six__PosVelError_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StdAutoPosVelError" "', argument " "1"" of type '" "mem::AutoPtr< six::PosVelError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::AutoPtr< six::PosVelError > * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *StdAutoPosVelError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__auto_ptrT_six__PosVelError_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCopyablePosVelError__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PosVelError *arg1 = (six::PosVelError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::PosVelError > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyablePosVelError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PosVelError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyablePosVelError" "', argument " "1"" of type '" "six::PosVelError *""'"); 
  }
  arg1 = reinterpret_cast< six::PosVelError * >(argp1);
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::PosVelError > *)new mem::ScopedCopyablePtr< six::PosVelError >(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyablePosVelError__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCopyablePosVelError")) SWIG_fail;
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::PosVelError > *)new mem::ScopedCopyablePtr< six::PosVelError >();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyablePosVelError__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::PosVelError > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyablePosVelError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyablePosVelError" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCopyablePosVelError" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::PosVelError > *)new mem::ScopedCopyablePtr< six::PosVelError >((mem::ScopedCopyablePtr< six::PosVelError > const &)*arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyablePosVelError(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCopyablePosVelError__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__PosVelError, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyablePosVelError__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyablePosVelError__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ScopedCopyablePosVelError'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCopyablePtr< six::PosVelError >::ScopedCopyablePtr(six::PosVelError *)\n"
    "    mem::ScopedCopyablePtr< six::PosVelError >::ScopedCopyablePtr()\n"
    "    mem::ScopedCopyablePtr< six::PosVelError >::ScopedCopyablePtr(mem::ScopedCopyablePtr< six::PosVelError > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyablePosVelError___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePosVelError___nonzero__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  {
    try
    {
      result = (bool)((mem::ScopedCopyablePtr< six::PosVelError > const *)arg1)->operator bool();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::PosVelError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyablePosVelError_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePosVelError_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  {
    try
    {
      result = (six::PosVelError *)((mem::ScopedCopyablePtr< six::PosVelError > const *)arg1)->get();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__PosVelError, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::PosVelError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyablePosVelError___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePosVelError___ref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  {
    try
    {
      result = (six::PosVelError *) &((mem::ScopedCopyablePtr< six::PosVelError > const *)arg1)->operator *();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__PosVelError, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::PosVelError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyablePosVelError___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePosVelError___deref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  {
    try
    {
      result = (six::PosVelError *)((mem::ScopedCopyablePtr< six::PosVelError > const *)arg1)->operator ->();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__PosVelError, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  six::PosVelError *arg2 = (six::PosVelError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyablePosVelError_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePosVelError_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__PosVelError, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyablePosVelError_reset" "', argument " "2"" of type '" "six::PosVelError *""'"); 
  }
  arg2 = reinterpret_cast< six::PosVelError * >(argp2);
  {
    try
    {
      (arg1)->reset(arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyablePosVelError_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePosVelError_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  {
    try
    {
      (arg1)->reset();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError_reset(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCopyablePosVelError_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__PosVelError, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCopyablePosVelError_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ScopedCopyablePosVelError_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCopyablePtr< six::PosVelError >::reset(six::PosVelError *)\n"
    "    mem::ScopedCopyablePtr< six::PosVelError >::reset()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCopyablePosVelError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCopyablePosVelError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCopyablePosVelError" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError_frame_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  six::FrameType *arg2 = (six::FrameType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyablePosVelError_frame_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePosVelError_frame_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_scene__FrameType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyablePosVelError_frame_set" "', argument " "2"" of type '" "six::FrameType *""'"); 
  }
  arg2 = reinterpret_cast< six::FrameType * >(argp2);
  {
    try
    {
      if (arg1) (*arg1)->frame = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError_frame_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::FrameType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyablePosVelError_frame_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePosVelError_frame_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  {
    try
    {
      result = (six::FrameType *)& ((*arg1)->frame);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_scene__FrameType, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError_p1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyablePosVelError_p1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePosVelError_p1_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyablePosVelError_p1_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (*arg1)->p1 = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError_p1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyablePosVelError_p1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePosVelError_p1_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  {
    try
    {
      result = (double) ((*arg1)->p1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError_p2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyablePosVelError_p2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePosVelError_p2_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyablePosVelError_p2_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (*arg1)->p2 = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError_p2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyablePosVelError_p2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePosVelError_p2_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  {
    try
    {
      result = (double) ((*arg1)->p2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError_p3_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyablePosVelError_p3_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePosVelError_p3_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyablePosVelError_p3_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (*arg1)->p3 = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError_p3_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyablePosVelError_p3_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePosVelError_p3_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  {
    try
    {
      result = (double) ((*arg1)->p3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError_v1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyablePosVelError_v1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePosVelError_v1_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyablePosVelError_v1_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (*arg1)->v1 = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError_v1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyablePosVelError_v1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePosVelError_v1_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  {
    try
    {
      result = (double) ((*arg1)->v1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError_v2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyablePosVelError_v2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePosVelError_v2_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyablePosVelError_v2_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (*arg1)->v2 = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError_v2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyablePosVelError_v2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePosVelError_v2_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  {
    try
    {
      result = (double) ((*arg1)->v2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError_v3_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyablePosVelError_v3_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePosVelError_v3_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyablePosVelError_v3_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (*arg1)->v3 = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError_v3_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyablePosVelError_v3_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePosVelError_v3_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  {
    try
    {
      result = (double) ((*arg1)->v3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError_corrCoefs_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  mem::ScopedCopyablePtr< six::CorrCoefs > *arg2 = (mem::ScopedCopyablePtr< six::CorrCoefs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyablePosVelError_corrCoefs_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePosVelError_corrCoefs_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyablePosVelError_corrCoefs_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::CorrCoefs > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::CorrCoefs > * >(argp2);
  {
    try
    {
      if (arg1) (*arg1)->corrCoefs = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError_corrCoefs_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::CorrCoefs > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyablePosVelError_corrCoefs_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePosVelError_corrCoefs_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::CorrCoefs > *)& ((*arg1)->corrCoefs);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError_positionDecorr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  six::DecorrType *arg2 = (six::DecorrType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyablePosVelError_positionDecorr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePosVelError_positionDecorr_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__DecorrType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyablePosVelError_positionDecorr_set" "', argument " "2"" of type '" "six::DecorrType *""'"); 
  }
  arg2 = reinterpret_cast< six::DecorrType * >(argp2);
  {
    try
    {
      if (arg1) (*arg1)->positionDecorr = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError_positionDecorr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::DecorrType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyablePosVelError_positionDecorr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePosVelError_positionDecorr_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  {
    try
    {
      result = (six::DecorrType *)& ((*arg1)->positionDecorr);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__DecorrType, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  six::PosVelError *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyablePosVelError___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePosVelError___eq__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__PosVelError,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyablePosVelError___eq__" "', argument " "2"" of type '" "six::PosVelError const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCopyablePosVelError___eq__" "', argument " "2"" of type '" "six::PosVelError const &""'"); 
  }
  arg2 = reinterpret_cast< six::PosVelError * >(argp2);
  {
    try
    {
      result = (bool)(*arg1)->operator ==((six::PosVelError const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  six::PosVelError *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyablePosVelError___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePosVelError___ne__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__PosVelError,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyablePosVelError___ne__" "', argument " "2"" of type '" "six::PosVelError const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCopyablePosVelError___ne__" "', argument " "2"" of type '" "six::PosVelError const &""'"); 
  }
  arg2 = reinterpret_cast< six::PosVelError * >(argp2);
  {
    try
    {
      result = (bool)(*arg1)->operator !=((six::PosVelError const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *ScopedCopyablePosVelError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_makeScopedCopyablePosVelError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > result;
  
  if (!PyArg_ParseTuple(args,(char *)":makeScopedCopyablePosVelError")) SWIG_fail;
  {
    try
    {
      result = makeScopedCopyablePosVelError();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new mem::ScopedCopyablePtr< six::PosVelError >(static_cast< const mem::ScopedCopyablePtr< six::PosVelError >& >(result))), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_StdAutoGeoInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::AutoPtr< six::GeoInfo > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_StdAutoGeoInfo")) SWIG_fail;
  {
    try
    {
      result = (mem::AutoPtr< six::GeoInfo > *)new mem::AutoPtr< six::GeoInfo >();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__auto_ptrT_six__GeoInfo_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_delete_StdAutoGeoInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::AutoPtr< six::GeoInfo > *arg1 = (mem::AutoPtr< six::GeoInfo > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_StdAutoGeoInfo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__auto_ptrT_six__GeoInfo_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StdAutoGeoInfo" "', argument " "1"" of type '" "mem::AutoPtr< six::GeoInfo > *""'"); 
  }
  arg1 = reinterpret_cast< mem::AutoPtr< six::GeoInfo > * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *StdAutoGeoInfo_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__auto_ptrT_six__GeoInfo_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCopyableGeoInfo__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::GeoInfo *arg1 = (six::GeoInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::GeoInfo > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableGeoInfo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__GeoInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableGeoInfo" "', argument " "1"" of type '" "six::GeoInfo *""'"); 
  }
  arg1 = reinterpret_cast< six::GeoInfo * >(argp1);
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::GeoInfo > *)new mem::ScopedCopyablePtr< six::GeoInfo >(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__GeoInfo_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableGeoInfo__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::GeoInfo > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCopyableGeoInfo")) SWIG_fail;
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::GeoInfo > *)new mem::ScopedCopyablePtr< six::GeoInfo >();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__GeoInfo_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableGeoInfo__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::GeoInfo > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::GeoInfo > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableGeoInfo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__GeoInfo_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableGeoInfo" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::GeoInfo > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCopyableGeoInfo" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::GeoInfo > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::GeoInfo > * >(argp1);
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::GeoInfo > *)new mem::ScopedCopyablePtr< six::GeoInfo >((mem::ScopedCopyablePtr< six::GeoInfo > const &)*arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__GeoInfo_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableGeoInfo(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCopyableGeoInfo__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__GeoInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableGeoInfo__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__GeoInfo_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableGeoInfo__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ScopedCopyableGeoInfo'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCopyablePtr< six::GeoInfo >::ScopedCopyablePtr(six::GeoInfo *)\n"
    "    mem::ScopedCopyablePtr< six::GeoInfo >::ScopedCopyablePtr()\n"
    "    mem::ScopedCopyablePtr< six::GeoInfo >::ScopedCopyablePtr(mem::ScopedCopyablePtr< six::GeoInfo > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableGeoInfo___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::GeoInfo > *arg1 = (mem::ScopedCopyablePtr< six::GeoInfo > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableGeoInfo___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__GeoInfo_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableGeoInfo___nonzero__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::GeoInfo > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::GeoInfo > * >(argp1);
  {
    try
    {
      result = (bool)((mem::ScopedCopyablePtr< six::GeoInfo > const *)arg1)->operator bool();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableGeoInfo_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::GeoInfo > *arg1 = (mem::ScopedCopyablePtr< six::GeoInfo > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::GeoInfo *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableGeoInfo_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__GeoInfo_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableGeoInfo_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::GeoInfo > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::GeoInfo > * >(argp1);
  {
    try
    {
      result = (six::GeoInfo *)((mem::ScopedCopyablePtr< six::GeoInfo > const *)arg1)->get();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__GeoInfo, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableGeoInfo___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::GeoInfo > *arg1 = (mem::ScopedCopyablePtr< six::GeoInfo > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::GeoInfo *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableGeoInfo___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__GeoInfo_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableGeoInfo___ref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::GeoInfo > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::GeoInfo > * >(argp1);
  {
    try
    {
      result = (six::GeoInfo *) &((mem::ScopedCopyablePtr< six::GeoInfo > const *)arg1)->operator *();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__GeoInfo, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableGeoInfo___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::GeoInfo > *arg1 = (mem::ScopedCopyablePtr< six::GeoInfo > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::GeoInfo *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableGeoInfo___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__GeoInfo_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableGeoInfo___deref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::GeoInfo > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::GeoInfo > * >(argp1);
  {
    try
    {
      result = (six::GeoInfo *)((mem::ScopedCopyablePtr< six::GeoInfo > const *)arg1)->operator ->();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__GeoInfo, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableGeoInfo_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::GeoInfo > *arg1 = (mem::ScopedCopyablePtr< six::GeoInfo > *) 0 ;
  six::GeoInfo *arg2 = (six::GeoInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableGeoInfo_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__GeoInfo_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableGeoInfo_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::GeoInfo > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::GeoInfo > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__GeoInfo, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableGeoInfo_reset" "', argument " "2"" of type '" "six::GeoInfo *""'"); 
  }
  arg2 = reinterpret_cast< six::GeoInfo * >(argp2);
  {
    try
    {
      (arg1)->reset(arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableGeoInfo_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::GeoInfo > *arg1 = (mem::ScopedCopyablePtr< six::GeoInfo > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableGeoInfo_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__GeoInfo_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableGeoInfo_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::GeoInfo > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::GeoInfo > * >(argp1);
  {
    try
    {
      (arg1)->reset();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableGeoInfo_reset(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__GeoInfo_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCopyableGeoInfo_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__GeoInfo_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__GeoInfo, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCopyableGeoInfo_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ScopedCopyableGeoInfo_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCopyablePtr< six::GeoInfo >::reset(six::GeoInfo *)\n"
    "    mem::ScopedCopyablePtr< six::GeoInfo >::reset()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCopyableGeoInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::GeoInfo > *arg1 = (mem::ScopedCopyablePtr< six::GeoInfo > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCopyableGeoInfo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__GeoInfo_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCopyableGeoInfo" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::GeoInfo > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::GeoInfo > * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableGeoInfo_name_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::GeoInfo > *arg1 = (mem::ScopedCopyablePtr< six::GeoInfo > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableGeoInfo_name_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__GeoInfo_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableGeoInfo_name_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::GeoInfo > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::GeoInfo > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableGeoInfo_name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCopyableGeoInfo_name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try
    {
      if (arg1) (*arg1)->name = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableGeoInfo_name_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::GeoInfo > *arg1 = (mem::ScopedCopyablePtr< six::GeoInfo > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableGeoInfo_name_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__GeoInfo_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableGeoInfo_name_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::GeoInfo > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::GeoInfo > * >(argp1);
  {
    try
    {
      result = (std::string *) & ((*arg1)->name);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableGeoInfo_geoInfos_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::GeoInfo > *arg1 = (mem::ScopedCopyablePtr< six::GeoInfo > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > > *arg2 = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableGeoInfo_geoInfos_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__GeoInfo_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableGeoInfo_geoInfos_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::GeoInfo > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::GeoInfo > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableGeoInfo_geoInfos_set" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > > * >(argp2);
  {
    try
    {
      if (arg1) (*arg1)->geoInfos = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableGeoInfo_geoInfos_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::GeoInfo > *arg1 = (mem::ScopedCopyablePtr< six::GeoInfo > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableGeoInfo_geoInfos_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__GeoInfo_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableGeoInfo_geoInfos_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::GeoInfo > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::GeoInfo > * >(argp1);
  {
    try
    {
      result = (std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > > *)& ((*arg1)->geoInfos);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableGeoInfo_desc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::GeoInfo > *arg1 = (mem::ScopedCopyablePtr< six::GeoInfo > *) 0 ;
  six::ParameterCollection *arg2 = (six::ParameterCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableGeoInfo_desc_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__GeoInfo_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableGeoInfo_desc_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::GeoInfo > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::GeoInfo > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__ParameterCollection, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableGeoInfo_desc_set" "', argument " "2"" of type '" "six::ParameterCollection *""'"); 
  }
  arg2 = reinterpret_cast< six::ParameterCollection * >(argp2);
  {
    try
    {
      if (arg1) (*arg1)->desc = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableGeoInfo_desc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::GeoInfo > *arg1 = (mem::ScopedCopyablePtr< six::GeoInfo > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::ParameterCollection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableGeoInfo_desc_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__GeoInfo_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableGeoInfo_desc_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::GeoInfo > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::GeoInfo > * >(argp1);
  {
    try
    {
      result = (six::ParameterCollection *)& ((*arg1)->desc);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__ParameterCollection, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableGeoInfo_geometryLatLon_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::GeoInfo > *arg1 = (mem::ScopedCopyablePtr< six::GeoInfo > *) 0 ;
  std::vector< six::LatLon,std::allocator< six::LatLon > > *arg2 = (std::vector< six::LatLon,std::allocator< six::LatLon > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableGeoInfo_geometryLatLon_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__GeoInfo_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableGeoInfo_geometryLatLon_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::GeoInfo > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::GeoInfo > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableGeoInfo_geometryLatLon_set" "', argument " "2"" of type '" "std::vector< six::LatLon,std::allocator< six::LatLon > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< six::LatLon,std::allocator< six::LatLon > > * >(argp2);
  {
    try
    {
      if (arg1) (*arg1)->geometryLatLon = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableGeoInfo_geometryLatLon_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::GeoInfo > *arg1 = (mem::ScopedCopyablePtr< six::GeoInfo > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::LatLon,std::allocator< six::LatLon > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableGeoInfo_geometryLatLon_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__GeoInfo_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableGeoInfo_geometryLatLon_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::GeoInfo > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::GeoInfo > * >(argp1);
  {
    try
    {
      result = (std::vector< six::LatLon,std::allocator< six::LatLon > > *)& ((*arg1)->geometryLatLon);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableGeoInfo___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::GeoInfo > *arg1 = (mem::ScopedCopyablePtr< six::GeoInfo > *) 0 ;
  six::GeoInfo *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableGeoInfo___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__GeoInfo_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableGeoInfo___eq__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::GeoInfo > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::GeoInfo > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__GeoInfo,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableGeoInfo___eq__" "', argument " "2"" of type '" "six::GeoInfo const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCopyableGeoInfo___eq__" "', argument " "2"" of type '" "six::GeoInfo const &""'"); 
  }
  arg2 = reinterpret_cast< six::GeoInfo * >(argp2);
  {
    try
    {
      result = (bool)(*arg1)->operator ==((six::GeoInfo const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableGeoInfo___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::GeoInfo > *arg1 = (mem::ScopedCopyablePtr< six::GeoInfo > *) 0 ;
  six::GeoInfo *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableGeoInfo___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__GeoInfo_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableGeoInfo___ne__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::GeoInfo > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::GeoInfo > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__GeoInfo,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableGeoInfo___ne__" "', argument " "2"" of type '" "six::GeoInfo const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCopyableGeoInfo___ne__" "', argument " "2"" of type '" "six::GeoInfo const &""'"); 
  }
  arg2 = reinterpret_cast< six::GeoInfo * >(argp2);
  {
    try
    {
      result = (bool)(*arg1)->operator !=((six::GeoInfo const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *ScopedCopyableGeoInfo_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCopyablePtrT_six__GeoInfo_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_makeScopedCopyableGeoInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::GeoInfo > result;
  
  if (!PyArg_ParseTuple(args,(char *)":makeScopedCopyableGeoInfo")) SWIG_fail;
  {
    try
    {
      result = makeScopedCopyableGeoInfo();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new mem::ScopedCopyablePtr< six::GeoInfo >(static_cast< const mem::ScopedCopyablePtr< six::GeoInfo >& >(result))), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__GeoInfo_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_StdAutoRadarSensor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::AutoPtr< six::RadarSensor > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_StdAutoRadarSensor")) SWIG_fail;
  {
    try
    {
      result = (mem::AutoPtr< six::RadarSensor > *)new mem::AutoPtr< six::RadarSensor >();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__auto_ptrT_six__RadarSensor_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_delete_StdAutoRadarSensor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::AutoPtr< six::RadarSensor > *arg1 = (mem::AutoPtr< six::RadarSensor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_StdAutoRadarSensor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__auto_ptrT_six__RadarSensor_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StdAutoRadarSensor" "', argument " "1"" of type '" "mem::AutoPtr< six::RadarSensor > *""'"); 
  }
  arg1 = reinterpret_cast< mem::AutoPtr< six::RadarSensor > * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *StdAutoRadarSensor_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__auto_ptrT_six__RadarSensor_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCopyableRadarSensor__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RadarSensor *arg1 = (six::RadarSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::RadarSensor > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableRadarSensor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RadarSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableRadarSensor" "', argument " "1"" of type '" "six::RadarSensor *""'"); 
  }
  arg1 = reinterpret_cast< six::RadarSensor * >(argp1);
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::RadarSensor > *)new mem::ScopedCopyablePtr< six::RadarSensor >(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableRadarSensor__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::RadarSensor > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCopyableRadarSensor")) SWIG_fail;
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::RadarSensor > *)new mem::ScopedCopyablePtr< six::RadarSensor >();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableRadarSensor__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::RadarSensor > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::RadarSensor > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableRadarSensor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableRadarSensor" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::RadarSensor > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCopyableRadarSensor" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::RadarSensor > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::RadarSensor > * >(argp1);
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::RadarSensor > *)new mem::ScopedCopyablePtr< six::RadarSensor >((mem::ScopedCopyablePtr< six::RadarSensor > const &)*arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableRadarSensor(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCopyableRadarSensor__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__RadarSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableRadarSensor__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableRadarSensor__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ScopedCopyableRadarSensor'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCopyablePtr< six::RadarSensor >::ScopedCopyablePtr(six::RadarSensor *)\n"
    "    mem::ScopedCopyablePtr< six::RadarSensor >::ScopedCopyablePtr()\n"
    "    mem::ScopedCopyablePtr< six::RadarSensor >::ScopedCopyablePtr(mem::ScopedCopyablePtr< six::RadarSensor > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadarSensor___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::RadarSensor > *arg1 = (mem::ScopedCopyablePtr< six::RadarSensor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRadarSensor___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadarSensor___nonzero__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::RadarSensor > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::RadarSensor > * >(argp1);
  {
    try
    {
      result = (bool)((mem::ScopedCopyablePtr< six::RadarSensor > const *)arg1)->operator bool();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadarSensor_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::RadarSensor > *arg1 = (mem::ScopedCopyablePtr< six::RadarSensor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::RadarSensor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRadarSensor_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadarSensor_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::RadarSensor > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::RadarSensor > * >(argp1);
  {
    try
    {
      result = (six::RadarSensor *)((mem::ScopedCopyablePtr< six::RadarSensor > const *)arg1)->get();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__RadarSensor, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadarSensor___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::RadarSensor > *arg1 = (mem::ScopedCopyablePtr< six::RadarSensor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::RadarSensor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRadarSensor___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadarSensor___ref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::RadarSensor > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::RadarSensor > * >(argp1);
  {
    try
    {
      result = (six::RadarSensor *) &((mem::ScopedCopyablePtr< six::RadarSensor > const *)arg1)->operator *();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__RadarSensor, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadarSensor___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::RadarSensor > *arg1 = (mem::ScopedCopyablePtr< six::RadarSensor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::RadarSensor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRadarSensor___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadarSensor___deref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::RadarSensor > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::RadarSensor > * >(argp1);
  {
    try
    {
      result = (six::RadarSensor *)((mem::ScopedCopyablePtr< six::RadarSensor > const *)arg1)->operator ->();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__RadarSensor, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadarSensor_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::RadarSensor > *arg1 = (mem::ScopedCopyablePtr< six::RadarSensor > *) 0 ;
  six::RadarSensor *arg2 = (six::RadarSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRadarSensor_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadarSensor_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::RadarSensor > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::RadarSensor > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__RadarSensor, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableRadarSensor_reset" "', argument " "2"" of type '" "six::RadarSensor *""'"); 
  }
  arg2 = reinterpret_cast< six::RadarSensor * >(argp2);
  {
    try
    {
      (arg1)->reset(arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadarSensor_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::RadarSensor > *arg1 = (mem::ScopedCopyablePtr< six::RadarSensor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRadarSensor_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadarSensor_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::RadarSensor > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::RadarSensor > * >(argp1);
  {
    try
    {
      (arg1)->reset();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadarSensor_reset(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCopyableRadarSensor_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__RadarSensor, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCopyableRadarSensor_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ScopedCopyableRadarSensor_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCopyablePtr< six::RadarSensor >::reset(six::RadarSensor *)\n"
    "    mem::ScopedCopyablePtr< six::RadarSensor >::reset()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCopyableRadarSensor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::RadarSensor > *arg1 = (mem::ScopedCopyablePtr< six::RadarSensor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCopyableRadarSensor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCopyableRadarSensor" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::RadarSensor > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::RadarSensor > * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadarSensor_rangeBias_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::RadarSensor > *arg1 = (mem::ScopedCopyablePtr< six::RadarSensor > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRadarSensor_rangeBias_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadarSensor_rangeBias_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::RadarSensor > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::RadarSensor > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableRadarSensor_rangeBias_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (*arg1)->rangeBias = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadarSensor_rangeBias_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::RadarSensor > *arg1 = (mem::ScopedCopyablePtr< six::RadarSensor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRadarSensor_rangeBias_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadarSensor_rangeBias_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::RadarSensor > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::RadarSensor > * >(argp1);
  {
    try
    {
      result = (double) ((*arg1)->rangeBias);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadarSensor_clockFreqSF_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::RadarSensor > *arg1 = (mem::ScopedCopyablePtr< six::RadarSensor > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRadarSensor_clockFreqSF_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadarSensor_clockFreqSF_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::RadarSensor > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::RadarSensor > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableRadarSensor_clockFreqSF_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (*arg1)->clockFreqSF = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadarSensor_clockFreqSF_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::RadarSensor > *arg1 = (mem::ScopedCopyablePtr< six::RadarSensor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRadarSensor_clockFreqSF_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadarSensor_clockFreqSF_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::RadarSensor > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::RadarSensor > * >(argp1);
  {
    try
    {
      result = (double) ((*arg1)->clockFreqSF);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadarSensor_transmitFreqSF_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::RadarSensor > *arg1 = (mem::ScopedCopyablePtr< six::RadarSensor > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRadarSensor_transmitFreqSF_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadarSensor_transmitFreqSF_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::RadarSensor > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::RadarSensor > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableRadarSensor_transmitFreqSF_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (*arg1)->transmitFreqSF = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadarSensor_transmitFreqSF_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::RadarSensor > *arg1 = (mem::ScopedCopyablePtr< six::RadarSensor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRadarSensor_transmitFreqSF_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadarSensor_transmitFreqSF_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::RadarSensor > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::RadarSensor > * >(argp1);
  {
    try
    {
      result = (double) ((*arg1)->transmitFreqSF);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadarSensor_rangeBiasDecorr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::RadarSensor > *arg1 = (mem::ScopedCopyablePtr< six::RadarSensor > *) 0 ;
  six::DecorrType *arg2 = (six::DecorrType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRadarSensor_rangeBiasDecorr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadarSensor_rangeBiasDecorr_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::RadarSensor > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::RadarSensor > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__DecorrType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableRadarSensor_rangeBiasDecorr_set" "', argument " "2"" of type '" "six::DecorrType *""'"); 
  }
  arg2 = reinterpret_cast< six::DecorrType * >(argp2);
  {
    try
    {
      if (arg1) (*arg1)->rangeBiasDecorr = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadarSensor_rangeBiasDecorr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::RadarSensor > *arg1 = (mem::ScopedCopyablePtr< six::RadarSensor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::DecorrType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRadarSensor_rangeBiasDecorr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadarSensor_rangeBiasDecorr_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::RadarSensor > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::RadarSensor > * >(argp1);
  {
    try
    {
      result = (six::DecorrType *)& ((*arg1)->rangeBiasDecorr);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__DecorrType, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadarSensor___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::RadarSensor > *arg1 = (mem::ScopedCopyablePtr< six::RadarSensor > *) 0 ;
  six::RadarSensor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRadarSensor___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadarSensor___eq__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::RadarSensor > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::RadarSensor > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__RadarSensor,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableRadarSensor___eq__" "', argument " "2"" of type '" "six::RadarSensor const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCopyableRadarSensor___eq__" "', argument " "2"" of type '" "six::RadarSensor const &""'"); 
  }
  arg2 = reinterpret_cast< six::RadarSensor * >(argp2);
  {
    try
    {
      result = (bool)(*arg1)->operator ==((six::RadarSensor const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadarSensor___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::RadarSensor > *arg1 = (mem::ScopedCopyablePtr< six::RadarSensor > *) 0 ;
  six::RadarSensor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRadarSensor___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadarSensor___ne__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::RadarSensor > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::RadarSensor > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__RadarSensor,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableRadarSensor___ne__" "', argument " "2"" of type '" "six::RadarSensor const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCopyableRadarSensor___ne__" "', argument " "2"" of type '" "six::RadarSensor const &""'"); 
  }
  arg2 = reinterpret_cast< six::RadarSensor * >(argp2);
  {
    try
    {
      result = (bool)(*arg1)->operator !=((six::RadarSensor const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *ScopedCopyableRadarSensor_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_makeScopedCopyableRadarSensor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::RadarSensor > result;
  
  if (!PyArg_ParseTuple(args,(char *)":makeScopedCopyableRadarSensor")) SWIG_fail;
  {
    try
    {
      result = makeScopedCopyableRadarSensor();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new mem::ScopedCopyablePtr< six::RadarSensor >(static_cast< const mem::ScopedCopyablePtr< six::RadarSensor >& >(result))), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_StdAutoTropoError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::AutoPtr< six::TropoError > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_StdAutoTropoError")) SWIG_fail;
  {
    try
    {
      result = (mem::AutoPtr< six::TropoError > *)new mem::AutoPtr< six::TropoError >();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__auto_ptrT_six__TropoError_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_delete_StdAutoTropoError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::AutoPtr< six::TropoError > *arg1 = (mem::AutoPtr< six::TropoError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_StdAutoTropoError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__auto_ptrT_six__TropoError_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StdAutoTropoError" "', argument " "1"" of type '" "mem::AutoPtr< six::TropoError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::AutoPtr< six::TropoError > * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *StdAutoTropoError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__auto_ptrT_six__TropoError_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCopyableTropoError__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::TropoError *arg1 = (six::TropoError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::TropoError > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableTropoError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__TropoError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableTropoError" "', argument " "1"" of type '" "six::TropoError *""'"); 
  }
  arg1 = reinterpret_cast< six::TropoError * >(argp1);
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::TropoError > *)new mem::ScopedCopyablePtr< six::TropoError >(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableTropoError__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::TropoError > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCopyableTropoError")) SWIG_fail;
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::TropoError > *)new mem::ScopedCopyablePtr< six::TropoError >();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableTropoError__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::TropoError > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::TropoError > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableTropoError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableTropoError" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::TropoError > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCopyableTropoError" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::TropoError > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::TropoError > * >(argp1);
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::TropoError > *)new mem::ScopedCopyablePtr< six::TropoError >((mem::ScopedCopyablePtr< six::TropoError > const &)*arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableTropoError(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCopyableTropoError__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__TropoError, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableTropoError__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableTropoError__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ScopedCopyableTropoError'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCopyablePtr< six::TropoError >::ScopedCopyablePtr(six::TropoError *)\n"
    "    mem::ScopedCopyablePtr< six::TropoError >::ScopedCopyablePtr()\n"
    "    mem::ScopedCopyablePtr< six::TropoError >::ScopedCopyablePtr(mem::ScopedCopyablePtr< six::TropoError > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableTropoError___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::TropoError > *arg1 = (mem::ScopedCopyablePtr< six::TropoError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableTropoError___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableTropoError___nonzero__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::TropoError > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::TropoError > * >(argp1);
  {
    try
    {
      result = (bool)((mem::ScopedCopyablePtr< six::TropoError > const *)arg1)->operator bool();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableTropoError_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::TropoError > *arg1 = (mem::ScopedCopyablePtr< six::TropoError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::TropoError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableTropoError_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableTropoError_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::TropoError > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::TropoError > * >(argp1);
  {
    try
    {
      result = (six::TropoError *)((mem::ScopedCopyablePtr< six::TropoError > const *)arg1)->get();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__TropoError, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableTropoError___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::TropoError > *arg1 = (mem::ScopedCopyablePtr< six::TropoError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::TropoError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableTropoError___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableTropoError___ref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::TropoError > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::TropoError > * >(argp1);
  {
    try
    {
      result = (six::TropoError *) &((mem::ScopedCopyablePtr< six::TropoError > const *)arg1)->operator *();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__TropoError, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableTropoError___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::TropoError > *arg1 = (mem::ScopedCopyablePtr< six::TropoError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::TropoError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableTropoError___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableTropoError___deref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::TropoError > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::TropoError > * >(argp1);
  {
    try
    {
      result = (six::TropoError *)((mem::ScopedCopyablePtr< six::TropoError > const *)arg1)->operator ->();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__TropoError, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableTropoError_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::TropoError > *arg1 = (mem::ScopedCopyablePtr< six::TropoError > *) 0 ;
  six::TropoError *arg2 = (six::TropoError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableTropoError_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableTropoError_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::TropoError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::TropoError > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__TropoError, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableTropoError_reset" "', argument " "2"" of type '" "six::TropoError *""'"); 
  }
  arg2 = reinterpret_cast< six::TropoError * >(argp2);
  {
    try
    {
      (arg1)->reset(arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableTropoError_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::TropoError > *arg1 = (mem::ScopedCopyablePtr< six::TropoError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableTropoError_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableTropoError_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::TropoError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::TropoError > * >(argp1);
  {
    try
    {
      (arg1)->reset();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableTropoError_reset(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCopyableTropoError_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__TropoError, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCopyableTropoError_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ScopedCopyableTropoError_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCopyablePtr< six::TropoError >::reset(six::TropoError *)\n"
    "    mem::ScopedCopyablePtr< six::TropoError >::reset()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCopyableTropoError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::TropoError > *arg1 = (mem::ScopedCopyablePtr< six::TropoError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCopyableTropoError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCopyableTropoError" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::TropoError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::TropoError > * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableTropoError_tropoRangeVertical_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::TropoError > *arg1 = (mem::ScopedCopyablePtr< six::TropoError > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableTropoError_tropoRangeVertical_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableTropoError_tropoRangeVertical_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::TropoError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::TropoError > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableTropoError_tropoRangeVertical_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (*arg1)->tropoRangeVertical = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableTropoError_tropoRangeVertical_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::TropoError > *arg1 = (mem::ScopedCopyablePtr< six::TropoError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableTropoError_tropoRangeVertical_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableTropoError_tropoRangeVertical_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::TropoError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::TropoError > * >(argp1);
  {
    try
    {
      result = (double) ((*arg1)->tropoRangeVertical);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableTropoError_tropoRangeSlant_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::TropoError > *arg1 = (mem::ScopedCopyablePtr< six::TropoError > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableTropoError_tropoRangeSlant_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableTropoError_tropoRangeSlant_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::TropoError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::TropoError > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableTropoError_tropoRangeSlant_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (*arg1)->tropoRangeSlant = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableTropoError_tropoRangeSlant_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::TropoError > *arg1 = (mem::ScopedCopyablePtr< six::TropoError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableTropoError_tropoRangeSlant_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableTropoError_tropoRangeSlant_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::TropoError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::TropoError > * >(argp1);
  {
    try
    {
      result = (double) ((*arg1)->tropoRangeSlant);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableTropoError_tropoRangeDecorr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::TropoError > *arg1 = (mem::ScopedCopyablePtr< six::TropoError > *) 0 ;
  six::DecorrType *arg2 = (six::DecorrType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableTropoError_tropoRangeDecorr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableTropoError_tropoRangeDecorr_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::TropoError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::TropoError > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__DecorrType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableTropoError_tropoRangeDecorr_set" "', argument " "2"" of type '" "six::DecorrType *""'"); 
  }
  arg2 = reinterpret_cast< six::DecorrType * >(argp2);
  {
    try
    {
      if (arg1) (*arg1)->tropoRangeDecorr = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableTropoError_tropoRangeDecorr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::TropoError > *arg1 = (mem::ScopedCopyablePtr< six::TropoError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::DecorrType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableTropoError_tropoRangeDecorr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableTropoError_tropoRangeDecorr_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::TropoError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::TropoError > * >(argp1);
  {
    try
    {
      result = (six::DecorrType *)& ((*arg1)->tropoRangeDecorr);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__DecorrType, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableTropoError___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::TropoError > *arg1 = (mem::ScopedCopyablePtr< six::TropoError > *) 0 ;
  six::TropoError *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableTropoError___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableTropoError___eq__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::TropoError > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::TropoError > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__TropoError,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableTropoError___eq__" "', argument " "2"" of type '" "six::TropoError const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCopyableTropoError___eq__" "', argument " "2"" of type '" "six::TropoError const &""'"); 
  }
  arg2 = reinterpret_cast< six::TropoError * >(argp2);
  {
    try
    {
      result = (bool)(*arg1)->operator ==((six::TropoError const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableTropoError___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::TropoError > *arg1 = (mem::ScopedCopyablePtr< six::TropoError > *) 0 ;
  six::TropoError *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableTropoError___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableTropoError___ne__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::TropoError > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::TropoError > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__TropoError,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableTropoError___ne__" "', argument " "2"" of type '" "six::TropoError const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCopyableTropoError___ne__" "', argument " "2"" of type '" "six::TropoError const &""'"); 
  }
  arg2 = reinterpret_cast< six::TropoError * >(argp2);
  {
    try
    {
      result = (bool)(*arg1)->operator !=((six::TropoError const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *ScopedCopyableTropoError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_makeScopedCopyableTropoError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::TropoError > result;
  
  if (!PyArg_ParseTuple(args,(char *)":makeScopedCopyableTropoError")) SWIG_fail;
  {
    try
    {
      result = makeScopedCopyableTropoError();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new mem::ScopedCopyablePtr< six::TropoError >(static_cast< const mem::ScopedCopyablePtr< six::TropoError >& >(result))), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_StdAutoIonoError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::AutoPtr< six::IonoError > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_StdAutoIonoError")) SWIG_fail;
  {
    try
    {
      result = (mem::AutoPtr< six::IonoError > *)new mem::AutoPtr< six::IonoError >();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__auto_ptrT_six__IonoError_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_delete_StdAutoIonoError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::AutoPtr< six::IonoError > *arg1 = (mem::AutoPtr< six::IonoError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_StdAutoIonoError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__auto_ptrT_six__IonoError_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StdAutoIonoError" "', argument " "1"" of type '" "mem::AutoPtr< six::IonoError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::AutoPtr< six::IonoError > * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *StdAutoIonoError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__auto_ptrT_six__IonoError_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCopyableIonoError__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::IonoError *arg1 = (six::IonoError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::IonoError > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableIonoError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__IonoError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableIonoError" "', argument " "1"" of type '" "six::IonoError *""'"); 
  }
  arg1 = reinterpret_cast< six::IonoError * >(argp1);
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::IonoError > *)new mem::ScopedCopyablePtr< six::IonoError >(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableIonoError__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::IonoError > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCopyableIonoError")) SWIG_fail;
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::IonoError > *)new mem::ScopedCopyablePtr< six::IonoError >();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableIonoError__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::IonoError > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::IonoError > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableIonoError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableIonoError" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::IonoError > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCopyableIonoError" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::IonoError > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::IonoError > * >(argp1);
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::IonoError > *)new mem::ScopedCopyablePtr< six::IonoError >((mem::ScopedCopyablePtr< six::IonoError > const &)*arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableIonoError(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCopyableIonoError__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__IonoError, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableIonoError__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableIonoError__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ScopedCopyableIonoError'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCopyablePtr< six::IonoError >::ScopedCopyablePtr(six::IonoError *)\n"
    "    mem::ScopedCopyablePtr< six::IonoError >::ScopedCopyablePtr()\n"
    "    mem::ScopedCopyablePtr< six::IonoError >::ScopedCopyablePtr(mem::ScopedCopyablePtr< six::IonoError > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableIonoError___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::IonoError > *arg1 = (mem::ScopedCopyablePtr< six::IonoError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableIonoError___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableIonoError___nonzero__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::IonoError > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::IonoError > * >(argp1);
  {
    try
    {
      result = (bool)((mem::ScopedCopyablePtr< six::IonoError > const *)arg1)->operator bool();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableIonoError_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::IonoError > *arg1 = (mem::ScopedCopyablePtr< six::IonoError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::IonoError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableIonoError_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableIonoError_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::IonoError > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::IonoError > * >(argp1);
  {
    try
    {
      result = (six::IonoError *)((mem::ScopedCopyablePtr< six::IonoError > const *)arg1)->get();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__IonoError, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableIonoError___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::IonoError > *arg1 = (mem::ScopedCopyablePtr< six::IonoError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::IonoError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableIonoError___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableIonoError___ref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::IonoError > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::IonoError > * >(argp1);
  {
    try
    {
      result = (six::IonoError *) &((mem::ScopedCopyablePtr< six::IonoError > const *)arg1)->operator *();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__IonoError, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableIonoError___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::IonoError > *arg1 = (mem::ScopedCopyablePtr< six::IonoError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::IonoError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableIonoError___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableIonoError___deref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::IonoError > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::IonoError > * >(argp1);
  {
    try
    {
      result = (six::IonoError *)((mem::ScopedCopyablePtr< six::IonoError > const *)arg1)->operator ->();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__IonoError, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableIonoError_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::IonoError > *arg1 = (mem::ScopedCopyablePtr< six::IonoError > *) 0 ;
  six::IonoError *arg2 = (six::IonoError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableIonoError_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableIonoError_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::IonoError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::IonoError > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__IonoError, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableIonoError_reset" "', argument " "2"" of type '" "six::IonoError *""'"); 
  }
  arg2 = reinterpret_cast< six::IonoError * >(argp2);
  {
    try
    {
      (arg1)->reset(arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableIonoError_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::IonoError > *arg1 = (mem::ScopedCopyablePtr< six::IonoError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableIonoError_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableIonoError_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::IonoError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::IonoError > * >(argp1);
  {
    try
    {
      (arg1)->reset();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableIonoError_reset(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCopyableIonoError_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__IonoError, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCopyableIonoError_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ScopedCopyableIonoError_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCopyablePtr< six::IonoError >::reset(six::IonoError *)\n"
    "    mem::ScopedCopyablePtr< six::IonoError >::reset()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCopyableIonoError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::IonoError > *arg1 = (mem::ScopedCopyablePtr< six::IonoError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCopyableIonoError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCopyableIonoError" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::IonoError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::IonoError > * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableIonoError_ionoRangeVertical_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::IonoError > *arg1 = (mem::ScopedCopyablePtr< six::IonoError > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableIonoError_ionoRangeVertical_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableIonoError_ionoRangeVertical_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::IonoError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::IonoError > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableIonoError_ionoRangeVertical_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (*arg1)->ionoRangeVertical = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableIonoError_ionoRangeVertical_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::IonoError > *arg1 = (mem::ScopedCopyablePtr< six::IonoError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableIonoError_ionoRangeVertical_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableIonoError_ionoRangeVertical_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::IonoError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::IonoError > * >(argp1);
  {
    try
    {
      result = (double) ((*arg1)->ionoRangeVertical);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableIonoError_ionoRangeRateVertical_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::IonoError > *arg1 = (mem::ScopedCopyablePtr< six::IonoError > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableIonoError_ionoRangeRateVertical_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableIonoError_ionoRangeRateVertical_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::IonoError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::IonoError > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableIonoError_ionoRangeRateVertical_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (*arg1)->ionoRangeRateVertical = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableIonoError_ionoRangeRateVertical_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::IonoError > *arg1 = (mem::ScopedCopyablePtr< six::IonoError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableIonoError_ionoRangeRateVertical_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableIonoError_ionoRangeRateVertical_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::IonoError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::IonoError > * >(argp1);
  {
    try
    {
      result = (double) ((*arg1)->ionoRangeRateVertical);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableIonoError_ionoRgRgRateCC_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::IonoError > *arg1 = (mem::ScopedCopyablePtr< six::IonoError > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableIonoError_ionoRgRgRateCC_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableIonoError_ionoRgRgRateCC_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::IonoError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::IonoError > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableIonoError_ionoRgRgRateCC_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (*arg1)->ionoRgRgRateCC = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableIonoError_ionoRgRgRateCC_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::IonoError > *arg1 = (mem::ScopedCopyablePtr< six::IonoError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableIonoError_ionoRgRgRateCC_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableIonoError_ionoRgRgRateCC_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::IonoError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::IonoError > * >(argp1);
  {
    try
    {
      result = (double) ((*arg1)->ionoRgRgRateCC);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableIonoError_ionoRangeVertDecorr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::IonoError > *arg1 = (mem::ScopedCopyablePtr< six::IonoError > *) 0 ;
  six::DecorrType *arg2 = (six::DecorrType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableIonoError_ionoRangeVertDecorr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableIonoError_ionoRangeVertDecorr_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::IonoError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::IonoError > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__DecorrType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableIonoError_ionoRangeVertDecorr_set" "', argument " "2"" of type '" "six::DecorrType *""'"); 
  }
  arg2 = reinterpret_cast< six::DecorrType * >(argp2);
  {
    try
    {
      if (arg1) (*arg1)->ionoRangeVertDecorr = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableIonoError_ionoRangeVertDecorr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::IonoError > *arg1 = (mem::ScopedCopyablePtr< six::IonoError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::DecorrType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableIonoError_ionoRangeVertDecorr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableIonoError_ionoRangeVertDecorr_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::IonoError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::IonoError > * >(argp1);
  {
    try
    {
      result = (six::DecorrType *)& ((*arg1)->ionoRangeVertDecorr);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__DecorrType, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableIonoError___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::IonoError > *arg1 = (mem::ScopedCopyablePtr< six::IonoError > *) 0 ;
  six::IonoError *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableIonoError___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableIonoError___eq__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::IonoError > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::IonoError > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__IonoError,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableIonoError___eq__" "', argument " "2"" of type '" "six::IonoError const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCopyableIonoError___eq__" "', argument " "2"" of type '" "six::IonoError const &""'"); 
  }
  arg2 = reinterpret_cast< six::IonoError * >(argp2);
  {
    try
    {
      result = (bool)(*arg1)->operator ==((six::IonoError const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableIonoError___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::IonoError > *arg1 = (mem::ScopedCopyablePtr< six::IonoError > *) 0 ;
  six::IonoError *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableIonoError___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableIonoError___ne__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::IonoError > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::IonoError > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__IonoError,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableIonoError___ne__" "', argument " "2"" of type '" "six::IonoError const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCopyableIonoError___ne__" "', argument " "2"" of type '" "six::IonoError const &""'"); 
  }
  arg2 = reinterpret_cast< six::IonoError * >(argp2);
  {
    try
    {
      result = (bool)(*arg1)->operator !=((six::IonoError const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *ScopedCopyableIonoError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_makeScopedCopyableIonoError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::IonoError > result;
  
  if (!PyArg_ParseTuple(args,(char *)":makeScopedCopyableIonoError")) SWIG_fail;
  {
    try
    {
      result = makeScopedCopyableIonoError();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new mem::ScopedCopyablePtr< six::IonoError >(static_cast< const mem::ScopedCopyablePtr< six::IonoError >& >(result))), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_StdAutoCompositeSCP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::AutoPtr< six::CompositeSCP > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_StdAutoCompositeSCP")) SWIG_fail;
  {
    try
    {
      result = (mem::AutoPtr< six::CompositeSCP > *)new mem::AutoPtr< six::CompositeSCP >();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__auto_ptrT_six__CompositeSCP_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_delete_StdAutoCompositeSCP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::AutoPtr< six::CompositeSCP > *arg1 = (mem::AutoPtr< six::CompositeSCP > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_StdAutoCompositeSCP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__auto_ptrT_six__CompositeSCP_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StdAutoCompositeSCP" "', argument " "1"" of type '" "mem::AutoPtr< six::CompositeSCP > *""'"); 
  }
  arg1 = reinterpret_cast< mem::AutoPtr< six::CompositeSCP > * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *StdAutoCompositeSCP_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__auto_ptrT_six__CompositeSCP_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCopyableCompositeSCP__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CompositeSCP *arg1 = (six::CompositeSCP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::CompositeSCP > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableCompositeSCP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CompositeSCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableCompositeSCP" "', argument " "1"" of type '" "six::CompositeSCP *""'"); 
  }
  arg1 = reinterpret_cast< six::CompositeSCP * >(argp1);
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::CompositeSCP > *)new mem::ScopedCopyablePtr< six::CompositeSCP >(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableCompositeSCP__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CompositeSCP > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCopyableCompositeSCP")) SWIG_fail;
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::CompositeSCP > *)new mem::ScopedCopyablePtr< six::CompositeSCP >();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableCompositeSCP__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CompositeSCP > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::CompositeSCP > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableCompositeSCP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableCompositeSCP" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CompositeSCP > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCopyableCompositeSCP" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CompositeSCP > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CompositeSCP > * >(argp1);
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::CompositeSCP > *)new mem::ScopedCopyablePtr< six::CompositeSCP >((mem::ScopedCopyablePtr< six::CompositeSCP > const &)*arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableCompositeSCP(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCopyableCompositeSCP__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__CompositeSCP, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableCompositeSCP__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableCompositeSCP__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ScopedCopyableCompositeSCP'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCopyablePtr< six::CompositeSCP >::ScopedCopyablePtr(six::CompositeSCP *)\n"
    "    mem::ScopedCopyablePtr< six::CompositeSCP >::ScopedCopyablePtr()\n"
    "    mem::ScopedCopyablePtr< six::CompositeSCP >::ScopedCopyablePtr(mem::ScopedCopyablePtr< six::CompositeSCP > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCompositeSCP___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CompositeSCP > *arg1 = (mem::ScopedCopyablePtr< six::CompositeSCP > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableCompositeSCP___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCompositeSCP___nonzero__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CompositeSCP > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CompositeSCP > * >(argp1);
  {
    try
    {
      result = (bool)((mem::ScopedCopyablePtr< six::CompositeSCP > const *)arg1)->operator bool();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCompositeSCP_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CompositeSCP > *arg1 = (mem::ScopedCopyablePtr< six::CompositeSCP > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::CompositeSCP *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableCompositeSCP_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCompositeSCP_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CompositeSCP > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CompositeSCP > * >(argp1);
  {
    try
    {
      result = (six::CompositeSCP *)((mem::ScopedCopyablePtr< six::CompositeSCP > const *)arg1)->get();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__CompositeSCP, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCompositeSCP___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CompositeSCP > *arg1 = (mem::ScopedCopyablePtr< six::CompositeSCP > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::CompositeSCP *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableCompositeSCP___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCompositeSCP___ref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CompositeSCP > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CompositeSCP > * >(argp1);
  {
    try
    {
      result = (six::CompositeSCP *) &((mem::ScopedCopyablePtr< six::CompositeSCP > const *)arg1)->operator *();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__CompositeSCP, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCompositeSCP___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CompositeSCP > *arg1 = (mem::ScopedCopyablePtr< six::CompositeSCP > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::CompositeSCP *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableCompositeSCP___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCompositeSCP___deref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CompositeSCP > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CompositeSCP > * >(argp1);
  {
    try
    {
      result = (six::CompositeSCP *)((mem::ScopedCopyablePtr< six::CompositeSCP > const *)arg1)->operator ->();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__CompositeSCP, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCompositeSCP_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CompositeSCP > *arg1 = (mem::ScopedCopyablePtr< six::CompositeSCP > *) 0 ;
  six::CompositeSCP *arg2 = (six::CompositeSCP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableCompositeSCP_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCompositeSCP_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CompositeSCP > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CompositeSCP > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__CompositeSCP, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableCompositeSCP_reset" "', argument " "2"" of type '" "six::CompositeSCP *""'"); 
  }
  arg2 = reinterpret_cast< six::CompositeSCP * >(argp2);
  {
    try
    {
      (arg1)->reset(arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCompositeSCP_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CompositeSCP > *arg1 = (mem::ScopedCopyablePtr< six::CompositeSCP > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableCompositeSCP_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCompositeSCP_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CompositeSCP > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CompositeSCP > * >(argp1);
  {
    try
    {
      (arg1)->reset();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCompositeSCP_reset(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCopyableCompositeSCP_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__CompositeSCP, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCopyableCompositeSCP_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ScopedCopyableCompositeSCP_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCopyablePtr< six::CompositeSCP >::reset(six::CompositeSCP *)\n"
    "    mem::ScopedCopyablePtr< six::CompositeSCP >::reset()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCopyableCompositeSCP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CompositeSCP > *arg1 = (mem::ScopedCopyablePtr< six::CompositeSCP > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCopyableCompositeSCP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCopyableCompositeSCP" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CompositeSCP > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CompositeSCP > * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCompositeSCP_scpType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CompositeSCP > *arg1 = (mem::ScopedCopyablePtr< six::CompositeSCP > *) 0 ;
  six::CompositeSCP::SCPType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableCompositeSCP_scpType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCompositeSCP_scpType_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CompositeSCP > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CompositeSCP > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableCompositeSCP_scpType_set" "', argument " "2"" of type '" "six::CompositeSCP::SCPType""'");
  } 
  arg2 = static_cast< six::CompositeSCP::SCPType >(val2);
  {
    try
    {
      if (arg1) (*arg1)->scpType = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCompositeSCP_scpType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CompositeSCP > *arg1 = (mem::ScopedCopyablePtr< six::CompositeSCP > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::CompositeSCP::SCPType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableCompositeSCP_scpType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCompositeSCP_scpType_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CompositeSCP > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CompositeSCP > * >(argp1);
  {
    try
    {
      result = (six::CompositeSCP::SCPType) ((*arg1)->scpType);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCompositeSCP_xErr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CompositeSCP > *arg1 = (mem::ScopedCopyablePtr< six::CompositeSCP > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableCompositeSCP_xErr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCompositeSCP_xErr_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CompositeSCP > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CompositeSCP > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableCompositeSCP_xErr_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (*arg1)->xErr = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCompositeSCP_xErr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CompositeSCP > *arg1 = (mem::ScopedCopyablePtr< six::CompositeSCP > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableCompositeSCP_xErr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCompositeSCP_xErr_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CompositeSCP > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CompositeSCP > * >(argp1);
  {
    try
    {
      result = (double) ((*arg1)->xErr);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCompositeSCP_yErr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CompositeSCP > *arg1 = (mem::ScopedCopyablePtr< six::CompositeSCP > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableCompositeSCP_yErr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCompositeSCP_yErr_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CompositeSCP > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CompositeSCP > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableCompositeSCP_yErr_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (*arg1)->yErr = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCompositeSCP_yErr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CompositeSCP > *arg1 = (mem::ScopedCopyablePtr< six::CompositeSCP > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableCompositeSCP_yErr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCompositeSCP_yErr_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CompositeSCP > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CompositeSCP > * >(argp1);
  {
    try
    {
      result = (double) ((*arg1)->yErr);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCompositeSCP_xyErr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CompositeSCP > *arg1 = (mem::ScopedCopyablePtr< six::CompositeSCP > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableCompositeSCP_xyErr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCompositeSCP_xyErr_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CompositeSCP > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CompositeSCP > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableCompositeSCP_xyErr_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try
    {
      if (arg1) (*arg1)->xyErr = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCompositeSCP_xyErr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CompositeSCP > *arg1 = (mem::ScopedCopyablePtr< six::CompositeSCP > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableCompositeSCP_xyErr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCompositeSCP_xyErr_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CompositeSCP > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CompositeSCP > * >(argp1);
  {
    try
    {
      result = (double) ((*arg1)->xyErr);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCompositeSCP___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CompositeSCP > *arg1 = (mem::ScopedCopyablePtr< six::CompositeSCP > *) 0 ;
  six::CompositeSCP *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableCompositeSCP___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCompositeSCP___eq__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CompositeSCP > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CompositeSCP > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__CompositeSCP,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableCompositeSCP___eq__" "', argument " "2"" of type '" "six::CompositeSCP const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCopyableCompositeSCP___eq__" "', argument " "2"" of type '" "six::CompositeSCP const &""'"); 
  }
  arg2 = reinterpret_cast< six::CompositeSCP * >(argp2);
  {
    try
    {
      result = (bool)(*arg1)->operator ==((six::CompositeSCP const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCompositeSCP___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CompositeSCP > *arg1 = (mem::ScopedCopyablePtr< six::CompositeSCP > *) 0 ;
  six::CompositeSCP *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableCompositeSCP___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCompositeSCP___ne__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CompositeSCP > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CompositeSCP > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__CompositeSCP,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableCompositeSCP___ne__" "', argument " "2"" of type '" "six::CompositeSCP const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCopyableCompositeSCP___ne__" "', argument " "2"" of type '" "six::CompositeSCP const &""'"); 
  }
  arg2 = reinterpret_cast< six::CompositeSCP * >(argp2);
  {
    try
    {
      result = (bool)(*arg1)->operator !=((six::CompositeSCP const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *ScopedCopyableCompositeSCP_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_makeScopedCopyableCompositeSCP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CompositeSCP > result;
  
  if (!PyArg_ParseTuple(args,(char *)":makeScopedCopyableCompositeSCP")) SWIG_fail;
  {
    try
    {
      result = makeScopedCopyableCompositeSCP();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new mem::ScopedCopyablePtr< six::CompositeSCP >(static_cast< const mem::ScopedCopyablePtr< six::CompositeSCP >& >(result))), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_StdAutoMatchInformation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::AutoPtr< six::MatchInformation > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_StdAutoMatchInformation")) SWIG_fail;
  {
    try
    {
      result = (mem::AutoPtr< six::MatchInformation > *)new mem::AutoPtr< six::MatchInformation >();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__auto_ptrT_six__MatchInformation_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_delete_StdAutoMatchInformation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::AutoPtr< six::MatchInformation > *arg1 = (mem::AutoPtr< six::MatchInformation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_StdAutoMatchInformation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__auto_ptrT_six__MatchInformation_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StdAutoMatchInformation" "', argument " "1"" of type '" "mem::AutoPtr< six::MatchInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::AutoPtr< six::MatchInformation > * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *StdAutoMatchInformation_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__auto_ptrT_six__MatchInformation_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCopyableMatchInformation__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MatchInformation *arg1 = (six::MatchInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::MatchInformation > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableMatchInformation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__MatchInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableMatchInformation" "', argument " "1"" of type '" "six::MatchInformation *""'"); 
  }
  arg1 = reinterpret_cast< six::MatchInformation * >(argp1);
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::MatchInformation > *)new mem::ScopedCopyablePtr< six::MatchInformation >(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchInformation_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableMatchInformation__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::MatchInformation > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCopyableMatchInformation")) SWIG_fail;
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::MatchInformation > *)new mem::ScopedCopyablePtr< six::MatchInformation >();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchInformation_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableMatchInformation__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::MatchInformation > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::MatchInformation > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableMatchInformation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchInformation_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableMatchInformation" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::MatchInformation > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCopyableMatchInformation" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::MatchInformation > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::MatchInformation > * >(argp1);
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::MatchInformation > *)new mem::ScopedCopyablePtr< six::MatchInformation >((mem::ScopedCopyablePtr< six::MatchInformation > const &)*arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchInformation_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableMatchInformation(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCopyableMatchInformation__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__MatchInformation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableMatchInformation__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchInformation_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableMatchInformation__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ScopedCopyableMatchInformation'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCopyablePtr< six::MatchInformation >::ScopedCopyablePtr(six::MatchInformation *)\n"
    "    mem::ScopedCopyablePtr< six::MatchInformation >::ScopedCopyablePtr()\n"
    "    mem::ScopedCopyablePtr< six::MatchInformation >::ScopedCopyablePtr(mem::ScopedCopyablePtr< six::MatchInformation > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableMatchInformation___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::MatchInformation > *arg1 = (mem::ScopedCopyablePtr< six::MatchInformation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableMatchInformation___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableMatchInformation___nonzero__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::MatchInformation > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::MatchInformation > * >(argp1);
  {
    try
    {
      result = (bool)((mem::ScopedCopyablePtr< six::MatchInformation > const *)arg1)->operator bool();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableMatchInformation_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::MatchInformation > *arg1 = (mem::ScopedCopyablePtr< six::MatchInformation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::MatchInformation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableMatchInformation_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableMatchInformation_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::MatchInformation > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::MatchInformation > * >(argp1);
  {
    try
    {
      result = (six::MatchInformation *)((mem::ScopedCopyablePtr< six::MatchInformation > const *)arg1)->get();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__MatchInformation, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableMatchInformation___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::MatchInformation > *arg1 = (mem::ScopedCopyablePtr< six::MatchInformation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::MatchInformation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableMatchInformation___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableMatchInformation___ref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::MatchInformation > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::MatchInformation > * >(argp1);
  {
    try
    {
      result = (six::MatchInformation *) &((mem::ScopedCopyablePtr< six::MatchInformation > const *)arg1)->operator *();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__MatchInformation, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableMatchInformation___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::MatchInformation > *arg1 = (mem::ScopedCopyablePtr< six::MatchInformation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::MatchInformation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableMatchInformation___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableMatchInformation___deref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::MatchInformation > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::MatchInformation > * >(argp1);
  {
    try
    {
      result = (six::MatchInformation *)((mem::ScopedCopyablePtr< six::MatchInformation > const *)arg1)->operator ->();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__MatchInformation, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableMatchInformation_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::MatchInformation > *arg1 = (mem::ScopedCopyablePtr< six::MatchInformation > *) 0 ;
  six::MatchInformation *arg2 = (six::MatchInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableMatchInformation_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableMatchInformation_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::MatchInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::MatchInformation > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__MatchInformation, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableMatchInformation_reset" "', argument " "2"" of type '" "six::MatchInformation *""'"); 
  }
  arg2 = reinterpret_cast< six::MatchInformation * >(argp2);
  {
    try
    {
      (arg1)->reset(arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableMatchInformation_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::MatchInformation > *arg1 = (mem::ScopedCopyablePtr< six::MatchInformation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableMatchInformation_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableMatchInformation_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::MatchInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::MatchInformation > * >(argp1);
  {
    try
    {
      (arg1)->reset();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableMatchInformation_reset(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchInformation_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCopyableMatchInformation_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchInformation_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__MatchInformation, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCopyableMatchInformation_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ScopedCopyableMatchInformation_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCopyablePtr< six::MatchInformation >::reset(six::MatchInformation *)\n"
    "    mem::ScopedCopyablePtr< six::MatchInformation >::reset()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCopyableMatchInformation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::MatchInformation > *arg1 = (mem::ScopedCopyablePtr< six::MatchInformation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCopyableMatchInformation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchInformation_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCopyableMatchInformation" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::MatchInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::MatchInformation > * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableMatchInformation_types_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::MatchInformation > *arg1 = (mem::ScopedCopyablePtr< six::MatchInformation > *) 0 ;
  std::vector< six::MatchType,std::allocator< six::MatchType > > *arg2 = (std::vector< six::MatchType,std::allocator< six::MatchType > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableMatchInformation_types_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableMatchInformation_types_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::MatchInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::MatchInformation > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableMatchInformation_types_set" "', argument " "2"" of type '" "std::vector< six::MatchType,std::allocator< six::MatchType > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< six::MatchType,std::allocator< six::MatchType > > * >(argp2);
  {
    try
    {
      if (arg1) (*arg1)->types = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableMatchInformation_types_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::MatchInformation > *arg1 = (mem::ScopedCopyablePtr< six::MatchInformation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::MatchType,std::allocator< six::MatchType > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableMatchInformation_types_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableMatchInformation_types_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::MatchInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::MatchInformation > * >(argp1);
  {
    try
    {
      result = (std::vector< six::MatchType,std::allocator< six::MatchType > > *)& ((*arg1)->types);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableMatchInformation___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::MatchInformation > *arg1 = (mem::ScopedCopyablePtr< six::MatchInformation > *) 0 ;
  six::MatchInformation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableMatchInformation___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableMatchInformation___eq__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::MatchInformation > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::MatchInformation > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__MatchInformation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableMatchInformation___eq__" "', argument " "2"" of type '" "six::MatchInformation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCopyableMatchInformation___eq__" "', argument " "2"" of type '" "six::MatchInformation const &""'"); 
  }
  arg2 = reinterpret_cast< six::MatchInformation * >(argp2);
  {
    try
    {
      result = (bool)(*arg1)->operator ==((six::MatchInformation const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableMatchInformation___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::MatchInformation > *arg1 = (mem::ScopedCopyablePtr< six::MatchInformation > *) 0 ;
  six::MatchInformation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableMatchInformation___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableMatchInformation___ne__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::MatchInformation > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::MatchInformation > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__MatchInformation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableMatchInformation___ne__" "', argument " "2"" of type '" "six::MatchInformation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCopyableMatchInformation___ne__" "', argument " "2"" of type '" "six::MatchInformation const &""'"); 
  }
  arg2 = reinterpret_cast< six::MatchInformation * >(argp2);
  {
    try
    {
      result = (bool)(*arg1)->operator !=((six::MatchInformation const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *ScopedCopyableMatchInformation_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchInformation_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_makeScopedCopyableMatchInformation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::MatchInformation > result;
  
  if (!PyArg_ParseTuple(args,(char *)":makeScopedCopyableMatchInformation")) SWIG_fail;
  {
    try
    {
      result = makeScopedCopyableMatchInformation();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new mem::ScopedCopyablePtr< six::MatchInformation >(static_cast< const mem::ScopedCopyablePtr< six::MatchInformation >& >(result))), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchInformation_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_StdAutoMatchType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::AutoPtr< six::MatchType > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_StdAutoMatchType")) SWIG_fail;
  {
    try
    {
      result = (mem::AutoPtr< six::MatchType > *)new mem::AutoPtr< six::MatchType >();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__auto_ptrT_six__MatchType_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_delete_StdAutoMatchType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::AutoPtr< six::MatchType > *arg1 = (mem::AutoPtr< six::MatchType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_StdAutoMatchType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__auto_ptrT_six__MatchType_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StdAutoMatchType" "', argument " "1"" of type '" "mem::AutoPtr< six::MatchType > *""'"); 
  }
  arg1 = reinterpret_cast< mem::AutoPtr< six::MatchType > * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *StdAutoMatchType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__auto_ptrT_six__MatchType_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCopyableMatchType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::MatchType *arg1 = (six::MatchType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::MatchType > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableMatchType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__MatchType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableMatchType" "', argument " "1"" of type '" "six::MatchType *""'"); 
  }
  arg1 = reinterpret_cast< six::MatchType * >(argp1);
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::MatchType > *)new mem::ScopedCopyablePtr< six::MatchType >(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchType_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableMatchType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::MatchType > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCopyableMatchType")) SWIG_fail;
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::MatchType > *)new mem::ScopedCopyablePtr< six::MatchType >();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchType_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableMatchType__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::MatchType > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::MatchType > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableMatchType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchType_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableMatchType" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::MatchType > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCopyableMatchType" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::MatchType > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::MatchType > * >(argp1);
  {
    try
    {
      result = (mem::ScopedCopyablePtr< six::MatchType > *)new mem::ScopedCopyablePtr< six::MatchType >((mem::ScopedCopyablePtr< six::MatchType > const &)*arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchType_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableMatchType(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCopyableMatchType__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__MatchType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableMatchType__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchType_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableMatchType__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ScopedCopyableMatchType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCopyablePtr< six::MatchType >::ScopedCopyablePtr(six::MatchType *)\n"
    "    mem::ScopedCopyablePtr< six::MatchType >::ScopedCopyablePtr()\n"
    "    mem::ScopedCopyablePtr< six::MatchType >::ScopedCopyablePtr(mem::ScopedCopyablePtr< six::MatchType > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableMatchType___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::MatchType > *arg1 = (mem::ScopedCopyablePtr< six::MatchType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableMatchType___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableMatchType___nonzero__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::MatchType > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::MatchType > * >(argp1);
  {
    try
    {
      result = (bool)((mem::ScopedCopyablePtr< six::MatchType > const *)arg1)->operator bool();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableMatchType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::MatchType > *arg1 = (mem::ScopedCopyablePtr< six::MatchType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::MatchType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableMatchType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableMatchType_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::MatchType > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::MatchType > * >(argp1);
  {
    try
    {
      result = (six::MatchType *)((mem::ScopedCopyablePtr< six::MatchType > const *)arg1)->get();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__MatchType, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableMatchType___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::MatchType > *arg1 = (mem::ScopedCopyablePtr< six::MatchType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::MatchType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableMatchType___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableMatchType___ref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::MatchType > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::MatchType > * >(argp1);
  {
    try
    {
      result = (six::MatchType *) &((mem::ScopedCopyablePtr< six::MatchType > const *)arg1)->operator *();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__MatchType, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableMatchType___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::MatchType > *arg1 = (mem::ScopedCopyablePtr< six::MatchType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::MatchType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableMatchType___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableMatchType___deref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::MatchType > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::MatchType > * >(argp1);
  {
    try
    {
      result = (six::MatchType *)((mem::ScopedCopyablePtr< six::MatchType > const *)arg1)->operator ->();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__MatchType, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableMatchType_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::MatchType > *arg1 = (mem::ScopedCopyablePtr< six::MatchType > *) 0 ;
  six::MatchType *arg2 = (six::MatchType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableMatchType_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableMatchType_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::MatchType > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::MatchType > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__MatchType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableMatchType_reset" "', argument " "2"" of type '" "six::MatchType *""'"); 
  }
  arg2 = reinterpret_cast< six::MatchType * >(argp2);
  {
    try
    {
      (arg1)->reset(arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableMatchType_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::MatchType > *arg1 = (mem::ScopedCopyablePtr< six::MatchType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableMatchType_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableMatchType_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::MatchType > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::MatchType > * >(argp1);
  {
    try
    {
      (arg1)->reset();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableMatchType_reset(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchType_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCopyableMatchType_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchType_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__MatchType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCopyableMatchType_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ScopedCopyableMatchType_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCopyablePtr< six::MatchType >::reset(six::MatchType *)\n"
    "    mem::ScopedCopyablePtr< six::MatchType >::reset()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCopyableMatchType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::MatchType > *arg1 = (mem::ScopedCopyablePtr< six::MatchType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCopyableMatchType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchType_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCopyableMatchType" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::MatchType > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::MatchType > * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableMatchType_collectorName_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::MatchType > *arg1 = (mem::ScopedCopyablePtr< six::MatchType > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableMatchType_collectorName_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableMatchType_collectorName_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::MatchType > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::MatchType > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableMatchType_collectorName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCopyableMatchType_collectorName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try
    {
      if (arg1) (*arg1)->collectorName = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableMatchType_collectorName_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::MatchType > *arg1 = (mem::ScopedCopyablePtr< six::MatchType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableMatchType_collectorName_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableMatchType_collectorName_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::MatchType > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::MatchType > * >(argp1);
  {
    try
    {
      result = (std::string *) & ((*arg1)->collectorName);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableMatchType_illuminatorName_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::MatchType > *arg1 = (mem::ScopedCopyablePtr< six::MatchType > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableMatchType_illuminatorName_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableMatchType_illuminatorName_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::MatchType > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::MatchType > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableMatchType_illuminatorName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCopyableMatchType_illuminatorName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try
    {
      if (arg1) (*arg1)->illuminatorName = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableMatchType_illuminatorName_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::MatchType > *arg1 = (mem::ScopedCopyablePtr< six::MatchType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableMatchType_illuminatorName_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableMatchType_illuminatorName_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::MatchType > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::MatchType > * >(argp1);
  {
    try
    {
      result = (std::string *) & ((*arg1)->illuminatorName);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableMatchType_matchType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::MatchType > *arg1 = (mem::ScopedCopyablePtr< six::MatchType > *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = (std::vector< std::string,std::allocator< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableMatchType_matchType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableMatchType_matchType_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::MatchType > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::MatchType > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableMatchType_matchType_set" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string,std::allocator< std::string > > * >(argp2);
  {
    try
    {
      if (arg1) (*arg1)->matchType = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableMatchType_matchType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::MatchType > *arg1 = (mem::ScopedCopyablePtr< six::MatchType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableMatchType_matchType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableMatchType_matchType_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::MatchType > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::MatchType > * >(argp1);
  {
    try
    {
      result = (std::vector< std::string,std::allocator< std::string > > *)& ((*arg1)->matchType);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableMatchType_typeID_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::MatchType > *arg1 = (mem::ScopedCopyablePtr< six::MatchType > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableMatchType_typeID_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableMatchType_typeID_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::MatchType > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::MatchType > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableMatchType_typeID_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCopyableMatchType_typeID_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try
    {
      if (arg1) (*arg1)->typeID = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableMatchType_typeID_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::MatchType > *arg1 = (mem::ScopedCopyablePtr< six::MatchType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableMatchType_typeID_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableMatchType_typeID_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::MatchType > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::MatchType > * >(argp1);
  {
    try
    {
      result = (std::string *) & ((*arg1)->typeID);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableMatchType_currentIndex_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::MatchType > *arg1 = (mem::ScopedCopyablePtr< six::MatchType > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableMatchType_currentIndex_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableMatchType_currentIndex_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::MatchType > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::MatchType > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableMatchType_currentIndex_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try
    {
      if (arg1) (*arg1)->currentIndex = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableMatchType_currentIndex_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::MatchType > *arg1 = (mem::ScopedCopyablePtr< six::MatchType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableMatchType_currentIndex_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableMatchType_currentIndex_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::MatchType > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::MatchType > * >(argp1);
  {
    try
    {
      result = (int) ((*arg1)->currentIndex);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableMatchType_matchCollects_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::MatchType > *arg1 = (mem::ScopedCopyablePtr< six::MatchType > *) 0 ;
  std::vector< six::MatchCollect,std::allocator< six::MatchCollect > > *arg2 = (std::vector< six::MatchCollect,std::allocator< six::MatchCollect > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableMatchType_matchCollects_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableMatchType_matchCollects_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::MatchType > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::MatchType > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableMatchType_matchCollects_set" "', argument " "2"" of type '" "std::vector< six::MatchCollect,std::allocator< six::MatchCollect > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< six::MatchCollect,std::allocator< six::MatchCollect > > * >(argp2);
  {
    try
    {
      if (arg1) (*arg1)->matchCollects = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableMatchType_matchCollects_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::MatchType > *arg1 = (mem::ScopedCopyablePtr< six::MatchType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::MatchCollect,std::allocator< six::MatchCollect > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableMatchType_matchCollects_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableMatchType_matchCollects_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::MatchType > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::MatchType > * >(argp1);
  {
    try
    {
      result = (std::vector< six::MatchCollect,std::allocator< six::MatchCollect > > *)& ((*arg1)->matchCollects);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableMatchType___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::MatchType > *arg1 = (mem::ScopedCopyablePtr< six::MatchType > *) 0 ;
  six::MatchType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableMatchType___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableMatchType___eq__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::MatchType > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::MatchType > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__MatchType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableMatchType___eq__" "', argument " "2"" of type '" "six::MatchType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCopyableMatchType___eq__" "', argument " "2"" of type '" "six::MatchType const &""'"); 
  }
  arg2 = reinterpret_cast< six::MatchType * >(argp2);
  {
    try
    {
      result = (bool)(*arg1)->operator ==((six::MatchType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableMatchType___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::MatchType > *arg1 = (mem::ScopedCopyablePtr< six::MatchType > *) 0 ;
  six::MatchType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableMatchType___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableMatchType___ne__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::MatchType > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::MatchType > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__MatchType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableMatchType___ne__" "', argument " "2"" of type '" "six::MatchType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCopyableMatchType___ne__" "', argument " "2"" of type '" "six::MatchType const &""'"); 
  }
  arg2 = reinterpret_cast< six::MatchType * >(argp2);
  {
    try
    {
      result = (bool)(*arg1)->operator !=((six::MatchType const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *ScopedCopyableMatchType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchType_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_makeScopedCopyableMatchType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::MatchType > result;
  
  if (!PyArg_ParseTuple(args,(char *)":makeScopedCopyableMatchType")) SWIG_fail;
  {
    try
    {
      result = makeScopedCopyableMatchType();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new mem::ScopedCopyablePtr< six::MatchType >(static_cast< const mem::ScopedCopyablePtr< six::MatchType >& >(result))), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__MatchType_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_StdAutoAmplitudeTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::AutoPtr< six::AmplitudeTable > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_StdAutoAmplitudeTable")) SWIG_fail;
  {
    try
    {
      result = (mem::AutoPtr< six::AmplitudeTable > *)new mem::AutoPtr< six::AmplitudeTable >();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__auto_ptrT_six__AmplitudeTable_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_delete_StdAutoAmplitudeTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::AutoPtr< six::AmplitudeTable > *arg1 = (mem::AutoPtr< six::AmplitudeTable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_StdAutoAmplitudeTable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__auto_ptrT_six__AmplitudeTable_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StdAutoAmplitudeTable" "', argument " "1"" of type '" "mem::AutoPtr< six::AmplitudeTable > *""'"); 
  }
  arg1 = reinterpret_cast< mem::AutoPtr< six::AmplitudeTable > * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *StdAutoAmplitudeTable_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__auto_ptrT_six__AmplitudeTable_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCloneableAmplitudeTable__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::AmplitudeTable *arg1 = (six::AmplitudeTable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::AmplitudeTable > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCloneableAmplitudeTable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__AmplitudeTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCloneableAmplitudeTable" "', argument " "1"" of type '" "six::AmplitudeTable *""'"); 
  }
  arg1 = reinterpret_cast< six::AmplitudeTable * >(argp1);
  {
    try
    {
      result = (mem::ScopedCloneablePtr< six::AmplitudeTable > *)new mem::ScopedCloneablePtr< six::AmplitudeTable >(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__AmplitudeTable_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneableAmplitudeTable__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::AmplitudeTable > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCloneableAmplitudeTable")) SWIG_fail;
  {
    try
    {
      result = (mem::ScopedCloneablePtr< six::AmplitudeTable > *)new mem::ScopedCloneablePtr< six::AmplitudeTable >();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__AmplitudeTable_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneableAmplitudeTable__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::AmplitudeTable > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::AmplitudeTable > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCloneableAmplitudeTable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__AmplitudeTable_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCloneableAmplitudeTable" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::AmplitudeTable > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCloneableAmplitudeTable" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::AmplitudeTable > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::AmplitudeTable > * >(argp1);
  {
    try
    {
      result = (mem::ScopedCloneablePtr< six::AmplitudeTable > *)new mem::ScopedCloneablePtr< six::AmplitudeTable >((mem::ScopedCloneablePtr< six::AmplitudeTable > const &)*arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__AmplitudeTable_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneableAmplitudeTable(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCloneableAmplitudeTable__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__AmplitudeTable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCloneableAmplitudeTable__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__AmplitudeTable_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCloneableAmplitudeTable__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ScopedCloneableAmplitudeTable'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCloneablePtr< six::AmplitudeTable >::ScopedCloneablePtr(six::AmplitudeTable *)\n"
    "    mem::ScopedCloneablePtr< six::AmplitudeTable >::ScopedCloneablePtr()\n"
    "    mem::ScopedCloneablePtr< six::AmplitudeTable >::ScopedCloneablePtr(mem::ScopedCloneablePtr< six::AmplitudeTable > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableAmplitudeTable_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::AmplitudeTable > *arg1 = (mem::ScopedCloneablePtr< six::AmplitudeTable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::AmplitudeTable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableAmplitudeTable_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__AmplitudeTable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableAmplitudeTable_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::AmplitudeTable > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::AmplitudeTable > * >(argp1);
  {
    try
    {
      result = (six::AmplitudeTable *)((mem::ScopedCloneablePtr< six::AmplitudeTable > const *)arg1)->get();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__AmplitudeTable, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableAmplitudeTable___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::AmplitudeTable > *arg1 = (mem::ScopedCloneablePtr< six::AmplitudeTable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::AmplitudeTable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableAmplitudeTable___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__AmplitudeTable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableAmplitudeTable___ref__" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::AmplitudeTable > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::AmplitudeTable > * >(argp1);
  {
    try
    {
      result = (six::AmplitudeTable *) &((mem::ScopedCloneablePtr< six::AmplitudeTable > const *)arg1)->operator *();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__AmplitudeTable, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableAmplitudeTable___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::AmplitudeTable > *arg1 = (mem::ScopedCloneablePtr< six::AmplitudeTable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::AmplitudeTable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableAmplitudeTable___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__AmplitudeTable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableAmplitudeTable___deref__" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::AmplitudeTable > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::AmplitudeTable > * >(argp1);
  {
    try
    {
      result = (six::AmplitudeTable *)((mem::ScopedCloneablePtr< six::AmplitudeTable > const *)arg1)->operator ->();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__AmplitudeTable, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableAmplitudeTable_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::AmplitudeTable > *arg1 = (mem::ScopedCloneablePtr< six::AmplitudeTable > *) 0 ;
  six::AmplitudeTable *arg2 = (six::AmplitudeTable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableAmplitudeTable_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__AmplitudeTable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableAmplitudeTable_reset" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::AmplitudeTable > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::AmplitudeTable > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__AmplitudeTable, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableAmplitudeTable_reset" "', argument " "2"" of type '" "six::AmplitudeTable *""'"); 
  }
  arg2 = reinterpret_cast< six::AmplitudeTable * >(argp2);
  {
    try
    {
      (arg1)->reset(arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableAmplitudeTable_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::AmplitudeTable > *arg1 = (mem::ScopedCloneablePtr< six::AmplitudeTable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableAmplitudeTable_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__AmplitudeTable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableAmplitudeTable_reset" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::AmplitudeTable > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::AmplitudeTable > * >(argp1);
  {
    try
    {
      (arg1)->reset();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableAmplitudeTable_reset(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__AmplitudeTable_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCloneableAmplitudeTable_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__AmplitudeTable_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__AmplitudeTable, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCloneableAmplitudeTable_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ScopedCloneableAmplitudeTable_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCloneablePtr< six::AmplitudeTable >::reset(six::AmplitudeTable *)\n"
    "    mem::ScopedCloneablePtr< six::AmplitudeTable >::reset()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableAmplitudeTable___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::AmplitudeTable > *arg1 = (mem::ScopedCloneablePtr< six::AmplitudeTable > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableAmplitudeTable___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__AmplitudeTable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableAmplitudeTable___getitem__" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::AmplitudeTable > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::AmplitudeTable > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCloneableAmplitudeTable___getitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      result = (double)mem_ScopedCloneablePtr_Sl_six_AmplitudeTable_Sg____getitem__((mem::ScopedCloneablePtr< six::AmplitudeTable > const *)arg1,arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableAmplitudeTable___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::AmplitudeTable > *arg1 = (mem::ScopedCloneablePtr< six::AmplitudeTable > *) 0 ;
  size_t arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ScopedCloneableAmplitudeTable___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__AmplitudeTable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableAmplitudeTable___setitem__" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::AmplitudeTable > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::AmplitudeTable > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCloneableAmplitudeTable___setitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ScopedCloneableAmplitudeTable___setitem__" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try
    {
      mem_ScopedCloneablePtr_Sl_six_AmplitudeTable_Sg____setitem__(arg1,arg2,arg3);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCloneableAmplitudeTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::AmplitudeTable > *arg1 = (mem::ScopedCloneablePtr< six::AmplitudeTable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCloneableAmplitudeTable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__AmplitudeTable_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCloneableAmplitudeTable" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::AmplitudeTable > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::AmplitudeTable > * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableAmplitudeTable___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::AmplitudeTable > *arg1 = (mem::ScopedCloneablePtr< six::AmplitudeTable > *) 0 ;
  six::AmplitudeTable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableAmplitudeTable___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__AmplitudeTable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableAmplitudeTable___eq__" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::AmplitudeTable > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::AmplitudeTable > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__AmplitudeTable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableAmplitudeTable___eq__" "', argument " "2"" of type '" "six::AmplitudeTable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCloneableAmplitudeTable___eq__" "', argument " "2"" of type '" "six::AmplitudeTable const &""'"); 
  }
  arg2 = reinterpret_cast< six::AmplitudeTable * >(argp2);
  {
    try
    {
      result = (bool)(*arg1)->operator ==((six::AmplitudeTable const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableAmplitudeTable___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::AmplitudeTable > *arg1 = (mem::ScopedCloneablePtr< six::AmplitudeTable > *) 0 ;
  six::AmplitudeTable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableAmplitudeTable___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__AmplitudeTable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableAmplitudeTable___ne__" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::AmplitudeTable > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::AmplitudeTable > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__AmplitudeTable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableAmplitudeTable___ne__" "', argument " "2"" of type '" "six::AmplitudeTable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCloneableAmplitudeTable___ne__" "', argument " "2"" of type '" "six::AmplitudeTable const &""'"); 
  }
  arg2 = reinterpret_cast< six::AmplitudeTable * >(argp2);
  {
    try
    {
      result = (bool)(*arg1)->operator !=((six::AmplitudeTable const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableAmplitudeTable_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::AmplitudeTable > *arg1 = (mem::ScopedCloneablePtr< six::AmplitudeTable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::AmplitudeTable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableAmplitudeTable_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__AmplitudeTable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableAmplitudeTable_clone" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::AmplitudeTable > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::AmplitudeTable > * >(argp1);
  {
    try
    {
      result = (six::AmplitudeTable *)(*arg1)->clone();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__AmplitudeTable, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableAmplitudeTable_table_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::AmplitudeTable > *arg1 = (mem::ScopedCloneablePtr< six::AmplitudeTable > *) 0 ;
  std::vector< unsigned char,std::allocator< unsigned char > > *arg2 = (std::vector< unsigned char,std::allocator< unsigned char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableAmplitudeTable_table_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__AmplitudeTable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableAmplitudeTable_table_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::AmplitudeTable > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::AmplitudeTable > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableAmplitudeTable_table_set" "', argument " "2"" of type '" "std::vector< unsigned char,std::allocator< unsigned char > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< unsigned char,std::allocator< unsigned char > > * >(argp2);
  {
    try
    {
      if (arg1) (*arg1)->table = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableAmplitudeTable_table_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::AmplitudeTable > *arg1 = (mem::ScopedCloneablePtr< six::AmplitudeTable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< unsigned char,std::allocator< unsigned char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableAmplitudeTable_table_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__AmplitudeTable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableAmplitudeTable_table_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::AmplitudeTable > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::AmplitudeTable > * >(argp1);
  {
    try
    {
      result = (std::vector< unsigned char,std::allocator< unsigned char > > *)& ((*arg1)->table);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableAmplitudeTable_numEntries_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::AmplitudeTable > *arg1 = (mem::ScopedCloneablePtr< six::AmplitudeTable > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableAmplitudeTable_numEntries_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__AmplitudeTable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableAmplitudeTable_numEntries_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::AmplitudeTable > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::AmplitudeTable > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCloneableAmplitudeTable_numEntries_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      if (arg1) (*arg1)->numEntries = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableAmplitudeTable_numEntries_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::AmplitudeTable > *arg1 = (mem::ScopedCloneablePtr< six::AmplitudeTable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableAmplitudeTable_numEntries_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__AmplitudeTable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableAmplitudeTable_numEntries_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::AmplitudeTable > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::AmplitudeTable > * >(argp1);
  {
    try
    {
      result =  ((*arg1)->numEntries);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableAmplitudeTable_elementSize_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::AmplitudeTable > *arg1 = (mem::ScopedCloneablePtr< six::AmplitudeTable > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableAmplitudeTable_elementSize_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__AmplitudeTable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableAmplitudeTable_elementSize_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::AmplitudeTable > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::AmplitudeTable > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCloneableAmplitudeTable_elementSize_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try
    {
      if (arg1) (*arg1)->elementSize = arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableAmplitudeTable_elementSize_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::AmplitudeTable > *arg1 = (mem::ScopedCloneablePtr< six::AmplitudeTable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableAmplitudeTable_elementSize_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__AmplitudeTable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableAmplitudeTable_elementSize_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::AmplitudeTable > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::AmplitudeTable > * >(argp1);
  {
    try
    {
      result =  ((*arg1)->elementSize);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableAmplitudeTable_getTable__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::AmplitudeTable > *arg1 = (mem::ScopedCloneablePtr< six::AmplitudeTable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableAmplitudeTable_getTable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__AmplitudeTable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableAmplitudeTable_getTable" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::AmplitudeTable > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::AmplitudeTable > * >(argp1);
  {
    try
    {
      result = (unsigned char *)(*arg1)->getTable();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableAmplitudeTable_getTable__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::AmplitudeTable > *arg1 = (mem::ScopedCloneablePtr< six::AmplitudeTable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableAmplitudeTable_getTable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__AmplitudeTable_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableAmplitudeTable_getTable" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::AmplitudeTable > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::AmplitudeTable > * >(argp1);
  {
    try
    {
      result = (unsigned char *)(*arg1)->getTable();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableAmplitudeTable_getTable(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__AmplitudeTable_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCloneableAmplitudeTable_getTable__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__AmplitudeTable_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCloneableAmplitudeTable_getTable__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ScopedCloneableAmplitudeTable_getTable'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::LUT::getTable()\n"
    "    six::LUT::getTable() const\n");
  return 0;
}


SWIGINTERN PyObject *ScopedCloneableAmplitudeTable_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCloneablePtrT_six__AmplitudeTable_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_makeScopedCloneableAmplitudeTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::AmplitudeTable > result;
  
  if (!PyArg_ParseTuple(args,(char *)":makeScopedCloneableAmplitudeTable")) SWIG_fail;
  {
    try
    {
      result = makeScopedCloneableAmplitudeTable();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new mem::ScopedCloneablePtr< six::AmplitudeTable >(static_cast< const mem::ScopedCloneablePtr< six::AmplitudeTable >& >(result))), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__AmplitudeTable_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_StdAutoCollectionInformation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::AutoPtr< six::CollectionInformation > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_StdAutoCollectionInformation")) SWIG_fail;
  {
    try
    {
      result = (mem::AutoPtr< six::CollectionInformation > *)new mem::AutoPtr< six::CollectionInformation >();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__auto_ptrT_six__CollectionInformation_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_delete_StdAutoCollectionInformation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::AutoPtr< six::CollectionInformation > *arg1 = (mem::AutoPtr< six::CollectionInformation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_StdAutoCollectionInformation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__auto_ptrT_six__CollectionInformation_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StdAutoCollectionInformation" "', argument " "1"" of type '" "mem::AutoPtr< six::CollectionInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::AutoPtr< six::CollectionInformation > * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *StdAutoCollectionInformation_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__auto_ptrT_six__CollectionInformation_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCloneableCollectionInformation__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CollectionInformation *arg1 = (six::CollectionInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::CollectionInformation > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCloneableCollectionInformation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CollectionInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCloneableCollectionInformation" "', argument " "1"" of type '" "six::CollectionInformation *""'"); 
  }
  arg1 = reinterpret_cast< six::CollectionInformation * >(argp1);
  {
    try
    {
      result = (mem::ScopedCloneablePtr< six::CollectionInformation > *)new mem::ScopedCloneablePtr< six::CollectionInformation >(arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__CollectionInformation_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneableCollectionInformation__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::CollectionInformation > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCloneableCollectionInformation")) SWIG_fail;
  {
    try
    {
      result = (mem::ScopedCloneablePtr< six::CollectionInformation > *)new mem::ScopedCloneablePtr< six::CollectionInformation >();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__CollectionInformation_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneableCollectionInformation__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::CollectionInformation > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::CollectionInformation > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCloneableCollectionInformation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__CollectionInformation_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCloneableCollectionInformation" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::CollectionInformation > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCloneableCollectionInformation" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::CollectionInformation > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::CollectionInformation > * >(argp1);
  {
    try
    {
      result = (mem::ScopedCloneablePtr< six::CollectionInformation > *)new mem::ScopedCloneablePtr< six::CollectionInformation >((mem::ScopedCloneablePtr< six::CollectionInformation > const &)*arg1);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__CollectionInformation_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneableCollectionInformation(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCloneableCollectionInformation__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__CollectionInformation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCloneableCollectionInformation__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__CollectionInformation_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCloneableCollectionInformation__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ScopedCloneableCollectionInformation'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCloneablePtr< six::CollectionInformation >::ScopedCloneablePtr(six::CollectionInformation *)\n"
    "    mem::ScopedCloneablePtr< six::CollectionInformation >::ScopedCloneablePtr()\n"
    "    mem::ScopedCloneablePtr< six::CollectionInformation >::ScopedCloneablePtr(mem::ScopedCloneablePtr< six::CollectionInformation > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::CollectionInformation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::CollectionInformation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableCollectionInformation_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::CollectionInformation > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::CollectionInformation > * >(argp1);
  {
    try
    {
      result = (six::CollectionInformation *)((mem::ScopedCloneablePtr< six::CollectionInformation > const *)arg1)->get();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__CollectionInformation, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::CollectionInformation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::CollectionInformation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableCollectionInformation___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation___ref__" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::CollectionInformation > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::CollectionInformation > * >(argp1);
  {
    try
    {
      result = (six::CollectionInformation *) &((mem::ScopedCloneablePtr< six::CollectionInformation > const *)arg1)->operator *();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__CollectionInformation, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::CollectionInformation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::CollectionInformation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableCollectionInformation___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation___deref__" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::CollectionInformation > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::CollectionInformation > * >(argp1);
  {
    try
    {
      result = (six::CollectionInformation *)((mem::ScopedCloneablePtr< six::CollectionInformation > const *)arg1)->operator ->();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__CollectionInformation, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::CollectionInformation > *) 0 ;
  six::CollectionInformation *arg2 = (six::CollectionInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableCollectionInformation_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation_reset" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::CollectionInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::CollectionInformation > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__CollectionInformation, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableCollectionInformation_reset" "', argument " "2"" of type '" "six::CollectionInformation *""'"); 
  }
  arg2 = reinterpret_cast< six::CollectionInformation * >(argp2);
  {
    try
    {
      (arg1)->reset(arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::CollectionInformation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableCollectionInformation_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation_reset" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::CollectionInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::CollectionInformation > * >(argp1);
  {
    try
    {
      (arg1)->reset();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation_reset(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__CollectionInformation_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCloneableCollectionInformation_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__CollectionInformation_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__CollectionInformation, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCloneableCollectionInformation_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ScopedCloneableCollectionInformation_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCloneablePtr< six::CollectionInformation >::reset(six::CollectionInformation *)\n"
    "    mem::ScopedCloneablePtr< six::CollectionInformation >::reset()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCloneableCollectionInformation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::CollectionInformation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCloneableCollectionInformation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__CollectionInformation_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCloneableCollectionInformation" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::CollectionInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::CollectionInformation > * >(argp1);
  {
    try
    {
      delete arg1;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation_collectorName_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::CollectionInformation > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableCollectionInformation_collectorName_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation_collectorName_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::CollectionInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::CollectionInformation > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableCollectionInformation_collectorName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCloneableCollectionInformation_collectorName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try
    {
      if (arg1) (*arg1)->collectorName = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation_collectorName_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::CollectionInformation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableCollectionInformation_collectorName_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation_collectorName_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::CollectionInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::CollectionInformation > * >(argp1);
  {
    try
    {
      result = (std::string *) & ((*arg1)->collectorName);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation_illuminatorName_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::CollectionInformation > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableCollectionInformation_illuminatorName_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation_illuminatorName_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::CollectionInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::CollectionInformation > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableCollectionInformation_illuminatorName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCloneableCollectionInformation_illuminatorName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try
    {
      if (arg1) (*arg1)->illuminatorName = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation_illuminatorName_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::CollectionInformation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableCollectionInformation_illuminatorName_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation_illuminatorName_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::CollectionInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::CollectionInformation > * >(argp1);
  {
    try
    {
      result = (std::string *) & ((*arg1)->illuminatorName);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation_coreName_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::CollectionInformation > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableCollectionInformation_coreName_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation_coreName_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::CollectionInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::CollectionInformation > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableCollectionInformation_coreName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCloneableCollectionInformation_coreName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try
    {
      if (arg1) (*arg1)->coreName = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation_coreName_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::CollectionInformation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableCollectionInformation_coreName_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation_coreName_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::CollectionInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::CollectionInformation > * >(argp1);
  {
    try
    {
      result = (std::string *) & ((*arg1)->coreName);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation_collectType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::CollectionInformation > *) 0 ;
  six::CollectType *arg2 = (six::CollectType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableCollectionInformation_collectType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation_collectType_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::CollectionInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::CollectionInformation > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__CollectType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableCollectionInformation_collectType_set" "', argument " "2"" of type '" "six::CollectType *""'"); 
  }
  arg2 = reinterpret_cast< six::CollectType * >(argp2);
  {
    try
    {
      if (arg1) (*arg1)->collectType = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation_collectType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::CollectionInformation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::CollectType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableCollectionInformation_collectType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation_collectType_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::CollectionInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::CollectionInformation > * >(argp1);
  {
    try
    {
      result = (six::CollectType *)& ((*arg1)->collectType);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__CollectType, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation_radarMode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::CollectionInformation > *) 0 ;
  six::RadarModeType *arg2 = (six::RadarModeType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableCollectionInformation_radarMode_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation_radarMode_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::CollectionInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::CollectionInformation > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__RadarModeType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableCollectionInformation_radarMode_set" "', argument " "2"" of type '" "six::RadarModeType *""'"); 
  }
  arg2 = reinterpret_cast< six::RadarModeType * >(argp2);
  {
    try
    {
      if (arg1) (*arg1)->radarMode = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation_radarMode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::CollectionInformation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::RadarModeType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableCollectionInformation_radarMode_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation_radarMode_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::CollectionInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::CollectionInformation > * >(argp1);
  {
    try
    {
      result = (six::RadarModeType *)& ((*arg1)->radarMode);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__RadarModeType, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation_radarModeID_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::CollectionInformation > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableCollectionInformation_radarModeID_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation_radarModeID_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::CollectionInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::CollectionInformation > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableCollectionInformation_radarModeID_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCloneableCollectionInformation_radarModeID_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try
    {
      if (arg1) (*arg1)->radarModeID = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation_radarModeID_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::CollectionInformation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableCollectionInformation_radarModeID_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation_radarModeID_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::CollectionInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::CollectionInformation > * >(argp1);
  {
    try
    {
      result = (std::string *) & ((*arg1)->radarModeID);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation_releaseInfo_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::CollectionInformation > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableCollectionInformation_releaseInfo_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation_releaseInfo_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::CollectionInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::CollectionInformation > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableCollectionInformation_releaseInfo_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCloneableCollectionInformation_releaseInfo_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try
    {
      if (arg1) (*arg1)->releaseInfo = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation_releaseInfo_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::CollectionInformation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableCollectionInformation_releaseInfo_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation_releaseInfo_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::CollectionInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::CollectionInformation > * >(argp1);
  {
    try
    {
      result = (std::string *) & ((*arg1)->releaseInfo);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation_countryCodes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::CollectionInformation > *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = (std::vector< std::string,std::allocator< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableCollectionInformation_countryCodes_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation_countryCodes_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::CollectionInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::CollectionInformation > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableCollectionInformation_countryCodes_set" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string,std::allocator< std::string > > * >(argp2);
  {
    try
    {
      if (arg1) (*arg1)->countryCodes = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation_countryCodes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::CollectionInformation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableCollectionInformation_countryCodes_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation_countryCodes_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::CollectionInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::CollectionInformation > * >(argp1);
  {
    try
    {
      result = (std::vector< std::string,std::allocator< std::string > > *)& ((*arg1)->countryCodes);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation_parameters_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::CollectionInformation > *) 0 ;
  six::ParameterCollection *arg2 = (six::ParameterCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableCollectionInformation_parameters_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation_parameters_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::CollectionInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::CollectionInformation > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__ParameterCollection, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableCollectionInformation_parameters_set" "', argument " "2"" of type '" "six::ParameterCollection *""'"); 
  }
  arg2 = reinterpret_cast< six::ParameterCollection * >(argp2);
  {
    try
    {
      if (arg1) (*arg1)->parameters = *arg2;
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation_parameters_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::CollectionInformation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::ParameterCollection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableCollectionInformation_parameters_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation_parameters_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::CollectionInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::CollectionInformation > * >(argp1);
  {
    try
    {
      result = (six::ParameterCollection *)& ((*arg1)->parameters);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__ParameterCollection, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::CollectionInformation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::CollectionInformation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableCollectionInformation_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation_clone" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::CollectionInformation > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::CollectionInformation > * >(argp1);
  {
    try
    {
      result = (six::CollectionInformation *)(*arg1)->clone();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__CollectionInformation, 0 |  0 );
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::CollectionInformation > *) 0 ;
  six::CollectionInformation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableCollectionInformation___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation___eq__" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::CollectionInformation > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::CollectionInformation > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__CollectionInformation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableCollectionInformation___eq__" "', argument " "2"" of type '" "six::CollectionInformation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCloneableCollectionInformation___eq__" "', argument " "2"" of type '" "six::CollectionInformation const &""'"); 
  }
  arg2 = reinterpret_cast< six::CollectionInformation * >(argp2);
  {
    try
    {
      result = (bool)(*arg1)->operator ==((six::CollectionInformation const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::CollectionInformation > *) 0 ;
  six::CollectionInformation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableCollectionInformation___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation___ne__" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::CollectionInformation > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::CollectionInformation > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__CollectionInformation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableCollectionInformation___ne__" "', argument " "2"" of type '" "six::CollectionInformation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCloneableCollectionInformation___ne__" "', argument " "2"" of type '" "six::CollectionInformation const &""'"); 
  }
  arg2 = reinterpret_cast< six::CollectionInformation * >(argp2);
  {
    try
    {
      result = (bool)(*arg1)->operator !=((six::CollectionInformation const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation_getClassificationLevel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::CollectionInformation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableCollectionInformation_getClassificationLevel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation_getClassificationLevel" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::CollectionInformation > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::CollectionInformation > * >(argp1);
  {
    try
    {
      result = (*arg1)->getClassificationLevel();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return nullptr;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation_setClassificationLevel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::CollectionInformation > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableCollectionInformation_setClassificationLevel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation_setClassificationLevel" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::CollectionInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::CollectionInformation > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableCollectionInformation_setClassificationLevel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCloneableCollectionInformation_setClassificationLevel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try
    {
      (*arg1)->setClassificationLevel((std::string const &)*arg2);
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return nullptr;
}


SWIGINTERN PyObject *ScopedCloneableCollectionInformation_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return nullptr;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCloneablePtrT_six__CollectionInformation_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_makeScopedCloneableCollectionInformation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::CollectionInformation > result;
  
  if (!PyArg_ParseTuple(args,(char *)":makeScopedCloneableCollectionInformation")) SWIG_fail;
  {
    try
    {
      result = makeScopedCloneableCollectionInformation();
    } 
    catch (const std::exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.what());
      }
    }
    catch (const except::Exception& e)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      }
    }
    catch (...)
    {
      if (!PyErr_Occurred())
      {
        PyErr_SetString(PyExc_RuntimeError, "Unknown error");
      }
    }
    if (PyErr_Occurred())
    {
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new mem::ScopedCloneablePtr< six::CollectionInformation >(static_cast< const mem::ScopedCloneablePtr< six::CollectionInformation >& >(result))), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__CollectionInformation_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return nullptr;
}


static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, nullptr},
	 { (char *)"delete_SwigPyIterator", _wrap_delete_SwigPyIterator, METH_VARARGS, (char *)"delete_SwigPyIterator(SwigPyIterator self)"},
	 { (char *)"SwigPyIterator_value", _wrap_SwigPyIterator_value, METH_VARARGS, (char *)"SwigPyIterator_value(SwigPyIterator self) -> PyObject *"},
	 { (char *)"SwigPyIterator_incr", _wrap_SwigPyIterator_incr, METH_VARARGS, (char *)"\n"
		"incr(size_t n=1) -> SwigPyIterator\n"
		"SwigPyIterator_incr(SwigPyIterator self) -> SwigPyIterator\n"
		""},
	 { (char *)"SwigPyIterator_decr", _wrap_SwigPyIterator_decr, METH_VARARGS, (char *)"\n"
		"decr(size_t n=1) -> SwigPyIterator\n"
		"SwigPyIterator_decr(SwigPyIterator self) -> SwigPyIterator\n"
		""},
	 { (char *)"SwigPyIterator_distance", _wrap_SwigPyIterator_distance, METH_VARARGS, (char *)"SwigPyIterator_distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"},
	 { (char *)"SwigPyIterator_equal", _wrap_SwigPyIterator_equal, METH_VARARGS, (char *)"SwigPyIterator_equal(SwigPyIterator self, SwigPyIterator x) -> bool"},
	 { (char *)"SwigPyIterator_copy", _wrap_SwigPyIterator_copy, METH_VARARGS, (char *)"SwigPyIterator_copy(SwigPyIterator self) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator_next", _wrap_SwigPyIterator_next, METH_VARARGS, (char *)"SwigPyIterator_next(SwigPyIterator self) -> PyObject *"},
	 { (char *)"SwigPyIterator___next__", _wrap_SwigPyIterator___next__, METH_VARARGS, (char *)"SwigPyIterator___next__(SwigPyIterator self) -> PyObject *"},
	 { (char *)"SwigPyIterator_previous", _wrap_SwigPyIterator_previous, METH_VARARGS, (char *)"SwigPyIterator_previous(SwigPyIterator self) -> PyObject *"},
	 { (char *)"SwigPyIterator_advance", _wrap_SwigPyIterator_advance, METH_VARARGS, (char *)"SwigPyIterator_advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator___eq__", _wrap_SwigPyIterator___eq__, METH_VARARGS, (char *)"SwigPyIterator___eq__(SwigPyIterator self, SwigPyIterator x) -> bool"},
	 { (char *)"SwigPyIterator___ne__", _wrap_SwigPyIterator___ne__, METH_VARARGS, (char *)"SwigPyIterator___ne__(SwigPyIterator self, SwigPyIterator x) -> bool"},
	 { (char *)"SwigPyIterator___iadd__", _wrap_SwigPyIterator___iadd__, METH_VARARGS, (char *)"SwigPyIterator___iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator___isub__", _wrap_SwigPyIterator___isub__, METH_VARARGS, (char *)"SwigPyIterator___isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator___add__", _wrap_SwigPyIterator___add__, METH_VARARGS, (char *)"SwigPyIterator___add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator___sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, (char *)"\n"
		"__sub__(ptrdiff_t n) -> SwigPyIterator\n"
		"SwigPyIterator___sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t\n"
		""},
	 { (char *)"SwigPyIterator_swigregister", SwigPyIterator_swigregister, METH_VARARGS, nullptr},
	 { (char *)"delete_DateTime", _wrap_delete_DateTime, METH_VARARGS, (char *)"delete_DateTime(DateTime self)"},
	 { (char *)"new_DateTime", _wrap_new_DateTime, METH_VARARGS, (char *)"\n"
		"DateTime()\n"
		"DateTime(nitf_DateTime * dateTime)\n"
		"DateTime(double timeInMillis)\n"
		"DateTime(std::string const & dateString, std::string const & dateFormat)\n"
		"DateTime(int year, int month, int dayOfMonth, int hour=0, int minute=0, double second=0.0)\n"
		"DateTime(int year, int month, int dayOfMonth, int hour=0, int minute=0)\n"
		"DateTime(int year, int month, int dayOfMonth, int hour=0)\n"
		"DateTime(int year, int month, int dayOfMonth)\n"
		"new_DateTime(DateTime rhs) -> DateTime\n"
		""},
	 { (char *)"DateTime___lt__", _wrap_DateTime___lt__, METH_VARARGS, (char *)"DateTime___lt__(DateTime self, DateTime rhs) -> bool"},
	 { (char *)"DateTime___le__", _wrap_DateTime___le__, METH_VARARGS, (char *)"DateTime___le__(DateTime self, DateTime rhs) -> bool"},
	 { (char *)"DateTime___gt__", _wrap_DateTime___gt__, METH_VARARGS, (char *)"DateTime___gt__(DateTime self, DateTime rhs) -> bool"},
	 { (char *)"DateTime___ge__", _wrap_DateTime___ge__, METH_VARARGS, (char *)"DateTime___ge__(DateTime self, DateTime rhs) -> bool"},
	 { (char *)"DateTime___eq__", _wrap_DateTime___eq__, METH_VARARGS, (char *)"DateTime___eq__(DateTime self, DateTime rhs) -> bool"},
	 { (char *)"DateTime___ne__", _wrap_DateTime___ne__, METH_VARARGS, (char *)"DateTime___ne__(DateTime self, DateTime rhs) -> bool"},
	 { (char *)"DateTime_getNative", _wrap_DateTime_getNative, METH_VARARGS, (char *)"\n"
		"getNative() -> nitf_DateTime\n"
		"DateTime_getNative(DateTime self) -> nitf_DateTime const *\n"
		""},
	 { (char *)"DateTime_format", _wrap_DateTime_format, METH_VARARGS, (char *)"\n"
		"format(std::string const & format, char * outBuf, size_t maxSize)\n"
		"format(std::string const & format, std::string & str)\n"
		"DateTime_format(DateTime self, std::string const & format) -> std::string\n"
		""},
	 { (char *)"DateTime_getYear", _wrap_DateTime_getYear, METH_VARARGS, (char *)"DateTime_getYear(DateTime self) -> int"},
	 { (char *)"DateTime_getMonth", _wrap_DateTime_getMonth, METH_VARARGS, (char *)"DateTime_getMonth(DateTime self) -> int"},
	 { (char *)"DateTime_getDayOfMonth", _wrap_DateTime_getDayOfMonth, METH_VARARGS, (char *)"DateTime_getDayOfMonth(DateTime self) -> int"},
	 { (char *)"DateTime_getDayOfWeek", _wrap_DateTime_getDayOfWeek, METH_VARARGS, (char *)"DateTime_getDayOfWeek(DateTime self) -> int"},
	 { (char *)"DateTime_getDayOfYear", _wrap_DateTime_getDayOfYear, METH_VARARGS, (char *)"DateTime_getDayOfYear(DateTime self) -> int"},
	 { (char *)"DateTime_getHour", _wrap_DateTime_getHour, METH_VARARGS, (char *)"DateTime_getHour(DateTime self) -> int"},
	 { (char *)"DateTime_getMinute", _wrap_DateTime_getMinute, METH_VARARGS, (char *)"DateTime_getMinute(DateTime self) -> int"},
	 { (char *)"DateTime_getSecond", _wrap_DateTime_getSecond, METH_VARARGS, (char *)"DateTime_getSecond(DateTime self) -> double"},
	 { (char *)"DateTime_getTimeInMillis", _wrap_DateTime_getTimeInMillis, METH_VARARGS, (char *)"DateTime_getTimeInMillis(DateTime self) -> double"},
	 { (char *)"DateTime_setYear", _wrap_DateTime_setYear, METH_VARARGS, (char *)"DateTime_setYear(DateTime self, int year)"},
	 { (char *)"DateTime_setMonth", _wrap_DateTime_setMonth, METH_VARARGS, (char *)"DateTime_setMonth(DateTime self, int month)"},
	 { (char *)"DateTime_setDayOfMonth", _wrap_DateTime_setDayOfMonth, METH_VARARGS, (char *)"DateTime_setDayOfMonth(DateTime self, int dayOfMonth)"},
	 { (char *)"DateTime_setHour", _wrap_DateTime_setHour, METH_VARARGS, (char *)"DateTime_setHour(DateTime self, int hour)"},
	 { (char *)"DateTime_setMinute", _wrap_DateTime_setMinute, METH_VARARGS, (char *)"DateTime_setMinute(DateTime self, int minute)"},
	 { (char *)"DateTime_setSecond", _wrap_DateTime_setSecond, METH_VARARGS, (char *)"DateTime_setSecond(DateTime self, double second)"},
	 { (char *)"DateTime_setTimeInMillis", _wrap_DateTime_setTimeInMillis, METH_VARARGS, (char *)"DateTime_setTimeInMillis(DateTime self, double timeInMillis)"},
	 { (char *)"DateTime_toPythonDateTime", _wrap_DateTime_toPythonDateTime, METH_VARARGS, (char *)"DateTime_toPythonDateTime(DateTime self) -> PyObject *"},
	 { (char *)"DateTime_swigregister", DateTime_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_AppliedType", _wrap_new_AppliedType, METH_VARARGS, (char *)"\n"
		"AppliedType()\n"
		"AppliedType(std::string s)\n"
		"new_AppliedType(int i) -> AppliedType\n"
		""},
	 { (char *)"delete_AppliedType", _wrap_delete_AppliedType, METH_VARARGS, (char *)"delete_AppliedType(AppliedType self)"},
	 { (char *)"AppliedType_toString", _wrap_AppliedType_toString, METH_VARARGS, (char *)"AppliedType_toString(AppliedType self) -> std::string"},
	 { (char *)"AppliedType___eq__", _wrap_AppliedType___eq__, METH_VARARGS, (char *)"\n"
		"__eq__(AppliedType o) -> bool\n"
		"AppliedType___eq__(AppliedType self, int const & o) -> bool\n"
		""},
	 { (char *)"AppliedType___ne__", _wrap_AppliedType___ne__, METH_VARARGS, (char *)"\n"
		"__ne__(AppliedType o) -> bool\n"
		"AppliedType___ne__(AppliedType self, int const & o) -> bool\n"
		""},
	 { (char *)"AppliedType___lt__", _wrap_AppliedType___lt__, METH_VARARGS, (char *)"AppliedType___lt__(AppliedType self, AppliedType o) -> bool"},
	 { (char *)"AppliedType___gt__", _wrap_AppliedType___gt__, METH_VARARGS, (char *)"AppliedType___gt__(AppliedType self, AppliedType o) -> bool"},
	 { (char *)"AppliedType___le__", _wrap_AppliedType___le__, METH_VARARGS, (char *)"AppliedType___le__(AppliedType self, AppliedType o) -> bool"},
	 { (char *)"AppliedType___ge__", _wrap_AppliedType___ge__, METH_VARARGS, (char *)"AppliedType___ge__(AppliedType self, AppliedType o) -> bool"},
	 { (char *)"AppliedType_size", _wrap_AppliedType_size, METH_VARARGS, (char *)"AppliedType_size() -> size_t"},
	 { (char *)"AppliedType_value_set", _wrap_AppliedType_value_set, METH_VARARGS, (char *)"AppliedType_value_set(AppliedType self, int value)"},
	 { (char *)"AppliedType_value_get", _wrap_AppliedType_value_get, METH_VARARGS, (char *)"AppliedType_value_get(AppliedType self) -> int"},
	 { (char *)"AppliedType_swigregister", AppliedType_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_AutofocusType", _wrap_new_AutofocusType, METH_VARARGS, (char *)"\n"
		"AutofocusType()\n"
		"AutofocusType(std::string s)\n"
		"new_AutofocusType(int i) -> AutofocusType\n"
		""},
	 { (char *)"delete_AutofocusType", _wrap_delete_AutofocusType, METH_VARARGS, (char *)"delete_AutofocusType(AutofocusType self)"},
	 { (char *)"AutofocusType_toString", _wrap_AutofocusType_toString, METH_VARARGS, (char *)"AutofocusType_toString(AutofocusType self) -> std::string"},
	 { (char *)"AutofocusType___eq__", _wrap_AutofocusType___eq__, METH_VARARGS, (char *)"\n"
		"__eq__(AutofocusType o) -> bool\n"
		"AutofocusType___eq__(AutofocusType self, int const & o) -> bool\n"
		""},
	 { (char *)"AutofocusType___ne__", _wrap_AutofocusType___ne__, METH_VARARGS, (char *)"\n"
		"__ne__(AutofocusType o) -> bool\n"
		"AutofocusType___ne__(AutofocusType self, int const & o) -> bool\n"
		""},
	 { (char *)"AutofocusType___lt__", _wrap_AutofocusType___lt__, METH_VARARGS, (char *)"AutofocusType___lt__(AutofocusType self, AutofocusType o) -> bool"},
	 { (char *)"AutofocusType___gt__", _wrap_AutofocusType___gt__, METH_VARARGS, (char *)"AutofocusType___gt__(AutofocusType self, AutofocusType o) -> bool"},
	 { (char *)"AutofocusType___le__", _wrap_AutofocusType___le__, METH_VARARGS, (char *)"AutofocusType___le__(AutofocusType self, AutofocusType o) -> bool"},
	 { (char *)"AutofocusType___ge__", _wrap_AutofocusType___ge__, METH_VARARGS, (char *)"AutofocusType___ge__(AutofocusType self, AutofocusType o) -> bool"},
	 { (char *)"AutofocusType_size", _wrap_AutofocusType_size, METH_VARARGS, (char *)"AutofocusType_size() -> size_t"},
	 { (char *)"AutofocusType_value_set", _wrap_AutofocusType_value_set, METH_VARARGS, (char *)"AutofocusType_value_set(AutofocusType self, int value)"},
	 { (char *)"AutofocusType_value_get", _wrap_AutofocusType_value_get, METH_VARARGS, (char *)"AutofocusType_value_get(AutofocusType self) -> int"},
	 { (char *)"AutofocusType_swigregister", AutofocusType_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_BooleanType", _wrap_new_BooleanType, METH_VARARGS, (char *)"\n"
		"BooleanType()\n"
		"BooleanType(std::string s)\n"
		"new_BooleanType(int i) -> BooleanType\n"
		""},
	 { (char *)"delete_BooleanType", _wrap_delete_BooleanType, METH_VARARGS, (char *)"delete_BooleanType(BooleanType self)"},
	 { (char *)"BooleanType_toString", _wrap_BooleanType_toString, METH_VARARGS, (char *)"BooleanType_toString(BooleanType self) -> std::string"},
	 { (char *)"BooleanType___eq__", _wrap_BooleanType___eq__, METH_VARARGS, (char *)"\n"
		"__eq__(BooleanType o) -> bool\n"
		"BooleanType___eq__(BooleanType self, int const & o) -> bool\n"
		""},
	 { (char *)"BooleanType___ne__", _wrap_BooleanType___ne__, METH_VARARGS, (char *)"\n"
		"__ne__(BooleanType o) -> bool\n"
		"BooleanType___ne__(BooleanType self, int const & o) -> bool\n"
		""},
	 { (char *)"BooleanType___lt__", _wrap_BooleanType___lt__, METH_VARARGS, (char *)"BooleanType___lt__(BooleanType self, BooleanType o) -> bool"},
	 { (char *)"BooleanType___gt__", _wrap_BooleanType___gt__, METH_VARARGS, (char *)"BooleanType___gt__(BooleanType self, BooleanType o) -> bool"},
	 { (char *)"BooleanType___le__", _wrap_BooleanType___le__, METH_VARARGS, (char *)"BooleanType___le__(BooleanType self, BooleanType o) -> bool"},
	 { (char *)"BooleanType___ge__", _wrap_BooleanType___ge__, METH_VARARGS, (char *)"BooleanType___ge__(BooleanType self, BooleanType o) -> bool"},
	 { (char *)"BooleanType_size", _wrap_BooleanType_size, METH_VARARGS, (char *)"BooleanType_size() -> size_t"},
	 { (char *)"BooleanType_value_set", _wrap_BooleanType_value_set, METH_VARARGS, (char *)"BooleanType_value_set(BooleanType self, int value)"},
	 { (char *)"BooleanType_value_get", _wrap_BooleanType_value_get, METH_VARARGS, (char *)"BooleanType_value_get(BooleanType self) -> int"},
	 { (char *)"BooleanType_swigregister", BooleanType_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_ByteSwapping", _wrap_new_ByteSwapping, METH_VARARGS, (char *)"\n"
		"ByteSwapping()\n"
		"ByteSwapping(std::string s)\n"
		"new_ByteSwapping(int i) -> ByteSwapping\n"
		""},
	 { (char *)"delete_ByteSwapping", _wrap_delete_ByteSwapping, METH_VARARGS, (char *)"delete_ByteSwapping(ByteSwapping self)"},
	 { (char *)"ByteSwapping_toString", _wrap_ByteSwapping_toString, METH_VARARGS, (char *)"ByteSwapping_toString(ByteSwapping self) -> std::string"},
	 { (char *)"ByteSwapping___eq__", _wrap_ByteSwapping___eq__, METH_VARARGS, (char *)"\n"
		"__eq__(ByteSwapping o) -> bool\n"
		"ByteSwapping___eq__(ByteSwapping self, int const & o) -> bool\n"
		""},
	 { (char *)"ByteSwapping___ne__", _wrap_ByteSwapping___ne__, METH_VARARGS, (char *)"\n"
		"__ne__(ByteSwapping o) -> bool\n"
		"ByteSwapping___ne__(ByteSwapping self, int const & o) -> bool\n"
		""},
	 { (char *)"ByteSwapping___lt__", _wrap_ByteSwapping___lt__, METH_VARARGS, (char *)"ByteSwapping___lt__(ByteSwapping self, ByteSwapping o) -> bool"},
	 { (char *)"ByteSwapping___gt__", _wrap_ByteSwapping___gt__, METH_VARARGS, (char *)"ByteSwapping___gt__(ByteSwapping self, ByteSwapping o) -> bool"},
	 { (char *)"ByteSwapping___le__", _wrap_ByteSwapping___le__, METH_VARARGS, (char *)"ByteSwapping___le__(ByteSwapping self, ByteSwapping o) -> bool"},
	 { (char *)"ByteSwapping___ge__", _wrap_ByteSwapping___ge__, METH_VARARGS, (char *)"ByteSwapping___ge__(ByteSwapping self, ByteSwapping o) -> bool"},
	 { (char *)"ByteSwapping_size", _wrap_ByteSwapping_size, METH_VARARGS, (char *)"ByteSwapping_size() -> size_t"},
	 { (char *)"ByteSwapping_value_set", _wrap_ByteSwapping_value_set, METH_VARARGS, (char *)"ByteSwapping_value_set(ByteSwapping self, int value)"},
	 { (char *)"ByteSwapping_value_get", _wrap_ByteSwapping_value_get, METH_VARARGS, (char *)"ByteSwapping_value_get(ByteSwapping self) -> int"},
	 { (char *)"ByteSwapping_swigregister", ByteSwapping_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_CollectType", _wrap_new_CollectType, METH_VARARGS, (char *)"\n"
		"CollectType()\n"
		"CollectType(std::string s)\n"
		"new_CollectType(int i) -> CollectType\n"
		""},
	 { (char *)"delete_CollectType", _wrap_delete_CollectType, METH_VARARGS, (char *)"delete_CollectType(CollectType self)"},
	 { (char *)"CollectType_toString", _wrap_CollectType_toString, METH_VARARGS, (char *)"CollectType_toString(CollectType self) -> std::string"},
	 { (char *)"CollectType___eq__", _wrap_CollectType___eq__, METH_VARARGS, (char *)"\n"
		"__eq__(CollectType o) -> bool\n"
		"CollectType___eq__(CollectType self, int const & o) -> bool\n"
		""},
	 { (char *)"CollectType___ne__", _wrap_CollectType___ne__, METH_VARARGS, (char *)"\n"
		"__ne__(CollectType o) -> bool\n"
		"CollectType___ne__(CollectType self, int const & o) -> bool\n"
		""},
	 { (char *)"CollectType___lt__", _wrap_CollectType___lt__, METH_VARARGS, (char *)"CollectType___lt__(CollectType self, CollectType o) -> bool"},
	 { (char *)"CollectType___gt__", _wrap_CollectType___gt__, METH_VARARGS, (char *)"CollectType___gt__(CollectType self, CollectType o) -> bool"},
	 { (char *)"CollectType___le__", _wrap_CollectType___le__, METH_VARARGS, (char *)"CollectType___le__(CollectType self, CollectType o) -> bool"},
	 { (char *)"CollectType___ge__", _wrap_CollectType___ge__, METH_VARARGS, (char *)"CollectType___ge__(CollectType self, CollectType o) -> bool"},
	 { (char *)"CollectType_size", _wrap_CollectType_size, METH_VARARGS, (char *)"CollectType_size() -> size_t"},
	 { (char *)"CollectType_value_set", _wrap_CollectType_value_set, METH_VARARGS, (char *)"CollectType_value_set(CollectType self, int value)"},
	 { (char *)"CollectType_value_get", _wrap_CollectType_value_get, METH_VARARGS, (char *)"CollectType_value_get(CollectType self) -> int"},
	 { (char *)"CollectType_swigregister", CollectType_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_ComplexImageGridType", _wrap_new_ComplexImageGridType, METH_VARARGS, (char *)"\n"
		"ComplexImageGridType()\n"
		"ComplexImageGridType(std::string s)\n"
		"new_ComplexImageGridType(int i) -> ComplexImageGridType\n"
		""},
	 { (char *)"delete_ComplexImageGridType", _wrap_delete_ComplexImageGridType, METH_VARARGS, (char *)"delete_ComplexImageGridType(ComplexImageGridType self)"},
	 { (char *)"ComplexImageGridType_toString", _wrap_ComplexImageGridType_toString, METH_VARARGS, (char *)"ComplexImageGridType_toString(ComplexImageGridType self) -> std::string"},
	 { (char *)"ComplexImageGridType___eq__", _wrap_ComplexImageGridType___eq__, METH_VARARGS, (char *)"\n"
		"__eq__(ComplexImageGridType o) -> bool\n"
		"ComplexImageGridType___eq__(ComplexImageGridType self, int const & o) -> bool\n"
		""},
	 { (char *)"ComplexImageGridType___ne__", _wrap_ComplexImageGridType___ne__, METH_VARARGS, (char *)"\n"
		"__ne__(ComplexImageGridType o) -> bool\n"
		"ComplexImageGridType___ne__(ComplexImageGridType self, int const & o) -> bool\n"
		""},
	 { (char *)"ComplexImageGridType___lt__", _wrap_ComplexImageGridType___lt__, METH_VARARGS, (char *)"ComplexImageGridType___lt__(ComplexImageGridType self, ComplexImageGridType o) -> bool"},
	 { (char *)"ComplexImageGridType___gt__", _wrap_ComplexImageGridType___gt__, METH_VARARGS, (char *)"ComplexImageGridType___gt__(ComplexImageGridType self, ComplexImageGridType o) -> bool"},
	 { (char *)"ComplexImageGridType___le__", _wrap_ComplexImageGridType___le__, METH_VARARGS, (char *)"ComplexImageGridType___le__(ComplexImageGridType self, ComplexImageGridType o) -> bool"},
	 { (char *)"ComplexImageGridType___ge__", _wrap_ComplexImageGridType___ge__, METH_VARARGS, (char *)"ComplexImageGridType___ge__(ComplexImageGridType self, ComplexImageGridType o) -> bool"},
	 { (char *)"ComplexImageGridType_size", _wrap_ComplexImageGridType_size, METH_VARARGS, (char *)"ComplexImageGridType_size() -> size_t"},
	 { (char *)"ComplexImageGridType_value_set", _wrap_ComplexImageGridType_value_set, METH_VARARGS, (char *)"ComplexImageGridType_value_set(ComplexImageGridType self, int value)"},
	 { (char *)"ComplexImageGridType_value_get", _wrap_ComplexImageGridType_value_get, METH_VARARGS, (char *)"ComplexImageGridType_value_get(ComplexImageGridType self) -> int"},
	 { (char *)"ComplexImageGridType_swigregister", ComplexImageGridType_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_ComplexImagePlaneType", _wrap_new_ComplexImagePlaneType, METH_VARARGS, (char *)"\n"
		"ComplexImagePlaneType()\n"
		"ComplexImagePlaneType(std::string s)\n"
		"new_ComplexImagePlaneType(int i) -> ComplexImagePlaneType\n"
		""},
	 { (char *)"delete_ComplexImagePlaneType", _wrap_delete_ComplexImagePlaneType, METH_VARARGS, (char *)"delete_ComplexImagePlaneType(ComplexImagePlaneType self)"},
	 { (char *)"ComplexImagePlaneType_toString", _wrap_ComplexImagePlaneType_toString, METH_VARARGS, (char *)"ComplexImagePlaneType_toString(ComplexImagePlaneType self) -> std::string"},
	 { (char *)"ComplexImagePlaneType___eq__", _wrap_ComplexImagePlaneType___eq__, METH_VARARGS, (char *)"\n"
		"__eq__(ComplexImagePlaneType o) -> bool\n"
		"ComplexImagePlaneType___eq__(ComplexImagePlaneType self, int const & o) -> bool\n"
		""},
	 { (char *)"ComplexImagePlaneType___ne__", _wrap_ComplexImagePlaneType___ne__, METH_VARARGS, (char *)"\n"
		"__ne__(ComplexImagePlaneType o) -> bool\n"
		"ComplexImagePlaneType___ne__(ComplexImagePlaneType self, int const & o) -> bool\n"
		""},
	 { (char *)"ComplexImagePlaneType___lt__", _wrap_ComplexImagePlaneType___lt__, METH_VARARGS, (char *)"ComplexImagePlaneType___lt__(ComplexImagePlaneType self, ComplexImagePlaneType o) -> bool"},
	 { (char *)"ComplexImagePlaneType___gt__", _wrap_ComplexImagePlaneType___gt__, METH_VARARGS, (char *)"ComplexImagePlaneType___gt__(ComplexImagePlaneType self, ComplexImagePlaneType o) -> bool"},
	 { (char *)"ComplexImagePlaneType___le__", _wrap_ComplexImagePlaneType___le__, METH_VARARGS, (char *)"ComplexImagePlaneType___le__(ComplexImagePlaneType self, ComplexImagePlaneType o) -> bool"},
	 { (char *)"ComplexImagePlaneType___ge__", _wrap_ComplexImagePlaneType___ge__, METH_VARARGS, (char *)"ComplexImagePlaneType___ge__(ComplexImagePlaneType self, ComplexImagePlaneType o) -> bool"},
	 { (char *)"ComplexImagePlaneType_size", _wrap_ComplexImagePlaneType_size, METH_VARARGS, (char *)"ComplexImagePlaneType_size() -> size_t"},
	 { (char *)"ComplexImagePlaneType_value_set", _wrap_ComplexImagePlaneType_value_set, METH_VARARGS, (char *)"ComplexImagePlaneType_value_set(ComplexImagePlaneType self, int value)"},
	 { (char *)"ComplexImagePlaneType_value_get", _wrap_ComplexImagePlaneType_value_get, METH_VARARGS, (char *)"ComplexImagePlaneType_value_get(ComplexImagePlaneType self) -> int"},
	 { (char *)"ComplexImagePlaneType_swigregister", ComplexImagePlaneType_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_DataType", _wrap_new_DataType, METH_VARARGS, (char *)"\n"
		"DataType()\n"
		"DataType(std::string s)\n"
		"new_DataType(int i) -> DataType\n"
		""},
	 { (char *)"delete_DataType", _wrap_delete_DataType, METH_VARARGS, (char *)"delete_DataType(DataType self)"},
	 { (char *)"DataType_toString", _wrap_DataType_toString, METH_VARARGS, (char *)"DataType_toString(DataType self) -> std::string"},
	 { (char *)"DataType___eq__", _wrap_DataType___eq__, METH_VARARGS, (char *)"\n"
		"__eq__(DataType o) -> bool\n"
		"DataType___eq__(DataType self, int const & o) -> bool\n"
		""},
	 { (char *)"DataType___ne__", _wrap_DataType___ne__, METH_VARARGS, (char *)"\n"
		"__ne__(DataType o) -> bool\n"
		"DataType___ne__(DataType self, int const & o) -> bool\n"
		""},
	 { (char *)"DataType___lt__", _wrap_DataType___lt__, METH_VARARGS, (char *)"DataType___lt__(DataType self, DataType o) -> bool"},
	 { (char *)"DataType___gt__", _wrap_DataType___gt__, METH_VARARGS, (char *)"DataType___gt__(DataType self, DataType o) -> bool"},
	 { (char *)"DataType___le__", _wrap_DataType___le__, METH_VARARGS, (char *)"DataType___le__(DataType self, DataType o) -> bool"},
	 { (char *)"DataType___ge__", _wrap_DataType___ge__, METH_VARARGS, (char *)"DataType___ge__(DataType self, DataType o) -> bool"},
	 { (char *)"DataType_size", _wrap_DataType_size, METH_VARARGS, (char *)"DataType_size() -> size_t"},
	 { (char *)"DataType_value_set", _wrap_DataType_value_set, METH_VARARGS, (char *)"DataType_value_set(DataType self, int value)"},
	 { (char *)"DataType_value_get", _wrap_DataType_value_get, METH_VARARGS, (char *)"DataType_value_get(DataType self) -> int"},
	 { (char *)"DataType_swigregister", DataType_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_DecimationMethod", _wrap_new_DecimationMethod, METH_VARARGS, (char *)"\n"
		"DecimationMethod()\n"
		"DecimationMethod(std::string s)\n"
		"new_DecimationMethod(int i) -> DecimationMethod\n"
		""},
	 { (char *)"delete_DecimationMethod", _wrap_delete_DecimationMethod, METH_VARARGS, (char *)"delete_DecimationMethod(DecimationMethod self)"},
	 { (char *)"DecimationMethod_toString", _wrap_DecimationMethod_toString, METH_VARARGS, (char *)"DecimationMethod_toString(DecimationMethod self) -> std::string"},
	 { (char *)"DecimationMethod___eq__", _wrap_DecimationMethod___eq__, METH_VARARGS, (char *)"\n"
		"__eq__(DecimationMethod o) -> bool\n"
		"DecimationMethod___eq__(DecimationMethod self, int const & o) -> bool\n"
		""},
	 { (char *)"DecimationMethod___ne__", _wrap_DecimationMethod___ne__, METH_VARARGS, (char *)"\n"
		"__ne__(DecimationMethod o) -> bool\n"
		"DecimationMethod___ne__(DecimationMethod self, int const & o) -> bool\n"
		""},
	 { (char *)"DecimationMethod___lt__", _wrap_DecimationMethod___lt__, METH_VARARGS, (char *)"DecimationMethod___lt__(DecimationMethod self, DecimationMethod o) -> bool"},
	 { (char *)"DecimationMethod___gt__", _wrap_DecimationMethod___gt__, METH_VARARGS, (char *)"DecimationMethod___gt__(DecimationMethod self, DecimationMethod o) -> bool"},
	 { (char *)"DecimationMethod___le__", _wrap_DecimationMethod___le__, METH_VARARGS, (char *)"DecimationMethod___le__(DecimationMethod self, DecimationMethod o) -> bool"},
	 { (char *)"DecimationMethod___ge__", _wrap_DecimationMethod___ge__, METH_VARARGS, (char *)"DecimationMethod___ge__(DecimationMethod self, DecimationMethod o) -> bool"},
	 { (char *)"DecimationMethod_size", _wrap_DecimationMethod_size, METH_VARARGS, (char *)"DecimationMethod_size() -> size_t"},
	 { (char *)"DecimationMethod_value_set", _wrap_DecimationMethod_value_set, METH_VARARGS, (char *)"DecimationMethod_value_set(DecimationMethod self, int value)"},
	 { (char *)"DecimationMethod_value_get", _wrap_DecimationMethod_value_get, METH_VARARGS, (char *)"DecimationMethod_value_get(DecimationMethod self) -> int"},
	 { (char *)"DecimationMethod_swigregister", DecimationMethod_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_DemodType", _wrap_new_DemodType, METH_VARARGS, (char *)"\n"
		"DemodType()\n"
		"DemodType(std::string s)\n"
		"new_DemodType(int i) -> DemodType\n"
		""},
	 { (char *)"delete_DemodType", _wrap_delete_DemodType, METH_VARARGS, (char *)"delete_DemodType(DemodType self)"},
	 { (char *)"DemodType_toString", _wrap_DemodType_toString, METH_VARARGS, (char *)"DemodType_toString(DemodType self) -> std::string"},
	 { (char *)"DemodType___eq__", _wrap_DemodType___eq__, METH_VARARGS, (char *)"\n"
		"__eq__(DemodType o) -> bool\n"
		"DemodType___eq__(DemodType self, int const & o) -> bool\n"
		""},
	 { (char *)"DemodType___ne__", _wrap_DemodType___ne__, METH_VARARGS, (char *)"\n"
		"__ne__(DemodType o) -> bool\n"
		"DemodType___ne__(DemodType self, int const & o) -> bool\n"
		""},
	 { (char *)"DemodType___lt__", _wrap_DemodType___lt__, METH_VARARGS, (char *)"DemodType___lt__(DemodType self, DemodType o) -> bool"},
	 { (char *)"DemodType___gt__", _wrap_DemodType___gt__, METH_VARARGS, (char *)"DemodType___gt__(DemodType self, DemodType o) -> bool"},
	 { (char *)"DemodType___le__", _wrap_DemodType___le__, METH_VARARGS, (char *)"DemodType___le__(DemodType self, DemodType o) -> bool"},
	 { (char *)"DemodType___ge__", _wrap_DemodType___ge__, METH_VARARGS, (char *)"DemodType___ge__(DemodType self, DemodType o) -> bool"},
	 { (char *)"DemodType_size", _wrap_DemodType_size, METH_VARARGS, (char *)"DemodType_size() -> size_t"},
	 { (char *)"DemodType_value_set", _wrap_DemodType_value_set, METH_VARARGS, (char *)"DemodType_value_set(DemodType self, int value)"},
	 { (char *)"DemodType_value_get", _wrap_DemodType_value_get, METH_VARARGS, (char *)"DemodType_value_get(DemodType self) -> int"},
	 { (char *)"DemodType_swigregister", DemodType_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_DisplayType", _wrap_new_DisplayType, METH_VARARGS, (char *)"\n"
		"DisplayType()\n"
		"DisplayType(std::string s)\n"
		"new_DisplayType(int i) -> DisplayType\n"
		""},
	 { (char *)"delete_DisplayType", _wrap_delete_DisplayType, METH_VARARGS, (char *)"delete_DisplayType(DisplayType self)"},
	 { (char *)"DisplayType_toString", _wrap_DisplayType_toString, METH_VARARGS, (char *)"DisplayType_toString(DisplayType self) -> std::string"},
	 { (char *)"DisplayType___eq__", _wrap_DisplayType___eq__, METH_VARARGS, (char *)"\n"
		"__eq__(DisplayType o) -> bool\n"
		"DisplayType___eq__(DisplayType self, int const & o) -> bool\n"
		""},
	 { (char *)"DisplayType___ne__", _wrap_DisplayType___ne__, METH_VARARGS, (char *)"\n"
		"__ne__(DisplayType o) -> bool\n"
		"DisplayType___ne__(DisplayType self, int const & o) -> bool\n"
		""},
	 { (char *)"DisplayType___lt__", _wrap_DisplayType___lt__, METH_VARARGS, (char *)"DisplayType___lt__(DisplayType self, DisplayType o) -> bool"},
	 { (char *)"DisplayType___gt__", _wrap_DisplayType___gt__, METH_VARARGS, (char *)"DisplayType___gt__(DisplayType self, DisplayType o) -> bool"},
	 { (char *)"DisplayType___le__", _wrap_DisplayType___le__, METH_VARARGS, (char *)"DisplayType___le__(DisplayType self, DisplayType o) -> bool"},
	 { (char *)"DisplayType___ge__", _wrap_DisplayType___ge__, METH_VARARGS, (char *)"DisplayType___ge__(DisplayType self, DisplayType o) -> bool"},
	 { (char *)"DisplayType_size", _wrap_DisplayType_size, METH_VARARGS, (char *)"DisplayType_size() -> size_t"},
	 { (char *)"DisplayType_value_set", _wrap_DisplayType_value_set, METH_VARARGS, (char *)"DisplayType_value_set(DisplayType self, int value)"},
	 { (char *)"DisplayType_value_get", _wrap_DisplayType_value_get, METH_VARARGS, (char *)"DisplayType_value_get(DisplayType self) -> int"},
	 { (char *)"DisplayType_swigregister", DisplayType_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_DualPolarizationType", _wrap_new_DualPolarizationType, METH_VARARGS, (char *)"\n"
		"DualPolarizationType()\n"
		"DualPolarizationType(std::string s)\n"
		"new_DualPolarizationType(int i) -> DualPolarizationType\n"
		""},
	 { (char *)"delete_DualPolarizationType", _wrap_delete_DualPolarizationType, METH_VARARGS, (char *)"delete_DualPolarizationType(DualPolarizationType self)"},
	 { (char *)"DualPolarizationType_toString", _wrap_DualPolarizationType_toString, METH_VARARGS, (char *)"DualPolarizationType_toString(DualPolarizationType self) -> std::string"},
	 { (char *)"DualPolarizationType___eq__", _wrap_DualPolarizationType___eq__, METH_VARARGS, (char *)"\n"
		"__eq__(DualPolarizationType o) -> bool\n"
		"DualPolarizationType___eq__(DualPolarizationType self, int const & o) -> bool\n"
		""},
	 { (char *)"DualPolarizationType___ne__", _wrap_DualPolarizationType___ne__, METH_VARARGS, (char *)"\n"
		"__ne__(DualPolarizationType o) -> bool\n"
		"DualPolarizationType___ne__(DualPolarizationType self, int const & o) -> bool\n"
		""},
	 { (char *)"DualPolarizationType___lt__", _wrap_DualPolarizationType___lt__, METH_VARARGS, (char *)"DualPolarizationType___lt__(DualPolarizationType self, DualPolarizationType o) -> bool"},
	 { (char *)"DualPolarizationType___gt__", _wrap_DualPolarizationType___gt__, METH_VARARGS, (char *)"DualPolarizationType___gt__(DualPolarizationType self, DualPolarizationType o) -> bool"},
	 { (char *)"DualPolarizationType___le__", _wrap_DualPolarizationType___le__, METH_VARARGS, (char *)"DualPolarizationType___le__(DualPolarizationType self, DualPolarizationType o) -> bool"},
	 { (char *)"DualPolarizationType___ge__", _wrap_DualPolarizationType___ge__, METH_VARARGS, (char *)"DualPolarizationType___ge__(DualPolarizationType self, DualPolarizationType o) -> bool"},
	 { (char *)"DualPolarizationType_size", _wrap_DualPolarizationType_size, METH_VARARGS, (char *)"DualPolarizationType_size() -> size_t"},
	 { (char *)"DualPolarizationType_value_set", _wrap_DualPolarizationType_value_set, METH_VARARGS, (char *)"DualPolarizationType_value_set(DualPolarizationType self, int value)"},
	 { (char *)"DualPolarizationType_value_get", _wrap_DualPolarizationType_value_get, METH_VARARGS, (char *)"DualPolarizationType_value_get(DualPolarizationType self) -> int"},
	 { (char *)"DualPolarizationType_swigregister", DualPolarizationType_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_EarthModelType", _wrap_new_EarthModelType, METH_VARARGS, (char *)"\n"
		"EarthModelType()\n"
		"EarthModelType(std::string s)\n"
		"new_EarthModelType(int i) -> EarthModelType\n"
		""},
	 { (char *)"delete_EarthModelType", _wrap_delete_EarthModelType, METH_VARARGS, (char *)"delete_EarthModelType(EarthModelType self)"},
	 { (char *)"EarthModelType_toString", _wrap_EarthModelType_toString, METH_VARARGS, (char *)"EarthModelType_toString(EarthModelType self) -> std::string"},
	 { (char *)"EarthModelType___eq__", _wrap_EarthModelType___eq__, METH_VARARGS, (char *)"\n"
		"__eq__(EarthModelType o) -> bool\n"
		"EarthModelType___eq__(EarthModelType self, int const & o) -> bool\n"
		""},
	 { (char *)"EarthModelType___ne__", _wrap_EarthModelType___ne__, METH_VARARGS, (char *)"\n"
		"__ne__(EarthModelType o) -> bool\n"
		"EarthModelType___ne__(EarthModelType self, int const & o) -> bool\n"
		""},
	 { (char *)"EarthModelType___lt__", _wrap_EarthModelType___lt__, METH_VARARGS, (char *)"EarthModelType___lt__(EarthModelType self, EarthModelType o) -> bool"},
	 { (char *)"EarthModelType___gt__", _wrap_EarthModelType___gt__, METH_VARARGS, (char *)"EarthModelType___gt__(EarthModelType self, EarthModelType o) -> bool"},
	 { (char *)"EarthModelType___le__", _wrap_EarthModelType___le__, METH_VARARGS, (char *)"EarthModelType___le__(EarthModelType self, EarthModelType o) -> bool"},
	 { (char *)"EarthModelType___ge__", _wrap_EarthModelType___ge__, METH_VARARGS, (char *)"EarthModelType___ge__(EarthModelType self, EarthModelType o) -> bool"},
	 { (char *)"EarthModelType_size", _wrap_EarthModelType_size, METH_VARARGS, (char *)"EarthModelType_size() -> size_t"},
	 { (char *)"EarthModelType_value_set", _wrap_EarthModelType_value_set, METH_VARARGS, (char *)"EarthModelType_value_set(EarthModelType self, int value)"},
	 { (char *)"EarthModelType_value_get", _wrap_EarthModelType_value_get, METH_VARARGS, (char *)"EarthModelType_value_get(EarthModelType self) -> int"},
	 { (char *)"EarthModelType_swigregister", EarthModelType_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_FFTSign", _wrap_new_FFTSign, METH_VARARGS, (char *)"\n"
		"FFTSign()\n"
		"FFTSign(std::string s)\n"
		"new_FFTSign(int i) -> FFTSign\n"
		""},
	 { (char *)"delete_FFTSign", _wrap_delete_FFTSign, METH_VARARGS, (char *)"delete_FFTSign(FFTSign self)"},
	 { (char *)"FFTSign_toString", _wrap_FFTSign_toString, METH_VARARGS, (char *)"FFTSign_toString(FFTSign self) -> std::string"},
	 { (char *)"FFTSign___eq__", _wrap_FFTSign___eq__, METH_VARARGS, (char *)"\n"
		"__eq__(FFTSign o) -> bool\n"
		"FFTSign___eq__(FFTSign self, int const & o) -> bool\n"
		""},
	 { (char *)"FFTSign___ne__", _wrap_FFTSign___ne__, METH_VARARGS, (char *)"\n"
		"__ne__(FFTSign o) -> bool\n"
		"FFTSign___ne__(FFTSign self, int const & o) -> bool\n"
		""},
	 { (char *)"FFTSign___lt__", _wrap_FFTSign___lt__, METH_VARARGS, (char *)"FFTSign___lt__(FFTSign self, FFTSign o) -> bool"},
	 { (char *)"FFTSign___gt__", _wrap_FFTSign___gt__, METH_VARARGS, (char *)"FFTSign___gt__(FFTSign self, FFTSign o) -> bool"},
	 { (char *)"FFTSign___le__", _wrap_FFTSign___le__, METH_VARARGS, (char *)"FFTSign___le__(FFTSign self, FFTSign o) -> bool"},
	 { (char *)"FFTSign___ge__", _wrap_FFTSign___ge__, METH_VARARGS, (char *)"FFTSign___ge__(FFTSign self, FFTSign o) -> bool"},
	 { (char *)"FFTSign_size", _wrap_FFTSign_size, METH_VARARGS, (char *)"FFTSign_size() -> size_t"},
	 { (char *)"FFTSign_value_set", _wrap_FFTSign_value_set, METH_VARARGS, (char *)"FFTSign_value_set(FFTSign self, int value)"},
	 { (char *)"FFTSign_value_get", _wrap_FFTSign_value_get, METH_VARARGS, (char *)"FFTSign_value_get(FFTSign self) -> int"},
	 { (char *)"FFTSign_swigregister", FFTSign_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_ImageBeamCompensationType", _wrap_new_ImageBeamCompensationType, METH_VARARGS, (char *)"\n"
		"ImageBeamCompensationType()\n"
		"ImageBeamCompensationType(std::string s)\n"
		"new_ImageBeamCompensationType(int i) -> ImageBeamCompensationType\n"
		""},
	 { (char *)"delete_ImageBeamCompensationType", _wrap_delete_ImageBeamCompensationType, METH_VARARGS, (char *)"delete_ImageBeamCompensationType(ImageBeamCompensationType self)"},
	 { (char *)"ImageBeamCompensationType_toString", _wrap_ImageBeamCompensationType_toString, METH_VARARGS, (char *)"ImageBeamCompensationType_toString(ImageBeamCompensationType self) -> std::string"},
	 { (char *)"ImageBeamCompensationType___eq__", _wrap_ImageBeamCompensationType___eq__, METH_VARARGS, (char *)"\n"
		"__eq__(ImageBeamCompensationType o) -> bool\n"
		"ImageBeamCompensationType___eq__(ImageBeamCompensationType self, int const & o) -> bool\n"
		""},
	 { (char *)"ImageBeamCompensationType___ne__", _wrap_ImageBeamCompensationType___ne__, METH_VARARGS, (char *)"\n"
		"__ne__(ImageBeamCompensationType o) -> bool\n"
		"ImageBeamCompensationType___ne__(ImageBeamCompensationType self, int const & o) -> bool\n"
		""},
	 { (char *)"ImageBeamCompensationType___lt__", _wrap_ImageBeamCompensationType___lt__, METH_VARARGS, (char *)"ImageBeamCompensationType___lt__(ImageBeamCompensationType self, ImageBeamCompensationType o) -> bool"},
	 { (char *)"ImageBeamCompensationType___gt__", _wrap_ImageBeamCompensationType___gt__, METH_VARARGS, (char *)"ImageBeamCompensationType___gt__(ImageBeamCompensationType self, ImageBeamCompensationType o) -> bool"},
	 { (char *)"ImageBeamCompensationType___le__", _wrap_ImageBeamCompensationType___le__, METH_VARARGS, (char *)"ImageBeamCompensationType___le__(ImageBeamCompensationType self, ImageBeamCompensationType o) -> bool"},
	 { (char *)"ImageBeamCompensationType___ge__", _wrap_ImageBeamCompensationType___ge__, METH_VARARGS, (char *)"ImageBeamCompensationType___ge__(ImageBeamCompensationType self, ImageBeamCompensationType o) -> bool"},
	 { (char *)"ImageBeamCompensationType_size", _wrap_ImageBeamCompensationType_size, METH_VARARGS, (char *)"ImageBeamCompensationType_size() -> size_t"},
	 { (char *)"ImageBeamCompensationType_value_set", _wrap_ImageBeamCompensationType_value_set, METH_VARARGS, (char *)"ImageBeamCompensationType_value_set(ImageBeamCompensationType self, int value)"},
	 { (char *)"ImageBeamCompensationType_value_get", _wrap_ImageBeamCompensationType_value_get, METH_VARARGS, (char *)"ImageBeamCompensationType_value_get(ImageBeamCompensationType self) -> int"},
	 { (char *)"ImageBeamCompensationType_swigregister", ImageBeamCompensationType_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_ImageFormationType", _wrap_new_ImageFormationType, METH_VARARGS, (char *)"\n"
		"ImageFormationType()\n"
		"ImageFormationType(std::string s)\n"
		"new_ImageFormationType(int i) -> ImageFormationType\n"
		""},
	 { (char *)"delete_ImageFormationType", _wrap_delete_ImageFormationType, METH_VARARGS, (char *)"delete_ImageFormationType(ImageFormationType self)"},
	 { (char *)"ImageFormationType_toString", _wrap_ImageFormationType_toString, METH_VARARGS, (char *)"ImageFormationType_toString(ImageFormationType self) -> std::string"},
	 { (char *)"ImageFormationType___eq__", _wrap_ImageFormationType___eq__, METH_VARARGS, (char *)"\n"
		"__eq__(ImageFormationType o) -> bool\n"
		"ImageFormationType___eq__(ImageFormationType self, int const & o) -> bool\n"
		""},
	 { (char *)"ImageFormationType___ne__", _wrap_ImageFormationType___ne__, METH_VARARGS, (char *)"\n"
		"__ne__(ImageFormationType o) -> bool\n"
		"ImageFormationType___ne__(ImageFormationType self, int const & o) -> bool\n"
		""},
	 { (char *)"ImageFormationType___lt__", _wrap_ImageFormationType___lt__, METH_VARARGS, (char *)"ImageFormationType___lt__(ImageFormationType self, ImageFormationType o) -> bool"},
	 { (char *)"ImageFormationType___gt__", _wrap_ImageFormationType___gt__, METH_VARARGS, (char *)"ImageFormationType___gt__(ImageFormationType self, ImageFormationType o) -> bool"},
	 { (char *)"ImageFormationType___le__", _wrap_ImageFormationType___le__, METH_VARARGS, (char *)"ImageFormationType___le__(ImageFormationType self, ImageFormationType o) -> bool"},
	 { (char *)"ImageFormationType___ge__", _wrap_ImageFormationType___ge__, METH_VARARGS, (char *)"ImageFormationType___ge__(ImageFormationType self, ImageFormationType o) -> bool"},
	 { (char *)"ImageFormationType_size", _wrap_ImageFormationType_size, METH_VARARGS, (char *)"ImageFormationType_size() -> size_t"},
	 { (char *)"ImageFormationType_value_set", _wrap_ImageFormationType_value_set, METH_VARARGS, (char *)"ImageFormationType_value_set(ImageFormationType self, int value)"},
	 { (char *)"ImageFormationType_value_get", _wrap_ImageFormationType_value_get, METH_VARARGS, (char *)"ImageFormationType_value_get(ImageFormationType self) -> int"},
	 { (char *)"ImageFormationType_swigregister", ImageFormationType_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_MagnificationMethod", _wrap_new_MagnificationMethod, METH_VARARGS, (char *)"\n"
		"MagnificationMethod()\n"
		"MagnificationMethod(std::string s)\n"
		"new_MagnificationMethod(int i) -> MagnificationMethod\n"
		""},
	 { (char *)"delete_MagnificationMethod", _wrap_delete_MagnificationMethod, METH_VARARGS, (char *)"delete_MagnificationMethod(MagnificationMethod self)"},
	 { (char *)"MagnificationMethod_toString", _wrap_MagnificationMethod_toString, METH_VARARGS, (char *)"MagnificationMethod_toString(MagnificationMethod self) -> std::string"},
	 { (char *)"MagnificationMethod___eq__", _wrap_MagnificationMethod___eq__, METH_VARARGS, (char *)"\n"
		"__eq__(MagnificationMethod o) -> bool\n"
		"MagnificationMethod___eq__(MagnificationMethod self, int const & o) -> bool\n"
		""},
	 { (char *)"MagnificationMethod___ne__", _wrap_MagnificationMethod___ne__, METH_VARARGS, (char *)"\n"
		"__ne__(MagnificationMethod o) -> bool\n"
		"MagnificationMethod___ne__(MagnificationMethod self, int const & o) -> bool\n"
		""},
	 { (char *)"MagnificationMethod___lt__", _wrap_MagnificationMethod___lt__, METH_VARARGS, (char *)"MagnificationMethod___lt__(MagnificationMethod self, MagnificationMethod o) -> bool"},
	 { (char *)"MagnificationMethod___gt__", _wrap_MagnificationMethod___gt__, METH_VARARGS, (char *)"MagnificationMethod___gt__(MagnificationMethod self, MagnificationMethod o) -> bool"},
	 { (char *)"MagnificationMethod___le__", _wrap_MagnificationMethod___le__, METH_VARARGS, (char *)"MagnificationMethod___le__(MagnificationMethod self, MagnificationMethod o) -> bool"},
	 { (char *)"MagnificationMethod___ge__", _wrap_MagnificationMethod___ge__, METH_VARARGS, (char *)"MagnificationMethod___ge__(MagnificationMethod self, MagnificationMethod o) -> bool"},
	 { (char *)"MagnificationMethod_size", _wrap_MagnificationMethod_size, METH_VARARGS, (char *)"MagnificationMethod_size() -> size_t"},
	 { (char *)"MagnificationMethod_value_set", _wrap_MagnificationMethod_value_set, METH_VARARGS, (char *)"MagnificationMethod_value_set(MagnificationMethod self, int value)"},
	 { (char *)"MagnificationMethod_value_get", _wrap_MagnificationMethod_value_get, METH_VARARGS, (char *)"MagnificationMethod_value_get(MagnificationMethod self) -> int"},
	 { (char *)"MagnificationMethod_swigregister", MagnificationMethod_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_OrientationType", _wrap_new_OrientationType, METH_VARARGS, (char *)"\n"
		"OrientationType()\n"
		"OrientationType(std::string s)\n"
		"new_OrientationType(int i) -> OrientationType\n"
		""},
	 { (char *)"delete_OrientationType", _wrap_delete_OrientationType, METH_VARARGS, (char *)"delete_OrientationType(OrientationType self)"},
	 { (char *)"OrientationType_toString", _wrap_OrientationType_toString, METH_VARARGS, (char *)"OrientationType_toString(OrientationType self) -> std::string"},
	 { (char *)"OrientationType___eq__", _wrap_OrientationType___eq__, METH_VARARGS, (char *)"\n"
		"__eq__(OrientationType o) -> bool\n"
		"OrientationType___eq__(OrientationType self, int const & o) -> bool\n"
		""},
	 { (char *)"OrientationType___ne__", _wrap_OrientationType___ne__, METH_VARARGS, (char *)"\n"
		"__ne__(OrientationType o) -> bool\n"
		"OrientationType___ne__(OrientationType self, int const & o) -> bool\n"
		""},
	 { (char *)"OrientationType___lt__", _wrap_OrientationType___lt__, METH_VARARGS, (char *)"OrientationType___lt__(OrientationType self, OrientationType o) -> bool"},
	 { (char *)"OrientationType___gt__", _wrap_OrientationType___gt__, METH_VARARGS, (char *)"OrientationType___gt__(OrientationType self, OrientationType o) -> bool"},
	 { (char *)"OrientationType___le__", _wrap_OrientationType___le__, METH_VARARGS, (char *)"OrientationType___le__(OrientationType self, OrientationType o) -> bool"},
	 { (char *)"OrientationType___ge__", _wrap_OrientationType___ge__, METH_VARARGS, (char *)"OrientationType___ge__(OrientationType self, OrientationType o) -> bool"},
	 { (char *)"OrientationType_size", _wrap_OrientationType_size, METH_VARARGS, (char *)"OrientationType_size() -> size_t"},
	 { (char *)"OrientationType_value_set", _wrap_OrientationType_value_set, METH_VARARGS, (char *)"OrientationType_value_set(OrientationType self, int value)"},
	 { (char *)"OrientationType_value_get", _wrap_OrientationType_value_get, METH_VARARGS, (char *)"OrientationType_value_get(OrientationType self) -> int"},
	 { (char *)"OrientationType_swigregister", OrientationType_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_PixelType", _wrap_new_PixelType, METH_VARARGS, (char *)"\n"
		"PixelType()\n"
		"PixelType(std::string s)\n"
		"new_PixelType(int i) -> PixelType\n"
		""},
	 { (char *)"delete_PixelType", _wrap_delete_PixelType, METH_VARARGS, (char *)"delete_PixelType(PixelType self)"},
	 { (char *)"PixelType_toString", _wrap_PixelType_toString, METH_VARARGS, (char *)"PixelType_toString(PixelType self) -> std::string"},
	 { (char *)"PixelType___eq__", _wrap_PixelType___eq__, METH_VARARGS, (char *)"\n"
		"__eq__(PixelType o) -> bool\n"
		"PixelType___eq__(PixelType self, int const & o) -> bool\n"
		""},
	 { (char *)"PixelType___ne__", _wrap_PixelType___ne__, METH_VARARGS, (char *)"\n"
		"__ne__(PixelType o) -> bool\n"
		"PixelType___ne__(PixelType self, int const & o) -> bool\n"
		""},
	 { (char *)"PixelType___lt__", _wrap_PixelType___lt__, METH_VARARGS, (char *)"PixelType___lt__(PixelType self, PixelType o) -> bool"},
	 { (char *)"PixelType___gt__", _wrap_PixelType___gt__, METH_VARARGS, (char *)"PixelType___gt__(PixelType self, PixelType o) -> bool"},
	 { (char *)"PixelType___le__", _wrap_PixelType___le__, METH_VARARGS, (char *)"PixelType___le__(PixelType self, PixelType o) -> bool"},
	 { (char *)"PixelType___ge__", _wrap_PixelType___ge__, METH_VARARGS, (char *)"PixelType___ge__(PixelType self, PixelType o) -> bool"},
	 { (char *)"PixelType_size", _wrap_PixelType_size, METH_VARARGS, (char *)"PixelType_size() -> size_t"},
	 { (char *)"PixelType_value_set", _wrap_PixelType_value_set, METH_VARARGS, (char *)"PixelType_value_set(PixelType self, int value)"},
	 { (char *)"PixelType_value_get", _wrap_PixelType_value_get, METH_VARARGS, (char *)"PixelType_value_get(PixelType self) -> int"},
	 { (char *)"PixelType_swigregister", PixelType_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_PolarizationSequenceType", _wrap_new_PolarizationSequenceType, METH_VARARGS, (char *)"\n"
		"PolarizationSequenceType()\n"
		"PolarizationSequenceType(std::string s)\n"
		"new_PolarizationSequenceType(int i) -> PolarizationSequenceType\n"
		""},
	 { (char *)"delete_PolarizationSequenceType", _wrap_delete_PolarizationSequenceType, METH_VARARGS, (char *)"delete_PolarizationSequenceType(PolarizationSequenceType self)"},
	 { (char *)"PolarizationSequenceType_toString", _wrap_PolarizationSequenceType_toString, METH_VARARGS, (char *)"PolarizationSequenceType_toString(PolarizationSequenceType self) -> std::string"},
	 { (char *)"PolarizationSequenceType___eq__", _wrap_PolarizationSequenceType___eq__, METH_VARARGS, (char *)"\n"
		"__eq__(PolarizationSequenceType o) -> bool\n"
		"PolarizationSequenceType___eq__(PolarizationSequenceType self, int const & o) -> bool\n"
		""},
	 { (char *)"PolarizationSequenceType___ne__", _wrap_PolarizationSequenceType___ne__, METH_VARARGS, (char *)"\n"
		"__ne__(PolarizationSequenceType o) -> bool\n"
		"PolarizationSequenceType___ne__(PolarizationSequenceType self, int const & o) -> bool\n"
		""},
	 { (char *)"PolarizationSequenceType___lt__", _wrap_PolarizationSequenceType___lt__, METH_VARARGS, (char *)"PolarizationSequenceType___lt__(PolarizationSequenceType self, PolarizationSequenceType o) -> bool"},
	 { (char *)"PolarizationSequenceType___gt__", _wrap_PolarizationSequenceType___gt__, METH_VARARGS, (char *)"PolarizationSequenceType___gt__(PolarizationSequenceType self, PolarizationSequenceType o) -> bool"},
	 { (char *)"PolarizationSequenceType___le__", _wrap_PolarizationSequenceType___le__, METH_VARARGS, (char *)"PolarizationSequenceType___le__(PolarizationSequenceType self, PolarizationSequenceType o) -> bool"},
	 { (char *)"PolarizationSequenceType___ge__", _wrap_PolarizationSequenceType___ge__, METH_VARARGS, (char *)"PolarizationSequenceType___ge__(PolarizationSequenceType self, PolarizationSequenceType o) -> bool"},
	 { (char *)"PolarizationSequenceType_size", _wrap_PolarizationSequenceType_size, METH_VARARGS, (char *)"PolarizationSequenceType_size() -> size_t"},
	 { (char *)"PolarizationSequenceType_value_set", _wrap_PolarizationSequenceType_value_set, METH_VARARGS, (char *)"PolarizationSequenceType_value_set(PolarizationSequenceType self, int value)"},
	 { (char *)"PolarizationSequenceType_value_get", _wrap_PolarizationSequenceType_value_get, METH_VARARGS, (char *)"PolarizationSequenceType_value_get(PolarizationSequenceType self) -> int"},
	 { (char *)"PolarizationSequenceType_swigregister", PolarizationSequenceType_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_PolarizationType", _wrap_new_PolarizationType, METH_VARARGS, (char *)"\n"
		"PolarizationType()\n"
		"PolarizationType(std::string s)\n"
		"new_PolarizationType(int i) -> PolarizationType\n"
		""},
	 { (char *)"delete_PolarizationType", _wrap_delete_PolarizationType, METH_VARARGS, (char *)"delete_PolarizationType(PolarizationType self)"},
	 { (char *)"PolarizationType_toString", _wrap_PolarizationType_toString, METH_VARARGS, (char *)"PolarizationType_toString(PolarizationType self) -> std::string"},
	 { (char *)"PolarizationType___eq__", _wrap_PolarizationType___eq__, METH_VARARGS, (char *)"\n"
		"__eq__(PolarizationType o) -> bool\n"
		"PolarizationType___eq__(PolarizationType self, int const & o) -> bool\n"
		""},
	 { (char *)"PolarizationType___ne__", _wrap_PolarizationType___ne__, METH_VARARGS, (char *)"\n"
		"__ne__(PolarizationType o) -> bool\n"
		"PolarizationType___ne__(PolarizationType self, int const & o) -> bool\n"
		""},
	 { (char *)"PolarizationType___lt__", _wrap_PolarizationType___lt__, METH_VARARGS, (char *)"PolarizationType___lt__(PolarizationType self, PolarizationType o) -> bool"},
	 { (char *)"PolarizationType___gt__", _wrap_PolarizationType___gt__, METH_VARARGS, (char *)"PolarizationType___gt__(PolarizationType self, PolarizationType o) -> bool"},
	 { (char *)"PolarizationType___le__", _wrap_PolarizationType___le__, METH_VARARGS, (char *)"PolarizationType___le__(PolarizationType self, PolarizationType o) -> bool"},
	 { (char *)"PolarizationType___ge__", _wrap_PolarizationType___ge__, METH_VARARGS, (char *)"PolarizationType___ge__(PolarizationType self, PolarizationType o) -> bool"},
	 { (char *)"PolarizationType_size", _wrap_PolarizationType_size, METH_VARARGS, (char *)"PolarizationType_size() -> size_t"},
	 { (char *)"PolarizationType_value_set", _wrap_PolarizationType_value_set, METH_VARARGS, (char *)"PolarizationType_value_set(PolarizationType self, int value)"},
	 { (char *)"PolarizationType_value_get", _wrap_PolarizationType_value_get, METH_VARARGS, (char *)"PolarizationType_value_get(PolarizationType self) -> int"},
	 { (char *)"PolarizationType_swigregister", PolarizationType_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_ProjectionType", _wrap_new_ProjectionType, METH_VARARGS, (char *)"\n"
		"ProjectionType()\n"
		"ProjectionType(std::string s)\n"
		"new_ProjectionType(int i) -> ProjectionType\n"
		""},
	 { (char *)"delete_ProjectionType", _wrap_delete_ProjectionType, METH_VARARGS, (char *)"delete_ProjectionType(ProjectionType self)"},
	 { (char *)"ProjectionType_toString", _wrap_ProjectionType_toString, METH_VARARGS, (char *)"ProjectionType_toString(ProjectionType self) -> std::string"},
	 { (char *)"ProjectionType___eq__", _wrap_ProjectionType___eq__, METH_VARARGS, (char *)"\n"
		"__eq__(ProjectionType o) -> bool\n"
		"ProjectionType___eq__(ProjectionType self, int const & o) -> bool\n"
		""},
	 { (char *)"ProjectionType___ne__", _wrap_ProjectionType___ne__, METH_VARARGS, (char *)"\n"
		"__ne__(ProjectionType o) -> bool\n"
		"ProjectionType___ne__(ProjectionType self, int const & o) -> bool\n"
		""},
	 { (char *)"ProjectionType___lt__", _wrap_ProjectionType___lt__, METH_VARARGS, (char *)"ProjectionType___lt__(ProjectionType self, ProjectionType o) -> bool"},
	 { (char *)"ProjectionType___gt__", _wrap_ProjectionType___gt__, METH_VARARGS, (char *)"ProjectionType___gt__(ProjectionType self, ProjectionType o) -> bool"},
	 { (char *)"ProjectionType___le__", _wrap_ProjectionType___le__, METH_VARARGS, (char *)"ProjectionType___le__(ProjectionType self, ProjectionType o) -> bool"},
	 { (char *)"ProjectionType___ge__", _wrap_ProjectionType___ge__, METH_VARARGS, (char *)"ProjectionType___ge__(ProjectionType self, ProjectionType o) -> bool"},
	 { (char *)"ProjectionType_size", _wrap_ProjectionType_size, METH_VARARGS, (char *)"ProjectionType_size() -> size_t"},
	 { (char *)"ProjectionType_value_set", _wrap_ProjectionType_value_set, METH_VARARGS, (char *)"ProjectionType_value_set(ProjectionType self, int value)"},
	 { (char *)"ProjectionType_value_get", _wrap_ProjectionType_value_get, METH_VARARGS, (char *)"ProjectionType_value_get(ProjectionType self) -> int"},
	 { (char *)"ProjectionType_swigregister", ProjectionType_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_RMAlgoType", _wrap_new_RMAlgoType, METH_VARARGS, (char *)"\n"
		"RMAlgoType()\n"
		"RMAlgoType(std::string s)\n"
		"new_RMAlgoType(int i) -> RMAlgoType\n"
		""},
	 { (char *)"delete_RMAlgoType", _wrap_delete_RMAlgoType, METH_VARARGS, (char *)"delete_RMAlgoType(RMAlgoType self)"},
	 { (char *)"RMAlgoType_toString", _wrap_RMAlgoType_toString, METH_VARARGS, (char *)"RMAlgoType_toString(RMAlgoType self) -> std::string"},
	 { (char *)"RMAlgoType___eq__", _wrap_RMAlgoType___eq__, METH_VARARGS, (char *)"\n"
		"__eq__(RMAlgoType o) -> bool\n"
		"RMAlgoType___eq__(RMAlgoType self, int const & o) -> bool\n"
		""},
	 { (char *)"RMAlgoType___ne__", _wrap_RMAlgoType___ne__, METH_VARARGS, (char *)"\n"
		"__ne__(RMAlgoType o) -> bool\n"
		"RMAlgoType___ne__(RMAlgoType self, int const & o) -> bool\n"
		""},
	 { (char *)"RMAlgoType___lt__", _wrap_RMAlgoType___lt__, METH_VARARGS, (char *)"RMAlgoType___lt__(RMAlgoType self, RMAlgoType o) -> bool"},
	 { (char *)"RMAlgoType___gt__", _wrap_RMAlgoType___gt__, METH_VARARGS, (char *)"RMAlgoType___gt__(RMAlgoType self, RMAlgoType o) -> bool"},
	 { (char *)"RMAlgoType___le__", _wrap_RMAlgoType___le__, METH_VARARGS, (char *)"RMAlgoType___le__(RMAlgoType self, RMAlgoType o) -> bool"},
	 { (char *)"RMAlgoType___ge__", _wrap_RMAlgoType___ge__, METH_VARARGS, (char *)"RMAlgoType___ge__(RMAlgoType self, RMAlgoType o) -> bool"},
	 { (char *)"RMAlgoType_size", _wrap_RMAlgoType_size, METH_VARARGS, (char *)"RMAlgoType_size() -> size_t"},
	 { (char *)"RMAlgoType_value_set", _wrap_RMAlgoType_value_set, METH_VARARGS, (char *)"RMAlgoType_value_set(RMAlgoType self, int value)"},
	 { (char *)"RMAlgoType_value_get", _wrap_RMAlgoType_value_get, METH_VARARGS, (char *)"RMAlgoType_value_get(RMAlgoType self) -> int"},
	 { (char *)"RMAlgoType_swigregister", RMAlgoType_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_RadarModeType", _wrap_new_RadarModeType, METH_VARARGS, (char *)"\n"
		"RadarModeType()\n"
		"RadarModeType(std::string s)\n"
		"new_RadarModeType(int i) -> RadarModeType\n"
		""},
	 { (char *)"delete_RadarModeType", _wrap_delete_RadarModeType, METH_VARARGS, (char *)"delete_RadarModeType(RadarModeType self)"},
	 { (char *)"RadarModeType_toString", _wrap_RadarModeType_toString, METH_VARARGS, (char *)"RadarModeType_toString(RadarModeType self) -> std::string"},
	 { (char *)"RadarModeType___eq__", _wrap_RadarModeType___eq__, METH_VARARGS, (char *)"\n"
		"__eq__(RadarModeType o) -> bool\n"
		"RadarModeType___eq__(RadarModeType self, int const & o) -> bool\n"
		""},
	 { (char *)"RadarModeType___ne__", _wrap_RadarModeType___ne__, METH_VARARGS, (char *)"\n"
		"__ne__(RadarModeType o) -> bool\n"
		"RadarModeType___ne__(RadarModeType self, int const & o) -> bool\n"
		""},
	 { (char *)"RadarModeType___lt__", _wrap_RadarModeType___lt__, METH_VARARGS, (char *)"RadarModeType___lt__(RadarModeType self, RadarModeType o) -> bool"},
	 { (char *)"RadarModeType___gt__", _wrap_RadarModeType___gt__, METH_VARARGS, (char *)"RadarModeType___gt__(RadarModeType self, RadarModeType o) -> bool"},
	 { (char *)"RadarModeType___le__", _wrap_RadarModeType___le__, METH_VARARGS, (char *)"RadarModeType___le__(RadarModeType self, RadarModeType o) -> bool"},
	 { (char *)"RadarModeType___ge__", _wrap_RadarModeType___ge__, METH_VARARGS, (char *)"RadarModeType___ge__(RadarModeType self, RadarModeType o) -> bool"},
	 { (char *)"RadarModeType_size", _wrap_RadarModeType_size, METH_VARARGS, (char *)"RadarModeType_size() -> size_t"},
	 { (char *)"RadarModeType_value_set", _wrap_RadarModeType_value_set, METH_VARARGS, (char *)"RadarModeType_value_set(RadarModeType self, int value)"},
	 { (char *)"RadarModeType_value_get", _wrap_RadarModeType_value_get, METH_VARARGS, (char *)"RadarModeType_value_get(RadarModeType self) -> int"},
	 { (char *)"RadarModeType_swigregister", RadarModeType_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_RegionType", _wrap_new_RegionType, METH_VARARGS, (char *)"\n"
		"RegionType()\n"
		"RegionType(std::string s)\n"
		"new_RegionType(int i) -> RegionType\n"
		""},
	 { (char *)"delete_RegionType", _wrap_delete_RegionType, METH_VARARGS, (char *)"delete_RegionType(RegionType self)"},
	 { (char *)"RegionType_toString", _wrap_RegionType_toString, METH_VARARGS, (char *)"RegionType_toString(RegionType self) -> std::string"},
	 { (char *)"RegionType___eq__", _wrap_RegionType___eq__, METH_VARARGS, (char *)"\n"
		"__eq__(RegionType o) -> bool\n"
		"RegionType___eq__(RegionType self, int const & o) -> bool\n"
		""},
	 { (char *)"RegionType___ne__", _wrap_RegionType___ne__, METH_VARARGS, (char *)"\n"
		"__ne__(RegionType o) -> bool\n"
		"RegionType___ne__(RegionType self, int const & o) -> bool\n"
		""},
	 { (char *)"RegionType___lt__", _wrap_RegionType___lt__, METH_VARARGS, (char *)"RegionType___lt__(RegionType self, RegionType o) -> bool"},
	 { (char *)"RegionType___gt__", _wrap_RegionType___gt__, METH_VARARGS, (char *)"RegionType___gt__(RegionType self, RegionType o) -> bool"},
	 { (char *)"RegionType___le__", _wrap_RegionType___le__, METH_VARARGS, (char *)"RegionType___le__(RegionType self, RegionType o) -> bool"},
	 { (char *)"RegionType___ge__", _wrap_RegionType___ge__, METH_VARARGS, (char *)"RegionType___ge__(RegionType self, RegionType o) -> bool"},
	 { (char *)"RegionType_size", _wrap_RegionType_size, METH_VARARGS, (char *)"RegionType_size() -> size_t"},
	 { (char *)"RegionType_value_set", _wrap_RegionType_value_set, METH_VARARGS, (char *)"RegionType_value_set(RegionType self, int value)"},
	 { (char *)"RegionType_value_get", _wrap_RegionType_value_get, METH_VARARGS, (char *)"RegionType_value_get(RegionType self) -> int"},
	 { (char *)"RegionType_swigregister", RegionType_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_RowColEnum", _wrap_new_RowColEnum, METH_VARARGS, (char *)"\n"
		"RowColEnum()\n"
		"RowColEnum(std::string s)\n"
		"new_RowColEnum(int i) -> RowColEnum\n"
		""},
	 { (char *)"delete_RowColEnum", _wrap_delete_RowColEnum, METH_VARARGS, (char *)"delete_RowColEnum(RowColEnum self)"},
	 { (char *)"RowColEnum_toString", _wrap_RowColEnum_toString, METH_VARARGS, (char *)"RowColEnum_toString(RowColEnum self) -> std::string"},
	 { (char *)"RowColEnum___eq__", _wrap_RowColEnum___eq__, METH_VARARGS, (char *)"\n"
		"__eq__(RowColEnum o) -> bool\n"
		"RowColEnum___eq__(RowColEnum self, int const & o) -> bool\n"
		""},
	 { (char *)"RowColEnum___ne__", _wrap_RowColEnum___ne__, METH_VARARGS, (char *)"\n"
		"__ne__(RowColEnum o) -> bool\n"
		"RowColEnum___ne__(RowColEnum self, int const & o) -> bool\n"
		""},
	 { (char *)"RowColEnum___lt__", _wrap_RowColEnum___lt__, METH_VARARGS, (char *)"RowColEnum___lt__(RowColEnum self, RowColEnum o) -> bool"},
	 { (char *)"RowColEnum___gt__", _wrap_RowColEnum___gt__, METH_VARARGS, (char *)"RowColEnum___gt__(RowColEnum self, RowColEnum o) -> bool"},
	 { (char *)"RowColEnum___le__", _wrap_RowColEnum___le__, METH_VARARGS, (char *)"RowColEnum___le__(RowColEnum self, RowColEnum o) -> bool"},
	 { (char *)"RowColEnum___ge__", _wrap_RowColEnum___ge__, METH_VARARGS, (char *)"RowColEnum___ge__(RowColEnum self, RowColEnum o) -> bool"},
	 { (char *)"RowColEnum_size", _wrap_RowColEnum_size, METH_VARARGS, (char *)"RowColEnum_size() -> size_t"},
	 { (char *)"RowColEnum_value_set", _wrap_RowColEnum_value_set, METH_VARARGS, (char *)"RowColEnum_value_set(RowColEnum self, int value)"},
	 { (char *)"RowColEnum_value_get", _wrap_RowColEnum_value_get, METH_VARARGS, (char *)"RowColEnum_value_get(RowColEnum self) -> int"},
	 { (char *)"RowColEnum_swigregister", RowColEnum_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_SCPType", _wrap_new_SCPType, METH_VARARGS, (char *)"\n"
		"SCPType()\n"
		"SCPType(std::string s)\n"
		"new_SCPType(int i) -> SCPType\n"
		""},
	 { (char *)"delete_SCPType", _wrap_delete_SCPType, METH_VARARGS, (char *)"delete_SCPType(SCPType self)"},
	 { (char *)"SCPType_toString", _wrap_SCPType_toString, METH_VARARGS, (char *)"SCPType_toString(SCPType self) -> std::string"},
	 { (char *)"SCPType___eq__", _wrap_SCPType___eq__, METH_VARARGS, (char *)"\n"
		"__eq__(SCPType o) -> bool\n"
		"SCPType___eq__(SCPType self, int const & o) -> bool\n"
		""},
	 { (char *)"SCPType___ne__", _wrap_SCPType___ne__, METH_VARARGS, (char *)"\n"
		"__ne__(SCPType o) -> bool\n"
		"SCPType___ne__(SCPType self, int const & o) -> bool\n"
		""},
	 { (char *)"SCPType___lt__", _wrap_SCPType___lt__, METH_VARARGS, (char *)"SCPType___lt__(SCPType self, SCPType o) -> bool"},
	 { (char *)"SCPType___gt__", _wrap_SCPType___gt__, METH_VARARGS, (char *)"SCPType___gt__(SCPType self, SCPType o) -> bool"},
	 { (char *)"SCPType___le__", _wrap_SCPType___le__, METH_VARARGS, (char *)"SCPType___le__(SCPType self, SCPType o) -> bool"},
	 { (char *)"SCPType___ge__", _wrap_SCPType___ge__, METH_VARARGS, (char *)"SCPType___ge__(SCPType self, SCPType o) -> bool"},
	 { (char *)"SCPType_size", _wrap_SCPType_size, METH_VARARGS, (char *)"SCPType_size() -> size_t"},
	 { (char *)"SCPType_value_set", _wrap_SCPType_value_set, METH_VARARGS, (char *)"SCPType_value_set(SCPType self, int value)"},
	 { (char *)"SCPType_value_get", _wrap_SCPType_value_get, METH_VARARGS, (char *)"SCPType_value_get(SCPType self) -> int"},
	 { (char *)"SCPType_swigregister", SCPType_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_SideOfTrackType", _wrap_new_SideOfTrackType, METH_VARARGS, (char *)"\n"
		"SideOfTrackType()\n"
		"SideOfTrackType(std::string s)\n"
		"new_SideOfTrackType(int i) -> SideOfTrackType\n"
		""},
	 { (char *)"delete_SideOfTrackType", _wrap_delete_SideOfTrackType, METH_VARARGS, (char *)"delete_SideOfTrackType(SideOfTrackType self)"},
	 { (char *)"SideOfTrackType_toString", _wrap_SideOfTrackType_toString, METH_VARARGS, (char *)"SideOfTrackType_toString(SideOfTrackType self) -> std::string"},
	 { (char *)"SideOfTrackType___eq__", _wrap_SideOfTrackType___eq__, METH_VARARGS, (char *)"\n"
		"__eq__(SideOfTrackType o) -> bool\n"
		"SideOfTrackType___eq__(SideOfTrackType self, int const & o) -> bool\n"
		""},
	 { (char *)"SideOfTrackType___ne__", _wrap_SideOfTrackType___ne__, METH_VARARGS, (char *)"\n"
		"__ne__(SideOfTrackType o) -> bool\n"
		"SideOfTrackType___ne__(SideOfTrackType self, int const & o) -> bool\n"
		""},
	 { (char *)"SideOfTrackType___lt__", _wrap_SideOfTrackType___lt__, METH_VARARGS, (char *)"SideOfTrackType___lt__(SideOfTrackType self, SideOfTrackType o) -> bool"},
	 { (char *)"SideOfTrackType___gt__", _wrap_SideOfTrackType___gt__, METH_VARARGS, (char *)"SideOfTrackType___gt__(SideOfTrackType self, SideOfTrackType o) -> bool"},
	 { (char *)"SideOfTrackType___le__", _wrap_SideOfTrackType___le__, METH_VARARGS, (char *)"SideOfTrackType___le__(SideOfTrackType self, SideOfTrackType o) -> bool"},
	 { (char *)"SideOfTrackType___ge__", _wrap_SideOfTrackType___ge__, METH_VARARGS, (char *)"SideOfTrackType___ge__(SideOfTrackType self, SideOfTrackType o) -> bool"},
	 { (char *)"SideOfTrackType_size", _wrap_SideOfTrackType_size, METH_VARARGS, (char *)"SideOfTrackType_size() -> size_t"},
	 { (char *)"SideOfTrackType_value_set", _wrap_SideOfTrackType_value_set, METH_VARARGS, (char *)"SideOfTrackType_value_set(SideOfTrackType self, int value)"},
	 { (char *)"SideOfTrackType_value_get", _wrap_SideOfTrackType_value_get, METH_VARARGS, (char *)"SideOfTrackType_value_get(SideOfTrackType self) -> int"},
	 { (char *)"SideOfTrackType_swigregister", SideOfTrackType_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_SlowTimeBeamCompensationType", _wrap_new_SlowTimeBeamCompensationType, METH_VARARGS, (char *)"\n"
		"SlowTimeBeamCompensationType()\n"
		"SlowTimeBeamCompensationType(std::string s)\n"
		"new_SlowTimeBeamCompensationType(int i) -> SlowTimeBeamCompensationType\n"
		""},
	 { (char *)"delete_SlowTimeBeamCompensationType", _wrap_delete_SlowTimeBeamCompensationType, METH_VARARGS, (char *)"delete_SlowTimeBeamCompensationType(SlowTimeBeamCompensationType self)"},
	 { (char *)"SlowTimeBeamCompensationType_toString", _wrap_SlowTimeBeamCompensationType_toString, METH_VARARGS, (char *)"SlowTimeBeamCompensationType_toString(SlowTimeBeamCompensationType self) -> std::string"},
	 { (char *)"SlowTimeBeamCompensationType___eq__", _wrap_SlowTimeBeamCompensationType___eq__, METH_VARARGS, (char *)"\n"
		"__eq__(SlowTimeBeamCompensationType o) -> bool\n"
		"SlowTimeBeamCompensationType___eq__(SlowTimeBeamCompensationType self, int const & o) -> bool\n"
		""},
	 { (char *)"SlowTimeBeamCompensationType___ne__", _wrap_SlowTimeBeamCompensationType___ne__, METH_VARARGS, (char *)"\n"
		"__ne__(SlowTimeBeamCompensationType o) -> bool\n"
		"SlowTimeBeamCompensationType___ne__(SlowTimeBeamCompensationType self, int const & o) -> bool\n"
		""},
	 { (char *)"SlowTimeBeamCompensationType___lt__", _wrap_SlowTimeBeamCompensationType___lt__, METH_VARARGS, (char *)"SlowTimeBeamCompensationType___lt__(SlowTimeBeamCompensationType self, SlowTimeBeamCompensationType o) -> bool"},
	 { (char *)"SlowTimeBeamCompensationType___gt__", _wrap_SlowTimeBeamCompensationType___gt__, METH_VARARGS, (char *)"SlowTimeBeamCompensationType___gt__(SlowTimeBeamCompensationType self, SlowTimeBeamCompensationType o) -> bool"},
	 { (char *)"SlowTimeBeamCompensationType___le__", _wrap_SlowTimeBeamCompensationType___le__, METH_VARARGS, (char *)"SlowTimeBeamCompensationType___le__(SlowTimeBeamCompensationType self, SlowTimeBeamCompensationType o) -> bool"},
	 { (char *)"SlowTimeBeamCompensationType___ge__", _wrap_SlowTimeBeamCompensationType___ge__, METH_VARARGS, (char *)"SlowTimeBeamCompensationType___ge__(SlowTimeBeamCompensationType self, SlowTimeBeamCompensationType o) -> bool"},
	 { (char *)"SlowTimeBeamCompensationType_size", _wrap_SlowTimeBeamCompensationType_size, METH_VARARGS, (char *)"SlowTimeBeamCompensationType_size() -> size_t"},
	 { (char *)"SlowTimeBeamCompensationType_value_set", _wrap_SlowTimeBeamCompensationType_value_set, METH_VARARGS, (char *)"SlowTimeBeamCompensationType_value_set(SlowTimeBeamCompensationType self, int value)"},
	 { (char *)"SlowTimeBeamCompensationType_value_get", _wrap_SlowTimeBeamCompensationType_value_get, METH_VARARGS, (char *)"SlowTimeBeamCompensationType_value_get(SlowTimeBeamCompensationType self) -> int"},
	 { (char *)"SlowTimeBeamCompensationType_swigregister", SlowTimeBeamCompensationType_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_XYZEnum", _wrap_new_XYZEnum, METH_VARARGS, (char *)"\n"
		"XYZEnum()\n"
		"XYZEnum(std::string s)\n"
		"new_XYZEnum(int i) -> XYZEnum\n"
		""},
	 { (char *)"delete_XYZEnum", _wrap_delete_XYZEnum, METH_VARARGS, (char *)"delete_XYZEnum(XYZEnum self)"},
	 { (char *)"XYZEnum_toString", _wrap_XYZEnum_toString, METH_VARARGS, (char *)"XYZEnum_toString(XYZEnum self) -> std::string"},
	 { (char *)"XYZEnum___eq__", _wrap_XYZEnum___eq__, METH_VARARGS, (char *)"\n"
		"__eq__(XYZEnum o) -> bool\n"
		"XYZEnum___eq__(XYZEnum self, int const & o) -> bool\n"
		""},
	 { (char *)"XYZEnum___ne__", _wrap_XYZEnum___ne__, METH_VARARGS, (char *)"\n"
		"__ne__(XYZEnum o) -> bool\n"
		"XYZEnum___ne__(XYZEnum self, int const & o) -> bool\n"
		""},
	 { (char *)"XYZEnum___lt__", _wrap_XYZEnum___lt__, METH_VARARGS, (char *)"XYZEnum___lt__(XYZEnum self, XYZEnum o) -> bool"},
	 { (char *)"XYZEnum___gt__", _wrap_XYZEnum___gt__, METH_VARARGS, (char *)"XYZEnum___gt__(XYZEnum self, XYZEnum o) -> bool"},
	 { (char *)"XYZEnum___le__", _wrap_XYZEnum___le__, METH_VARARGS, (char *)"XYZEnum___le__(XYZEnum self, XYZEnum o) -> bool"},
	 { (char *)"XYZEnum___ge__", _wrap_XYZEnum___ge__, METH_VARARGS, (char *)"XYZEnum___ge__(XYZEnum self, XYZEnum o) -> bool"},
	 { (char *)"XYZEnum_size", _wrap_XYZEnum_size, METH_VARARGS, (char *)"XYZEnum_size() -> size_t"},
	 { (char *)"XYZEnum_value_set", _wrap_XYZEnum_value_set, METH_VARARGS, (char *)"XYZEnum_value_set(XYZEnum self, int value)"},
	 { (char *)"XYZEnum_value_get", _wrap_XYZEnum_value_get, METH_VARARGS, (char *)"XYZEnum_value_get(XYZEnum self) -> int"},
	 { (char *)"XYZEnum_swigregister", XYZEnum_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_DESValidationException", _wrap_new_DESValidationException, METH_VARARGS, (char *)"\n"
		"DESValidationException()\n"
		"DESValidationException(Context c)\n"
		"DESValidationException(std::string const & msg)\n"
		"new_DESValidationException(Throwable t, Context c) -> DESValidationException\n"
		""},
	 { (char *)"delete_DESValidationException", _wrap_delete_DESValidationException, METH_VARARGS, (char *)"delete_DESValidationException(DESValidationException self)"},
	 { (char *)"DESValidationException_getType", _wrap_DESValidationException_getType, METH_VARARGS, (char *)"DESValidationException_getType(DESValidationException self) -> std::string"},
	 { (char *)"DESValidationException_swigregister", DESValidationException_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_DecorrType", _wrap_new_DecorrType, METH_VARARGS, (char *)"\n"
		"DecorrType(double ccz=0, double dr=0)\n"
		"DecorrType(double ccz=0)\n"
		"DecorrType()\n"
		"new_DecorrType(DecorrType dt) -> DecorrType\n"
		""},
	 { (char *)"DecorrType___eq__", _wrap_DecorrType___eq__, METH_VARARGS, (char *)"DecorrType___eq__(DecorrType self, DecorrType rhs) -> bool"},
	 { (char *)"DecorrType_corrCoefZero_set", _wrap_DecorrType_corrCoefZero_set, METH_VARARGS, (char *)"DecorrType_corrCoefZero_set(DecorrType self, double corrCoefZero)"},
	 { (char *)"DecorrType_corrCoefZero_get", _wrap_DecorrType_corrCoefZero_get, METH_VARARGS, (char *)"DecorrType_corrCoefZero_get(DecorrType self) -> double"},
	 { (char *)"DecorrType_decorrRate_set", _wrap_DecorrType_decorrRate_set, METH_VARARGS, (char *)"DecorrType_decorrRate_set(DecorrType self, double decorrRate)"},
	 { (char *)"DecorrType_decorrRate_get", _wrap_DecorrType_decorrRate_get, METH_VARARGS, (char *)"DecorrType_decorrRate_get(DecorrType self) -> double"},
	 { (char *)"delete_DecorrType", _wrap_delete_DecorrType, METH_VARARGS, (char *)"delete_DecorrType(DecorrType self)"},
	 { (char *)"DecorrType_swigregister", DecorrType_swigregister, METH_VARARGS, nullptr},
	 { (char *)"Constants_getNumBytesPerPixel", _wrap_Constants_getNumBytesPerPixel, METH_VARARGS, (char *)"Constants_getNumBytesPerPixel(PixelType type) -> int"},
	 { (char *)"new_Constants", _wrap_new_Constants, METH_VARARGS, (char *)"new_Constants() -> Constants"},
	 { (char *)"delete_Constants", _wrap_delete_Constants, METH_VARARGS, (char *)"delete_Constants(Constants self)"},
	 { (char *)"Constants_swigregister", Constants_swigregister, METH_VARARGS, nullptr},
	 { (char *)"ReferencePoint_ecef_set", _wrap_ReferencePoint_ecef_set, METH_VARARGS, (char *)"ReferencePoint_ecef_set(ReferencePoint self, Vector3 ecef)"},
	 { (char *)"ReferencePoint_ecef_get", _wrap_ReferencePoint_ecef_get, METH_VARARGS, (char *)"ReferencePoint_ecef_get(ReferencePoint self) -> Vector3"},
	 { (char *)"ReferencePoint_rowCol_set", _wrap_ReferencePoint_rowCol_set, METH_VARARGS, (char *)"ReferencePoint_rowCol_set(ReferencePoint self, RowColDouble rowCol)"},
	 { (char *)"ReferencePoint_rowCol_get", _wrap_ReferencePoint_rowCol_get, METH_VARARGS, (char *)"ReferencePoint_rowCol_get(ReferencePoint self) -> RowColDouble"},
	 { (char *)"ReferencePoint_name_set", _wrap_ReferencePoint_name_set, METH_VARARGS, (char *)"ReferencePoint_name_set(ReferencePoint self, std::string const & name)"},
	 { (char *)"ReferencePoint_name_get", _wrap_ReferencePoint_name_get, METH_VARARGS, (char *)"ReferencePoint_name_get(ReferencePoint self) -> std::string const &"},
	 { (char *)"new_ReferencePoint", _wrap_new_ReferencePoint, METH_VARARGS, (char *)"\n"
		"ReferencePoint(double x=0, double y=0, double z=0, double row=0, double col=0)\n"
		"ReferencePoint(double x=0, double y=0, double z=0, double row=0)\n"
		"ReferencePoint(double x=0, double y=0, double z=0)\n"
		"ReferencePoint(double x=0, double y=0)\n"
		"ReferencePoint(double x=0)\n"
		"ReferencePoint()\n"
		"new_ReferencePoint(Vector3 xyz, RowColDouble rcd) -> ReferencePoint\n"
		""},
	 { (char *)"ReferencePoint___eq__", _wrap_ReferencePoint___eq__, METH_VARARGS, (char *)"ReferencePoint___eq__(ReferencePoint self, ReferencePoint x) -> bool"},
	 { (char *)"ReferencePoint___ne__", _wrap_ReferencePoint___ne__, METH_VARARGS, (char *)"ReferencePoint___ne__(ReferencePoint self, ReferencePoint x) -> bool"},
	 { (char *)"delete_ReferencePoint", _wrap_delete_ReferencePoint, METH_VARARGS, (char *)"delete_ReferencePoint(ReferencePoint self)"},
	 { (char *)"ReferencePoint_swigregister", ReferencePoint_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_SCP", _wrap_new_SCP, METH_VARARGS, (char *)"new_SCP() -> SCP"},
	 { (char *)"SCP_ecf_set", _wrap_SCP_ecf_set, METH_VARARGS, (char *)"SCP_ecf_set(SCP self, Vector3 ecf)"},
	 { (char *)"SCP_ecf_get", _wrap_SCP_ecf_get, METH_VARARGS, (char *)"SCP_ecf_get(SCP self) -> Vector3"},
	 { (char *)"SCP_llh_set", _wrap_SCP_llh_set, METH_VARARGS, (char *)"SCP_llh_set(SCP self, LatLonAlt llh)"},
	 { (char *)"SCP_llh_get", _wrap_SCP_llh_get, METH_VARARGS, (char *)"SCP_llh_get(SCP self) -> LatLonAlt"},
	 { (char *)"SCP___eq__", _wrap_SCP___eq__, METH_VARARGS, (char *)"SCP___eq__(SCP self, SCP rhs) -> bool"},
	 { (char *)"SCP___ne__", _wrap_SCP___ne__, METH_VARARGS, (char *)"SCP___ne__(SCP self, SCP rhs) -> bool"},
	 { (char *)"delete_SCP", _wrap_delete_SCP, METH_VARARGS, (char *)"delete_SCP(SCP self)"},
	 { (char *)"SCP_swigregister", SCP_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_AmplitudeTable", _wrap_new_AmplitudeTable, METH_VARARGS, (char *)"new_AmplitudeTable() -> AmplitudeTable"},
	 { (char *)"AmplitudeTable___eq__", _wrap_AmplitudeTable___eq__, METH_VARARGS, (char *)"AmplitudeTable___eq__(AmplitudeTable self, AmplitudeTable rhs) -> bool"},
	 { (char *)"AmplitudeTable___ne__", _wrap_AmplitudeTable___ne__, METH_VARARGS, (char *)"AmplitudeTable___ne__(AmplitudeTable self, AmplitudeTable rhs) -> bool"},
	 { (char *)"AmplitudeTable_clone", _wrap_AmplitudeTable_clone, METH_VARARGS, (char *)"AmplitudeTable_clone(AmplitudeTable self) -> AmplitudeTable"},
	 { (char *)"delete_AmplitudeTable", _wrap_delete_AmplitudeTable, METH_VARARGS, (char *)"delete_AmplitudeTable(AmplitudeTable self)"},
	 { (char *)"AmplitudeTable_swigregister", AmplitudeTable_swigregister, METH_VARARGS, nullptr},
	 { (char *)"getImageMode", _wrap_getImageMode, METH_VARARGS, (char *)"getImageMode(RadarModeType radarMode) -> six::ImageMode"},
	 { (char *)"new_MissingRequiredException", _wrap_new_MissingRequiredException, METH_VARARGS, (char *)"\n"
		"MissingRequiredException()\n"
		"MissingRequiredException(Context c)\n"
		"MissingRequiredException(std::string const & msg)\n"
		"new_MissingRequiredException(Throwable t, Context c) -> MissingRequiredException\n"
		""},
	 { (char *)"delete_MissingRequiredException", _wrap_delete_MissingRequiredException, METH_VARARGS, (char *)"delete_MissingRequiredException(MissingRequiredException self)"},
	 { (char *)"MissingRequiredException_getType", _wrap_MissingRequiredException_getType, METH_VARARGS, (char *)"MissingRequiredException_getType(MissingRequiredException self) -> std::string"},
	 { (char *)"MissingRequiredException_swigregister", MissingRequiredException_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_UninitializedValueException", _wrap_new_UninitializedValueException, METH_VARARGS, (char *)"\n"
		"UninitializedValueException()\n"
		"UninitializedValueException(Context c)\n"
		"UninitializedValueException(std::string const & msg)\n"
		"new_UninitializedValueException(Throwable t, Context c) -> UninitializedValueException\n"
		""},
	 { (char *)"delete_UninitializedValueException", _wrap_delete_UninitializedValueException, METH_VARARGS, (char *)"delete_UninitializedValueException(UninitializedValueException self)"},
	 { (char *)"UninitializedValueException_getType", _wrap_UninitializedValueException_getType, METH_VARARGS, (char *)"UninitializedValueException_getType(UninitializedValueException self) -> std::string"},
	 { (char *)"UninitializedValueException_swigregister", UninitializedValueException_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_Init", _wrap_new_Init, METH_VARARGS, (char *)"new_Init() -> Init"},
	 { (char *)"delete_Init", _wrap_delete_Init, METH_VARARGS, (char *)"delete_Init(Init self)"},
	 { (char *)"Init_swigregister", Init_swigregister, METH_VARARGS, nullptr},
	 { (char *)"delete_Parameter", _wrap_delete_Parameter, METH_VARARGS, (char *)"delete_Parameter(Parameter self)"},
	 { (char *)"new_Parameter", _wrap_new_Parameter, METH_VARARGS, (char *)"\n"
		"Parameter()\n"
		"new_Parameter(Parameter other) -> Parameter\n"
		""},
	 { (char *)"Parameter_str", _wrap_Parameter_str, METH_VARARGS, (char *)"Parameter_str(Parameter self) -> std::string"},
	 { (char *)"Parameter_getName", _wrap_Parameter_getName, METH_VARARGS, (char *)"Parameter_getName(Parameter self) -> std::string"},
	 { (char *)"Parameter_setName", _wrap_Parameter_setName, METH_VARARGS, (char *)"Parameter_setName(Parameter self, std::string name)"},
	 { (char *)"Parameter___eq__", _wrap_Parameter___eq__, METH_VARARGS, (char *)"Parameter___eq__(Parameter self, Parameter o) -> bool"},
	 { (char *)"Parameter___ne__", _wrap_Parameter___ne__, METH_VARARGS, (char *)"Parameter___ne__(Parameter self, Parameter o) -> bool"},
	 { (char *)"Parameter_setValue", _wrap_Parameter_setValue, METH_VARARGS, (char *)"Parameter_setValue(Parameter self, std::string const & str)"},
	 { (char *)"Parameter___str__", _wrap_Parameter___str__, METH_VARARGS, (char *)"Parameter___str__(Parameter self) -> std::string"},
	 { (char *)"Parameter___int__", _wrap_Parameter___int__, METH_VARARGS, (char *)"Parameter___int__(Parameter self) -> long"},
	 { (char *)"Parameter___float__", _wrap_Parameter___float__, METH_VARARGS, (char *)"Parameter___float__(Parameter self) -> double"},
	 { (char *)"Parameter_swigregister", Parameter_swigregister, METH_VARARGS, nullptr},
	 { (char *)"ParameterCollection_findParameterIndex", _wrap_ParameterCollection_findParameterIndex, METH_VARARGS, (char *)"ParameterCollection_findParameterIndex(ParameterCollection self, std::string const & paramName) -> size_t"},
	 { (char *)"ParameterCollection_findParameter", _wrap_ParameterCollection_findParameter, METH_VARARGS, (char *)"ParameterCollection_findParameter(ParameterCollection self, std::string const & paramName) -> Parameter"},
	 { (char *)"ParameterCollection_containsParameter", _wrap_ParameterCollection_containsParameter, METH_VARARGS, (char *)"ParameterCollection_containsParameter(ParameterCollection self, std::string const & paramName) -> bool"},
	 { (char *)"ParameterCollection_at", _wrap_ParameterCollection_at, METH_VARARGS, (char *)"\n"
		"at(size_t i) -> Parameter\n"
		"ParameterCollection_at(ParameterCollection self, size_t i) -> Parameter\n"
		""},
	 { (char *)"ParameterCollection_push_back", _wrap_ParameterCollection_push_back, METH_VARARGS, (char *)"ParameterCollection_push_back(ParameterCollection self, Parameter p)"},
	 { (char *)"ParameterCollection_size", _wrap_ParameterCollection_size, METH_VARARGS, (char *)"ParameterCollection_size(ParameterCollection self) -> size_t"},
	 { (char *)"ParameterCollection_empty", _wrap_ParameterCollection_empty, METH_VARARGS, (char *)"ParameterCollection_empty(ParameterCollection self) -> bool"},
	 { (char *)"ParameterCollection_front", _wrap_ParameterCollection_front, METH_VARARGS, (char *)"\n"
		"front() -> Parameter\n"
		"ParameterCollection_front(ParameterCollection self) -> Parameter\n"
		""},
	 { (char *)"ParameterCollection_back", _wrap_ParameterCollection_back, METH_VARARGS, (char *)"\n"
		"back() -> Parameter\n"
		"ParameterCollection_back(ParameterCollection self) -> Parameter\n"
		""},
	 { (char *)"ParameterCollection___eq__", _wrap_ParameterCollection___eq__, METH_VARARGS, (char *)"ParameterCollection___eq__(ParameterCollection self, ParameterCollection rhs) -> bool"},
	 { (char *)"ParameterCollection___ne__", _wrap_ParameterCollection___ne__, METH_VARARGS, (char *)"ParameterCollection___ne__(ParameterCollection self, ParameterCollection rhs) -> bool"},
	 { (char *)"ParameterCollection___getitem__", _wrap_ParameterCollection___getitem__, METH_VARARGS, (char *)"ParameterCollection___getitem__(ParameterCollection self, size_t i) -> Parameter"},
	 { (char *)"ParameterCollection___setitem__", _wrap_ParameterCollection___setitem__, METH_VARARGS, (char *)"ParameterCollection___setitem__(ParameterCollection self, size_t i, Parameter v)"},
	 { (char *)"new_ParameterCollection", _wrap_new_ParameterCollection, METH_VARARGS, (char *)"new_ParameterCollection() -> ParameterCollection"},
	 { (char *)"delete_ParameterCollection", _wrap_delete_ParameterCollection, METH_VARARGS, (char *)"delete_ParameterCollection(ParameterCollection self)"},
	 { (char *)"ParameterCollection_swigregister", ParameterCollection_swigregister, METH_VARARGS, nullptr},
	 { (char *)"CollectionInformation_collectorName_set", _wrap_CollectionInformation_collectorName_set, METH_VARARGS, (char *)"CollectionInformation_collectorName_set(CollectionInformation self, std::string const & collectorName)"},
	 { (char *)"CollectionInformation_collectorName_get", _wrap_CollectionInformation_collectorName_get, METH_VARARGS, (char *)"CollectionInformation_collectorName_get(CollectionInformation self) -> std::string const &"},
	 { (char *)"CollectionInformation_illuminatorName_set", _wrap_CollectionInformation_illuminatorName_set, METH_VARARGS, (char *)"CollectionInformation_illuminatorName_set(CollectionInformation self, std::string const & illuminatorName)"},
	 { (char *)"CollectionInformation_illuminatorName_get", _wrap_CollectionInformation_illuminatorName_get, METH_VARARGS, (char *)"CollectionInformation_illuminatorName_get(CollectionInformation self) -> std::string const &"},
	 { (char *)"CollectionInformation_coreName_set", _wrap_CollectionInformation_coreName_set, METH_VARARGS, (char *)"CollectionInformation_coreName_set(CollectionInformation self, std::string const & coreName)"},
	 { (char *)"CollectionInformation_coreName_get", _wrap_CollectionInformation_coreName_get, METH_VARARGS, (char *)"CollectionInformation_coreName_get(CollectionInformation self) -> std::string const &"},
	 { (char *)"CollectionInformation_collectType_set", _wrap_CollectionInformation_collectType_set, METH_VARARGS, (char *)"CollectionInformation_collectType_set(CollectionInformation self, CollectType collectType)"},
	 { (char *)"CollectionInformation_collectType_get", _wrap_CollectionInformation_collectType_get, METH_VARARGS, (char *)"CollectionInformation_collectType_get(CollectionInformation self) -> CollectType"},
	 { (char *)"CollectionInformation_radarMode_set", _wrap_CollectionInformation_radarMode_set, METH_VARARGS, (char *)"CollectionInformation_radarMode_set(CollectionInformation self, RadarModeType radarMode)"},
	 { (char *)"CollectionInformation_radarMode_get", _wrap_CollectionInformation_radarMode_get, METH_VARARGS, (char *)"CollectionInformation_radarMode_get(CollectionInformation self) -> RadarModeType"},
	 { (char *)"CollectionInformation_radarModeID_set", _wrap_CollectionInformation_radarModeID_set, METH_VARARGS, (char *)"CollectionInformation_radarModeID_set(CollectionInformation self, std::string const & radarModeID)"},
	 { (char *)"CollectionInformation_radarModeID_get", _wrap_CollectionInformation_radarModeID_get, METH_VARARGS, (char *)"CollectionInformation_radarModeID_get(CollectionInformation self) -> std::string const &"},
	 { (char *)"CollectionInformation_releaseInfo_set", _wrap_CollectionInformation_releaseInfo_set, METH_VARARGS, (char *)"CollectionInformation_releaseInfo_set(CollectionInformation self, std::string const & releaseInfo)"},
	 { (char *)"CollectionInformation_releaseInfo_get", _wrap_CollectionInformation_releaseInfo_get, METH_VARARGS, (char *)"CollectionInformation_releaseInfo_get(CollectionInformation self) -> std::string const &"},
	 { (char *)"CollectionInformation_countryCodes_set", _wrap_CollectionInformation_countryCodes_set, METH_VARARGS, (char *)"CollectionInformation_countryCodes_set(CollectionInformation self, VectorString countryCodes)"},
	 { (char *)"CollectionInformation_countryCodes_get", _wrap_CollectionInformation_countryCodes_get, METH_VARARGS, (char *)"CollectionInformation_countryCodes_get(CollectionInformation self) -> VectorString"},
	 { (char *)"CollectionInformation_parameters_set", _wrap_CollectionInformation_parameters_set, METH_VARARGS, (char *)"CollectionInformation_parameters_set(CollectionInformation self, ParameterCollection parameters)"},
	 { (char *)"CollectionInformation_parameters_get", _wrap_CollectionInformation_parameters_get, METH_VARARGS, (char *)"CollectionInformation_parameters_get(CollectionInformation self) -> ParameterCollection"},
	 { (char *)"new_CollectionInformation", _wrap_new_CollectionInformation, METH_VARARGS, (char *)"new_CollectionInformation() -> CollectionInformation"},
	 { (char *)"delete_CollectionInformation", _wrap_delete_CollectionInformation, METH_VARARGS, (char *)"delete_CollectionInformation(CollectionInformation self)"},
	 { (char *)"CollectionInformation_clone", _wrap_CollectionInformation_clone, METH_VARARGS, (char *)"CollectionInformation_clone(CollectionInformation self) -> CollectionInformation"},
	 { (char *)"CollectionInformation___eq__", _wrap_CollectionInformation___eq__, METH_VARARGS, (char *)"CollectionInformation___eq__(CollectionInformation self, CollectionInformation other) -> bool"},
	 { (char *)"CollectionInformation___ne__", _wrap_CollectionInformation___ne__, METH_VARARGS, (char *)"CollectionInformation___ne__(CollectionInformation self, CollectionInformation other) -> bool"},
	 { (char *)"CollectionInformation_getClassificationLevel", _wrap_CollectionInformation_getClassificationLevel, METH_VARARGS, (char *)"CollectionInformation_getClassificationLevel(CollectionInformation self) -> std::string"},
	 { (char *)"CollectionInformation_setClassificationLevel", _wrap_CollectionInformation_setClassificationLevel, METH_VARARGS, (char *)"CollectionInformation_setClassificationLevel(CollectionInformation self, std::string const & classification)"},
	 { (char *)"CollectionInformation_swigregister", CollectionInformation_swigregister, METH_VARARGS, nullptr},
	 { (char *)"delete_Classification", _wrap_delete_Classification, METH_VARARGS, (char *)"delete_Classification(Classification self)"},
	 { (char *)"Classification_getLevel", _wrap_Classification_getLevel, METH_VARARGS, (char *)"Classification_getLevel(Classification self) -> std::string"},
	 { (char *)"Classification_isUnclassified", _wrap_Classification_isUnclassified, METH_VARARGS, (char *)"Classification_isUnclassified(Classification self) -> bool"},
	 { (char *)"Classification_setSecurity", _wrap_Classification_setSecurity, METH_VARARGS, (char *)"Classification_setSecurity(Classification self, std::string const & arg3, logging::Logger & arg4, nitf::FileSecurity arg5)"},
	 { (char *)"Classification_put", _wrap_Classification_put, METH_VARARGS, (char *)"Classification_put(Classification self, std::ostream & os) -> std::ostream &"},
	 { (char *)"Classification_fileOptions_set", _wrap_Classification_fileOptions_set, METH_VARARGS, (char *)"Classification_fileOptions_set(Classification self, Options fileOptions)"},
	 { (char *)"Classification_fileOptions_get", _wrap_Classification_fileOptions_get, METH_VARARGS, (char *)"Classification_fileOptions_get(Classification self) -> Options"},
	 { (char *)"Classification_swigregister", Classification_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_CorrCoefs", _wrap_new_CorrCoefs, METH_VARARGS, (char *)"new_CorrCoefs() -> CorrCoefs"},
	 { (char *)"CorrCoefs_p1p2_set", _wrap_CorrCoefs_p1p2_set, METH_VARARGS, (char *)"CorrCoefs_p1p2_set(CorrCoefs self, double p1p2)"},
	 { (char *)"CorrCoefs_p1p2_get", _wrap_CorrCoefs_p1p2_get, METH_VARARGS, (char *)"CorrCoefs_p1p2_get(CorrCoefs self) -> double"},
	 { (char *)"CorrCoefs_p1p3_set", _wrap_CorrCoefs_p1p3_set, METH_VARARGS, (char *)"CorrCoefs_p1p3_set(CorrCoefs self, double p1p3)"},
	 { (char *)"CorrCoefs_p1p3_get", _wrap_CorrCoefs_p1p3_get, METH_VARARGS, (char *)"CorrCoefs_p1p3_get(CorrCoefs self) -> double"},
	 { (char *)"CorrCoefs_p1v1_set", _wrap_CorrCoefs_p1v1_set, METH_VARARGS, (char *)"CorrCoefs_p1v1_set(CorrCoefs self, double p1v1)"},
	 { (char *)"CorrCoefs_p1v1_get", _wrap_CorrCoefs_p1v1_get, METH_VARARGS, (char *)"CorrCoefs_p1v1_get(CorrCoefs self) -> double"},
	 { (char *)"CorrCoefs_p1v2_set", _wrap_CorrCoefs_p1v2_set, METH_VARARGS, (char *)"CorrCoefs_p1v2_set(CorrCoefs self, double p1v2)"},
	 { (char *)"CorrCoefs_p1v2_get", _wrap_CorrCoefs_p1v2_get, METH_VARARGS, (char *)"CorrCoefs_p1v2_get(CorrCoefs self) -> double"},
	 { (char *)"CorrCoefs_p1v3_set", _wrap_CorrCoefs_p1v3_set, METH_VARARGS, (char *)"CorrCoefs_p1v3_set(CorrCoefs self, double p1v3)"},
	 { (char *)"CorrCoefs_p1v3_get", _wrap_CorrCoefs_p1v3_get, METH_VARARGS, (char *)"CorrCoefs_p1v3_get(CorrCoefs self) -> double"},
	 { (char *)"CorrCoefs_p2p3_set", _wrap_CorrCoefs_p2p3_set, METH_VARARGS, (char *)"CorrCoefs_p2p3_set(CorrCoefs self, double p2p3)"},
	 { (char *)"CorrCoefs_p2p3_get", _wrap_CorrCoefs_p2p3_get, METH_VARARGS, (char *)"CorrCoefs_p2p3_get(CorrCoefs self) -> double"},
	 { (char *)"CorrCoefs_p2v1_set", _wrap_CorrCoefs_p2v1_set, METH_VARARGS, (char *)"CorrCoefs_p2v1_set(CorrCoefs self, double p2v1)"},
	 { (char *)"CorrCoefs_p2v1_get", _wrap_CorrCoefs_p2v1_get, METH_VARARGS, (char *)"CorrCoefs_p2v1_get(CorrCoefs self) -> double"},
	 { (char *)"CorrCoefs_p2v2_set", _wrap_CorrCoefs_p2v2_set, METH_VARARGS, (char *)"CorrCoefs_p2v2_set(CorrCoefs self, double p2v2)"},
	 { (char *)"CorrCoefs_p2v2_get", _wrap_CorrCoefs_p2v2_get, METH_VARARGS, (char *)"CorrCoefs_p2v2_get(CorrCoefs self) -> double"},
	 { (char *)"CorrCoefs_p2v3_set", _wrap_CorrCoefs_p2v3_set, METH_VARARGS, (char *)"CorrCoefs_p2v3_set(CorrCoefs self, double p2v3)"},
	 { (char *)"CorrCoefs_p2v3_get", _wrap_CorrCoefs_p2v3_get, METH_VARARGS, (char *)"CorrCoefs_p2v3_get(CorrCoefs self) -> double"},
	 { (char *)"CorrCoefs_p3v1_set", _wrap_CorrCoefs_p3v1_set, METH_VARARGS, (char *)"CorrCoefs_p3v1_set(CorrCoefs self, double p3v1)"},
	 { (char *)"CorrCoefs_p3v1_get", _wrap_CorrCoefs_p3v1_get, METH_VARARGS, (char *)"CorrCoefs_p3v1_get(CorrCoefs self) -> double"},
	 { (char *)"CorrCoefs_p3v2_set", _wrap_CorrCoefs_p3v2_set, METH_VARARGS, (char *)"CorrCoefs_p3v2_set(CorrCoefs self, double p3v2)"},
	 { (char *)"CorrCoefs_p3v2_get", _wrap_CorrCoefs_p3v2_get, METH_VARARGS, (char *)"CorrCoefs_p3v2_get(CorrCoefs self) -> double"},
	 { (char *)"CorrCoefs_p3v3_set", _wrap_CorrCoefs_p3v3_set, METH_VARARGS, (char *)"CorrCoefs_p3v3_set(CorrCoefs self, double p3v3)"},
	 { (char *)"CorrCoefs_p3v3_get", _wrap_CorrCoefs_p3v3_get, METH_VARARGS, (char *)"CorrCoefs_p3v3_get(CorrCoefs self) -> double"},
	 { (char *)"CorrCoefs_v1v2_set", _wrap_CorrCoefs_v1v2_set, METH_VARARGS, (char *)"CorrCoefs_v1v2_set(CorrCoefs self, double v1v2)"},
	 { (char *)"CorrCoefs_v1v2_get", _wrap_CorrCoefs_v1v2_get, METH_VARARGS, (char *)"CorrCoefs_v1v2_get(CorrCoefs self) -> double"},
	 { (char *)"CorrCoefs_v1v3_set", _wrap_CorrCoefs_v1v3_set, METH_VARARGS, (char *)"CorrCoefs_v1v3_set(CorrCoefs self, double v1v3)"},
	 { (char *)"CorrCoefs_v1v3_get", _wrap_CorrCoefs_v1v3_get, METH_VARARGS, (char *)"CorrCoefs_v1v3_get(CorrCoefs self) -> double"},
	 { (char *)"CorrCoefs_v2v3_set", _wrap_CorrCoefs_v2v3_set, METH_VARARGS, (char *)"CorrCoefs_v2v3_set(CorrCoefs self, double v2v3)"},
	 { (char *)"CorrCoefs_v2v3_get", _wrap_CorrCoefs_v2v3_get, METH_VARARGS, (char *)"CorrCoefs_v2v3_get(CorrCoefs self) -> double"},
	 { (char *)"CorrCoefs___eq__", _wrap_CorrCoefs___eq__, METH_VARARGS, (char *)"CorrCoefs___eq__(CorrCoefs self, CorrCoefs rhs) -> bool"},
	 { (char *)"CorrCoefs___ne__", _wrap_CorrCoefs___ne__, METH_VARARGS, (char *)"CorrCoefs___ne__(CorrCoefs self, CorrCoefs rhs) -> bool"},
	 { (char *)"delete_CorrCoefs", _wrap_delete_CorrCoefs, METH_VARARGS, (char *)"delete_CorrCoefs(CorrCoefs self)"},
	 { (char *)"CorrCoefs_swigregister", CorrCoefs_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_PosVelError", _wrap_new_PosVelError, METH_VARARGS, (char *)"new_PosVelError() -> PosVelError"},
	 { (char *)"PosVelError_frame_set", _wrap_PosVelError_frame_set, METH_VARARGS, (char *)"PosVelError_frame_set(PosVelError self, FrameType frame)"},
	 { (char *)"PosVelError_frame_get", _wrap_PosVelError_frame_get, METH_VARARGS, (char *)"PosVelError_frame_get(PosVelError self) -> FrameType"},
	 { (char *)"PosVelError_p1_set", _wrap_PosVelError_p1_set, METH_VARARGS, (char *)"PosVelError_p1_set(PosVelError self, double p1)"},
	 { (char *)"PosVelError_p1_get", _wrap_PosVelError_p1_get, METH_VARARGS, (char *)"PosVelError_p1_get(PosVelError self) -> double"},
	 { (char *)"PosVelError_p2_set", _wrap_PosVelError_p2_set, METH_VARARGS, (char *)"PosVelError_p2_set(PosVelError self, double p2)"},
	 { (char *)"PosVelError_p2_get", _wrap_PosVelError_p2_get, METH_VARARGS, (char *)"PosVelError_p2_get(PosVelError self) -> double"},
	 { (char *)"PosVelError_p3_set", _wrap_PosVelError_p3_set, METH_VARARGS, (char *)"PosVelError_p3_set(PosVelError self, double p3)"},
	 { (char *)"PosVelError_p3_get", _wrap_PosVelError_p3_get, METH_VARARGS, (char *)"PosVelError_p3_get(PosVelError self) -> double"},
	 { (char *)"PosVelError_v1_set", _wrap_PosVelError_v1_set, METH_VARARGS, (char *)"PosVelError_v1_set(PosVelError self, double v1)"},
	 { (char *)"PosVelError_v1_get", _wrap_PosVelError_v1_get, METH_VARARGS, (char *)"PosVelError_v1_get(PosVelError self) -> double"},
	 { (char *)"PosVelError_v2_set", _wrap_PosVelError_v2_set, METH_VARARGS, (char *)"PosVelError_v2_set(PosVelError self, double v2)"},
	 { (char *)"PosVelError_v2_get", _wrap_PosVelError_v2_get, METH_VARARGS, (char *)"PosVelError_v2_get(PosVelError self) -> double"},
	 { (char *)"PosVelError_v3_set", _wrap_PosVelError_v3_set, METH_VARARGS, (char *)"PosVelError_v3_set(PosVelError self, double v3)"},
	 { (char *)"PosVelError_v3_get", _wrap_PosVelError_v3_get, METH_VARARGS, (char *)"PosVelError_v3_get(PosVelError self) -> double"},
	 { (char *)"PosVelError_corrCoefs_set", _wrap_PosVelError_corrCoefs_set, METH_VARARGS, (char *)"PosVelError_corrCoefs_set(PosVelError self, ScopedCopyableCorrCoefs corrCoefs)"},
	 { (char *)"PosVelError_corrCoefs_get", _wrap_PosVelError_corrCoefs_get, METH_VARARGS, (char *)"PosVelError_corrCoefs_get(PosVelError self) -> ScopedCopyableCorrCoefs"},
	 { (char *)"PosVelError_positionDecorr_set", _wrap_PosVelError_positionDecorr_set, METH_VARARGS, (char *)"PosVelError_positionDecorr_set(PosVelError self, DecorrType positionDecorr)"},
	 { (char *)"PosVelError_positionDecorr_get", _wrap_PosVelError_positionDecorr_get, METH_VARARGS, (char *)"PosVelError_positionDecorr_get(PosVelError self) -> DecorrType"},
	 { (char *)"PosVelError___eq__", _wrap_PosVelError___eq__, METH_VARARGS, (char *)"PosVelError___eq__(PosVelError self, PosVelError rhs) -> bool"},
	 { (char *)"PosVelError___ne__", _wrap_PosVelError___ne__, METH_VARARGS, (char *)"PosVelError___ne__(PosVelError self, PosVelError rhs) -> bool"},
	 { (char *)"delete_PosVelError", _wrap_delete_PosVelError, METH_VARARGS, (char *)"delete_PosVelError(PosVelError self)"},
	 { (char *)"PosVelError_swigregister", PosVelError_swigregister, METH_VARARGS, nullptr},
	 { (char *)"RadarSensor_rangeBias_set", _wrap_RadarSensor_rangeBias_set, METH_VARARGS, (char *)"RadarSensor_rangeBias_set(RadarSensor self, double rangeBias)"},
	 { (char *)"RadarSensor_rangeBias_get", _wrap_RadarSensor_rangeBias_get, METH_VARARGS, (char *)"RadarSensor_rangeBias_get(RadarSensor self) -> double"},
	 { (char *)"RadarSensor_clockFreqSF_set", _wrap_RadarSensor_clockFreqSF_set, METH_VARARGS, (char *)"RadarSensor_clockFreqSF_set(RadarSensor self, double clockFreqSF)"},
	 { (char *)"RadarSensor_clockFreqSF_get", _wrap_RadarSensor_clockFreqSF_get, METH_VARARGS, (char *)"RadarSensor_clockFreqSF_get(RadarSensor self) -> double"},
	 { (char *)"RadarSensor_transmitFreqSF_set", _wrap_RadarSensor_transmitFreqSF_set, METH_VARARGS, (char *)"RadarSensor_transmitFreqSF_set(RadarSensor self, double transmitFreqSF)"},
	 { (char *)"RadarSensor_transmitFreqSF_get", _wrap_RadarSensor_transmitFreqSF_get, METH_VARARGS, (char *)"RadarSensor_transmitFreqSF_get(RadarSensor self) -> double"},
	 { (char *)"RadarSensor_rangeBiasDecorr_set", _wrap_RadarSensor_rangeBiasDecorr_set, METH_VARARGS, (char *)"RadarSensor_rangeBiasDecorr_set(RadarSensor self, DecorrType rangeBiasDecorr)"},
	 { (char *)"RadarSensor_rangeBiasDecorr_get", _wrap_RadarSensor_rangeBiasDecorr_get, METH_VARARGS, (char *)"RadarSensor_rangeBiasDecorr_get(RadarSensor self) -> DecorrType"},
	 { (char *)"new_RadarSensor", _wrap_new_RadarSensor, METH_VARARGS, (char *)"new_RadarSensor() -> RadarSensor"},
	 { (char *)"RadarSensor___eq__", _wrap_RadarSensor___eq__, METH_VARARGS, (char *)"RadarSensor___eq__(RadarSensor self, RadarSensor rhs) -> bool"},
	 { (char *)"RadarSensor___ne__", _wrap_RadarSensor___ne__, METH_VARARGS, (char *)"RadarSensor___ne__(RadarSensor self, RadarSensor rhs) -> bool"},
	 { (char *)"delete_RadarSensor", _wrap_delete_RadarSensor, METH_VARARGS, (char *)"delete_RadarSensor(RadarSensor self)"},
	 { (char *)"RadarSensor_swigregister", RadarSensor_swigregister, METH_VARARGS, nullptr},
	 { (char *)"TropoError_tropoRangeVertical_set", _wrap_TropoError_tropoRangeVertical_set, METH_VARARGS, (char *)"TropoError_tropoRangeVertical_set(TropoError self, double tropoRangeVertical)"},
	 { (char *)"TropoError_tropoRangeVertical_get", _wrap_TropoError_tropoRangeVertical_get, METH_VARARGS, (char *)"TropoError_tropoRangeVertical_get(TropoError self) -> double"},
	 { (char *)"TropoError_tropoRangeSlant_set", _wrap_TropoError_tropoRangeSlant_set, METH_VARARGS, (char *)"TropoError_tropoRangeSlant_set(TropoError self, double tropoRangeSlant)"},
	 { (char *)"TropoError_tropoRangeSlant_get", _wrap_TropoError_tropoRangeSlant_get, METH_VARARGS, (char *)"TropoError_tropoRangeSlant_get(TropoError self) -> double"},
	 { (char *)"TropoError_tropoRangeDecorr_set", _wrap_TropoError_tropoRangeDecorr_set, METH_VARARGS, (char *)"TropoError_tropoRangeDecorr_set(TropoError self, DecorrType tropoRangeDecorr)"},
	 { (char *)"TropoError_tropoRangeDecorr_get", _wrap_TropoError_tropoRangeDecorr_get, METH_VARARGS, (char *)"TropoError_tropoRangeDecorr_get(TropoError self) -> DecorrType"},
	 { (char *)"new_TropoError", _wrap_new_TropoError, METH_VARARGS, (char *)"new_TropoError() -> TropoError"},
	 { (char *)"TropoError___eq__", _wrap_TropoError___eq__, METH_VARARGS, (char *)"TropoError___eq__(TropoError self, TropoError rhs) -> bool"},
	 { (char *)"TropoError___ne__", _wrap_TropoError___ne__, METH_VARARGS, (char *)"TropoError___ne__(TropoError self, TropoError rhs) -> bool"},
	 { (char *)"delete_TropoError", _wrap_delete_TropoError, METH_VARARGS, (char *)"delete_TropoError(TropoError self)"},
	 { (char *)"TropoError_swigregister", TropoError_swigregister, METH_VARARGS, nullptr},
	 { (char *)"IonoError_ionoRangeVertical_set", _wrap_IonoError_ionoRangeVertical_set, METH_VARARGS, (char *)"IonoError_ionoRangeVertical_set(IonoError self, double ionoRangeVertical)"},
	 { (char *)"IonoError_ionoRangeVertical_get", _wrap_IonoError_ionoRangeVertical_get, METH_VARARGS, (char *)"IonoError_ionoRangeVertical_get(IonoError self) -> double"},
	 { (char *)"IonoError_ionoRangeRateVertical_set", _wrap_IonoError_ionoRangeRateVertical_set, METH_VARARGS, (char *)"IonoError_ionoRangeRateVertical_set(IonoError self, double ionoRangeRateVertical)"},
	 { (char *)"IonoError_ionoRangeRateVertical_get", _wrap_IonoError_ionoRangeRateVertical_get, METH_VARARGS, (char *)"IonoError_ionoRangeRateVertical_get(IonoError self) -> double"},
	 { (char *)"IonoError_ionoRgRgRateCC_set", _wrap_IonoError_ionoRgRgRateCC_set, METH_VARARGS, (char *)"IonoError_ionoRgRgRateCC_set(IonoError self, double ionoRgRgRateCC)"},
	 { (char *)"IonoError_ionoRgRgRateCC_get", _wrap_IonoError_ionoRgRgRateCC_get, METH_VARARGS, (char *)"IonoError_ionoRgRgRateCC_get(IonoError self) -> double"},
	 { (char *)"IonoError_ionoRangeVertDecorr_set", _wrap_IonoError_ionoRangeVertDecorr_set, METH_VARARGS, (char *)"IonoError_ionoRangeVertDecorr_set(IonoError self, DecorrType ionoRangeVertDecorr)"},
	 { (char *)"IonoError_ionoRangeVertDecorr_get", _wrap_IonoError_ionoRangeVertDecorr_get, METH_VARARGS, (char *)"IonoError_ionoRangeVertDecorr_get(IonoError self) -> DecorrType"},
	 { (char *)"new_IonoError", _wrap_new_IonoError, METH_VARARGS, (char *)"new_IonoError() -> IonoError"},
	 { (char *)"IonoError___eq__", _wrap_IonoError___eq__, METH_VARARGS, (char *)"IonoError___eq__(IonoError self, IonoError rhs) -> bool"},
	 { (char *)"IonoError___ne__", _wrap_IonoError___ne__, METH_VARARGS, (char *)"IonoError___ne__(IonoError self, IonoError rhs) -> bool"},
	 { (char *)"delete_IonoError", _wrap_delete_IonoError, METH_VARARGS, (char *)"delete_IonoError(IonoError self)"},
	 { (char *)"IonoError_swigregister", IonoError_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_Components", _wrap_new_Components, METH_VARARGS, (char *)"new_Components() -> Components"},
	 { (char *)"Components_posVelError_set", _wrap_Components_posVelError_set, METH_VARARGS, (char *)"Components_posVelError_set(Components self, ScopedCopyablePosVelError posVelError)"},
	 { (char *)"Components_posVelError_get", _wrap_Components_posVelError_get, METH_VARARGS, (char *)"Components_posVelError_get(Components self) -> ScopedCopyablePosVelError"},
	 { (char *)"Components_radarSensor_set", _wrap_Components_radarSensor_set, METH_VARARGS, (char *)"Components_radarSensor_set(Components self, ScopedCopyableRadarSensor radarSensor)"},
	 { (char *)"Components_radarSensor_get", _wrap_Components_radarSensor_get, METH_VARARGS, (char *)"Components_radarSensor_get(Components self) -> ScopedCopyableRadarSensor"},
	 { (char *)"Components_tropoError_set", _wrap_Components_tropoError_set, METH_VARARGS, (char *)"Components_tropoError_set(Components self, ScopedCopyableTropoError tropoError)"},
	 { (char *)"Components_tropoError_get", _wrap_Components_tropoError_get, METH_VARARGS, (char *)"Components_tropoError_get(Components self) -> ScopedCopyableTropoError"},
	 { (char *)"Components_ionoError_set", _wrap_Components_ionoError_set, METH_VARARGS, (char *)"Components_ionoError_set(Components self, ScopedCopyableIonoError ionoError)"},
	 { (char *)"Components_ionoError_get", _wrap_Components_ionoError_get, METH_VARARGS, (char *)"Components_ionoError_get(Components self) -> ScopedCopyableIonoError"},
	 { (char *)"Components___eq__", _wrap_Components___eq__, METH_VARARGS, (char *)"Components___eq__(Components self, Components rhs) -> bool"},
	 { (char *)"Components___ne__", _wrap_Components___ne__, METH_VARARGS, (char *)"Components___ne__(Components self, Components rhs) -> bool"},
	 { (char *)"delete_Components", _wrap_delete_Components, METH_VARARGS, (char *)"delete_Components(Components self)"},
	 { (char *)"Components_swigregister", Components_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_CompositeSCP", _wrap_new_CompositeSCP, METH_VARARGS, (char *)"\n"
		"CompositeSCP(six::CompositeSCP::SCPType scpTypeIn)\n"
		"new_CompositeSCP() -> CompositeSCP\n"
		""},
	 { (char *)"CompositeSCP_scpType_set", _wrap_CompositeSCP_scpType_set, METH_VARARGS, (char *)"CompositeSCP_scpType_set(CompositeSCP self, six::CompositeSCP::SCPType scpType)"},
	 { (char *)"CompositeSCP_scpType_get", _wrap_CompositeSCP_scpType_get, METH_VARARGS, (char *)"CompositeSCP_scpType_get(CompositeSCP self) -> six::CompositeSCP::SCPType"},
	 { (char *)"CompositeSCP_xErr_set", _wrap_CompositeSCP_xErr_set, METH_VARARGS, (char *)"CompositeSCP_xErr_set(CompositeSCP self, double xErr)"},
	 { (char *)"CompositeSCP_xErr_get", _wrap_CompositeSCP_xErr_get, METH_VARARGS, (char *)"CompositeSCP_xErr_get(CompositeSCP self) -> double"},
	 { (char *)"CompositeSCP_yErr_set", _wrap_CompositeSCP_yErr_set, METH_VARARGS, (char *)"CompositeSCP_yErr_set(CompositeSCP self, double yErr)"},
	 { (char *)"CompositeSCP_yErr_get", _wrap_CompositeSCP_yErr_get, METH_VARARGS, (char *)"CompositeSCP_yErr_get(CompositeSCP self) -> double"},
	 { (char *)"CompositeSCP_xyErr_set", _wrap_CompositeSCP_xyErr_set, METH_VARARGS, (char *)"CompositeSCP_xyErr_set(CompositeSCP self, double xyErr)"},
	 { (char *)"CompositeSCP_xyErr_get", _wrap_CompositeSCP_xyErr_get, METH_VARARGS, (char *)"CompositeSCP_xyErr_get(CompositeSCP self) -> double"},
	 { (char *)"CompositeSCP___eq__", _wrap_CompositeSCP___eq__, METH_VARARGS, (char *)"CompositeSCP___eq__(CompositeSCP self, CompositeSCP rhs) -> bool"},
	 { (char *)"CompositeSCP___ne__", _wrap_CompositeSCP___ne__, METH_VARARGS, (char *)"CompositeSCP___ne__(CompositeSCP self, CompositeSCP rhs) -> bool"},
	 { (char *)"delete_CompositeSCP", _wrap_delete_CompositeSCP, METH_VARARGS, (char *)"delete_CompositeSCP(CompositeSCP self)"},
	 { (char *)"CompositeSCP_swigregister", CompositeSCP_swigregister, METH_VARARGS, nullptr},
	 { (char *)"ErrorStatistics_compositeSCP_set", _wrap_ErrorStatistics_compositeSCP_set, METH_VARARGS, (char *)"ErrorStatistics_compositeSCP_set(ErrorStatistics self, ScopedCopyableCompositeSCP compositeSCP)"},
	 { (char *)"ErrorStatistics_compositeSCP_get", _wrap_ErrorStatistics_compositeSCP_get, METH_VARARGS, (char *)"ErrorStatistics_compositeSCP_get(ErrorStatistics self) -> ScopedCopyableCompositeSCP"},
	 { (char *)"ErrorStatistics_components_set", _wrap_ErrorStatistics_components_set, METH_VARARGS, (char *)"ErrorStatistics_components_set(ErrorStatistics self, ScopedCopyableComponents components)"},
	 { (char *)"ErrorStatistics_components_get", _wrap_ErrorStatistics_components_get, METH_VARARGS, (char *)"ErrorStatistics_components_get(ErrorStatistics self) -> ScopedCopyableComponents"},
	 { (char *)"ErrorStatistics_additionalParameters_set", _wrap_ErrorStatistics_additionalParameters_set, METH_VARARGS, (char *)"ErrorStatistics_additionalParameters_set(ErrorStatistics self, ParameterCollection additionalParameters)"},
	 { (char *)"ErrorStatistics_additionalParameters_get", _wrap_ErrorStatistics_additionalParameters_get, METH_VARARGS, (char *)"ErrorStatistics_additionalParameters_get(ErrorStatistics self) -> ParameterCollection"},
	 { (char *)"new_ErrorStatistics", _wrap_new_ErrorStatistics, METH_VARARGS, (char *)"new_ErrorStatistics() -> ErrorStatistics"},
	 { (char *)"ErrorStatistics___eq__", _wrap_ErrorStatistics___eq__, METH_VARARGS, (char *)"ErrorStatistics___eq__(ErrorStatistics self, ErrorStatistics rhs) -> bool"},
	 { (char *)"ErrorStatistics___ne__", _wrap_ErrorStatistics___ne__, METH_VARARGS, (char *)"ErrorStatistics___ne__(ErrorStatistics self, ErrorStatistics rhs) -> bool"},
	 { (char *)"delete_ErrorStatistics", _wrap_delete_ErrorStatistics, METH_VARARGS, (char *)"delete_ErrorStatistics(ErrorStatistics self)"},
	 { (char *)"ErrorStatistics_swigregister", ErrorStatistics_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_MatchCollect", _wrap_new_MatchCollect, METH_VARARGS, (char *)"new_MatchCollect() -> MatchCollect"},
	 { (char *)"MatchCollect_coreName_set", _wrap_MatchCollect_coreName_set, METH_VARARGS, (char *)"MatchCollect_coreName_set(MatchCollect self, std::string const & coreName)"},
	 { (char *)"MatchCollect_coreName_get", _wrap_MatchCollect_coreName_get, METH_VARARGS, (char *)"MatchCollect_coreName_get(MatchCollect self) -> std::string const &"},
	 { (char *)"MatchCollect_matchIndex_set", _wrap_MatchCollect_matchIndex_set, METH_VARARGS, (char *)"MatchCollect_matchIndex_set(MatchCollect self, int matchIndex)"},
	 { (char *)"MatchCollect_matchIndex_get", _wrap_MatchCollect_matchIndex_get, METH_VARARGS, (char *)"MatchCollect_matchIndex_get(MatchCollect self) -> int"},
	 { (char *)"MatchCollect_parameters_set", _wrap_MatchCollect_parameters_set, METH_VARARGS, (char *)"MatchCollect_parameters_set(MatchCollect self, ParameterCollection parameters)"},
	 { (char *)"MatchCollect_parameters_get", _wrap_MatchCollect_parameters_get, METH_VARARGS, (char *)"MatchCollect_parameters_get(MatchCollect self) -> ParameterCollection"},
	 { (char *)"MatchCollect___eq__", _wrap_MatchCollect___eq__, METH_VARARGS, (char *)"MatchCollect___eq__(MatchCollect self, MatchCollect rhs) -> bool"},
	 { (char *)"MatchCollect___ne__", _wrap_MatchCollect___ne__, METH_VARARGS, (char *)"MatchCollect___ne__(MatchCollect self, MatchCollect rhs) -> bool"},
	 { (char *)"delete_MatchCollect", _wrap_delete_MatchCollect, METH_VARARGS, (char *)"delete_MatchCollect(MatchCollect self)"},
	 { (char *)"MatchCollect_swigregister", MatchCollect_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_MatchType", _wrap_new_MatchType, METH_VARARGS, (char *)"new_MatchType() -> MatchType"},
	 { (char *)"MatchType_collectorName_set", _wrap_MatchType_collectorName_set, METH_VARARGS, (char *)"MatchType_collectorName_set(MatchType self, std::string const & collectorName)"},
	 { (char *)"MatchType_collectorName_get", _wrap_MatchType_collectorName_get, METH_VARARGS, (char *)"MatchType_collectorName_get(MatchType self) -> std::string const &"},
	 { (char *)"MatchType_illuminatorName_set", _wrap_MatchType_illuminatorName_set, METH_VARARGS, (char *)"MatchType_illuminatorName_set(MatchType self, std::string const & illuminatorName)"},
	 { (char *)"MatchType_illuminatorName_get", _wrap_MatchType_illuminatorName_get, METH_VARARGS, (char *)"MatchType_illuminatorName_get(MatchType self) -> std::string const &"},
	 { (char *)"MatchType_matchType_set", _wrap_MatchType_matchType_set, METH_VARARGS, (char *)"MatchType_matchType_set(MatchType self, VectorString matchType)"},
	 { (char *)"MatchType_matchType_get", _wrap_MatchType_matchType_get, METH_VARARGS, (char *)"MatchType_matchType_get(MatchType self) -> VectorString"},
	 { (char *)"MatchType_typeID_set", _wrap_MatchType_typeID_set, METH_VARARGS, (char *)"MatchType_typeID_set(MatchType self, std::string const & typeID)"},
	 { (char *)"MatchType_typeID_get", _wrap_MatchType_typeID_get, METH_VARARGS, (char *)"MatchType_typeID_get(MatchType self) -> std::string const &"},
	 { (char *)"MatchType_currentIndex_set", _wrap_MatchType_currentIndex_set, METH_VARARGS, (char *)"MatchType_currentIndex_set(MatchType self, int currentIndex)"},
	 { (char *)"MatchType_currentIndex_get", _wrap_MatchType_currentIndex_get, METH_VARARGS, (char *)"MatchType_currentIndex_get(MatchType self) -> int"},
	 { (char *)"MatchType_matchCollects_set", _wrap_MatchType_matchCollects_set, METH_VARARGS, (char *)"MatchType_matchCollects_set(MatchType self, VectorMatchCollect matchCollects)"},
	 { (char *)"MatchType_matchCollects_get", _wrap_MatchType_matchCollects_get, METH_VARARGS, (char *)"MatchType_matchCollects_get(MatchType self) -> VectorMatchCollect"},
	 { (char *)"MatchType___eq__", _wrap_MatchType___eq__, METH_VARARGS, (char *)"MatchType___eq__(MatchType self, MatchType rhs) -> bool"},
	 { (char *)"MatchType___ne__", _wrap_MatchType___ne__, METH_VARARGS, (char *)"MatchType___ne__(MatchType self, MatchType rhs) -> bool"},
	 { (char *)"delete_MatchType", _wrap_delete_MatchType, METH_VARARGS, (char *)"delete_MatchType(MatchType self)"},
	 { (char *)"MatchType_swigregister", MatchType_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_MatchInformation", _wrap_new_MatchInformation, METH_VARARGS, (char *)"new_MatchInformation() -> MatchInformation"},
	 { (char *)"MatchInformation_types_set", _wrap_MatchInformation_types_set, METH_VARARGS, (char *)"MatchInformation_types_set(MatchInformation self, VectorMatchType types)"},
	 { (char *)"MatchInformation_types_get", _wrap_MatchInformation_types_get, METH_VARARGS, (char *)"MatchInformation_types_get(MatchInformation self) -> VectorMatchType"},
	 { (char *)"MatchInformation___eq__", _wrap_MatchInformation___eq__, METH_VARARGS, (char *)"MatchInformation___eq__(MatchInformation self, MatchInformation rhs) -> bool"},
	 { (char *)"MatchInformation___ne__", _wrap_MatchInformation___ne__, METH_VARARGS, (char *)"MatchInformation___ne__(MatchInformation self, MatchInformation rhs) -> bool"},
	 { (char *)"delete_MatchInformation", _wrap_delete_MatchInformation, METH_VARARGS, (char *)"delete_MatchInformation(MatchInformation self)"},
	 { (char *)"MatchInformation_swigregister", MatchInformation_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_NoiseLevel", _wrap_new_NoiseLevel, METH_VARARGS, (char *)"new_NoiseLevel() -> NoiseLevel"},
	 { (char *)"NoiseLevel_noiseType_set", _wrap_NoiseLevel_noiseType_set, METH_VARARGS, (char *)"NoiseLevel_noiseType_set(NoiseLevel self, std::string const & noiseType)"},
	 { (char *)"NoiseLevel_noiseType_get", _wrap_NoiseLevel_noiseType_get, METH_VARARGS, (char *)"NoiseLevel_noiseType_get(NoiseLevel self) -> std::string const &"},
	 { (char *)"NoiseLevel_noisePoly_set", _wrap_NoiseLevel_noisePoly_set, METH_VARARGS, (char *)"NoiseLevel_noisePoly_set(NoiseLevel self, Poly2D noisePoly)"},
	 { (char *)"NoiseLevel_noisePoly_get", _wrap_NoiseLevel_noisePoly_get, METH_VARARGS, (char *)"NoiseLevel_noisePoly_get(NoiseLevel self) -> Poly2D"},
	 { (char *)"NoiseLevel___eq__", _wrap_NoiseLevel___eq__, METH_VARARGS, (char *)"NoiseLevel___eq__(NoiseLevel self, NoiseLevel rhs) -> bool"},
	 { (char *)"NoiseLevel___ne__", _wrap_NoiseLevel___ne__, METH_VARARGS, (char *)"NoiseLevel___ne__(NoiseLevel self, NoiseLevel rhs) -> bool"},
	 { (char *)"delete_NoiseLevel", _wrap_delete_NoiseLevel, METH_VARARGS, (char *)"delete_NoiseLevel(NoiseLevel self)"},
	 { (char *)"NoiseLevel_swigregister", NoiseLevel_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_Radiometric", _wrap_new_Radiometric, METH_VARARGS, (char *)"new_Radiometric() -> Radiometric"},
	 { (char *)"Radiometric_noiseLevel_set", _wrap_Radiometric_noiseLevel_set, METH_VARARGS, (char *)"Radiometric_noiseLevel_set(Radiometric self, NoiseLevel noiseLevel)"},
	 { (char *)"Radiometric_noiseLevel_get", _wrap_Radiometric_noiseLevel_get, METH_VARARGS, (char *)"Radiometric_noiseLevel_get(Radiometric self) -> NoiseLevel"},
	 { (char *)"Radiometric_rcsSFPoly_set", _wrap_Radiometric_rcsSFPoly_set, METH_VARARGS, (char *)"Radiometric_rcsSFPoly_set(Radiometric self, Poly2D rcsSFPoly)"},
	 { (char *)"Radiometric_rcsSFPoly_get", _wrap_Radiometric_rcsSFPoly_get, METH_VARARGS, (char *)"Radiometric_rcsSFPoly_get(Radiometric self) -> Poly2D"},
	 { (char *)"Radiometric_betaZeroSFPoly_set", _wrap_Radiometric_betaZeroSFPoly_set, METH_VARARGS, (char *)"Radiometric_betaZeroSFPoly_set(Radiometric self, Poly2D betaZeroSFPoly)"},
	 { (char *)"Radiometric_betaZeroSFPoly_get", _wrap_Radiometric_betaZeroSFPoly_get, METH_VARARGS, (char *)"Radiometric_betaZeroSFPoly_get(Radiometric self) -> Poly2D"},
	 { (char *)"Radiometric_sigmaZeroSFPoly_set", _wrap_Radiometric_sigmaZeroSFPoly_set, METH_VARARGS, (char *)"Radiometric_sigmaZeroSFPoly_set(Radiometric self, Poly2D sigmaZeroSFPoly)"},
	 { (char *)"Radiometric_sigmaZeroSFPoly_get", _wrap_Radiometric_sigmaZeroSFPoly_get, METH_VARARGS, (char *)"Radiometric_sigmaZeroSFPoly_get(Radiometric self) -> Poly2D"},
	 { (char *)"Radiometric_sigmaZeroSFIncidenceMap_set", _wrap_Radiometric_sigmaZeroSFIncidenceMap_set, METH_VARARGS, (char *)"Radiometric_sigmaZeroSFIncidenceMap_set(Radiometric self, AppliedType sigmaZeroSFIncidenceMap)"},
	 { (char *)"Radiometric_sigmaZeroSFIncidenceMap_get", _wrap_Radiometric_sigmaZeroSFIncidenceMap_get, METH_VARARGS, (char *)"Radiometric_sigmaZeroSFIncidenceMap_get(Radiometric self) -> AppliedType"},
	 { (char *)"Radiometric_gammaZeroSFPoly_set", _wrap_Radiometric_gammaZeroSFPoly_set, METH_VARARGS, (char *)"Radiometric_gammaZeroSFPoly_set(Radiometric self, Poly2D gammaZeroSFPoly)"},
	 { (char *)"Radiometric_gammaZeroSFPoly_get", _wrap_Radiometric_gammaZeroSFPoly_get, METH_VARARGS, (char *)"Radiometric_gammaZeroSFPoly_get(Radiometric self) -> Poly2D"},
	 { (char *)"Radiometric_gammaZeroSFIncidenceMap_set", _wrap_Radiometric_gammaZeroSFIncidenceMap_set, METH_VARARGS, (char *)"Radiometric_gammaZeroSFIncidenceMap_set(Radiometric self, AppliedType gammaZeroSFIncidenceMap)"},
	 { (char *)"Radiometric_gammaZeroSFIncidenceMap_get", _wrap_Radiometric_gammaZeroSFIncidenceMap_get, METH_VARARGS, (char *)"Radiometric_gammaZeroSFIncidenceMap_get(Radiometric self) -> AppliedType"},
	 { (char *)"Radiometric___eq__", _wrap_Radiometric___eq__, METH_VARARGS, (char *)"Radiometric___eq__(Radiometric self, Radiometric rhs) -> bool"},
	 { (char *)"Radiometric___ne__", _wrap_Radiometric___ne__, METH_VARARGS, (char *)"Radiometric___ne__(Radiometric self, Radiometric rhs) -> bool"},
	 { (char *)"delete_Radiometric", _wrap_delete_Radiometric, METH_VARARGS, (char *)"delete_Radiometric(Radiometric self)"},
	 { (char *)"Radiometric_swigregister", Radiometric_swigregister, METH_VARARGS, nullptr},
	 { (char *)"delete_Data", _wrap_delete_Data, METH_VARARGS, (char *)"delete_Data(Data self)"},
	 { (char *)"Data_clone", _wrap_Data_clone, METH_VARARGS, (char *)"Data_clone(Data self) -> Data"},
	 { (char *)"Data_getDataType", _wrap_Data_getDataType, METH_VARARGS, (char *)"Data_getDataType(Data self) -> DataType"},
	 { (char *)"Data_getPixelType", _wrap_Data_getPixelType, METH_VARARGS, (char *)"Data_getPixelType(Data self) -> PixelType"},
	 { (char *)"Data_setPixelType", _wrap_Data_setPixelType, METH_VARARGS, (char *)"Data_setPixelType(Data self, PixelType pixelType)"},
	 { (char *)"Data_getNumRows", _wrap_Data_getNumRows, METH_VARARGS, (char *)"Data_getNumRows(Data self) -> size_t"},
	 { (char *)"Data_setNumRows", _wrap_Data_setNumRows, METH_VARARGS, (char *)"Data_setNumRows(Data self, size_t numRows)"},
	 { (char *)"Data_getNumCols", _wrap_Data_getNumCols, METH_VARARGS, (char *)"Data_getNumCols(Data self) -> size_t"},
	 { (char *)"Data_setNumCols", _wrap_Data_setNumCols, METH_VARARGS, (char *)"Data_setNumCols(Data self, size_t numCols)"},
	 { (char *)"Data_getImageCorners", _wrap_Data_getImageCorners, METH_VARARGS, (char *)"Data_getImageCorners(Data self) -> LatLonCorners"},
	 { (char *)"Data_setImageCorners", _wrap_Data_setImageCorners, METH_VARARGS, (char *)"Data_setImageCorners(Data self, LatLonCorners corners)"},
	 { (char *)"Data_getName", _wrap_Data_getName, METH_VARARGS, (char *)"Data_getName(Data self) -> std::string"},
	 { (char *)"Data_setName", _wrap_Data_setName, METH_VARARGS, (char *)"Data_setName(Data self, std::string name)"},
	 { (char *)"Data_getSource", _wrap_Data_getSource, METH_VARARGS, (char *)"Data_getSource(Data self) -> std::string"},
	 { (char *)"Data_setSource", _wrap_Data_setSource, METH_VARARGS, (char *)"Data_setSource(Data self, std::string name)"},
	 { (char *)"Data_getCreationTime", _wrap_Data_getCreationTime, METH_VARARGS, (char *)"Data_getCreationTime(Data self) -> DateTime"},
	 { (char *)"Data_setCreationTime", _wrap_Data_setCreationTime, METH_VARARGS, (char *)"Data_setCreationTime(Data self, DateTime creationTime)"},
	 { (char *)"Data_getCollectionStartDateTime", _wrap_Data_getCollectionStartDateTime, METH_VARARGS, (char *)"Data_getCollectionStartDateTime(Data self) -> DateTime"},
	 { (char *)"Data_getNumBytesPerPixel", _wrap_Data_getNumBytesPerPixel, METH_VARARGS, (char *)"Data_getNumBytesPerPixel(Data self) -> size_t"},
	 { (char *)"Data_getNumChannels", _wrap_Data_getNumChannels, METH_VARARGS, (char *)"Data_getNumChannels(Data self) -> size_t"},
	 { (char *)"Data_getClassification", _wrap_Data_getClassification, METH_VARARGS, (char *)"\n"
		"getClassification() -> Classification\n"
		"Data_getClassification(Data self) -> Classification\n"
		""},
	 { (char *)"Data_getDisplayLUT", _wrap_Data_getDisplayLUT, METH_VARARGS, (char *)"Data_getDisplayLUT(Data self) -> mem::ScopedCopyablePtr< six::LUT > &"},
	 { (char *)"Data_getVendorID", _wrap_Data_getVendorID, METH_VARARGS, (char *)"Data_getVendorID(Data self) -> std::string"},
	 { (char *)"Data_getVersion", _wrap_Data_getVersion, METH_VARARGS, (char *)"Data_getVersion(Data self) -> std::string"},
	 { (char *)"Data_setVersion", _wrap_Data_setVersion, METH_VARARGS, (char *)"Data_setVersion(Data self, std::string const & version)"},
	 { (char *)"Data_swigregister", Data_swigregister, METH_VARARGS, nullptr},
	 { (char *)"delete_XMLControl", _wrap_delete_XMLControl, METH_VARARGS, (char *)"delete_XMLControl(XMLControl self)"},
	 { (char *)"XMLControl_setLogger", _wrap_XMLControl_setLogger, METH_VARARGS, (char *)"\n"
		"setLogger(logging::Logger * log, bool ownLog=False)\n"
		"XMLControl_setLogger(XMLControl self, logging::Logger * log)\n"
		""},
	 { (char *)"XMLControl_validate", _wrap_XMLControl_validate, METH_VARARGS, (char *)"XMLControl_validate(xml::lite::Document const * doc, VectorString schemaPaths, logging::Logger * log)"},
	 { (char *)"XMLControl_loadSchemaPaths", _wrap_XMLControl_loadSchemaPaths, METH_VARARGS, (char *)"XMLControl_loadSchemaPaths(VectorString schemaPaths)"},
	 { (char *)"XMLControl_dataTypeToString", _wrap_XMLControl_dataTypeToString, METH_VARARGS, (char *)"\n"
		"dataTypeToString(DataType dataType, bool appendXML=True) -> std::string\n"
		"XMLControl_dataTypeToString(DataType dataType) -> std::string\n"
		""},
	 { (char *)"XMLControl_splitVersion", _wrap_XMLControl_splitVersion, METH_VARARGS, (char *)"XMLControl_splitVersion(std::string const & versionStr, VectorString version)"},
	 { (char *)"XMLControl_swigregister", XMLControl_swigregister, METH_VARARGS, nullptr},
	 { (char *)"remapZeroTo360", _wrap_remapZeroTo360, METH_VARARGS, (char *)"remapZeroTo360(double degree) -> double"},
	 { (char *)"loadPluginDir", _wrap_loadPluginDir, METH_VARARGS, (char *)"loadPluginDir(std::string const & pluginDir)"},
	 { (char *)"loadXmlDataContentHandler", _wrap_loadXmlDataContentHandler, METH_VARARGS, (char *)"loadXmlDataContentHandler()"},
	 { (char *)"parseData", _wrap_parseData, METH_VARARGS, (char *)"\n"
		"parseData(XMLControlRegistry const & xmlReg, ::io::InputStream & xmlStream, DataType dataType, VectorString schemaPaths, logging::Logger & log) -> mem::AutoPtr< six::Data >\n"
		"parseData(XMLControlRegistry const & xmlReg, ::io::InputStream & xmlStream, VectorString schemaPaths, logging::Logger & log) -> mem::AutoPtr< six::Data >\n"
		""},
	 { (char *)"parseDataFromFile", _wrap_parseDataFromFile, METH_VARARGS, (char *)"\n"
		"parseDataFromFile(XMLControlRegistry const & xmlReg, std::string const & pathname, DataType dataType, VectorString schemaPaths, logging::Logger & log) -> mem::AutoPtr< six::Data >\n"
		"parseDataFromFile(XMLControlRegistry const & xmlReg, std::string const & pathname, VectorString schemaPaths, logging::Logger & log) -> mem::AutoPtr< six::Data >\n"
		""},
	 { (char *)"parseDataFromString", _wrap_parseDataFromString, METH_VARARGS, (char *)"\n"
		"parseDataFromString(XMLControlRegistry const & xmlReg, std::string const & xmlStr, DataType dataType, VectorString schemaPaths, logging::Logger & log) -> mem::AutoPtr< six::Data >\n"
		"parseDataFromString(XMLControlRegistry const & xmlReg, std::string const & xmlStr, VectorString schemaPaths, logging::Logger & log) -> mem::AutoPtr< six::Data >\n"
		""},
	 { (char *)"getErrors", _wrap_getErrors, METH_VARARGS, (char *)"getErrors(ErrorStatistics errorStats, RgAzDouble sampleSpacing, Errors errors)"},
	 { (char *)"findSchemaPath", _wrap_findSchemaPath, METH_VARARGS, (char *)"findSchemaPath(std::string const & progname) -> std::string"},
	 { (char *)"delete_Options", _wrap_delete_Options, METH_VARARGS, (char *)"delete_Options(Options self)"},
	 { (char *)"Options_getParameter", _wrap_Options_getParameter, METH_VARARGS, (char *)"\n"
		"getParameter(std::string const & option) -> Parameter\n"
		"Options_getParameter(Options self, std::string const & option, Parameter defaultValue) -> Parameter\n"
		""},
	 { (char *)"Options_setParameter", _wrap_Options_setParameter, METH_VARARGS, (char *)"Options_setParameter(Options self, std::string const & option, Parameter value)"},
	 { (char *)"Options_hasParameter", _wrap_Options_hasParameter, METH_VARARGS, (char *)"Options_hasParameter(Options self, std::string const & option) -> bool"},
	 { (char *)"Options_begin", _wrap_Options_begin, METH_VARARGS, (char *)"Options_begin(Options self) -> six::Options::ParameterIter"},
	 { (char *)"Options_end", _wrap_Options_end, METH_VARARGS, (char *)"Options_end(Options self) -> six::Options::ParameterIter"},
	 { (char *)"Options___eq__", _wrap_Options___eq__, METH_VARARGS, (char *)"Options___eq__(Options self, Options rhs) -> bool"},
	 { (char *)"Options___ne__", _wrap_Options___ne__, METH_VARARGS, (char *)"Options___ne__(Options self, Options rhs) -> bool"},
	 { (char *)"new_Options", _wrap_new_Options, METH_VARARGS, (char *)"new_Options() -> Options"},
	 { (char *)"Options_swigregister", Options_swigregister, METH_VARARGS, nullptr},
	 { (char *)"delete_XMLControlCreator", _wrap_delete_XMLControlCreator, METH_VARARGS, (char *)"delete_XMLControlCreator(XMLControlCreator self)"},
	 { (char *)"XMLControlCreator_newXMLControl", _wrap_XMLControlCreator_newXMLControl, METH_VARARGS, (char *)"XMLControlCreator_newXMLControl(XMLControlCreator self, logging::Logger * log) -> XMLControl"},
	 { (char *)"XMLControlCreator_swigregister", XMLControlCreator_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_XMLControlRegistry", _wrap_new_XMLControlRegistry, METH_VARARGS, (char *)"new_XMLControlRegistry() -> XMLControlRegistry"},
	 { (char *)"delete_XMLControlRegistry", _wrap_delete_XMLControlRegistry, METH_VARARGS, (char *)"delete_XMLControlRegistry(XMLControlRegistry self)"},
	 { (char *)"XMLControlRegistry_addCreator", _wrap_XMLControlRegistry_addCreator, METH_VARARGS, (char *)"\n"
		"addCreator(std::string const & identifier, mem::AutoPtr< six::XMLControlCreator > creator)\n"
		"addCreator(std::string const & identifier, XMLControlCreator creator)\n"
		"addCreator(DataType dataType, mem::AutoPtr< six::XMLControlCreator > creator)\n"
		"XMLControlRegistry_addCreator(XMLControlRegistry self, DataType dataType, XMLControlCreator creator)\n"
		""},
	 { (char *)"XMLControlRegistry_newXMLControl", _wrap_XMLControlRegistry_newXMLControl, METH_VARARGS, (char *)"\n"
		"newXMLControl(std::string const & identifier, logging::Logger * log) -> XMLControl\n"
		"XMLControlRegistry_newXMLControl(XMLControlRegistry self, DataType dataType, logging::Logger * log) -> XMLControl\n"
		""},
	 { (char *)"XMLControlRegistry_swigregister", XMLControlRegistry_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_GeoInfo", _wrap_new_GeoInfo, METH_VARARGS, (char *)"new_GeoInfo() -> GeoInfo"},
	 { (char *)"delete_GeoInfo", _wrap_delete_GeoInfo, METH_VARARGS, (char *)"delete_GeoInfo(GeoInfo self)"},
	 { (char *)"GeoInfo_name_set", _wrap_GeoInfo_name_set, METH_VARARGS, (char *)"GeoInfo_name_set(GeoInfo self, std::string const & name)"},
	 { (char *)"GeoInfo_name_get", _wrap_GeoInfo_name_get, METH_VARARGS, (char *)"GeoInfo_name_get(GeoInfo self) -> std::string const &"},
	 { (char *)"GeoInfo_geoInfos_set", _wrap_GeoInfo_geoInfos_set, METH_VARARGS, (char *)"GeoInfo_geoInfos_set(GeoInfo self, VectorScopedCopyableGeoInfo geoInfos)"},
	 { (char *)"GeoInfo_geoInfos_get", _wrap_GeoInfo_geoInfos_get, METH_VARARGS, (char *)"GeoInfo_geoInfos_get(GeoInfo self) -> VectorScopedCopyableGeoInfo"},
	 { (char *)"GeoInfo_desc_set", _wrap_GeoInfo_desc_set, METH_VARARGS, (char *)"GeoInfo_desc_set(GeoInfo self, ParameterCollection desc)"},
	 { (char *)"GeoInfo_desc_get", _wrap_GeoInfo_desc_get, METH_VARARGS, (char *)"GeoInfo_desc_get(GeoInfo self) -> ParameterCollection"},
	 { (char *)"GeoInfo_geometryLatLon_set", _wrap_GeoInfo_geometryLatLon_set, METH_VARARGS, (char *)"GeoInfo_geometryLatLon_set(GeoInfo self, std::vector< six::LatLon,std::allocator< six::LatLon > > * geometryLatLon)"},
	 { (char *)"GeoInfo_geometryLatLon_get", _wrap_GeoInfo_geometryLatLon_get, METH_VARARGS, (char *)"GeoInfo_geometryLatLon_get(GeoInfo self) -> std::vector< six::LatLon,std::allocator< six::LatLon > > *"},
	 { (char *)"GeoInfo___eq__", _wrap_GeoInfo___eq__, METH_VARARGS, (char *)"GeoInfo___eq__(GeoInfo self, GeoInfo rhs) -> bool"},
	 { (char *)"GeoInfo___ne__", _wrap_GeoInfo___ne__, METH_VARARGS, (char *)"GeoInfo___ne__(GeoInfo self, GeoInfo rhs) -> bool"},
	 { (char *)"GeoInfo_swigregister", GeoInfo_swigregister, METH_VARARGS, nullptr},
	 { (char *)"__lshift__", _wrap___lshift__, METH_VARARGS, (char *)"__lshift__(std::ostream & os, GeoInfo g) -> std::ostream &"},
	 { (char *)"new_GeoDataBase", _wrap_new_GeoDataBase, METH_VARARGS, (char *)"new_GeoDataBase() -> GeoDataBase"},
	 { (char *)"GeoDataBase_earthModel_set", _wrap_GeoDataBase_earthModel_set, METH_VARARGS, (char *)"GeoDataBase_earthModel_set(GeoDataBase self, EarthModelType earthModel)"},
	 { (char *)"GeoDataBase_earthModel_get", _wrap_GeoDataBase_earthModel_get, METH_VARARGS, (char *)"GeoDataBase_earthModel_get(GeoDataBase self) -> EarthModelType"},
	 { (char *)"GeoDataBase_imageCorners_set", _wrap_GeoDataBase_imageCorners_set, METH_VARARGS, (char *)"GeoDataBase_imageCorners_set(GeoDataBase self, LatLonCorners imageCorners)"},
	 { (char *)"GeoDataBase_imageCorners_get", _wrap_GeoDataBase_imageCorners_get, METH_VARARGS, (char *)"GeoDataBase_imageCorners_get(GeoDataBase self) -> LatLonCorners"},
	 { (char *)"GeoDataBase_validData_set", _wrap_GeoDataBase_validData_set, METH_VARARGS, (char *)"GeoDataBase_validData_set(GeoDataBase self, std::vector< six::LatLon,std::allocator< six::LatLon > > * validData)"},
	 { (char *)"GeoDataBase_validData_get", _wrap_GeoDataBase_validData_get, METH_VARARGS, (char *)"GeoDataBase_validData_get(GeoDataBase self) -> std::vector< six::LatLon,std::allocator< six::LatLon > > *"},
	 { (char *)"GeoDataBase_geoInfos_set", _wrap_GeoDataBase_geoInfos_set, METH_VARARGS, (char *)"GeoDataBase_geoInfos_set(GeoDataBase self, VectorScopedCopyableGeoInfo geoInfos)"},
	 { (char *)"GeoDataBase_geoInfos_get", _wrap_GeoDataBase_geoInfos_get, METH_VARARGS, (char *)"GeoDataBase_geoInfos_get(GeoDataBase self) -> VectorScopedCopyableGeoInfo"},
	 { (char *)"GeoDataBase___eq__", _wrap_GeoDataBase___eq__, METH_VARARGS, (char *)"GeoDataBase___eq__(GeoDataBase self, GeoDataBase rhs) -> bool"},
	 { (char *)"GeoDataBase___ne__", _wrap_GeoDataBase___ne__, METH_VARARGS, (char *)"GeoDataBase___ne__(GeoDataBase self, GeoDataBase rhs) -> bool"},
	 { (char *)"delete_GeoDataBase", _wrap_delete_GeoDataBase, METH_VARARGS, (char *)"delete_GeoDataBase(GeoDataBase self)"},
	 { (char *)"GeoDataBase_swigregister", GeoDataBase_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_LatLonCorners", _wrap_new_LatLonCorners, METH_VARARGS, (char *)"new_LatLonCorners() -> LatLonCorners"},
	 { (char *)"LatLonCorners_getCorner", _wrap_LatLonCorners_getCorner, METH_VARARGS, (char *)"\n"
		"getCorner(size_t idx) -> LatLon\n"
		"LatLonCorners_getCorner(LatLonCorners self, size_t idx) -> LatLon\n"
		""},
	 { (char *)"LatLonCorners___eq__", _wrap_LatLonCorners___eq__, METH_VARARGS, (char *)"LatLonCorners___eq__(LatLonCorners self, LatLonCorners rhs) -> bool"},
	 { (char *)"LatLonCorners___ne__", _wrap_LatLonCorners___ne__, METH_VARARGS, (char *)"LatLonCorners___ne__(LatLonCorners self, LatLonCorners rhs) -> bool"},
	 { (char *)"LatLonCorners_upperLeft_set", _wrap_LatLonCorners_upperLeft_set, METH_VARARGS, (char *)"LatLonCorners_upperLeft_set(LatLonCorners self, LatLon upperLeft)"},
	 { (char *)"LatLonCorners_upperLeft_get", _wrap_LatLonCorners_upperLeft_get, METH_VARARGS, (char *)"LatLonCorners_upperLeft_get(LatLonCorners self) -> LatLon"},
	 { (char *)"LatLonCorners_upperRight_set", _wrap_LatLonCorners_upperRight_set, METH_VARARGS, (char *)"LatLonCorners_upperRight_set(LatLonCorners self, LatLon upperRight)"},
	 { (char *)"LatLonCorners_upperRight_get", _wrap_LatLonCorners_upperRight_get, METH_VARARGS, (char *)"LatLonCorners_upperRight_get(LatLonCorners self) -> LatLon"},
	 { (char *)"LatLonCorners_lowerRight_set", _wrap_LatLonCorners_lowerRight_set, METH_VARARGS, (char *)"LatLonCorners_lowerRight_set(LatLonCorners self, LatLon lowerRight)"},
	 { (char *)"LatLonCorners_lowerRight_get", _wrap_LatLonCorners_lowerRight_get, METH_VARARGS, (char *)"LatLonCorners_lowerRight_get(LatLonCorners self) -> LatLon"},
	 { (char *)"LatLonCorners_lowerLeft_set", _wrap_LatLonCorners_lowerLeft_set, METH_VARARGS, (char *)"LatLonCorners_lowerLeft_set(LatLonCorners self, LatLon lowerLeft)"},
	 { (char *)"LatLonCorners_lowerLeft_get", _wrap_LatLonCorners_lowerLeft_get, METH_VARARGS, (char *)"LatLonCorners_lowerLeft_get(LatLonCorners self) -> LatLon"},
	 { (char *)"delete_LatLonCorners", _wrap_delete_LatLonCorners, METH_VARARGS, (char *)"delete_LatLonCorners(LatLonCorners self)"},
	 { (char *)"LatLonCorners_swigregister", LatLonCorners_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_LatLonAltCorners", _wrap_new_LatLonAltCorners, METH_VARARGS, (char *)"new_LatLonAltCorners() -> LatLonAltCorners"},
	 { (char *)"LatLonAltCorners_getCorner", _wrap_LatLonAltCorners_getCorner, METH_VARARGS, (char *)"\n"
		"getCorner(size_t idx) -> LatLonAlt\n"
		"LatLonAltCorners_getCorner(LatLonAltCorners self, size_t idx) -> LatLonAlt\n"
		""},
	 { (char *)"LatLonAltCorners___eq__", _wrap_LatLonAltCorners___eq__, METH_VARARGS, (char *)"LatLonAltCorners___eq__(LatLonAltCorners self, LatLonAltCorners rhs) -> bool"},
	 { (char *)"LatLonAltCorners___ne__", _wrap_LatLonAltCorners___ne__, METH_VARARGS, (char *)"LatLonAltCorners___ne__(LatLonAltCorners self, LatLonAltCorners rhs) -> bool"},
	 { (char *)"LatLonAltCorners_upperLeft_set", _wrap_LatLonAltCorners_upperLeft_set, METH_VARARGS, (char *)"LatLonAltCorners_upperLeft_set(LatLonAltCorners self, LatLonAlt upperLeft)"},
	 { (char *)"LatLonAltCorners_upperLeft_get", _wrap_LatLonAltCorners_upperLeft_get, METH_VARARGS, (char *)"LatLonAltCorners_upperLeft_get(LatLonAltCorners self) -> LatLonAlt"},
	 { (char *)"LatLonAltCorners_upperRight_set", _wrap_LatLonAltCorners_upperRight_set, METH_VARARGS, (char *)"LatLonAltCorners_upperRight_set(LatLonAltCorners self, LatLonAlt upperRight)"},
	 { (char *)"LatLonAltCorners_upperRight_get", _wrap_LatLonAltCorners_upperRight_get, METH_VARARGS, (char *)"LatLonAltCorners_upperRight_get(LatLonAltCorners self) -> LatLonAlt"},
	 { (char *)"LatLonAltCorners_lowerRight_set", _wrap_LatLonAltCorners_lowerRight_set, METH_VARARGS, (char *)"LatLonAltCorners_lowerRight_set(LatLonAltCorners self, LatLonAlt lowerRight)"},
	 { (char *)"LatLonAltCorners_lowerRight_get", _wrap_LatLonAltCorners_lowerRight_get, METH_VARARGS, (char *)"LatLonAltCorners_lowerRight_get(LatLonAltCorners self) -> LatLonAlt"},
	 { (char *)"LatLonAltCorners_lowerLeft_set", _wrap_LatLonAltCorners_lowerLeft_set, METH_VARARGS, (char *)"LatLonAltCorners_lowerLeft_set(LatLonAltCorners self, LatLonAlt lowerLeft)"},
	 { (char *)"LatLonAltCorners_lowerLeft_get", _wrap_LatLonAltCorners_lowerLeft_get, METH_VARARGS, (char *)"LatLonAltCorners_lowerLeft_get(LatLonAltCorners self) -> LatLonAlt"},
	 { (char *)"delete_LatLonAltCorners", _wrap_delete_LatLonAltCorners, METH_VARARGS, (char *)"delete_LatLonAltCorners(LatLonAltCorners self)"},
	 { (char *)"LatLonAltCorners_swigregister", LatLonAltCorners_swigregister, METH_VARARGS, nullptr},
	 { (char *)"VectorMatchCollect_iterator", _wrap_VectorMatchCollect_iterator, METH_VARARGS, (char *)"VectorMatchCollect_iterator(VectorMatchCollect self) -> SwigPyIterator"},
	 { (char *)"VectorMatchCollect___nonzero__", _wrap_VectorMatchCollect___nonzero__, METH_VARARGS, (char *)"VectorMatchCollect___nonzero__(VectorMatchCollect self) -> bool"},
	 { (char *)"VectorMatchCollect___bool__", _wrap_VectorMatchCollect___bool__, METH_VARARGS, (char *)"VectorMatchCollect___bool__(VectorMatchCollect self) -> bool"},
	 { (char *)"VectorMatchCollect___len__", _wrap_VectorMatchCollect___len__, METH_VARARGS, (char *)"VectorMatchCollect___len__(VectorMatchCollect self) -> std::vector< six::MatchCollect >::size_type"},
	 { (char *)"VectorMatchCollect___getslice__", _wrap_VectorMatchCollect___getslice__, METH_VARARGS, (char *)"VectorMatchCollect___getslice__(VectorMatchCollect self, std::vector< six::MatchCollect >::difference_type i, std::vector< six::MatchCollect >::difference_type j) -> VectorMatchCollect"},
	 { (char *)"VectorMatchCollect___setslice__", _wrap_VectorMatchCollect___setslice__, METH_VARARGS, (char *)"\n"
		"__setslice__(std::vector< six::MatchCollect >::difference_type i, std::vector< six::MatchCollect >::difference_type j)\n"
		"VectorMatchCollect___setslice__(VectorMatchCollect self, std::vector< six::MatchCollect >::difference_type i, std::vector< six::MatchCollect >::difference_type j, VectorMatchCollect v)\n"
		""},
	 { (char *)"VectorMatchCollect___delslice__", _wrap_VectorMatchCollect___delslice__, METH_VARARGS, (char *)"VectorMatchCollect___delslice__(VectorMatchCollect self, std::vector< six::MatchCollect >::difference_type i, std::vector< six::MatchCollect >::difference_type j)"},
	 { (char *)"VectorMatchCollect___delitem__", _wrap_VectorMatchCollect___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(std::vector< six::MatchCollect >::difference_type i)\n"
		"VectorMatchCollect___delitem__(VectorMatchCollect self, PySliceObject * slice)\n"
		""},
	 { (char *)"VectorMatchCollect___getitem__", _wrap_VectorMatchCollect___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject * slice) -> VectorMatchCollect\n"
		"VectorMatchCollect___getitem__(VectorMatchCollect self, std::vector< six::MatchCollect >::difference_type i) -> MatchCollect\n"
		""},
	 { (char *)"VectorMatchCollect___setitem__", _wrap_VectorMatchCollect___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject * slice, VectorMatchCollect v)\n"
		"__setitem__(PySliceObject * slice)\n"
		"VectorMatchCollect___setitem__(VectorMatchCollect self, std::vector< six::MatchCollect >::difference_type i, MatchCollect x)\n"
		""},
	 { (char *)"VectorMatchCollect_pop", _wrap_VectorMatchCollect_pop, METH_VARARGS, (char *)"VectorMatchCollect_pop(VectorMatchCollect self) -> MatchCollect"},
	 { (char *)"VectorMatchCollect_append", _wrap_VectorMatchCollect_append, METH_VARARGS, (char *)"VectorMatchCollect_append(VectorMatchCollect self, MatchCollect x)"},
	 { (char *)"VectorMatchCollect_empty", _wrap_VectorMatchCollect_empty, METH_VARARGS, (char *)"VectorMatchCollect_empty(VectorMatchCollect self) -> bool"},
	 { (char *)"VectorMatchCollect_size", _wrap_VectorMatchCollect_size, METH_VARARGS, (char *)"VectorMatchCollect_size(VectorMatchCollect self) -> std::vector< six::MatchCollect >::size_type"},
	 { (char *)"VectorMatchCollect_swap", _wrap_VectorMatchCollect_swap, METH_VARARGS, (char *)"VectorMatchCollect_swap(VectorMatchCollect self, VectorMatchCollect v)"},
	 { (char *)"VectorMatchCollect_begin", _wrap_VectorMatchCollect_begin, METH_VARARGS, (char *)"VectorMatchCollect_begin(VectorMatchCollect self) -> std::vector< six::MatchCollect >::iterator"},
	 { (char *)"VectorMatchCollect_end", _wrap_VectorMatchCollect_end, METH_VARARGS, (char *)"VectorMatchCollect_end(VectorMatchCollect self) -> std::vector< six::MatchCollect >::iterator"},
	 { (char *)"VectorMatchCollect_rbegin", _wrap_VectorMatchCollect_rbegin, METH_VARARGS, (char *)"VectorMatchCollect_rbegin(VectorMatchCollect self) -> std::vector< six::MatchCollect >::reverse_iterator"},
	 { (char *)"VectorMatchCollect_rend", _wrap_VectorMatchCollect_rend, METH_VARARGS, (char *)"VectorMatchCollect_rend(VectorMatchCollect self) -> std::vector< six::MatchCollect >::reverse_iterator"},
	 { (char *)"VectorMatchCollect_clear", _wrap_VectorMatchCollect_clear, METH_VARARGS, (char *)"VectorMatchCollect_clear(VectorMatchCollect self)"},
	 { (char *)"VectorMatchCollect_get_allocator", _wrap_VectorMatchCollect_get_allocator, METH_VARARGS, (char *)"VectorMatchCollect_get_allocator(VectorMatchCollect self) -> std::vector< six::MatchCollect >::allocator_type"},
	 { (char *)"VectorMatchCollect_pop_back", _wrap_VectorMatchCollect_pop_back, METH_VARARGS, (char *)"VectorMatchCollect_pop_back(VectorMatchCollect self)"},
	 { (char *)"VectorMatchCollect_erase", _wrap_VectorMatchCollect_erase, METH_VARARGS, (char *)"\n"
		"erase(std::vector< six::MatchCollect >::iterator pos) -> std::vector< six::MatchCollect >::iterator\n"
		"VectorMatchCollect_erase(VectorMatchCollect self, std::vector< six::MatchCollect >::iterator first, std::vector< six::MatchCollect >::iterator last) -> std::vector< six::MatchCollect >::iterator\n"
		""},
	 { (char *)"new_VectorMatchCollect", _wrap_new_VectorMatchCollect, METH_VARARGS, (char *)"\n"
		"VectorMatchCollect()\n"
		"VectorMatchCollect(VectorMatchCollect arg2)\n"
		"VectorMatchCollect(std::vector< six::MatchCollect >::size_type size)\n"
		"new_VectorMatchCollect(std::vector< six::MatchCollect >::size_type size, MatchCollect value) -> VectorMatchCollect\n"
		""},
	 { (char *)"VectorMatchCollect_push_back", _wrap_VectorMatchCollect_push_back, METH_VARARGS, (char *)"VectorMatchCollect_push_back(VectorMatchCollect self, MatchCollect x)"},
	 { (char *)"VectorMatchCollect_front", _wrap_VectorMatchCollect_front, METH_VARARGS, (char *)"VectorMatchCollect_front(VectorMatchCollect self) -> MatchCollect"},
	 { (char *)"VectorMatchCollect_back", _wrap_VectorMatchCollect_back, METH_VARARGS, (char *)"VectorMatchCollect_back(VectorMatchCollect self) -> MatchCollect"},
	 { (char *)"VectorMatchCollect_assign", _wrap_VectorMatchCollect_assign, METH_VARARGS, (char *)"VectorMatchCollect_assign(VectorMatchCollect self, std::vector< six::MatchCollect >::size_type n, MatchCollect x)"},
	 { (char *)"VectorMatchCollect_resize", _wrap_VectorMatchCollect_resize, METH_VARARGS, (char *)"\n"
		"resize(std::vector< six::MatchCollect >::size_type new_size)\n"
		"VectorMatchCollect_resize(VectorMatchCollect self, std::vector< six::MatchCollect >::size_type new_size, MatchCollect x)\n"
		""},
	 { (char *)"VectorMatchCollect_insert", _wrap_VectorMatchCollect_insert, METH_VARARGS, (char *)"\n"
		"insert(std::vector< six::MatchCollect >::iterator pos, MatchCollect x) -> std::vector< six::MatchCollect >::iterator\n"
		"VectorMatchCollect_insert(VectorMatchCollect self, std::vector< six::MatchCollect >::iterator pos, std::vector< six::MatchCollect >::size_type n, MatchCollect x)\n"
		""},
	 { (char *)"VectorMatchCollect_reserve", _wrap_VectorMatchCollect_reserve, METH_VARARGS, (char *)"VectorMatchCollect_reserve(VectorMatchCollect self, std::vector< six::MatchCollect >::size_type n)"},
	 { (char *)"VectorMatchCollect_capacity", _wrap_VectorMatchCollect_capacity, METH_VARARGS, (char *)"VectorMatchCollect_capacity(VectorMatchCollect self) -> std::vector< six::MatchCollect >::size_type"},
	 { (char *)"delete_VectorMatchCollect", _wrap_delete_VectorMatchCollect, METH_VARARGS, (char *)"delete_VectorMatchCollect(VectorMatchCollect self)"},
	 { (char *)"VectorMatchCollect_swigregister", VectorMatchCollect_swigregister, METH_VARARGS, nullptr},
	 { (char *)"VectorMatchType_iterator", _wrap_VectorMatchType_iterator, METH_VARARGS, (char *)"VectorMatchType_iterator(VectorMatchType self) -> SwigPyIterator"},
	 { (char *)"VectorMatchType___nonzero__", _wrap_VectorMatchType___nonzero__, METH_VARARGS, (char *)"VectorMatchType___nonzero__(VectorMatchType self) -> bool"},
	 { (char *)"VectorMatchType___bool__", _wrap_VectorMatchType___bool__, METH_VARARGS, (char *)"VectorMatchType___bool__(VectorMatchType self) -> bool"},
	 { (char *)"VectorMatchType___len__", _wrap_VectorMatchType___len__, METH_VARARGS, (char *)"VectorMatchType___len__(VectorMatchType self) -> std::vector< six::MatchType >::size_type"},
	 { (char *)"VectorMatchType___getslice__", _wrap_VectorMatchType___getslice__, METH_VARARGS, (char *)"VectorMatchType___getslice__(VectorMatchType self, std::vector< six::MatchType >::difference_type i, std::vector< six::MatchType >::difference_type j) -> VectorMatchType"},
	 { (char *)"VectorMatchType___setslice__", _wrap_VectorMatchType___setslice__, METH_VARARGS, (char *)"\n"
		"__setslice__(std::vector< six::MatchType >::difference_type i, std::vector< six::MatchType >::difference_type j)\n"
		"VectorMatchType___setslice__(VectorMatchType self, std::vector< six::MatchType >::difference_type i, std::vector< six::MatchType >::difference_type j, VectorMatchType v)\n"
		""},
	 { (char *)"VectorMatchType___delslice__", _wrap_VectorMatchType___delslice__, METH_VARARGS, (char *)"VectorMatchType___delslice__(VectorMatchType self, std::vector< six::MatchType >::difference_type i, std::vector< six::MatchType >::difference_type j)"},
	 { (char *)"VectorMatchType___delitem__", _wrap_VectorMatchType___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(std::vector< six::MatchType >::difference_type i)\n"
		"VectorMatchType___delitem__(VectorMatchType self, PySliceObject * slice)\n"
		""},
	 { (char *)"VectorMatchType___getitem__", _wrap_VectorMatchType___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject * slice) -> VectorMatchType\n"
		"VectorMatchType___getitem__(VectorMatchType self, std::vector< six::MatchType >::difference_type i) -> MatchType\n"
		""},
	 { (char *)"VectorMatchType___setitem__", _wrap_VectorMatchType___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject * slice, VectorMatchType v)\n"
		"__setitem__(PySliceObject * slice)\n"
		"VectorMatchType___setitem__(VectorMatchType self, std::vector< six::MatchType >::difference_type i, MatchType x)\n"
		""},
	 { (char *)"VectorMatchType_pop", _wrap_VectorMatchType_pop, METH_VARARGS, (char *)"VectorMatchType_pop(VectorMatchType self) -> MatchType"},
	 { (char *)"VectorMatchType_append", _wrap_VectorMatchType_append, METH_VARARGS, (char *)"VectorMatchType_append(VectorMatchType self, MatchType x)"},
	 { (char *)"VectorMatchType_empty", _wrap_VectorMatchType_empty, METH_VARARGS, (char *)"VectorMatchType_empty(VectorMatchType self) -> bool"},
	 { (char *)"VectorMatchType_size", _wrap_VectorMatchType_size, METH_VARARGS, (char *)"VectorMatchType_size(VectorMatchType self) -> std::vector< six::MatchType >::size_type"},
	 { (char *)"VectorMatchType_swap", _wrap_VectorMatchType_swap, METH_VARARGS, (char *)"VectorMatchType_swap(VectorMatchType self, VectorMatchType v)"},
	 { (char *)"VectorMatchType_begin", _wrap_VectorMatchType_begin, METH_VARARGS, (char *)"VectorMatchType_begin(VectorMatchType self) -> std::vector< six::MatchType >::iterator"},
	 { (char *)"VectorMatchType_end", _wrap_VectorMatchType_end, METH_VARARGS, (char *)"VectorMatchType_end(VectorMatchType self) -> std::vector< six::MatchType >::iterator"},
	 { (char *)"VectorMatchType_rbegin", _wrap_VectorMatchType_rbegin, METH_VARARGS, (char *)"VectorMatchType_rbegin(VectorMatchType self) -> std::vector< six::MatchType >::reverse_iterator"},
	 { (char *)"VectorMatchType_rend", _wrap_VectorMatchType_rend, METH_VARARGS, (char *)"VectorMatchType_rend(VectorMatchType self) -> std::vector< six::MatchType >::reverse_iterator"},
	 { (char *)"VectorMatchType_clear", _wrap_VectorMatchType_clear, METH_VARARGS, (char *)"VectorMatchType_clear(VectorMatchType self)"},
	 { (char *)"VectorMatchType_get_allocator", _wrap_VectorMatchType_get_allocator, METH_VARARGS, (char *)"VectorMatchType_get_allocator(VectorMatchType self) -> std::vector< six::MatchType >::allocator_type"},
	 { (char *)"VectorMatchType_pop_back", _wrap_VectorMatchType_pop_back, METH_VARARGS, (char *)"VectorMatchType_pop_back(VectorMatchType self)"},
	 { (char *)"VectorMatchType_erase", _wrap_VectorMatchType_erase, METH_VARARGS, (char *)"\n"
		"erase(std::vector< six::MatchType >::iterator pos) -> std::vector< six::MatchType >::iterator\n"
		"VectorMatchType_erase(VectorMatchType self, std::vector< six::MatchType >::iterator first, std::vector< six::MatchType >::iterator last) -> std::vector< six::MatchType >::iterator\n"
		""},
	 { (char *)"new_VectorMatchType", _wrap_new_VectorMatchType, METH_VARARGS, (char *)"\n"
		"VectorMatchType()\n"
		"VectorMatchType(VectorMatchType arg2)\n"
		"VectorMatchType(std::vector< six::MatchType >::size_type size)\n"
		"new_VectorMatchType(std::vector< six::MatchType >::size_type size, MatchType value) -> VectorMatchType\n"
		""},
	 { (char *)"VectorMatchType_push_back", _wrap_VectorMatchType_push_back, METH_VARARGS, (char *)"VectorMatchType_push_back(VectorMatchType self, MatchType x)"},
	 { (char *)"VectorMatchType_front", _wrap_VectorMatchType_front, METH_VARARGS, (char *)"VectorMatchType_front(VectorMatchType self) -> MatchType"},
	 { (char *)"VectorMatchType_back", _wrap_VectorMatchType_back, METH_VARARGS, (char *)"VectorMatchType_back(VectorMatchType self) -> MatchType"},
	 { (char *)"VectorMatchType_assign", _wrap_VectorMatchType_assign, METH_VARARGS, (char *)"VectorMatchType_assign(VectorMatchType self, std::vector< six::MatchType >::size_type n, MatchType x)"},
	 { (char *)"VectorMatchType_resize", _wrap_VectorMatchType_resize, METH_VARARGS, (char *)"\n"
		"resize(std::vector< six::MatchType >::size_type new_size)\n"
		"VectorMatchType_resize(VectorMatchType self, std::vector< six::MatchType >::size_type new_size, MatchType x)\n"
		""},
	 { (char *)"VectorMatchType_insert", _wrap_VectorMatchType_insert, METH_VARARGS, (char *)"\n"
		"insert(std::vector< six::MatchType >::iterator pos, MatchType x) -> std::vector< six::MatchType >::iterator\n"
		"VectorMatchType_insert(VectorMatchType self, std::vector< six::MatchType >::iterator pos, std::vector< six::MatchType >::size_type n, MatchType x)\n"
		""},
	 { (char *)"VectorMatchType_reserve", _wrap_VectorMatchType_reserve, METH_VARARGS, (char *)"VectorMatchType_reserve(VectorMatchType self, std::vector< six::MatchType >::size_type n)"},
	 { (char *)"VectorMatchType_capacity", _wrap_VectorMatchType_capacity, METH_VARARGS, (char *)"VectorMatchType_capacity(VectorMatchType self) -> std::vector< six::MatchType >::size_type"},
	 { (char *)"delete_VectorMatchType", _wrap_delete_VectorMatchType, METH_VARARGS, (char *)"delete_VectorMatchType(VectorMatchType self)"},
	 { (char *)"VectorMatchType_swigregister", VectorMatchType_swigregister, METH_VARARGS, nullptr},
	 { (char *)"VectorScopedCopyableMatchType_iterator", _wrap_VectorScopedCopyableMatchType_iterator, METH_VARARGS, (char *)"VectorScopedCopyableMatchType_iterator(VectorScopedCopyableMatchType self) -> SwigPyIterator"},
	 { (char *)"VectorScopedCopyableMatchType___nonzero__", _wrap_VectorScopedCopyableMatchType___nonzero__, METH_VARARGS, (char *)"VectorScopedCopyableMatchType___nonzero__(VectorScopedCopyableMatchType self) -> bool"},
	 { (char *)"VectorScopedCopyableMatchType___bool__", _wrap_VectorScopedCopyableMatchType___bool__, METH_VARARGS, (char *)"VectorScopedCopyableMatchType___bool__(VectorScopedCopyableMatchType self) -> bool"},
	 { (char *)"VectorScopedCopyableMatchType___len__", _wrap_VectorScopedCopyableMatchType___len__, METH_VARARGS, (char *)"VectorScopedCopyableMatchType___len__(VectorScopedCopyableMatchType self) -> std::vector< mem::ScopedCopyablePtr< six::MatchType > >::size_type"},
	 { (char *)"VectorScopedCopyableMatchType___getslice__", _wrap_VectorScopedCopyableMatchType___getslice__, METH_VARARGS, (char *)"VectorScopedCopyableMatchType___getslice__(VectorScopedCopyableMatchType self, std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type i, std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type j) -> VectorScopedCopyableMatchType"},
	 { (char *)"VectorScopedCopyableMatchType___setslice__", _wrap_VectorScopedCopyableMatchType___setslice__, METH_VARARGS, (char *)"\n"
		"__setslice__(std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type i, std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type j)\n"
		"VectorScopedCopyableMatchType___setslice__(VectorScopedCopyableMatchType self, std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type i, std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type j, VectorScopedCopyableMatchType v)\n"
		""},
	 { (char *)"VectorScopedCopyableMatchType___delslice__", _wrap_VectorScopedCopyableMatchType___delslice__, METH_VARARGS, (char *)"VectorScopedCopyableMatchType___delslice__(VectorScopedCopyableMatchType self, std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type i, std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type j)"},
	 { (char *)"VectorScopedCopyableMatchType___delitem__", _wrap_VectorScopedCopyableMatchType___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type i)\n"
		"VectorScopedCopyableMatchType___delitem__(VectorScopedCopyableMatchType self, PySliceObject * slice)\n"
		""},
	 { (char *)"VectorScopedCopyableMatchType___getitem__", _wrap_VectorScopedCopyableMatchType___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject * slice) -> VectorScopedCopyableMatchType\n"
		"VectorScopedCopyableMatchType___getitem__(VectorScopedCopyableMatchType self, std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type i) -> ScopedCopyableMatchType\n"
		""},
	 { (char *)"VectorScopedCopyableMatchType___setitem__", _wrap_VectorScopedCopyableMatchType___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject * slice, VectorScopedCopyableMatchType v)\n"
		"__setitem__(PySliceObject * slice)\n"
		"VectorScopedCopyableMatchType___setitem__(VectorScopedCopyableMatchType self, std::vector< mem::ScopedCopyablePtr< six::MatchType > >::difference_type i, ScopedCopyableMatchType x)\n"
		""},
	 { (char *)"VectorScopedCopyableMatchType_pop", _wrap_VectorScopedCopyableMatchType_pop, METH_VARARGS, (char *)"VectorScopedCopyableMatchType_pop(VectorScopedCopyableMatchType self) -> ScopedCopyableMatchType"},
	 { (char *)"VectorScopedCopyableMatchType_append", _wrap_VectorScopedCopyableMatchType_append, METH_VARARGS, (char *)"VectorScopedCopyableMatchType_append(VectorScopedCopyableMatchType self, ScopedCopyableMatchType x)"},
	 { (char *)"VectorScopedCopyableMatchType_empty", _wrap_VectorScopedCopyableMatchType_empty, METH_VARARGS, (char *)"VectorScopedCopyableMatchType_empty(VectorScopedCopyableMatchType self) -> bool"},
	 { (char *)"VectorScopedCopyableMatchType_size", _wrap_VectorScopedCopyableMatchType_size, METH_VARARGS, (char *)"VectorScopedCopyableMatchType_size(VectorScopedCopyableMatchType self) -> std::vector< mem::ScopedCopyablePtr< six::MatchType > >::size_type"},
	 { (char *)"VectorScopedCopyableMatchType_swap", _wrap_VectorScopedCopyableMatchType_swap, METH_VARARGS, (char *)"VectorScopedCopyableMatchType_swap(VectorScopedCopyableMatchType self, VectorScopedCopyableMatchType v)"},
	 { (char *)"VectorScopedCopyableMatchType_begin", _wrap_VectorScopedCopyableMatchType_begin, METH_VARARGS, (char *)"VectorScopedCopyableMatchType_begin(VectorScopedCopyableMatchType self) -> std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator"},
	 { (char *)"VectorScopedCopyableMatchType_end", _wrap_VectorScopedCopyableMatchType_end, METH_VARARGS, (char *)"VectorScopedCopyableMatchType_end(VectorScopedCopyableMatchType self) -> std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator"},
	 { (char *)"VectorScopedCopyableMatchType_rbegin", _wrap_VectorScopedCopyableMatchType_rbegin, METH_VARARGS, (char *)"VectorScopedCopyableMatchType_rbegin(VectorScopedCopyableMatchType self) -> std::vector< mem::ScopedCopyablePtr< six::MatchType > >::reverse_iterator"},
	 { (char *)"VectorScopedCopyableMatchType_rend", _wrap_VectorScopedCopyableMatchType_rend, METH_VARARGS, (char *)"VectorScopedCopyableMatchType_rend(VectorScopedCopyableMatchType self) -> std::vector< mem::ScopedCopyablePtr< six::MatchType > >::reverse_iterator"},
	 { (char *)"VectorScopedCopyableMatchType_clear", _wrap_VectorScopedCopyableMatchType_clear, METH_VARARGS, (char *)"VectorScopedCopyableMatchType_clear(VectorScopedCopyableMatchType self)"},
	 { (char *)"VectorScopedCopyableMatchType_get_allocator", _wrap_VectorScopedCopyableMatchType_get_allocator, METH_VARARGS, (char *)"VectorScopedCopyableMatchType_get_allocator(VectorScopedCopyableMatchType self) -> std::vector< mem::ScopedCopyablePtr< six::MatchType > >::allocator_type"},
	 { (char *)"VectorScopedCopyableMatchType_pop_back", _wrap_VectorScopedCopyableMatchType_pop_back, METH_VARARGS, (char *)"VectorScopedCopyableMatchType_pop_back(VectorScopedCopyableMatchType self)"},
	 { (char *)"VectorScopedCopyableMatchType_erase", _wrap_VectorScopedCopyableMatchType_erase, METH_VARARGS, (char *)"\n"
		"erase(std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator pos) -> std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator\n"
		"VectorScopedCopyableMatchType_erase(VectorScopedCopyableMatchType self, std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator first, std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator last) -> std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator\n"
		""},
	 { (char *)"new_VectorScopedCopyableMatchType", _wrap_new_VectorScopedCopyableMatchType, METH_VARARGS, (char *)"\n"
		"VectorScopedCopyableMatchType()\n"
		"VectorScopedCopyableMatchType(VectorScopedCopyableMatchType arg2)\n"
		"VectorScopedCopyableMatchType(std::vector< mem::ScopedCopyablePtr< six::MatchType > >::size_type size)\n"
		"new_VectorScopedCopyableMatchType(std::vector< mem::ScopedCopyablePtr< six::MatchType > >::size_type size, ScopedCopyableMatchType value) -> VectorScopedCopyableMatchType\n"
		""},
	 { (char *)"VectorScopedCopyableMatchType_push_back", _wrap_VectorScopedCopyableMatchType_push_back, METH_VARARGS, (char *)"VectorScopedCopyableMatchType_push_back(VectorScopedCopyableMatchType self, ScopedCopyableMatchType x)"},
	 { (char *)"VectorScopedCopyableMatchType_front", _wrap_VectorScopedCopyableMatchType_front, METH_VARARGS, (char *)"VectorScopedCopyableMatchType_front(VectorScopedCopyableMatchType self) -> ScopedCopyableMatchType"},
	 { (char *)"VectorScopedCopyableMatchType_back", _wrap_VectorScopedCopyableMatchType_back, METH_VARARGS, (char *)"VectorScopedCopyableMatchType_back(VectorScopedCopyableMatchType self) -> ScopedCopyableMatchType"},
	 { (char *)"VectorScopedCopyableMatchType_assign", _wrap_VectorScopedCopyableMatchType_assign, METH_VARARGS, (char *)"VectorScopedCopyableMatchType_assign(VectorScopedCopyableMatchType self, std::vector< mem::ScopedCopyablePtr< six::MatchType > >::size_type n, ScopedCopyableMatchType x)"},
	 { (char *)"VectorScopedCopyableMatchType_resize", _wrap_VectorScopedCopyableMatchType_resize, METH_VARARGS, (char *)"\n"
		"resize(std::vector< mem::ScopedCopyablePtr< six::MatchType > >::size_type new_size)\n"
		"VectorScopedCopyableMatchType_resize(VectorScopedCopyableMatchType self, std::vector< mem::ScopedCopyablePtr< six::MatchType > >::size_type new_size, ScopedCopyableMatchType x)\n"
		""},
	 { (char *)"VectorScopedCopyableMatchType_insert", _wrap_VectorScopedCopyableMatchType_insert, METH_VARARGS, (char *)"\n"
		"insert(std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator pos, ScopedCopyableMatchType x) -> std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator\n"
		"VectorScopedCopyableMatchType_insert(VectorScopedCopyableMatchType self, std::vector< mem::ScopedCopyablePtr< six::MatchType > >::iterator pos, std::vector< mem::ScopedCopyablePtr< six::MatchType > >::size_type n, ScopedCopyableMatchType x)\n"
		""},
	 { (char *)"VectorScopedCopyableMatchType_reserve", _wrap_VectorScopedCopyableMatchType_reserve, METH_VARARGS, (char *)"VectorScopedCopyableMatchType_reserve(VectorScopedCopyableMatchType self, std::vector< mem::ScopedCopyablePtr< six::MatchType > >::size_type n)"},
	 { (char *)"VectorScopedCopyableMatchType_capacity", _wrap_VectorScopedCopyableMatchType_capacity, METH_VARARGS, (char *)"VectorScopedCopyableMatchType_capacity(VectorScopedCopyableMatchType self) -> std::vector< mem::ScopedCopyablePtr< six::MatchType > >::size_type"},
	 { (char *)"delete_VectorScopedCopyableMatchType", _wrap_delete_VectorScopedCopyableMatchType, METH_VARARGS, (char *)"delete_VectorScopedCopyableMatchType(VectorScopedCopyableMatchType self)"},
	 { (char *)"VectorScopedCopyableMatchType_swigregister", VectorScopedCopyableMatchType_swigregister, METH_VARARGS, nullptr},
	 { (char *)"VectorScopedCopyableGeoInfo_iterator", _wrap_VectorScopedCopyableGeoInfo_iterator, METH_VARARGS, (char *)"VectorScopedCopyableGeoInfo_iterator(VectorScopedCopyableGeoInfo self) -> SwigPyIterator"},
	 { (char *)"VectorScopedCopyableGeoInfo___nonzero__", _wrap_VectorScopedCopyableGeoInfo___nonzero__, METH_VARARGS, (char *)"VectorScopedCopyableGeoInfo___nonzero__(VectorScopedCopyableGeoInfo self) -> bool"},
	 { (char *)"VectorScopedCopyableGeoInfo___bool__", _wrap_VectorScopedCopyableGeoInfo___bool__, METH_VARARGS, (char *)"VectorScopedCopyableGeoInfo___bool__(VectorScopedCopyableGeoInfo self) -> bool"},
	 { (char *)"VectorScopedCopyableGeoInfo___len__", _wrap_VectorScopedCopyableGeoInfo___len__, METH_VARARGS, (char *)"VectorScopedCopyableGeoInfo___len__(VectorScopedCopyableGeoInfo self) -> std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::size_type"},
	 { (char *)"VectorScopedCopyableGeoInfo___getslice__", _wrap_VectorScopedCopyableGeoInfo___getslice__, METH_VARARGS, (char *)"VectorScopedCopyableGeoInfo___getslice__(VectorScopedCopyableGeoInfo self, std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type i, std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type j) -> VectorScopedCopyableGeoInfo"},
	 { (char *)"VectorScopedCopyableGeoInfo___setslice__", _wrap_VectorScopedCopyableGeoInfo___setslice__, METH_VARARGS, (char *)"\n"
		"__setslice__(std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type i, std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type j)\n"
		"VectorScopedCopyableGeoInfo___setslice__(VectorScopedCopyableGeoInfo self, std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type i, std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type j, VectorScopedCopyableGeoInfo v)\n"
		""},
	 { (char *)"VectorScopedCopyableGeoInfo___delslice__", _wrap_VectorScopedCopyableGeoInfo___delslice__, METH_VARARGS, (char *)"VectorScopedCopyableGeoInfo___delslice__(VectorScopedCopyableGeoInfo self, std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type i, std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type j)"},
	 { (char *)"VectorScopedCopyableGeoInfo___delitem__", _wrap_VectorScopedCopyableGeoInfo___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type i)\n"
		"VectorScopedCopyableGeoInfo___delitem__(VectorScopedCopyableGeoInfo self, PySliceObject * slice)\n"
		""},
	 { (char *)"VectorScopedCopyableGeoInfo___getitem__", _wrap_VectorScopedCopyableGeoInfo___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject * slice) -> VectorScopedCopyableGeoInfo\n"
		"VectorScopedCopyableGeoInfo___getitem__(VectorScopedCopyableGeoInfo self, std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type i) -> ScopedCopyableGeoInfo\n"
		""},
	 { (char *)"VectorScopedCopyableGeoInfo___setitem__", _wrap_VectorScopedCopyableGeoInfo___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject * slice, VectorScopedCopyableGeoInfo v)\n"
		"__setitem__(PySliceObject * slice)\n"
		"VectorScopedCopyableGeoInfo___setitem__(VectorScopedCopyableGeoInfo self, std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::difference_type i, ScopedCopyableGeoInfo x)\n"
		""},
	 { (char *)"VectorScopedCopyableGeoInfo_pop", _wrap_VectorScopedCopyableGeoInfo_pop, METH_VARARGS, (char *)"VectorScopedCopyableGeoInfo_pop(VectorScopedCopyableGeoInfo self) -> ScopedCopyableGeoInfo"},
	 { (char *)"VectorScopedCopyableGeoInfo_append", _wrap_VectorScopedCopyableGeoInfo_append, METH_VARARGS, (char *)"VectorScopedCopyableGeoInfo_append(VectorScopedCopyableGeoInfo self, ScopedCopyableGeoInfo x)"},
	 { (char *)"VectorScopedCopyableGeoInfo_empty", _wrap_VectorScopedCopyableGeoInfo_empty, METH_VARARGS, (char *)"VectorScopedCopyableGeoInfo_empty(VectorScopedCopyableGeoInfo self) -> bool"},
	 { (char *)"VectorScopedCopyableGeoInfo_size", _wrap_VectorScopedCopyableGeoInfo_size, METH_VARARGS, (char *)"VectorScopedCopyableGeoInfo_size(VectorScopedCopyableGeoInfo self) -> std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::size_type"},
	 { (char *)"VectorScopedCopyableGeoInfo_swap", _wrap_VectorScopedCopyableGeoInfo_swap, METH_VARARGS, (char *)"VectorScopedCopyableGeoInfo_swap(VectorScopedCopyableGeoInfo self, VectorScopedCopyableGeoInfo v)"},
	 { (char *)"VectorScopedCopyableGeoInfo_begin", _wrap_VectorScopedCopyableGeoInfo_begin, METH_VARARGS, (char *)"VectorScopedCopyableGeoInfo_begin(VectorScopedCopyableGeoInfo self) -> std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator"},
	 { (char *)"VectorScopedCopyableGeoInfo_end", _wrap_VectorScopedCopyableGeoInfo_end, METH_VARARGS, (char *)"VectorScopedCopyableGeoInfo_end(VectorScopedCopyableGeoInfo self) -> std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator"},
	 { (char *)"VectorScopedCopyableGeoInfo_rbegin", _wrap_VectorScopedCopyableGeoInfo_rbegin, METH_VARARGS, (char *)"VectorScopedCopyableGeoInfo_rbegin(VectorScopedCopyableGeoInfo self) -> std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::reverse_iterator"},
	 { (char *)"VectorScopedCopyableGeoInfo_rend", _wrap_VectorScopedCopyableGeoInfo_rend, METH_VARARGS, (char *)"VectorScopedCopyableGeoInfo_rend(VectorScopedCopyableGeoInfo self) -> std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::reverse_iterator"},
	 { (char *)"VectorScopedCopyableGeoInfo_clear", _wrap_VectorScopedCopyableGeoInfo_clear, METH_VARARGS, (char *)"VectorScopedCopyableGeoInfo_clear(VectorScopedCopyableGeoInfo self)"},
	 { (char *)"VectorScopedCopyableGeoInfo_get_allocator", _wrap_VectorScopedCopyableGeoInfo_get_allocator, METH_VARARGS, (char *)"VectorScopedCopyableGeoInfo_get_allocator(VectorScopedCopyableGeoInfo self) -> std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::allocator_type"},
	 { (char *)"VectorScopedCopyableGeoInfo_pop_back", _wrap_VectorScopedCopyableGeoInfo_pop_back, METH_VARARGS, (char *)"VectorScopedCopyableGeoInfo_pop_back(VectorScopedCopyableGeoInfo self)"},
	 { (char *)"VectorScopedCopyableGeoInfo_erase", _wrap_VectorScopedCopyableGeoInfo_erase, METH_VARARGS, (char *)"\n"
		"erase(std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator pos) -> std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator\n"
		"VectorScopedCopyableGeoInfo_erase(VectorScopedCopyableGeoInfo self, std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator first, std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator last) -> std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator\n"
		""},
	 { (char *)"new_VectorScopedCopyableGeoInfo", _wrap_new_VectorScopedCopyableGeoInfo, METH_VARARGS, (char *)"\n"
		"VectorScopedCopyableGeoInfo()\n"
		"VectorScopedCopyableGeoInfo(VectorScopedCopyableGeoInfo arg2)\n"
		"VectorScopedCopyableGeoInfo(std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::size_type size)\n"
		"new_VectorScopedCopyableGeoInfo(std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::size_type size, ScopedCopyableGeoInfo value) -> VectorScopedCopyableGeoInfo\n"
		""},
	 { (char *)"VectorScopedCopyableGeoInfo_push_back", _wrap_VectorScopedCopyableGeoInfo_push_back, METH_VARARGS, (char *)"VectorScopedCopyableGeoInfo_push_back(VectorScopedCopyableGeoInfo self, ScopedCopyableGeoInfo x)"},
	 { (char *)"VectorScopedCopyableGeoInfo_front", _wrap_VectorScopedCopyableGeoInfo_front, METH_VARARGS, (char *)"VectorScopedCopyableGeoInfo_front(VectorScopedCopyableGeoInfo self) -> ScopedCopyableGeoInfo"},
	 { (char *)"VectorScopedCopyableGeoInfo_back", _wrap_VectorScopedCopyableGeoInfo_back, METH_VARARGS, (char *)"VectorScopedCopyableGeoInfo_back(VectorScopedCopyableGeoInfo self) -> ScopedCopyableGeoInfo"},
	 { (char *)"VectorScopedCopyableGeoInfo_assign", _wrap_VectorScopedCopyableGeoInfo_assign, METH_VARARGS, (char *)"VectorScopedCopyableGeoInfo_assign(VectorScopedCopyableGeoInfo self, std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::size_type n, ScopedCopyableGeoInfo x)"},
	 { (char *)"VectorScopedCopyableGeoInfo_resize", _wrap_VectorScopedCopyableGeoInfo_resize, METH_VARARGS, (char *)"\n"
		"resize(std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::size_type new_size)\n"
		"VectorScopedCopyableGeoInfo_resize(VectorScopedCopyableGeoInfo self, std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::size_type new_size, ScopedCopyableGeoInfo x)\n"
		""},
	 { (char *)"VectorScopedCopyableGeoInfo_insert", _wrap_VectorScopedCopyableGeoInfo_insert, METH_VARARGS, (char *)"\n"
		"insert(std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator pos, ScopedCopyableGeoInfo x) -> std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator\n"
		"VectorScopedCopyableGeoInfo_insert(VectorScopedCopyableGeoInfo self, std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::iterator pos, std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::size_type n, ScopedCopyableGeoInfo x)\n"
		""},
	 { (char *)"VectorScopedCopyableGeoInfo_reserve", _wrap_VectorScopedCopyableGeoInfo_reserve, METH_VARARGS, (char *)"VectorScopedCopyableGeoInfo_reserve(VectorScopedCopyableGeoInfo self, std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::size_type n)"},
	 { (char *)"VectorScopedCopyableGeoInfo_capacity", _wrap_VectorScopedCopyableGeoInfo_capacity, METH_VARARGS, (char *)"VectorScopedCopyableGeoInfo_capacity(VectorScopedCopyableGeoInfo self) -> std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::size_type"},
	 { (char *)"delete_VectorScopedCopyableGeoInfo", _wrap_delete_VectorScopedCopyableGeoInfo, METH_VARARGS, (char *)"delete_VectorScopedCopyableGeoInfo(VectorScopedCopyableGeoInfo self)"},
	 { (char *)"VectorScopedCopyableGeoInfo_swigregister", VectorScopedCopyableGeoInfo_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_StdAutoRadiometric", _wrap_new_StdAutoRadiometric, METH_VARARGS, (char *)"new_StdAutoRadiometric() -> StdAutoRadiometric"},
	 { (char *)"delete_StdAutoRadiometric", _wrap_delete_StdAutoRadiometric, METH_VARARGS, (char *)"delete_StdAutoRadiometric(StdAutoRadiometric self)"},
	 { (char *)"StdAutoRadiometric_swigregister", StdAutoRadiometric_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_ScopedCopyableRadiometric", _wrap_new_ScopedCopyableRadiometric, METH_VARARGS, (char *)"\n"
		"ScopedCopyableRadiometric(Radiometric ptr=None)\n"
		"ScopedCopyableRadiometric()\n"
		"new_ScopedCopyableRadiometric(ScopedCopyableRadiometric rhs) -> ScopedCopyableRadiometric\n"
		""},
	 { (char *)"ScopedCopyableRadiometric___nonzero__", _wrap_ScopedCopyableRadiometric___nonzero__, METH_VARARGS, (char *)"ScopedCopyableRadiometric___nonzero__(ScopedCopyableRadiometric self) -> bool"},
	 { (char *)"ScopedCopyableRadiometric_get", _wrap_ScopedCopyableRadiometric_get, METH_VARARGS, (char *)"ScopedCopyableRadiometric_get(ScopedCopyableRadiometric self) -> Radiometric"},
	 { (char *)"ScopedCopyableRadiometric___ref__", _wrap_ScopedCopyableRadiometric___ref__, METH_VARARGS, (char *)"ScopedCopyableRadiometric___ref__(ScopedCopyableRadiometric self) -> Radiometric"},
	 { (char *)"ScopedCopyableRadiometric___deref__", _wrap_ScopedCopyableRadiometric___deref__, METH_VARARGS, (char *)"ScopedCopyableRadiometric___deref__(ScopedCopyableRadiometric self) -> Radiometric"},
	 { (char *)"ScopedCopyableRadiometric_reset", _wrap_ScopedCopyableRadiometric_reset, METH_VARARGS, (char *)"\n"
		"reset(Radiometric ptr=None)\n"
		"ScopedCopyableRadiometric_reset(ScopedCopyableRadiometric self)\n"
		""},
	 { (char *)"delete_ScopedCopyableRadiometric", _wrap_delete_ScopedCopyableRadiometric, METH_VARARGS, (char *)"delete_ScopedCopyableRadiometric(ScopedCopyableRadiometric self)"},
	 { (char *)"ScopedCopyableRadiometric_NL_ABSOLUTE_get", _wrap_ScopedCopyableRadiometric_NL_ABSOLUTE_get, METH_VARARGS, (char *)"ScopedCopyableRadiometric_NL_ABSOLUTE_get(ScopedCopyableRadiometric self) -> char const []"},
	 { (char *)"ScopedCopyableRadiometric_NL_RELATIVE_get", _wrap_ScopedCopyableRadiometric_NL_RELATIVE_get, METH_VARARGS, (char *)"ScopedCopyableRadiometric_NL_RELATIVE_get(ScopedCopyableRadiometric self) -> char const []"},
	 { (char *)"ScopedCopyableRadiometric_noiseLevel_set", _wrap_ScopedCopyableRadiometric_noiseLevel_set, METH_VARARGS, (char *)"ScopedCopyableRadiometric_noiseLevel_set(ScopedCopyableRadiometric self, NoiseLevel noiseLevel)"},
	 { (char *)"ScopedCopyableRadiometric_noiseLevel_get", _wrap_ScopedCopyableRadiometric_noiseLevel_get, METH_VARARGS, (char *)"ScopedCopyableRadiometric_noiseLevel_get(ScopedCopyableRadiometric self) -> NoiseLevel"},
	 { (char *)"ScopedCopyableRadiometric_rcsSFPoly_set", _wrap_ScopedCopyableRadiometric_rcsSFPoly_set, METH_VARARGS, (char *)"ScopedCopyableRadiometric_rcsSFPoly_set(ScopedCopyableRadiometric self, Poly2D rcsSFPoly)"},
	 { (char *)"ScopedCopyableRadiometric_rcsSFPoly_get", _wrap_ScopedCopyableRadiometric_rcsSFPoly_get, METH_VARARGS, (char *)"ScopedCopyableRadiometric_rcsSFPoly_get(ScopedCopyableRadiometric self) -> Poly2D"},
	 { (char *)"ScopedCopyableRadiometric_betaZeroSFPoly_set", _wrap_ScopedCopyableRadiometric_betaZeroSFPoly_set, METH_VARARGS, (char *)"ScopedCopyableRadiometric_betaZeroSFPoly_set(ScopedCopyableRadiometric self, Poly2D betaZeroSFPoly)"},
	 { (char *)"ScopedCopyableRadiometric_betaZeroSFPoly_get", _wrap_ScopedCopyableRadiometric_betaZeroSFPoly_get, METH_VARARGS, (char *)"ScopedCopyableRadiometric_betaZeroSFPoly_get(ScopedCopyableRadiometric self) -> Poly2D"},
	 { (char *)"ScopedCopyableRadiometric_sigmaZeroSFPoly_set", _wrap_ScopedCopyableRadiometric_sigmaZeroSFPoly_set, METH_VARARGS, (char *)"ScopedCopyableRadiometric_sigmaZeroSFPoly_set(ScopedCopyableRadiometric self, Poly2D sigmaZeroSFPoly)"},
	 { (char *)"ScopedCopyableRadiometric_sigmaZeroSFPoly_get", _wrap_ScopedCopyableRadiometric_sigmaZeroSFPoly_get, METH_VARARGS, (char *)"ScopedCopyableRadiometric_sigmaZeroSFPoly_get(ScopedCopyableRadiometric self) -> Poly2D"},
	 { (char *)"ScopedCopyableRadiometric_sigmaZeroSFIncidenceMap_set", _wrap_ScopedCopyableRadiometric_sigmaZeroSFIncidenceMap_set, METH_VARARGS, (char *)"ScopedCopyableRadiometric_sigmaZeroSFIncidenceMap_set(ScopedCopyableRadiometric self, AppliedType sigmaZeroSFIncidenceMap)"},
	 { (char *)"ScopedCopyableRadiometric_sigmaZeroSFIncidenceMap_get", _wrap_ScopedCopyableRadiometric_sigmaZeroSFIncidenceMap_get, METH_VARARGS, (char *)"ScopedCopyableRadiometric_sigmaZeroSFIncidenceMap_get(ScopedCopyableRadiometric self) -> AppliedType"},
	 { (char *)"ScopedCopyableRadiometric_gammaZeroSFPoly_set", _wrap_ScopedCopyableRadiometric_gammaZeroSFPoly_set, METH_VARARGS, (char *)"ScopedCopyableRadiometric_gammaZeroSFPoly_set(ScopedCopyableRadiometric self, Poly2D gammaZeroSFPoly)"},
	 { (char *)"ScopedCopyableRadiometric_gammaZeroSFPoly_get", _wrap_ScopedCopyableRadiometric_gammaZeroSFPoly_get, METH_VARARGS, (char *)"ScopedCopyableRadiometric_gammaZeroSFPoly_get(ScopedCopyableRadiometric self) -> Poly2D"},
	 { (char *)"ScopedCopyableRadiometric_gammaZeroSFIncidenceMap_set", _wrap_ScopedCopyableRadiometric_gammaZeroSFIncidenceMap_set, METH_VARARGS, (char *)"ScopedCopyableRadiometric_gammaZeroSFIncidenceMap_set(ScopedCopyableRadiometric self, AppliedType gammaZeroSFIncidenceMap)"},
	 { (char *)"ScopedCopyableRadiometric_gammaZeroSFIncidenceMap_get", _wrap_ScopedCopyableRadiometric_gammaZeroSFIncidenceMap_get, METH_VARARGS, (char *)"ScopedCopyableRadiometric_gammaZeroSFIncidenceMap_get(ScopedCopyableRadiometric self) -> AppliedType"},
	 { (char *)"ScopedCopyableRadiometric___eq__", _wrap_ScopedCopyableRadiometric___eq__, METH_VARARGS, (char *)"ScopedCopyableRadiometric___eq__(ScopedCopyableRadiometric self, Radiometric rhs) -> bool"},
	 { (char *)"ScopedCopyableRadiometric___ne__", _wrap_ScopedCopyableRadiometric___ne__, METH_VARARGS, (char *)"ScopedCopyableRadiometric___ne__(ScopedCopyableRadiometric self, Radiometric rhs) -> bool"},
	 { (char *)"ScopedCopyableRadiometric_swigregister", ScopedCopyableRadiometric_swigregister, METH_VARARGS, nullptr},
	 { (char *)"makeScopedCopyableRadiometric", _wrap_makeScopedCopyableRadiometric, METH_VARARGS, (char *)"makeScopedCopyableRadiometric() -> ScopedCopyableRadiometric"},
	 { (char *)"new_StdAutoErrorStatistics", _wrap_new_StdAutoErrorStatistics, METH_VARARGS, (char *)"new_StdAutoErrorStatistics() -> StdAutoErrorStatistics"},
	 { (char *)"delete_StdAutoErrorStatistics", _wrap_delete_StdAutoErrorStatistics, METH_VARARGS, (char *)"delete_StdAutoErrorStatistics(StdAutoErrorStatistics self)"},
	 { (char *)"StdAutoErrorStatistics_swigregister", StdAutoErrorStatistics_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_ScopedCopyableErrorStatistics", _wrap_new_ScopedCopyableErrorStatistics, METH_VARARGS, (char *)"\n"
		"ScopedCopyableErrorStatistics(ErrorStatistics ptr=None)\n"
		"ScopedCopyableErrorStatistics()\n"
		"new_ScopedCopyableErrorStatistics(ScopedCopyableErrorStatistics rhs) -> ScopedCopyableErrorStatistics\n"
		""},
	 { (char *)"ScopedCopyableErrorStatistics___nonzero__", _wrap_ScopedCopyableErrorStatistics___nonzero__, METH_VARARGS, (char *)"ScopedCopyableErrorStatistics___nonzero__(ScopedCopyableErrorStatistics self) -> bool"},
	 { (char *)"ScopedCopyableErrorStatistics_get", _wrap_ScopedCopyableErrorStatistics_get, METH_VARARGS, (char *)"ScopedCopyableErrorStatistics_get(ScopedCopyableErrorStatistics self) -> ErrorStatistics"},
	 { (char *)"ScopedCopyableErrorStatistics___ref__", _wrap_ScopedCopyableErrorStatistics___ref__, METH_VARARGS, (char *)"ScopedCopyableErrorStatistics___ref__(ScopedCopyableErrorStatistics self) -> ErrorStatistics"},
	 { (char *)"ScopedCopyableErrorStatistics___deref__", _wrap_ScopedCopyableErrorStatistics___deref__, METH_VARARGS, (char *)"ScopedCopyableErrorStatistics___deref__(ScopedCopyableErrorStatistics self) -> ErrorStatistics"},
	 { (char *)"ScopedCopyableErrorStatistics_reset", _wrap_ScopedCopyableErrorStatistics_reset, METH_VARARGS, (char *)"\n"
		"reset(ErrorStatistics ptr=None)\n"
		"ScopedCopyableErrorStatistics_reset(ScopedCopyableErrorStatistics self)\n"
		""},
	 { (char *)"delete_ScopedCopyableErrorStatistics", _wrap_delete_ScopedCopyableErrorStatistics, METH_VARARGS, (char *)"delete_ScopedCopyableErrorStatistics(ScopedCopyableErrorStatistics self)"},
	 { (char *)"ScopedCopyableErrorStatistics_compositeSCP_set", _wrap_ScopedCopyableErrorStatistics_compositeSCP_set, METH_VARARGS, (char *)"ScopedCopyableErrorStatistics_compositeSCP_set(ScopedCopyableErrorStatistics self, ScopedCopyableCompositeSCP compositeSCP)"},
	 { (char *)"ScopedCopyableErrorStatistics_compositeSCP_get", _wrap_ScopedCopyableErrorStatistics_compositeSCP_get, METH_VARARGS, (char *)"ScopedCopyableErrorStatistics_compositeSCP_get(ScopedCopyableErrorStatistics self) -> ScopedCopyableCompositeSCP"},
	 { (char *)"ScopedCopyableErrorStatistics_components_set", _wrap_ScopedCopyableErrorStatistics_components_set, METH_VARARGS, (char *)"ScopedCopyableErrorStatistics_components_set(ScopedCopyableErrorStatistics self, ScopedCopyableComponents components)"},
	 { (char *)"ScopedCopyableErrorStatistics_components_get", _wrap_ScopedCopyableErrorStatistics_components_get, METH_VARARGS, (char *)"ScopedCopyableErrorStatistics_components_get(ScopedCopyableErrorStatistics self) -> ScopedCopyableComponents"},
	 { (char *)"ScopedCopyableErrorStatistics_additionalParameters_set", _wrap_ScopedCopyableErrorStatistics_additionalParameters_set, METH_VARARGS, (char *)"ScopedCopyableErrorStatistics_additionalParameters_set(ScopedCopyableErrorStatistics self, ParameterCollection additionalParameters)"},
	 { (char *)"ScopedCopyableErrorStatistics_additionalParameters_get", _wrap_ScopedCopyableErrorStatistics_additionalParameters_get, METH_VARARGS, (char *)"ScopedCopyableErrorStatistics_additionalParameters_get(ScopedCopyableErrorStatistics self) -> ParameterCollection"},
	 { (char *)"ScopedCopyableErrorStatistics___eq__", _wrap_ScopedCopyableErrorStatistics___eq__, METH_VARARGS, (char *)"ScopedCopyableErrorStatistics___eq__(ScopedCopyableErrorStatistics self, ErrorStatistics rhs) -> bool"},
	 { (char *)"ScopedCopyableErrorStatistics___ne__", _wrap_ScopedCopyableErrorStatistics___ne__, METH_VARARGS, (char *)"ScopedCopyableErrorStatistics___ne__(ScopedCopyableErrorStatistics self, ErrorStatistics rhs) -> bool"},
	 { (char *)"ScopedCopyableErrorStatistics_swigregister", ScopedCopyableErrorStatistics_swigregister, METH_VARARGS, nullptr},
	 { (char *)"makeScopedCopyableErrorStatistics", _wrap_makeScopedCopyableErrorStatistics, METH_VARARGS, (char *)"makeScopedCopyableErrorStatistics() -> ScopedCopyableErrorStatistics"},
	 { (char *)"new_StdAutoComponents", _wrap_new_StdAutoComponents, METH_VARARGS, (char *)"new_StdAutoComponents() -> StdAutoComponents"},
	 { (char *)"delete_StdAutoComponents", _wrap_delete_StdAutoComponents, METH_VARARGS, (char *)"delete_StdAutoComponents(StdAutoComponents self)"},
	 { (char *)"StdAutoComponents_swigregister", StdAutoComponents_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_ScopedCopyableComponents", _wrap_new_ScopedCopyableComponents, METH_VARARGS, (char *)"\n"
		"ScopedCopyableComponents(Components ptr=None)\n"
		"ScopedCopyableComponents()\n"
		"new_ScopedCopyableComponents(ScopedCopyableComponents rhs) -> ScopedCopyableComponents\n"
		""},
	 { (char *)"ScopedCopyableComponents___nonzero__", _wrap_ScopedCopyableComponents___nonzero__, METH_VARARGS, (char *)"ScopedCopyableComponents___nonzero__(ScopedCopyableComponents self) -> bool"},
	 { (char *)"ScopedCopyableComponents_get", _wrap_ScopedCopyableComponents_get, METH_VARARGS, (char *)"ScopedCopyableComponents_get(ScopedCopyableComponents self) -> Components"},
	 { (char *)"ScopedCopyableComponents___ref__", _wrap_ScopedCopyableComponents___ref__, METH_VARARGS, (char *)"ScopedCopyableComponents___ref__(ScopedCopyableComponents self) -> Components"},
	 { (char *)"ScopedCopyableComponents___deref__", _wrap_ScopedCopyableComponents___deref__, METH_VARARGS, (char *)"ScopedCopyableComponents___deref__(ScopedCopyableComponents self) -> Components"},
	 { (char *)"ScopedCopyableComponents_reset", _wrap_ScopedCopyableComponents_reset, METH_VARARGS, (char *)"\n"
		"reset(Components ptr=None)\n"
		"ScopedCopyableComponents_reset(ScopedCopyableComponents self)\n"
		""},
	 { (char *)"delete_ScopedCopyableComponents", _wrap_delete_ScopedCopyableComponents, METH_VARARGS, (char *)"delete_ScopedCopyableComponents(ScopedCopyableComponents self)"},
	 { (char *)"ScopedCopyableComponents_posVelError_set", _wrap_ScopedCopyableComponents_posVelError_set, METH_VARARGS, (char *)"ScopedCopyableComponents_posVelError_set(ScopedCopyableComponents self, ScopedCopyablePosVelError posVelError)"},
	 { (char *)"ScopedCopyableComponents_posVelError_get", _wrap_ScopedCopyableComponents_posVelError_get, METH_VARARGS, (char *)"ScopedCopyableComponents_posVelError_get(ScopedCopyableComponents self) -> ScopedCopyablePosVelError"},
	 { (char *)"ScopedCopyableComponents_radarSensor_set", _wrap_ScopedCopyableComponents_radarSensor_set, METH_VARARGS, (char *)"ScopedCopyableComponents_radarSensor_set(ScopedCopyableComponents self, ScopedCopyableRadarSensor radarSensor)"},
	 { (char *)"ScopedCopyableComponents_radarSensor_get", _wrap_ScopedCopyableComponents_radarSensor_get, METH_VARARGS, (char *)"ScopedCopyableComponents_radarSensor_get(ScopedCopyableComponents self) -> ScopedCopyableRadarSensor"},
	 { (char *)"ScopedCopyableComponents_tropoError_set", _wrap_ScopedCopyableComponents_tropoError_set, METH_VARARGS, (char *)"ScopedCopyableComponents_tropoError_set(ScopedCopyableComponents self, ScopedCopyableTropoError tropoError)"},
	 { (char *)"ScopedCopyableComponents_tropoError_get", _wrap_ScopedCopyableComponents_tropoError_get, METH_VARARGS, (char *)"ScopedCopyableComponents_tropoError_get(ScopedCopyableComponents self) -> ScopedCopyableTropoError"},
	 { (char *)"ScopedCopyableComponents_ionoError_set", _wrap_ScopedCopyableComponents_ionoError_set, METH_VARARGS, (char *)"ScopedCopyableComponents_ionoError_set(ScopedCopyableComponents self, ScopedCopyableIonoError ionoError)"},
	 { (char *)"ScopedCopyableComponents_ionoError_get", _wrap_ScopedCopyableComponents_ionoError_get, METH_VARARGS, (char *)"ScopedCopyableComponents_ionoError_get(ScopedCopyableComponents self) -> ScopedCopyableIonoError"},
	 { (char *)"ScopedCopyableComponents___eq__", _wrap_ScopedCopyableComponents___eq__, METH_VARARGS, (char *)"ScopedCopyableComponents___eq__(ScopedCopyableComponents self, Components rhs) -> bool"},
	 { (char *)"ScopedCopyableComponents___ne__", _wrap_ScopedCopyableComponents___ne__, METH_VARARGS, (char *)"ScopedCopyableComponents___ne__(ScopedCopyableComponents self, Components rhs) -> bool"},
	 { (char *)"ScopedCopyableComponents_swigregister", ScopedCopyableComponents_swigregister, METH_VARARGS, nullptr},
	 { (char *)"makeScopedCopyableComponents", _wrap_makeScopedCopyableComponents, METH_VARARGS, (char *)"makeScopedCopyableComponents() -> ScopedCopyableComponents"},
	 { (char *)"new_StdAutoCorrCoefs", _wrap_new_StdAutoCorrCoefs, METH_VARARGS, (char *)"new_StdAutoCorrCoefs() -> StdAutoCorrCoefs"},
	 { (char *)"delete_StdAutoCorrCoefs", _wrap_delete_StdAutoCorrCoefs, METH_VARARGS, (char *)"delete_StdAutoCorrCoefs(StdAutoCorrCoefs self)"},
	 { (char *)"StdAutoCorrCoefs_swigregister", StdAutoCorrCoefs_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_ScopedCopyableCorrCoefs", _wrap_new_ScopedCopyableCorrCoefs, METH_VARARGS, (char *)"\n"
		"ScopedCopyableCorrCoefs(CorrCoefs ptr=None)\n"
		"ScopedCopyableCorrCoefs()\n"
		"new_ScopedCopyableCorrCoefs(ScopedCopyableCorrCoefs rhs) -> ScopedCopyableCorrCoefs\n"
		""},
	 { (char *)"ScopedCopyableCorrCoefs___nonzero__", _wrap_ScopedCopyableCorrCoefs___nonzero__, METH_VARARGS, (char *)"ScopedCopyableCorrCoefs___nonzero__(ScopedCopyableCorrCoefs self) -> bool"},
	 { (char *)"ScopedCopyableCorrCoefs_get", _wrap_ScopedCopyableCorrCoefs_get, METH_VARARGS, (char *)"ScopedCopyableCorrCoefs_get(ScopedCopyableCorrCoefs self) -> CorrCoefs"},
	 { (char *)"ScopedCopyableCorrCoefs___ref__", _wrap_ScopedCopyableCorrCoefs___ref__, METH_VARARGS, (char *)"ScopedCopyableCorrCoefs___ref__(ScopedCopyableCorrCoefs self) -> CorrCoefs"},
	 { (char *)"ScopedCopyableCorrCoefs___deref__", _wrap_ScopedCopyableCorrCoefs___deref__, METH_VARARGS, (char *)"ScopedCopyableCorrCoefs___deref__(ScopedCopyableCorrCoefs self) -> CorrCoefs"},
	 { (char *)"ScopedCopyableCorrCoefs_reset", _wrap_ScopedCopyableCorrCoefs_reset, METH_VARARGS, (char *)"\n"
		"reset(CorrCoefs ptr=None)\n"
		"ScopedCopyableCorrCoefs_reset(ScopedCopyableCorrCoefs self)\n"
		""},
	 { (char *)"delete_ScopedCopyableCorrCoefs", _wrap_delete_ScopedCopyableCorrCoefs, METH_VARARGS, (char *)"delete_ScopedCopyableCorrCoefs(ScopedCopyableCorrCoefs self)"},
	 { (char *)"ScopedCopyableCorrCoefs_p1p2_set", _wrap_ScopedCopyableCorrCoefs_p1p2_set, METH_VARARGS, (char *)"ScopedCopyableCorrCoefs_p1p2_set(ScopedCopyableCorrCoefs self, double p1p2)"},
	 { (char *)"ScopedCopyableCorrCoefs_p1p2_get", _wrap_ScopedCopyableCorrCoefs_p1p2_get, METH_VARARGS, (char *)"ScopedCopyableCorrCoefs_p1p2_get(ScopedCopyableCorrCoefs self) -> double"},
	 { (char *)"ScopedCopyableCorrCoefs_p1p3_set", _wrap_ScopedCopyableCorrCoefs_p1p3_set, METH_VARARGS, (char *)"ScopedCopyableCorrCoefs_p1p3_set(ScopedCopyableCorrCoefs self, double p1p3)"},
	 { (char *)"ScopedCopyableCorrCoefs_p1p3_get", _wrap_ScopedCopyableCorrCoefs_p1p3_get, METH_VARARGS, (char *)"ScopedCopyableCorrCoefs_p1p3_get(ScopedCopyableCorrCoefs self) -> double"},
	 { (char *)"ScopedCopyableCorrCoefs_p1v1_set", _wrap_ScopedCopyableCorrCoefs_p1v1_set, METH_VARARGS, (char *)"ScopedCopyableCorrCoefs_p1v1_set(ScopedCopyableCorrCoefs self, double p1v1)"},
	 { (char *)"ScopedCopyableCorrCoefs_p1v1_get", _wrap_ScopedCopyableCorrCoefs_p1v1_get, METH_VARARGS, (char *)"ScopedCopyableCorrCoefs_p1v1_get(ScopedCopyableCorrCoefs self) -> double"},
	 { (char *)"ScopedCopyableCorrCoefs_p1v2_set", _wrap_ScopedCopyableCorrCoefs_p1v2_set, METH_VARARGS, (char *)"ScopedCopyableCorrCoefs_p1v2_set(ScopedCopyableCorrCoefs self, double p1v2)"},
	 { (char *)"ScopedCopyableCorrCoefs_p1v2_get", _wrap_ScopedCopyableCorrCoefs_p1v2_get, METH_VARARGS, (char *)"ScopedCopyableCorrCoefs_p1v2_get(ScopedCopyableCorrCoefs self) -> double"},
	 { (char *)"ScopedCopyableCorrCoefs_p1v3_set", _wrap_ScopedCopyableCorrCoefs_p1v3_set, METH_VARARGS, (char *)"ScopedCopyableCorrCoefs_p1v3_set(ScopedCopyableCorrCoefs self, double p1v3)"},
	 { (char *)"ScopedCopyableCorrCoefs_p1v3_get", _wrap_ScopedCopyableCorrCoefs_p1v3_get, METH_VARARGS, (char *)"ScopedCopyableCorrCoefs_p1v3_get(ScopedCopyableCorrCoefs self) -> double"},
	 { (char *)"ScopedCopyableCorrCoefs_p2p3_set", _wrap_ScopedCopyableCorrCoefs_p2p3_set, METH_VARARGS, (char *)"ScopedCopyableCorrCoefs_p2p3_set(ScopedCopyableCorrCoefs self, double p2p3)"},
	 { (char *)"ScopedCopyableCorrCoefs_p2p3_get", _wrap_ScopedCopyableCorrCoefs_p2p3_get, METH_VARARGS, (char *)"ScopedCopyableCorrCoefs_p2p3_get(ScopedCopyableCorrCoefs self) -> double"},
	 { (char *)"ScopedCopyableCorrCoefs_p2v1_set", _wrap_ScopedCopyableCorrCoefs_p2v1_set, METH_VARARGS, (char *)"ScopedCopyableCorrCoefs_p2v1_set(ScopedCopyableCorrCoefs self, double p2v1)"},
	 { (char *)"ScopedCopyableCorrCoefs_p2v1_get", _wrap_ScopedCopyableCorrCoefs_p2v1_get, METH_VARARGS, (char *)"ScopedCopyableCorrCoefs_p2v1_get(ScopedCopyableCorrCoefs self) -> double"},
	 { (char *)"ScopedCopyableCorrCoefs_p2v2_set", _wrap_ScopedCopyableCorrCoefs_p2v2_set, METH_VARARGS, (char *)"ScopedCopyableCorrCoefs_p2v2_set(ScopedCopyableCorrCoefs self, double p2v2)"},
	 { (char *)"ScopedCopyableCorrCoefs_p2v2_get", _wrap_ScopedCopyableCorrCoefs_p2v2_get, METH_VARARGS, (char *)"ScopedCopyableCorrCoefs_p2v2_get(ScopedCopyableCorrCoefs self) -> double"},
	 { (char *)"ScopedCopyableCorrCoefs_p2v3_set", _wrap_ScopedCopyableCorrCoefs_p2v3_set, METH_VARARGS, (char *)"ScopedCopyableCorrCoefs_p2v3_set(ScopedCopyableCorrCoefs self, double p2v3)"},
	 { (char *)"ScopedCopyableCorrCoefs_p2v3_get", _wrap_ScopedCopyableCorrCoefs_p2v3_get, METH_VARARGS, (char *)"ScopedCopyableCorrCoefs_p2v3_get(ScopedCopyableCorrCoefs self) -> double"},
	 { (char *)"ScopedCopyableCorrCoefs_p3v1_set", _wrap_ScopedCopyableCorrCoefs_p3v1_set, METH_VARARGS, (char *)"ScopedCopyableCorrCoefs_p3v1_set(ScopedCopyableCorrCoefs self, double p3v1)"},
	 { (char *)"ScopedCopyableCorrCoefs_p3v1_get", _wrap_ScopedCopyableCorrCoefs_p3v1_get, METH_VARARGS, (char *)"ScopedCopyableCorrCoefs_p3v1_get(ScopedCopyableCorrCoefs self) -> double"},
	 { (char *)"ScopedCopyableCorrCoefs_p3v2_set", _wrap_ScopedCopyableCorrCoefs_p3v2_set, METH_VARARGS, (char *)"ScopedCopyableCorrCoefs_p3v2_set(ScopedCopyableCorrCoefs self, double p3v2)"},
	 { (char *)"ScopedCopyableCorrCoefs_p3v2_get", _wrap_ScopedCopyableCorrCoefs_p3v2_get, METH_VARARGS, (char *)"ScopedCopyableCorrCoefs_p3v2_get(ScopedCopyableCorrCoefs self) -> double"},
	 { (char *)"ScopedCopyableCorrCoefs_p3v3_set", _wrap_ScopedCopyableCorrCoefs_p3v3_set, METH_VARARGS, (char *)"ScopedCopyableCorrCoefs_p3v3_set(ScopedCopyableCorrCoefs self, double p3v3)"},
	 { (char *)"ScopedCopyableCorrCoefs_p3v3_get", _wrap_ScopedCopyableCorrCoefs_p3v3_get, METH_VARARGS, (char *)"ScopedCopyableCorrCoefs_p3v3_get(ScopedCopyableCorrCoefs self) -> double"},
	 { (char *)"ScopedCopyableCorrCoefs_v1v2_set", _wrap_ScopedCopyableCorrCoefs_v1v2_set, METH_VARARGS, (char *)"ScopedCopyableCorrCoefs_v1v2_set(ScopedCopyableCorrCoefs self, double v1v2)"},
	 { (char *)"ScopedCopyableCorrCoefs_v1v2_get", _wrap_ScopedCopyableCorrCoefs_v1v2_get, METH_VARARGS, (char *)"ScopedCopyableCorrCoefs_v1v2_get(ScopedCopyableCorrCoefs self) -> double"},
	 { (char *)"ScopedCopyableCorrCoefs_v1v3_set", _wrap_ScopedCopyableCorrCoefs_v1v3_set, METH_VARARGS, (char *)"ScopedCopyableCorrCoefs_v1v3_set(ScopedCopyableCorrCoefs self, double v1v3)"},
	 { (char *)"ScopedCopyableCorrCoefs_v1v3_get", _wrap_ScopedCopyableCorrCoefs_v1v3_get, METH_VARARGS, (char *)"ScopedCopyableCorrCoefs_v1v3_get(ScopedCopyableCorrCoefs self) -> double"},
	 { (char *)"ScopedCopyableCorrCoefs_v2v3_set", _wrap_ScopedCopyableCorrCoefs_v2v3_set, METH_VARARGS, (char *)"ScopedCopyableCorrCoefs_v2v3_set(ScopedCopyableCorrCoefs self, double v2v3)"},
	 { (char *)"ScopedCopyableCorrCoefs_v2v3_get", _wrap_ScopedCopyableCorrCoefs_v2v3_get, METH_VARARGS, (char *)"ScopedCopyableCorrCoefs_v2v3_get(ScopedCopyableCorrCoefs self) -> double"},
	 { (char *)"ScopedCopyableCorrCoefs___eq__", _wrap_ScopedCopyableCorrCoefs___eq__, METH_VARARGS, (char *)"ScopedCopyableCorrCoefs___eq__(ScopedCopyableCorrCoefs self, CorrCoefs rhs) -> bool"},
	 { (char *)"ScopedCopyableCorrCoefs___ne__", _wrap_ScopedCopyableCorrCoefs___ne__, METH_VARARGS, (char *)"ScopedCopyableCorrCoefs___ne__(ScopedCopyableCorrCoefs self, CorrCoefs rhs) -> bool"},
	 { (char *)"ScopedCopyableCorrCoefs_swigregister", ScopedCopyableCorrCoefs_swigregister, METH_VARARGS, nullptr},
	 { (char *)"makeScopedCopyableCorrCoefs", _wrap_makeScopedCopyableCorrCoefs, METH_VARARGS, (char *)"makeScopedCopyableCorrCoefs() -> ScopedCopyableCorrCoefs"},
	 { (char *)"new_StdAutoPosVelError", _wrap_new_StdAutoPosVelError, METH_VARARGS, (char *)"new_StdAutoPosVelError() -> StdAutoPosVelError"},
	 { (char *)"delete_StdAutoPosVelError", _wrap_delete_StdAutoPosVelError, METH_VARARGS, (char *)"delete_StdAutoPosVelError(StdAutoPosVelError self)"},
	 { (char *)"StdAutoPosVelError_swigregister", StdAutoPosVelError_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_ScopedCopyablePosVelError", _wrap_new_ScopedCopyablePosVelError, METH_VARARGS, (char *)"\n"
		"ScopedCopyablePosVelError(PosVelError ptr=None)\n"
		"ScopedCopyablePosVelError()\n"
		"new_ScopedCopyablePosVelError(ScopedCopyablePosVelError rhs) -> ScopedCopyablePosVelError\n"
		""},
	 { (char *)"ScopedCopyablePosVelError___nonzero__", _wrap_ScopedCopyablePosVelError___nonzero__, METH_VARARGS, (char *)"ScopedCopyablePosVelError___nonzero__(ScopedCopyablePosVelError self) -> bool"},
	 { (char *)"ScopedCopyablePosVelError_get", _wrap_ScopedCopyablePosVelError_get, METH_VARARGS, (char *)"ScopedCopyablePosVelError_get(ScopedCopyablePosVelError self) -> PosVelError"},
	 { (char *)"ScopedCopyablePosVelError___ref__", _wrap_ScopedCopyablePosVelError___ref__, METH_VARARGS, (char *)"ScopedCopyablePosVelError___ref__(ScopedCopyablePosVelError self) -> PosVelError"},
	 { (char *)"ScopedCopyablePosVelError___deref__", _wrap_ScopedCopyablePosVelError___deref__, METH_VARARGS, (char *)"ScopedCopyablePosVelError___deref__(ScopedCopyablePosVelError self) -> PosVelError"},
	 { (char *)"ScopedCopyablePosVelError_reset", _wrap_ScopedCopyablePosVelError_reset, METH_VARARGS, (char *)"\n"
		"reset(PosVelError ptr=None)\n"
		"ScopedCopyablePosVelError_reset(ScopedCopyablePosVelError self)\n"
		""},
	 { (char *)"delete_ScopedCopyablePosVelError", _wrap_delete_ScopedCopyablePosVelError, METH_VARARGS, (char *)"delete_ScopedCopyablePosVelError(ScopedCopyablePosVelError self)"},
	 { (char *)"ScopedCopyablePosVelError_frame_set", _wrap_ScopedCopyablePosVelError_frame_set, METH_VARARGS, (char *)"ScopedCopyablePosVelError_frame_set(ScopedCopyablePosVelError self, FrameType frame)"},
	 { (char *)"ScopedCopyablePosVelError_frame_get", _wrap_ScopedCopyablePosVelError_frame_get, METH_VARARGS, (char *)"ScopedCopyablePosVelError_frame_get(ScopedCopyablePosVelError self) -> FrameType"},
	 { (char *)"ScopedCopyablePosVelError_p1_set", _wrap_ScopedCopyablePosVelError_p1_set, METH_VARARGS, (char *)"ScopedCopyablePosVelError_p1_set(ScopedCopyablePosVelError self, double p1)"},
	 { (char *)"ScopedCopyablePosVelError_p1_get", _wrap_ScopedCopyablePosVelError_p1_get, METH_VARARGS, (char *)"ScopedCopyablePosVelError_p1_get(ScopedCopyablePosVelError self) -> double"},
	 { (char *)"ScopedCopyablePosVelError_p2_set", _wrap_ScopedCopyablePosVelError_p2_set, METH_VARARGS, (char *)"ScopedCopyablePosVelError_p2_set(ScopedCopyablePosVelError self, double p2)"},
	 { (char *)"ScopedCopyablePosVelError_p2_get", _wrap_ScopedCopyablePosVelError_p2_get, METH_VARARGS, (char *)"ScopedCopyablePosVelError_p2_get(ScopedCopyablePosVelError self) -> double"},
	 { (char *)"ScopedCopyablePosVelError_p3_set", _wrap_ScopedCopyablePosVelError_p3_set, METH_VARARGS, (char *)"ScopedCopyablePosVelError_p3_set(ScopedCopyablePosVelError self, double p3)"},
	 { (char *)"ScopedCopyablePosVelError_p3_get", _wrap_ScopedCopyablePosVelError_p3_get, METH_VARARGS, (char *)"ScopedCopyablePosVelError_p3_get(ScopedCopyablePosVelError self) -> double"},
	 { (char *)"ScopedCopyablePosVelError_v1_set", _wrap_ScopedCopyablePosVelError_v1_set, METH_VARARGS, (char *)"ScopedCopyablePosVelError_v1_set(ScopedCopyablePosVelError self, double v1)"},
	 { (char *)"ScopedCopyablePosVelError_v1_get", _wrap_ScopedCopyablePosVelError_v1_get, METH_VARARGS, (char *)"ScopedCopyablePosVelError_v1_get(ScopedCopyablePosVelError self) -> double"},
	 { (char *)"ScopedCopyablePosVelError_v2_set", _wrap_ScopedCopyablePosVelError_v2_set, METH_VARARGS, (char *)"ScopedCopyablePosVelError_v2_set(ScopedCopyablePosVelError self, double v2)"},
	 { (char *)"ScopedCopyablePosVelError_v2_get", _wrap_ScopedCopyablePosVelError_v2_get, METH_VARARGS, (char *)"ScopedCopyablePosVelError_v2_get(ScopedCopyablePosVelError self) -> double"},
	 { (char *)"ScopedCopyablePosVelError_v3_set", _wrap_ScopedCopyablePosVelError_v3_set, METH_VARARGS, (char *)"ScopedCopyablePosVelError_v3_set(ScopedCopyablePosVelError self, double v3)"},
	 { (char *)"ScopedCopyablePosVelError_v3_get", _wrap_ScopedCopyablePosVelError_v3_get, METH_VARARGS, (char *)"ScopedCopyablePosVelError_v3_get(ScopedCopyablePosVelError self) -> double"},
	 { (char *)"ScopedCopyablePosVelError_corrCoefs_set", _wrap_ScopedCopyablePosVelError_corrCoefs_set, METH_VARARGS, (char *)"ScopedCopyablePosVelError_corrCoefs_set(ScopedCopyablePosVelError self, ScopedCopyableCorrCoefs corrCoefs)"},
	 { (char *)"ScopedCopyablePosVelError_corrCoefs_get", _wrap_ScopedCopyablePosVelError_corrCoefs_get, METH_VARARGS, (char *)"ScopedCopyablePosVelError_corrCoefs_get(ScopedCopyablePosVelError self) -> ScopedCopyableCorrCoefs"},
	 { (char *)"ScopedCopyablePosVelError_positionDecorr_set", _wrap_ScopedCopyablePosVelError_positionDecorr_set, METH_VARARGS, (char *)"ScopedCopyablePosVelError_positionDecorr_set(ScopedCopyablePosVelError self, DecorrType positionDecorr)"},
	 { (char *)"ScopedCopyablePosVelError_positionDecorr_get", _wrap_ScopedCopyablePosVelError_positionDecorr_get, METH_VARARGS, (char *)"ScopedCopyablePosVelError_positionDecorr_get(ScopedCopyablePosVelError self) -> DecorrType"},
	 { (char *)"ScopedCopyablePosVelError___eq__", _wrap_ScopedCopyablePosVelError___eq__, METH_VARARGS, (char *)"ScopedCopyablePosVelError___eq__(ScopedCopyablePosVelError self, PosVelError rhs) -> bool"},
	 { (char *)"ScopedCopyablePosVelError___ne__", _wrap_ScopedCopyablePosVelError___ne__, METH_VARARGS, (char *)"ScopedCopyablePosVelError___ne__(ScopedCopyablePosVelError self, PosVelError rhs) -> bool"},
	 { (char *)"ScopedCopyablePosVelError_swigregister", ScopedCopyablePosVelError_swigregister, METH_VARARGS, nullptr},
	 { (char *)"makeScopedCopyablePosVelError", _wrap_makeScopedCopyablePosVelError, METH_VARARGS, (char *)"makeScopedCopyablePosVelError() -> ScopedCopyablePosVelError"},
	 { (char *)"new_StdAutoGeoInfo", _wrap_new_StdAutoGeoInfo, METH_VARARGS, (char *)"new_StdAutoGeoInfo() -> StdAutoGeoInfo"},
	 { (char *)"delete_StdAutoGeoInfo", _wrap_delete_StdAutoGeoInfo, METH_VARARGS, (char *)"delete_StdAutoGeoInfo(StdAutoGeoInfo self)"},
	 { (char *)"StdAutoGeoInfo_swigregister", StdAutoGeoInfo_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_ScopedCopyableGeoInfo", _wrap_new_ScopedCopyableGeoInfo, METH_VARARGS, (char *)"\n"
		"ScopedCopyableGeoInfo(GeoInfo ptr=None)\n"
		"ScopedCopyableGeoInfo()\n"
		"new_ScopedCopyableGeoInfo(ScopedCopyableGeoInfo rhs) -> ScopedCopyableGeoInfo\n"
		""},
	 { (char *)"ScopedCopyableGeoInfo___nonzero__", _wrap_ScopedCopyableGeoInfo___nonzero__, METH_VARARGS, (char *)"ScopedCopyableGeoInfo___nonzero__(ScopedCopyableGeoInfo self) -> bool"},
	 { (char *)"ScopedCopyableGeoInfo_get", _wrap_ScopedCopyableGeoInfo_get, METH_VARARGS, (char *)"ScopedCopyableGeoInfo_get(ScopedCopyableGeoInfo self) -> GeoInfo"},
	 { (char *)"ScopedCopyableGeoInfo___ref__", _wrap_ScopedCopyableGeoInfo___ref__, METH_VARARGS, (char *)"ScopedCopyableGeoInfo___ref__(ScopedCopyableGeoInfo self) -> GeoInfo"},
	 { (char *)"ScopedCopyableGeoInfo___deref__", _wrap_ScopedCopyableGeoInfo___deref__, METH_VARARGS, (char *)"ScopedCopyableGeoInfo___deref__(ScopedCopyableGeoInfo self) -> GeoInfo"},
	 { (char *)"ScopedCopyableGeoInfo_reset", _wrap_ScopedCopyableGeoInfo_reset, METH_VARARGS, (char *)"\n"
		"reset(GeoInfo ptr=None)\n"
		"ScopedCopyableGeoInfo_reset(ScopedCopyableGeoInfo self)\n"
		""},
	 { (char *)"delete_ScopedCopyableGeoInfo", _wrap_delete_ScopedCopyableGeoInfo, METH_VARARGS, (char *)"delete_ScopedCopyableGeoInfo(ScopedCopyableGeoInfo self)"},
	 { (char *)"ScopedCopyableGeoInfo_name_set", _wrap_ScopedCopyableGeoInfo_name_set, METH_VARARGS, (char *)"ScopedCopyableGeoInfo_name_set(ScopedCopyableGeoInfo self, std::string const & name)"},
	 { (char *)"ScopedCopyableGeoInfo_name_get", _wrap_ScopedCopyableGeoInfo_name_get, METH_VARARGS, (char *)"ScopedCopyableGeoInfo_name_get(ScopedCopyableGeoInfo self) -> std::string const &"},
	 { (char *)"ScopedCopyableGeoInfo_geoInfos_set", _wrap_ScopedCopyableGeoInfo_geoInfos_set, METH_VARARGS, (char *)"ScopedCopyableGeoInfo_geoInfos_set(ScopedCopyableGeoInfo self, VectorScopedCopyableGeoInfo geoInfos)"},
	 { (char *)"ScopedCopyableGeoInfo_geoInfos_get", _wrap_ScopedCopyableGeoInfo_geoInfos_get, METH_VARARGS, (char *)"ScopedCopyableGeoInfo_geoInfos_get(ScopedCopyableGeoInfo self) -> VectorScopedCopyableGeoInfo"},
	 { (char *)"ScopedCopyableGeoInfo_desc_set", _wrap_ScopedCopyableGeoInfo_desc_set, METH_VARARGS, (char *)"ScopedCopyableGeoInfo_desc_set(ScopedCopyableGeoInfo self, ParameterCollection desc)"},
	 { (char *)"ScopedCopyableGeoInfo_desc_get", _wrap_ScopedCopyableGeoInfo_desc_get, METH_VARARGS, (char *)"ScopedCopyableGeoInfo_desc_get(ScopedCopyableGeoInfo self) -> ParameterCollection"},
	 { (char *)"ScopedCopyableGeoInfo_geometryLatLon_set", _wrap_ScopedCopyableGeoInfo_geometryLatLon_set, METH_VARARGS, (char *)"ScopedCopyableGeoInfo_geometryLatLon_set(ScopedCopyableGeoInfo self, std::vector< six::LatLon,std::allocator< six::LatLon > > * geometryLatLon)"},
	 { (char *)"ScopedCopyableGeoInfo_geometryLatLon_get", _wrap_ScopedCopyableGeoInfo_geometryLatLon_get, METH_VARARGS, (char *)"ScopedCopyableGeoInfo_geometryLatLon_get(ScopedCopyableGeoInfo self) -> std::vector< six::LatLon,std::allocator< six::LatLon > > *"},
	 { (char *)"ScopedCopyableGeoInfo___eq__", _wrap_ScopedCopyableGeoInfo___eq__, METH_VARARGS, (char *)"ScopedCopyableGeoInfo___eq__(ScopedCopyableGeoInfo self, GeoInfo rhs) -> bool"},
	 { (char *)"ScopedCopyableGeoInfo___ne__", _wrap_ScopedCopyableGeoInfo___ne__, METH_VARARGS, (char *)"ScopedCopyableGeoInfo___ne__(ScopedCopyableGeoInfo self, GeoInfo rhs) -> bool"},
	 { (char *)"ScopedCopyableGeoInfo_swigregister", ScopedCopyableGeoInfo_swigregister, METH_VARARGS, nullptr},
	 { (char *)"makeScopedCopyableGeoInfo", _wrap_makeScopedCopyableGeoInfo, METH_VARARGS, (char *)"makeScopedCopyableGeoInfo() -> ScopedCopyableGeoInfo"},
	 { (char *)"new_StdAutoRadarSensor", _wrap_new_StdAutoRadarSensor, METH_VARARGS, (char *)"new_StdAutoRadarSensor() -> StdAutoRadarSensor"},
	 { (char *)"delete_StdAutoRadarSensor", _wrap_delete_StdAutoRadarSensor, METH_VARARGS, (char *)"delete_StdAutoRadarSensor(StdAutoRadarSensor self)"},
	 { (char *)"StdAutoRadarSensor_swigregister", StdAutoRadarSensor_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_ScopedCopyableRadarSensor", _wrap_new_ScopedCopyableRadarSensor, METH_VARARGS, (char *)"\n"
		"ScopedCopyableRadarSensor(RadarSensor ptr=None)\n"
		"ScopedCopyableRadarSensor()\n"
		"new_ScopedCopyableRadarSensor(ScopedCopyableRadarSensor rhs) -> ScopedCopyableRadarSensor\n"
		""},
	 { (char *)"ScopedCopyableRadarSensor___nonzero__", _wrap_ScopedCopyableRadarSensor___nonzero__, METH_VARARGS, (char *)"ScopedCopyableRadarSensor___nonzero__(ScopedCopyableRadarSensor self) -> bool"},
	 { (char *)"ScopedCopyableRadarSensor_get", _wrap_ScopedCopyableRadarSensor_get, METH_VARARGS, (char *)"ScopedCopyableRadarSensor_get(ScopedCopyableRadarSensor self) -> RadarSensor"},
	 { (char *)"ScopedCopyableRadarSensor___ref__", _wrap_ScopedCopyableRadarSensor___ref__, METH_VARARGS, (char *)"ScopedCopyableRadarSensor___ref__(ScopedCopyableRadarSensor self) -> RadarSensor"},
	 { (char *)"ScopedCopyableRadarSensor___deref__", _wrap_ScopedCopyableRadarSensor___deref__, METH_VARARGS, (char *)"ScopedCopyableRadarSensor___deref__(ScopedCopyableRadarSensor self) -> RadarSensor"},
	 { (char *)"ScopedCopyableRadarSensor_reset", _wrap_ScopedCopyableRadarSensor_reset, METH_VARARGS, (char *)"\n"
		"reset(RadarSensor ptr=None)\n"
		"ScopedCopyableRadarSensor_reset(ScopedCopyableRadarSensor self)\n"
		""},
	 { (char *)"delete_ScopedCopyableRadarSensor", _wrap_delete_ScopedCopyableRadarSensor, METH_VARARGS, (char *)"delete_ScopedCopyableRadarSensor(ScopedCopyableRadarSensor self)"},
	 { (char *)"ScopedCopyableRadarSensor_rangeBias_set", _wrap_ScopedCopyableRadarSensor_rangeBias_set, METH_VARARGS, (char *)"ScopedCopyableRadarSensor_rangeBias_set(ScopedCopyableRadarSensor self, double rangeBias)"},
	 { (char *)"ScopedCopyableRadarSensor_rangeBias_get", _wrap_ScopedCopyableRadarSensor_rangeBias_get, METH_VARARGS, (char *)"ScopedCopyableRadarSensor_rangeBias_get(ScopedCopyableRadarSensor self) -> double"},
	 { (char *)"ScopedCopyableRadarSensor_clockFreqSF_set", _wrap_ScopedCopyableRadarSensor_clockFreqSF_set, METH_VARARGS, (char *)"ScopedCopyableRadarSensor_clockFreqSF_set(ScopedCopyableRadarSensor self, double clockFreqSF)"},
	 { (char *)"ScopedCopyableRadarSensor_clockFreqSF_get", _wrap_ScopedCopyableRadarSensor_clockFreqSF_get, METH_VARARGS, (char *)"ScopedCopyableRadarSensor_clockFreqSF_get(ScopedCopyableRadarSensor self) -> double"},
	 { (char *)"ScopedCopyableRadarSensor_transmitFreqSF_set", _wrap_ScopedCopyableRadarSensor_transmitFreqSF_set, METH_VARARGS, (char *)"ScopedCopyableRadarSensor_transmitFreqSF_set(ScopedCopyableRadarSensor self, double transmitFreqSF)"},
	 { (char *)"ScopedCopyableRadarSensor_transmitFreqSF_get", _wrap_ScopedCopyableRadarSensor_transmitFreqSF_get, METH_VARARGS, (char *)"ScopedCopyableRadarSensor_transmitFreqSF_get(ScopedCopyableRadarSensor self) -> double"},
	 { (char *)"ScopedCopyableRadarSensor_rangeBiasDecorr_set", _wrap_ScopedCopyableRadarSensor_rangeBiasDecorr_set, METH_VARARGS, (char *)"ScopedCopyableRadarSensor_rangeBiasDecorr_set(ScopedCopyableRadarSensor self, DecorrType rangeBiasDecorr)"},
	 { (char *)"ScopedCopyableRadarSensor_rangeBiasDecorr_get", _wrap_ScopedCopyableRadarSensor_rangeBiasDecorr_get, METH_VARARGS, (char *)"ScopedCopyableRadarSensor_rangeBiasDecorr_get(ScopedCopyableRadarSensor self) -> DecorrType"},
	 { (char *)"ScopedCopyableRadarSensor___eq__", _wrap_ScopedCopyableRadarSensor___eq__, METH_VARARGS, (char *)"ScopedCopyableRadarSensor___eq__(ScopedCopyableRadarSensor self, RadarSensor rhs) -> bool"},
	 { (char *)"ScopedCopyableRadarSensor___ne__", _wrap_ScopedCopyableRadarSensor___ne__, METH_VARARGS, (char *)"ScopedCopyableRadarSensor___ne__(ScopedCopyableRadarSensor self, RadarSensor rhs) -> bool"},
	 { (char *)"ScopedCopyableRadarSensor_swigregister", ScopedCopyableRadarSensor_swigregister, METH_VARARGS, nullptr},
	 { (char *)"makeScopedCopyableRadarSensor", _wrap_makeScopedCopyableRadarSensor, METH_VARARGS, (char *)"makeScopedCopyableRadarSensor() -> ScopedCopyableRadarSensor"},
	 { (char *)"new_StdAutoTropoError", _wrap_new_StdAutoTropoError, METH_VARARGS, (char *)"new_StdAutoTropoError() -> StdAutoTropoError"},
	 { (char *)"delete_StdAutoTropoError", _wrap_delete_StdAutoTropoError, METH_VARARGS, (char *)"delete_StdAutoTropoError(StdAutoTropoError self)"},
	 { (char *)"StdAutoTropoError_swigregister", StdAutoTropoError_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_ScopedCopyableTropoError", _wrap_new_ScopedCopyableTropoError, METH_VARARGS, (char *)"\n"
		"ScopedCopyableTropoError(TropoError ptr=None)\n"
		"ScopedCopyableTropoError()\n"
		"new_ScopedCopyableTropoError(ScopedCopyableTropoError rhs) -> ScopedCopyableTropoError\n"
		""},
	 { (char *)"ScopedCopyableTropoError___nonzero__", _wrap_ScopedCopyableTropoError___nonzero__, METH_VARARGS, (char *)"ScopedCopyableTropoError___nonzero__(ScopedCopyableTropoError self) -> bool"},
	 { (char *)"ScopedCopyableTropoError_get", _wrap_ScopedCopyableTropoError_get, METH_VARARGS, (char *)"ScopedCopyableTropoError_get(ScopedCopyableTropoError self) -> TropoError"},
	 { (char *)"ScopedCopyableTropoError___ref__", _wrap_ScopedCopyableTropoError___ref__, METH_VARARGS, (char *)"ScopedCopyableTropoError___ref__(ScopedCopyableTropoError self) -> TropoError"},
	 { (char *)"ScopedCopyableTropoError___deref__", _wrap_ScopedCopyableTropoError___deref__, METH_VARARGS, (char *)"ScopedCopyableTropoError___deref__(ScopedCopyableTropoError self) -> TropoError"},
	 { (char *)"ScopedCopyableTropoError_reset", _wrap_ScopedCopyableTropoError_reset, METH_VARARGS, (char *)"\n"
		"reset(TropoError ptr=None)\n"
		"ScopedCopyableTropoError_reset(ScopedCopyableTropoError self)\n"
		""},
	 { (char *)"delete_ScopedCopyableTropoError", _wrap_delete_ScopedCopyableTropoError, METH_VARARGS, (char *)"delete_ScopedCopyableTropoError(ScopedCopyableTropoError self)"},
	 { (char *)"ScopedCopyableTropoError_tropoRangeVertical_set", _wrap_ScopedCopyableTropoError_tropoRangeVertical_set, METH_VARARGS, (char *)"ScopedCopyableTropoError_tropoRangeVertical_set(ScopedCopyableTropoError self, double tropoRangeVertical)"},
	 { (char *)"ScopedCopyableTropoError_tropoRangeVertical_get", _wrap_ScopedCopyableTropoError_tropoRangeVertical_get, METH_VARARGS, (char *)"ScopedCopyableTropoError_tropoRangeVertical_get(ScopedCopyableTropoError self) -> double"},
	 { (char *)"ScopedCopyableTropoError_tropoRangeSlant_set", _wrap_ScopedCopyableTropoError_tropoRangeSlant_set, METH_VARARGS, (char *)"ScopedCopyableTropoError_tropoRangeSlant_set(ScopedCopyableTropoError self, double tropoRangeSlant)"},
	 { (char *)"ScopedCopyableTropoError_tropoRangeSlant_get", _wrap_ScopedCopyableTropoError_tropoRangeSlant_get, METH_VARARGS, (char *)"ScopedCopyableTropoError_tropoRangeSlant_get(ScopedCopyableTropoError self) -> double"},
	 { (char *)"ScopedCopyableTropoError_tropoRangeDecorr_set", _wrap_ScopedCopyableTropoError_tropoRangeDecorr_set, METH_VARARGS, (char *)"ScopedCopyableTropoError_tropoRangeDecorr_set(ScopedCopyableTropoError self, DecorrType tropoRangeDecorr)"},
	 { (char *)"ScopedCopyableTropoError_tropoRangeDecorr_get", _wrap_ScopedCopyableTropoError_tropoRangeDecorr_get, METH_VARARGS, (char *)"ScopedCopyableTropoError_tropoRangeDecorr_get(ScopedCopyableTropoError self) -> DecorrType"},
	 { (char *)"ScopedCopyableTropoError___eq__", _wrap_ScopedCopyableTropoError___eq__, METH_VARARGS, (char *)"ScopedCopyableTropoError___eq__(ScopedCopyableTropoError self, TropoError rhs) -> bool"},
	 { (char *)"ScopedCopyableTropoError___ne__", _wrap_ScopedCopyableTropoError___ne__, METH_VARARGS, (char *)"ScopedCopyableTropoError___ne__(ScopedCopyableTropoError self, TropoError rhs) -> bool"},
	 { (char *)"ScopedCopyableTropoError_swigregister", ScopedCopyableTropoError_swigregister, METH_VARARGS, nullptr},
	 { (char *)"makeScopedCopyableTropoError", _wrap_makeScopedCopyableTropoError, METH_VARARGS, (char *)"makeScopedCopyableTropoError() -> ScopedCopyableTropoError"},
	 { (char *)"new_StdAutoIonoError", _wrap_new_StdAutoIonoError, METH_VARARGS, (char *)"new_StdAutoIonoError() -> StdAutoIonoError"},
	 { (char *)"delete_StdAutoIonoError", _wrap_delete_StdAutoIonoError, METH_VARARGS, (char *)"delete_StdAutoIonoError(StdAutoIonoError self)"},
	 { (char *)"StdAutoIonoError_swigregister", StdAutoIonoError_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_ScopedCopyableIonoError", _wrap_new_ScopedCopyableIonoError, METH_VARARGS, (char *)"\n"
		"ScopedCopyableIonoError(IonoError ptr=None)\n"
		"ScopedCopyableIonoError()\n"
		"new_ScopedCopyableIonoError(ScopedCopyableIonoError rhs) -> ScopedCopyableIonoError\n"
		""},
	 { (char *)"ScopedCopyableIonoError___nonzero__", _wrap_ScopedCopyableIonoError___nonzero__, METH_VARARGS, (char *)"ScopedCopyableIonoError___nonzero__(ScopedCopyableIonoError self) -> bool"},
	 { (char *)"ScopedCopyableIonoError_get", _wrap_ScopedCopyableIonoError_get, METH_VARARGS, (char *)"ScopedCopyableIonoError_get(ScopedCopyableIonoError self) -> IonoError"},
	 { (char *)"ScopedCopyableIonoError___ref__", _wrap_ScopedCopyableIonoError___ref__, METH_VARARGS, (char *)"ScopedCopyableIonoError___ref__(ScopedCopyableIonoError self) -> IonoError"},
	 { (char *)"ScopedCopyableIonoError___deref__", _wrap_ScopedCopyableIonoError___deref__, METH_VARARGS, (char *)"ScopedCopyableIonoError___deref__(ScopedCopyableIonoError self) -> IonoError"},
	 { (char *)"ScopedCopyableIonoError_reset", _wrap_ScopedCopyableIonoError_reset, METH_VARARGS, (char *)"\n"
		"reset(IonoError ptr=None)\n"
		"ScopedCopyableIonoError_reset(ScopedCopyableIonoError self)\n"
		""},
	 { (char *)"delete_ScopedCopyableIonoError", _wrap_delete_ScopedCopyableIonoError, METH_VARARGS, (char *)"delete_ScopedCopyableIonoError(ScopedCopyableIonoError self)"},
	 { (char *)"ScopedCopyableIonoError_ionoRangeVertical_set", _wrap_ScopedCopyableIonoError_ionoRangeVertical_set, METH_VARARGS, (char *)"ScopedCopyableIonoError_ionoRangeVertical_set(ScopedCopyableIonoError self, double ionoRangeVertical)"},
	 { (char *)"ScopedCopyableIonoError_ionoRangeVertical_get", _wrap_ScopedCopyableIonoError_ionoRangeVertical_get, METH_VARARGS, (char *)"ScopedCopyableIonoError_ionoRangeVertical_get(ScopedCopyableIonoError self) -> double"},
	 { (char *)"ScopedCopyableIonoError_ionoRangeRateVertical_set", _wrap_ScopedCopyableIonoError_ionoRangeRateVertical_set, METH_VARARGS, (char *)"ScopedCopyableIonoError_ionoRangeRateVertical_set(ScopedCopyableIonoError self, double ionoRangeRateVertical)"},
	 { (char *)"ScopedCopyableIonoError_ionoRangeRateVertical_get", _wrap_ScopedCopyableIonoError_ionoRangeRateVertical_get, METH_VARARGS, (char *)"ScopedCopyableIonoError_ionoRangeRateVertical_get(ScopedCopyableIonoError self) -> double"},
	 { (char *)"ScopedCopyableIonoError_ionoRgRgRateCC_set", _wrap_ScopedCopyableIonoError_ionoRgRgRateCC_set, METH_VARARGS, (char *)"ScopedCopyableIonoError_ionoRgRgRateCC_set(ScopedCopyableIonoError self, double ionoRgRgRateCC)"},
	 { (char *)"ScopedCopyableIonoError_ionoRgRgRateCC_get", _wrap_ScopedCopyableIonoError_ionoRgRgRateCC_get, METH_VARARGS, (char *)"ScopedCopyableIonoError_ionoRgRgRateCC_get(ScopedCopyableIonoError self) -> double"},
	 { (char *)"ScopedCopyableIonoError_ionoRangeVertDecorr_set", _wrap_ScopedCopyableIonoError_ionoRangeVertDecorr_set, METH_VARARGS, (char *)"ScopedCopyableIonoError_ionoRangeVertDecorr_set(ScopedCopyableIonoError self, DecorrType ionoRangeVertDecorr)"},
	 { (char *)"ScopedCopyableIonoError_ionoRangeVertDecorr_get", _wrap_ScopedCopyableIonoError_ionoRangeVertDecorr_get, METH_VARARGS, (char *)"ScopedCopyableIonoError_ionoRangeVertDecorr_get(ScopedCopyableIonoError self) -> DecorrType"},
	 { (char *)"ScopedCopyableIonoError___eq__", _wrap_ScopedCopyableIonoError___eq__, METH_VARARGS, (char *)"ScopedCopyableIonoError___eq__(ScopedCopyableIonoError self, IonoError rhs) -> bool"},
	 { (char *)"ScopedCopyableIonoError___ne__", _wrap_ScopedCopyableIonoError___ne__, METH_VARARGS, (char *)"ScopedCopyableIonoError___ne__(ScopedCopyableIonoError self, IonoError rhs) -> bool"},
	 { (char *)"ScopedCopyableIonoError_swigregister", ScopedCopyableIonoError_swigregister, METH_VARARGS, nullptr},
	 { (char *)"makeScopedCopyableIonoError", _wrap_makeScopedCopyableIonoError, METH_VARARGS, (char *)"makeScopedCopyableIonoError() -> ScopedCopyableIonoError"},
	 { (char *)"new_StdAutoCompositeSCP", _wrap_new_StdAutoCompositeSCP, METH_VARARGS, (char *)"new_StdAutoCompositeSCP() -> StdAutoCompositeSCP"},
	 { (char *)"delete_StdAutoCompositeSCP", _wrap_delete_StdAutoCompositeSCP, METH_VARARGS, (char *)"delete_StdAutoCompositeSCP(StdAutoCompositeSCP self)"},
	 { (char *)"StdAutoCompositeSCP_swigregister", StdAutoCompositeSCP_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_ScopedCopyableCompositeSCP", _wrap_new_ScopedCopyableCompositeSCP, METH_VARARGS, (char *)"\n"
		"ScopedCopyableCompositeSCP(CompositeSCP ptr=None)\n"
		"ScopedCopyableCompositeSCP()\n"
		"new_ScopedCopyableCompositeSCP(ScopedCopyableCompositeSCP rhs) -> ScopedCopyableCompositeSCP\n"
		""},
	 { (char *)"ScopedCopyableCompositeSCP___nonzero__", _wrap_ScopedCopyableCompositeSCP___nonzero__, METH_VARARGS, (char *)"ScopedCopyableCompositeSCP___nonzero__(ScopedCopyableCompositeSCP self) -> bool"},
	 { (char *)"ScopedCopyableCompositeSCP_get", _wrap_ScopedCopyableCompositeSCP_get, METH_VARARGS, (char *)"ScopedCopyableCompositeSCP_get(ScopedCopyableCompositeSCP self) -> CompositeSCP"},
	 { (char *)"ScopedCopyableCompositeSCP___ref__", _wrap_ScopedCopyableCompositeSCP___ref__, METH_VARARGS, (char *)"ScopedCopyableCompositeSCP___ref__(ScopedCopyableCompositeSCP self) -> CompositeSCP"},
	 { (char *)"ScopedCopyableCompositeSCP___deref__", _wrap_ScopedCopyableCompositeSCP___deref__, METH_VARARGS, (char *)"ScopedCopyableCompositeSCP___deref__(ScopedCopyableCompositeSCP self) -> CompositeSCP"},
	 { (char *)"ScopedCopyableCompositeSCP_reset", _wrap_ScopedCopyableCompositeSCP_reset, METH_VARARGS, (char *)"\n"
		"reset(CompositeSCP ptr=None)\n"
		"ScopedCopyableCompositeSCP_reset(ScopedCopyableCompositeSCP self)\n"
		""},
	 { (char *)"delete_ScopedCopyableCompositeSCP", _wrap_delete_ScopedCopyableCompositeSCP, METH_VARARGS, (char *)"delete_ScopedCopyableCompositeSCP(ScopedCopyableCompositeSCP self)"},
	 { (char *)"ScopedCopyableCompositeSCP_scpType_set", _wrap_ScopedCopyableCompositeSCP_scpType_set, METH_VARARGS, (char *)"ScopedCopyableCompositeSCP_scpType_set(ScopedCopyableCompositeSCP self, six::CompositeSCP::SCPType scpType)"},
	 { (char *)"ScopedCopyableCompositeSCP_scpType_get", _wrap_ScopedCopyableCompositeSCP_scpType_get, METH_VARARGS, (char *)"ScopedCopyableCompositeSCP_scpType_get(ScopedCopyableCompositeSCP self) -> six::CompositeSCP::SCPType"},
	 { (char *)"ScopedCopyableCompositeSCP_xErr_set", _wrap_ScopedCopyableCompositeSCP_xErr_set, METH_VARARGS, (char *)"ScopedCopyableCompositeSCP_xErr_set(ScopedCopyableCompositeSCP self, double xErr)"},
	 { (char *)"ScopedCopyableCompositeSCP_xErr_get", _wrap_ScopedCopyableCompositeSCP_xErr_get, METH_VARARGS, (char *)"ScopedCopyableCompositeSCP_xErr_get(ScopedCopyableCompositeSCP self) -> double"},
	 { (char *)"ScopedCopyableCompositeSCP_yErr_set", _wrap_ScopedCopyableCompositeSCP_yErr_set, METH_VARARGS, (char *)"ScopedCopyableCompositeSCP_yErr_set(ScopedCopyableCompositeSCP self, double yErr)"},
	 { (char *)"ScopedCopyableCompositeSCP_yErr_get", _wrap_ScopedCopyableCompositeSCP_yErr_get, METH_VARARGS, (char *)"ScopedCopyableCompositeSCP_yErr_get(ScopedCopyableCompositeSCP self) -> double"},
	 { (char *)"ScopedCopyableCompositeSCP_xyErr_set", _wrap_ScopedCopyableCompositeSCP_xyErr_set, METH_VARARGS, (char *)"ScopedCopyableCompositeSCP_xyErr_set(ScopedCopyableCompositeSCP self, double xyErr)"},
	 { (char *)"ScopedCopyableCompositeSCP_xyErr_get", _wrap_ScopedCopyableCompositeSCP_xyErr_get, METH_VARARGS, (char *)"ScopedCopyableCompositeSCP_xyErr_get(ScopedCopyableCompositeSCP self) -> double"},
	 { (char *)"ScopedCopyableCompositeSCP___eq__", _wrap_ScopedCopyableCompositeSCP___eq__, METH_VARARGS, (char *)"ScopedCopyableCompositeSCP___eq__(ScopedCopyableCompositeSCP self, CompositeSCP rhs) -> bool"},
	 { (char *)"ScopedCopyableCompositeSCP___ne__", _wrap_ScopedCopyableCompositeSCP___ne__, METH_VARARGS, (char *)"ScopedCopyableCompositeSCP___ne__(ScopedCopyableCompositeSCP self, CompositeSCP rhs) -> bool"},
	 { (char *)"ScopedCopyableCompositeSCP_swigregister", ScopedCopyableCompositeSCP_swigregister, METH_VARARGS, nullptr},
	 { (char *)"makeScopedCopyableCompositeSCP", _wrap_makeScopedCopyableCompositeSCP, METH_VARARGS, (char *)"makeScopedCopyableCompositeSCP() -> ScopedCopyableCompositeSCP"},
	 { (char *)"new_StdAutoMatchInformation", _wrap_new_StdAutoMatchInformation, METH_VARARGS, (char *)"new_StdAutoMatchInformation() -> StdAutoMatchInformation"},
	 { (char *)"delete_StdAutoMatchInformation", _wrap_delete_StdAutoMatchInformation, METH_VARARGS, (char *)"delete_StdAutoMatchInformation(StdAutoMatchInformation self)"},
	 { (char *)"StdAutoMatchInformation_swigregister", StdAutoMatchInformation_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_ScopedCopyableMatchInformation", _wrap_new_ScopedCopyableMatchInformation, METH_VARARGS, (char *)"\n"
		"ScopedCopyableMatchInformation(MatchInformation ptr=None)\n"
		"ScopedCopyableMatchInformation()\n"
		"new_ScopedCopyableMatchInformation(ScopedCopyableMatchInformation rhs) -> ScopedCopyableMatchInformation\n"
		""},
	 { (char *)"ScopedCopyableMatchInformation___nonzero__", _wrap_ScopedCopyableMatchInformation___nonzero__, METH_VARARGS, (char *)"ScopedCopyableMatchInformation___nonzero__(ScopedCopyableMatchInformation self) -> bool"},
	 { (char *)"ScopedCopyableMatchInformation_get", _wrap_ScopedCopyableMatchInformation_get, METH_VARARGS, (char *)"ScopedCopyableMatchInformation_get(ScopedCopyableMatchInformation self) -> MatchInformation"},
	 { (char *)"ScopedCopyableMatchInformation___ref__", _wrap_ScopedCopyableMatchInformation___ref__, METH_VARARGS, (char *)"ScopedCopyableMatchInformation___ref__(ScopedCopyableMatchInformation self) -> MatchInformation"},
	 { (char *)"ScopedCopyableMatchInformation___deref__", _wrap_ScopedCopyableMatchInformation___deref__, METH_VARARGS, (char *)"ScopedCopyableMatchInformation___deref__(ScopedCopyableMatchInformation self) -> MatchInformation"},
	 { (char *)"ScopedCopyableMatchInformation_reset", _wrap_ScopedCopyableMatchInformation_reset, METH_VARARGS, (char *)"\n"
		"reset(MatchInformation ptr=None)\n"
		"ScopedCopyableMatchInformation_reset(ScopedCopyableMatchInformation self)\n"
		""},
	 { (char *)"delete_ScopedCopyableMatchInformation", _wrap_delete_ScopedCopyableMatchInformation, METH_VARARGS, (char *)"delete_ScopedCopyableMatchInformation(ScopedCopyableMatchInformation self)"},
	 { (char *)"ScopedCopyableMatchInformation_types_set", _wrap_ScopedCopyableMatchInformation_types_set, METH_VARARGS, (char *)"ScopedCopyableMatchInformation_types_set(ScopedCopyableMatchInformation self, VectorMatchType types)"},
	 { (char *)"ScopedCopyableMatchInformation_types_get", _wrap_ScopedCopyableMatchInformation_types_get, METH_VARARGS, (char *)"ScopedCopyableMatchInformation_types_get(ScopedCopyableMatchInformation self) -> VectorMatchType"},
	 { (char *)"ScopedCopyableMatchInformation___eq__", _wrap_ScopedCopyableMatchInformation___eq__, METH_VARARGS, (char *)"ScopedCopyableMatchInformation___eq__(ScopedCopyableMatchInformation self, MatchInformation rhs) -> bool"},
	 { (char *)"ScopedCopyableMatchInformation___ne__", _wrap_ScopedCopyableMatchInformation___ne__, METH_VARARGS, (char *)"ScopedCopyableMatchInformation___ne__(ScopedCopyableMatchInformation self, MatchInformation rhs) -> bool"},
	 { (char *)"ScopedCopyableMatchInformation_swigregister", ScopedCopyableMatchInformation_swigregister, METH_VARARGS, nullptr},
	 { (char *)"makeScopedCopyableMatchInformation", _wrap_makeScopedCopyableMatchInformation, METH_VARARGS, (char *)"makeScopedCopyableMatchInformation() -> ScopedCopyableMatchInformation"},
	 { (char *)"new_StdAutoMatchType", _wrap_new_StdAutoMatchType, METH_VARARGS, (char *)"new_StdAutoMatchType() -> StdAutoMatchType"},
	 { (char *)"delete_StdAutoMatchType", _wrap_delete_StdAutoMatchType, METH_VARARGS, (char *)"delete_StdAutoMatchType(StdAutoMatchType self)"},
	 { (char *)"StdAutoMatchType_swigregister", StdAutoMatchType_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_ScopedCopyableMatchType", _wrap_new_ScopedCopyableMatchType, METH_VARARGS, (char *)"\n"
		"ScopedCopyableMatchType(MatchType ptr=None)\n"
		"ScopedCopyableMatchType()\n"
		"new_ScopedCopyableMatchType(ScopedCopyableMatchType rhs) -> ScopedCopyableMatchType\n"
		""},
	 { (char *)"ScopedCopyableMatchType___nonzero__", _wrap_ScopedCopyableMatchType___nonzero__, METH_VARARGS, (char *)"ScopedCopyableMatchType___nonzero__(ScopedCopyableMatchType self) -> bool"},
	 { (char *)"ScopedCopyableMatchType_get", _wrap_ScopedCopyableMatchType_get, METH_VARARGS, (char *)"ScopedCopyableMatchType_get(ScopedCopyableMatchType self) -> MatchType"},
	 { (char *)"ScopedCopyableMatchType___ref__", _wrap_ScopedCopyableMatchType___ref__, METH_VARARGS, (char *)"ScopedCopyableMatchType___ref__(ScopedCopyableMatchType self) -> MatchType"},
	 { (char *)"ScopedCopyableMatchType___deref__", _wrap_ScopedCopyableMatchType___deref__, METH_VARARGS, (char *)"ScopedCopyableMatchType___deref__(ScopedCopyableMatchType self) -> MatchType"},
	 { (char *)"ScopedCopyableMatchType_reset", _wrap_ScopedCopyableMatchType_reset, METH_VARARGS, (char *)"\n"
		"reset(MatchType ptr=None)\n"
		"ScopedCopyableMatchType_reset(ScopedCopyableMatchType self)\n"
		""},
	 { (char *)"delete_ScopedCopyableMatchType", _wrap_delete_ScopedCopyableMatchType, METH_VARARGS, (char *)"delete_ScopedCopyableMatchType(ScopedCopyableMatchType self)"},
	 { (char *)"ScopedCopyableMatchType_collectorName_set", _wrap_ScopedCopyableMatchType_collectorName_set, METH_VARARGS, (char *)"ScopedCopyableMatchType_collectorName_set(ScopedCopyableMatchType self, std::string const & collectorName)"},
	 { (char *)"ScopedCopyableMatchType_collectorName_get", _wrap_ScopedCopyableMatchType_collectorName_get, METH_VARARGS, (char *)"ScopedCopyableMatchType_collectorName_get(ScopedCopyableMatchType self) -> std::string const &"},
	 { (char *)"ScopedCopyableMatchType_illuminatorName_set", _wrap_ScopedCopyableMatchType_illuminatorName_set, METH_VARARGS, (char *)"ScopedCopyableMatchType_illuminatorName_set(ScopedCopyableMatchType self, std::string const & illuminatorName)"},
	 { (char *)"ScopedCopyableMatchType_illuminatorName_get", _wrap_ScopedCopyableMatchType_illuminatorName_get, METH_VARARGS, (char *)"ScopedCopyableMatchType_illuminatorName_get(ScopedCopyableMatchType self) -> std::string const &"},
	 { (char *)"ScopedCopyableMatchType_matchType_set", _wrap_ScopedCopyableMatchType_matchType_set, METH_VARARGS, (char *)"ScopedCopyableMatchType_matchType_set(ScopedCopyableMatchType self, VectorString matchType)"},
	 { (char *)"ScopedCopyableMatchType_matchType_get", _wrap_ScopedCopyableMatchType_matchType_get, METH_VARARGS, (char *)"ScopedCopyableMatchType_matchType_get(ScopedCopyableMatchType self) -> VectorString"},
	 { (char *)"ScopedCopyableMatchType_typeID_set", _wrap_ScopedCopyableMatchType_typeID_set, METH_VARARGS, (char *)"ScopedCopyableMatchType_typeID_set(ScopedCopyableMatchType self, std::string const & typeID)"},
	 { (char *)"ScopedCopyableMatchType_typeID_get", _wrap_ScopedCopyableMatchType_typeID_get, METH_VARARGS, (char *)"ScopedCopyableMatchType_typeID_get(ScopedCopyableMatchType self) -> std::string const &"},
	 { (char *)"ScopedCopyableMatchType_currentIndex_set", _wrap_ScopedCopyableMatchType_currentIndex_set, METH_VARARGS, (char *)"ScopedCopyableMatchType_currentIndex_set(ScopedCopyableMatchType self, int currentIndex)"},
	 { (char *)"ScopedCopyableMatchType_currentIndex_get", _wrap_ScopedCopyableMatchType_currentIndex_get, METH_VARARGS, (char *)"ScopedCopyableMatchType_currentIndex_get(ScopedCopyableMatchType self) -> int"},
	 { (char *)"ScopedCopyableMatchType_matchCollects_set", _wrap_ScopedCopyableMatchType_matchCollects_set, METH_VARARGS, (char *)"ScopedCopyableMatchType_matchCollects_set(ScopedCopyableMatchType self, VectorMatchCollect matchCollects)"},
	 { (char *)"ScopedCopyableMatchType_matchCollects_get", _wrap_ScopedCopyableMatchType_matchCollects_get, METH_VARARGS, (char *)"ScopedCopyableMatchType_matchCollects_get(ScopedCopyableMatchType self) -> VectorMatchCollect"},
	 { (char *)"ScopedCopyableMatchType___eq__", _wrap_ScopedCopyableMatchType___eq__, METH_VARARGS, (char *)"ScopedCopyableMatchType___eq__(ScopedCopyableMatchType self, MatchType rhs) -> bool"},
	 { (char *)"ScopedCopyableMatchType___ne__", _wrap_ScopedCopyableMatchType___ne__, METH_VARARGS, (char *)"ScopedCopyableMatchType___ne__(ScopedCopyableMatchType self, MatchType rhs) -> bool"},
	 { (char *)"ScopedCopyableMatchType_swigregister", ScopedCopyableMatchType_swigregister, METH_VARARGS, nullptr},
	 { (char *)"makeScopedCopyableMatchType", _wrap_makeScopedCopyableMatchType, METH_VARARGS, (char *)"makeScopedCopyableMatchType() -> ScopedCopyableMatchType"},
	 { (char *)"new_StdAutoAmplitudeTable", _wrap_new_StdAutoAmplitudeTable, METH_VARARGS, (char *)"new_StdAutoAmplitudeTable() -> StdAutoAmplitudeTable"},
	 { (char *)"delete_StdAutoAmplitudeTable", _wrap_delete_StdAutoAmplitudeTable, METH_VARARGS, (char *)"delete_StdAutoAmplitudeTable(StdAutoAmplitudeTable self)"},
	 { (char *)"StdAutoAmplitudeTable_swigregister", StdAutoAmplitudeTable_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_ScopedCloneableAmplitudeTable", _wrap_new_ScopedCloneableAmplitudeTable, METH_VARARGS, (char *)"\n"
		"ScopedCloneableAmplitudeTable(AmplitudeTable ptr=None)\n"
		"ScopedCloneableAmplitudeTable()\n"
		"new_ScopedCloneableAmplitudeTable(ScopedCloneableAmplitudeTable rhs) -> ScopedCloneableAmplitudeTable\n"
		""},
	 { (char *)"ScopedCloneableAmplitudeTable_get", _wrap_ScopedCloneableAmplitudeTable_get, METH_VARARGS, (char *)"ScopedCloneableAmplitudeTable_get(ScopedCloneableAmplitudeTable self) -> AmplitudeTable"},
	 { (char *)"ScopedCloneableAmplitudeTable___ref__", _wrap_ScopedCloneableAmplitudeTable___ref__, METH_VARARGS, (char *)"ScopedCloneableAmplitudeTable___ref__(ScopedCloneableAmplitudeTable self) -> AmplitudeTable"},
	 { (char *)"ScopedCloneableAmplitudeTable___deref__", _wrap_ScopedCloneableAmplitudeTable___deref__, METH_VARARGS, (char *)"ScopedCloneableAmplitudeTable___deref__(ScopedCloneableAmplitudeTable self) -> AmplitudeTable"},
	 { (char *)"ScopedCloneableAmplitudeTable_reset", _wrap_ScopedCloneableAmplitudeTable_reset, METH_VARARGS, (char *)"\n"
		"reset(AmplitudeTable ptr=None)\n"
		"ScopedCloneableAmplitudeTable_reset(ScopedCloneableAmplitudeTable self)\n"
		""},
	 { (char *)"ScopedCloneableAmplitudeTable___getitem__", _wrap_ScopedCloneableAmplitudeTable___getitem__, METH_VARARGS, (char *)"ScopedCloneableAmplitudeTable___getitem__(ScopedCloneableAmplitudeTable self, size_t key) -> double"},
	 { (char *)"ScopedCloneableAmplitudeTable___setitem__", _wrap_ScopedCloneableAmplitudeTable___setitem__, METH_VARARGS, (char *)"ScopedCloneableAmplitudeTable___setitem__(ScopedCloneableAmplitudeTable self, size_t key, double value)"},
	 { (char *)"delete_ScopedCloneableAmplitudeTable", _wrap_delete_ScopedCloneableAmplitudeTable, METH_VARARGS, (char *)"delete_ScopedCloneableAmplitudeTable(ScopedCloneableAmplitudeTable self)"},
	 { (char *)"ScopedCloneableAmplitudeTable___eq__", _wrap_ScopedCloneableAmplitudeTable___eq__, METH_VARARGS, (char *)"ScopedCloneableAmplitudeTable___eq__(ScopedCloneableAmplitudeTable self, AmplitudeTable rhs) -> bool"},
	 { (char *)"ScopedCloneableAmplitudeTable___ne__", _wrap_ScopedCloneableAmplitudeTable___ne__, METH_VARARGS, (char *)"ScopedCloneableAmplitudeTable___ne__(ScopedCloneableAmplitudeTable self, AmplitudeTable rhs) -> bool"},
	 { (char *)"ScopedCloneableAmplitudeTable_clone", _wrap_ScopedCloneableAmplitudeTable_clone, METH_VARARGS, (char *)"ScopedCloneableAmplitudeTable_clone(ScopedCloneableAmplitudeTable self) -> AmplitudeTable"},
	 { (char *)"ScopedCloneableAmplitudeTable_table_set", _wrap_ScopedCloneableAmplitudeTable_table_set, METH_VARARGS, (char *)"ScopedCloneableAmplitudeTable_table_set(ScopedCloneableAmplitudeTable self, std::vector< unsigned char,std::allocator< unsigned char > > * table)"},
	 { (char *)"ScopedCloneableAmplitudeTable_table_get", _wrap_ScopedCloneableAmplitudeTable_table_get, METH_VARARGS, (char *)"ScopedCloneableAmplitudeTable_table_get(ScopedCloneableAmplitudeTable self) -> std::vector< unsigned char,std::allocator< unsigned char > > *"},
	 { (char *)"ScopedCloneableAmplitudeTable_numEntries_set", _wrap_ScopedCloneableAmplitudeTable_numEntries_set, METH_VARARGS, (char *)"ScopedCloneableAmplitudeTable_numEntries_set(ScopedCloneableAmplitudeTable self, size_t numEntries)"},
	 { (char *)"ScopedCloneableAmplitudeTable_numEntries_get", _wrap_ScopedCloneableAmplitudeTable_numEntries_get, METH_VARARGS, (char *)"ScopedCloneableAmplitudeTable_numEntries_get(ScopedCloneableAmplitudeTable self) -> size_t"},
	 { (char *)"ScopedCloneableAmplitudeTable_elementSize_set", _wrap_ScopedCloneableAmplitudeTable_elementSize_set, METH_VARARGS, (char *)"ScopedCloneableAmplitudeTable_elementSize_set(ScopedCloneableAmplitudeTable self, size_t elementSize)"},
	 { (char *)"ScopedCloneableAmplitudeTable_elementSize_get", _wrap_ScopedCloneableAmplitudeTable_elementSize_get, METH_VARARGS, (char *)"ScopedCloneableAmplitudeTable_elementSize_get(ScopedCloneableAmplitudeTable self) -> size_t"},
	 { (char *)"ScopedCloneableAmplitudeTable_getTable", _wrap_ScopedCloneableAmplitudeTable_getTable, METH_VARARGS, (char *)"\n"
		"getTable() -> unsigned char\n"
		"ScopedCloneableAmplitudeTable_getTable(ScopedCloneableAmplitudeTable self) -> unsigned char const *\n"
		""},
	 { (char *)"ScopedCloneableAmplitudeTable_swigregister", ScopedCloneableAmplitudeTable_swigregister, METH_VARARGS, nullptr},
	 { (char *)"makeScopedCloneableAmplitudeTable", _wrap_makeScopedCloneableAmplitudeTable, METH_VARARGS, (char *)"makeScopedCloneableAmplitudeTable() -> ScopedCloneableAmplitudeTable"},
	 { (char *)"new_StdAutoCollectionInformation", _wrap_new_StdAutoCollectionInformation, METH_VARARGS, (char *)"new_StdAutoCollectionInformation() -> StdAutoCollectionInformation"},
	 { (char *)"delete_StdAutoCollectionInformation", _wrap_delete_StdAutoCollectionInformation, METH_VARARGS, (char *)"delete_StdAutoCollectionInformation(StdAutoCollectionInformation self)"},
	 { (char *)"StdAutoCollectionInformation_swigregister", StdAutoCollectionInformation_swigregister, METH_VARARGS, nullptr},
	 { (char *)"new_ScopedCloneableCollectionInformation", _wrap_new_ScopedCloneableCollectionInformation, METH_VARARGS, (char *)"\n"
		"ScopedCloneableCollectionInformation(CollectionInformation ptr=None)\n"
		"ScopedCloneableCollectionInformation()\n"
		"new_ScopedCloneableCollectionInformation(ScopedCloneableCollectionInformation rhs) -> ScopedCloneableCollectionInformation\n"
		""},
	 { (char *)"ScopedCloneableCollectionInformation_get", _wrap_ScopedCloneableCollectionInformation_get, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation_get(ScopedCloneableCollectionInformation self) -> CollectionInformation"},
	 { (char *)"ScopedCloneableCollectionInformation___ref__", _wrap_ScopedCloneableCollectionInformation___ref__, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation___ref__(ScopedCloneableCollectionInformation self) -> CollectionInformation"},
	 { (char *)"ScopedCloneableCollectionInformation___deref__", _wrap_ScopedCloneableCollectionInformation___deref__, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation___deref__(ScopedCloneableCollectionInformation self) -> CollectionInformation"},
	 { (char *)"ScopedCloneableCollectionInformation_reset", _wrap_ScopedCloneableCollectionInformation_reset, METH_VARARGS, (char *)"\n"
		"reset(CollectionInformation ptr=None)\n"
		"ScopedCloneableCollectionInformation_reset(ScopedCloneableCollectionInformation self)\n"
		""},
	 { (char *)"delete_ScopedCloneableCollectionInformation", _wrap_delete_ScopedCloneableCollectionInformation, METH_VARARGS, (char *)"delete_ScopedCloneableCollectionInformation(ScopedCloneableCollectionInformation self)"},
	 { (char *)"ScopedCloneableCollectionInformation_collectorName_set", _wrap_ScopedCloneableCollectionInformation_collectorName_set, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation_collectorName_set(ScopedCloneableCollectionInformation self, std::string const & collectorName)"},
	 { (char *)"ScopedCloneableCollectionInformation_collectorName_get", _wrap_ScopedCloneableCollectionInformation_collectorName_get, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation_collectorName_get(ScopedCloneableCollectionInformation self) -> std::string const &"},
	 { (char *)"ScopedCloneableCollectionInformation_illuminatorName_set", _wrap_ScopedCloneableCollectionInformation_illuminatorName_set, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation_illuminatorName_set(ScopedCloneableCollectionInformation self, std::string const & illuminatorName)"},
	 { (char *)"ScopedCloneableCollectionInformation_illuminatorName_get", _wrap_ScopedCloneableCollectionInformation_illuminatorName_get, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation_illuminatorName_get(ScopedCloneableCollectionInformation self) -> std::string const &"},
	 { (char *)"ScopedCloneableCollectionInformation_coreName_set", _wrap_ScopedCloneableCollectionInformation_coreName_set, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation_coreName_set(ScopedCloneableCollectionInformation self, std::string const & coreName)"},
	 { (char *)"ScopedCloneableCollectionInformation_coreName_get", _wrap_ScopedCloneableCollectionInformation_coreName_get, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation_coreName_get(ScopedCloneableCollectionInformation self) -> std::string const &"},
	 { (char *)"ScopedCloneableCollectionInformation_collectType_set", _wrap_ScopedCloneableCollectionInformation_collectType_set, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation_collectType_set(ScopedCloneableCollectionInformation self, CollectType collectType)"},
	 { (char *)"ScopedCloneableCollectionInformation_collectType_get", _wrap_ScopedCloneableCollectionInformation_collectType_get, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation_collectType_get(ScopedCloneableCollectionInformation self) -> CollectType"},
	 { (char *)"ScopedCloneableCollectionInformation_radarMode_set", _wrap_ScopedCloneableCollectionInformation_radarMode_set, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation_radarMode_set(ScopedCloneableCollectionInformation self, RadarModeType radarMode)"},
	 { (char *)"ScopedCloneableCollectionInformation_radarMode_get", _wrap_ScopedCloneableCollectionInformation_radarMode_get, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation_radarMode_get(ScopedCloneableCollectionInformation self) -> RadarModeType"},
	 { (char *)"ScopedCloneableCollectionInformation_radarModeID_set", _wrap_ScopedCloneableCollectionInformation_radarModeID_set, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation_radarModeID_set(ScopedCloneableCollectionInformation self, std::string const & radarModeID)"},
	 { (char *)"ScopedCloneableCollectionInformation_radarModeID_get", _wrap_ScopedCloneableCollectionInformation_radarModeID_get, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation_radarModeID_get(ScopedCloneableCollectionInformation self) -> std::string const &"},
	 { (char *)"ScopedCloneableCollectionInformation_releaseInfo_set", _wrap_ScopedCloneableCollectionInformation_releaseInfo_set, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation_releaseInfo_set(ScopedCloneableCollectionInformation self, std::string const & releaseInfo)"},
	 { (char *)"ScopedCloneableCollectionInformation_releaseInfo_get", _wrap_ScopedCloneableCollectionInformation_releaseInfo_get, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation_releaseInfo_get(ScopedCloneableCollectionInformation self) -> std::string const &"},
	 { (char *)"ScopedCloneableCollectionInformation_countryCodes_set", _wrap_ScopedCloneableCollectionInformation_countryCodes_set, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation_countryCodes_set(ScopedCloneableCollectionInformation self, VectorString countryCodes)"},
	 { (char *)"ScopedCloneableCollectionInformation_countryCodes_get", _wrap_ScopedCloneableCollectionInformation_countryCodes_get, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation_countryCodes_get(ScopedCloneableCollectionInformation self) -> VectorString"},
	 { (char *)"ScopedCloneableCollectionInformation_parameters_set", _wrap_ScopedCloneableCollectionInformation_parameters_set, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation_parameters_set(ScopedCloneableCollectionInformation self, ParameterCollection parameters)"},
	 { (char *)"ScopedCloneableCollectionInformation_parameters_get", _wrap_ScopedCloneableCollectionInformation_parameters_get, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation_parameters_get(ScopedCloneableCollectionInformation self) -> ParameterCollection"},
	 { (char *)"ScopedCloneableCollectionInformation_clone", _wrap_ScopedCloneableCollectionInformation_clone, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation_clone(ScopedCloneableCollectionInformation self) -> CollectionInformation"},
	 { (char *)"ScopedCloneableCollectionInformation___eq__", _wrap_ScopedCloneableCollectionInformation___eq__, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation___eq__(ScopedCloneableCollectionInformation self, CollectionInformation other) -> bool"},
	 { (char *)"ScopedCloneableCollectionInformation___ne__", _wrap_ScopedCloneableCollectionInformation___ne__, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation___ne__(ScopedCloneableCollectionInformation self, CollectionInformation other) -> bool"},
	 { (char *)"ScopedCloneableCollectionInformation_getClassificationLevel", _wrap_ScopedCloneableCollectionInformation_getClassificationLevel, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation_getClassificationLevel(ScopedCloneableCollectionInformation self) -> std::string"},
	 { (char *)"ScopedCloneableCollectionInformation_setClassificationLevel", _wrap_ScopedCloneableCollectionInformation_setClassificationLevel, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation_setClassificationLevel(ScopedCloneableCollectionInformation self, std::string const & classification)"},
	 { (char *)"ScopedCloneableCollectionInformation_swigregister", ScopedCloneableCollectionInformation_swigregister, METH_VARARGS, nullptr},
	 { (char *)"makeScopedCloneableCollectionInformation", _wrap_makeScopedCloneableCollectionInformation, METH_VARARGS, (char *)"makeScopedCloneableCollectionInformation() -> ScopedCloneableCollectionInformation"},
	 { nullptr, nullptr, 0, nullptr }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_six__AmplitudeTableTo_p_six__LUT(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((six::LUT *)  ((six::AmplitudeTable *) x));
}
static void *_p_except__SerializationExceptionTo_p_except__Throwable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((except::Throwable *) (except::Exception *)(except::IOException *) ((except::SerializationException *) x));
}
static void *_p_except__InvalidArgumentExceptionTo_p_except__Throwable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((except::Throwable *) (except::Exception *) ((except::InvalidArgumentException *) x));
}
static void *_p_except__NotImplementedExceptionTo_p_except__Throwable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((except::Throwable *) (except::Exception *) ((except::NotImplementedException *) x));
}
static void *_p_except__KeyAlreadyExistsExceptionTo_p_except__Throwable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((except::Throwable *) (except::Exception *) ((except::KeyAlreadyExistsException *) x));
}
static void *_p_except__NoSuchReferenceExceptionTo_p_except__Throwable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((except::Throwable *) (except::Exception *) ((except::NoSuchReferenceException *) x));
}
static void *_p_except__NoSuchKeyExceptionTo_p_except__Throwable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((except::Throwable *) (except::Exception *) ((except::NoSuchKeyException *) x));
}
static void *_p_except__NullPointerReferenceExceptionTo_p_except__Throwable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((except::Throwable *) (except::Exception *) ((except::NullPointerReferenceException *) x));
}
static void *_p_except__OutOfMemoryExceptionTo_p_except__Throwable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((except::Throwable *) (except::Exception *) ((except::OutOfMemoryException *) x));
}
static void *_p_except__IndexOutOfRangeExceptionTo_p_except__Throwable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((except::Throwable *) (except::Exception *) ((except::IndexOutOfRangeException *) x));
}
static void *_p_except__InvalidFormatExceptionTo_p_except__Throwable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((except::Throwable *) (except::Exception *) ((except::InvalidFormatException *) x));
}
static void *_p_except__BadCastExceptionTo_p_except__Throwable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((except::Throwable *) (except::Exception *) ((except::BadCastException *) x));
}
static void *_p_except__FileNotFoundExceptionTo_p_except__Throwable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((except::Throwable *) (except::Exception *)(except::IOException *) ((except::FileNotFoundException *) x));
}
static void *_p_except__IOExceptionTo_p_except__Throwable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((except::Throwable *) (except::Exception *) ((except::IOException *) x));
}
static void *_p_except__ExceptionTo_p_except__Throwable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((except::Throwable *)  ((except::Exception *) x));
}
static void *_p_except__ParseExceptionTo_p_except__Throwable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((except::Throwable *) (except::Exception *)(except::IOException *) ((except::ParseException *) x));
}
static void *_p_six__DESValidationExceptionTo_p_except__Throwable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((except::Throwable *) (except::Exception *) ((six::DESValidationException *) x));
}
static void *_p_six__MissingRequiredExceptionTo_p_except__Throwable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((except::Throwable *) (except::Exception *) ((six::MissingRequiredException *) x));
}
static void *_p_six__UninitializedValueExceptionTo_p_except__Throwable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((except::Throwable *) (except::Exception *) ((six::UninitializedValueException *) x));
}
static void *_p_scene__LatLonAltTo_p_scene__LatLon(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((scene::LatLon *)  ((scene::LatLonAlt *) x));
}
static void *_p_except__ParseExceptionTo_p_except__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((except::Exception *) (except::IOException *) ((except::ParseException *) x));
}
static void *_p_except__SerializationExceptionTo_p_except__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((except::Exception *) (except::IOException *) ((except::SerializationException *) x));
}
static void *_p_except__InvalidArgumentExceptionTo_p_except__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((except::Exception *)  ((except::InvalidArgumentException *) x));
}
static void *_p_except__NotImplementedExceptionTo_p_except__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((except::Exception *)  ((except::NotImplementedException *) x));
}
static void *_p_except__KeyAlreadyExistsExceptionTo_p_except__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((except::Exception *)  ((except::KeyAlreadyExistsException *) x));
}
static void *_p_except__NoSuchReferenceExceptionTo_p_except__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((except::Exception *)  ((except::NoSuchReferenceException *) x));
}
static void *_p_except__NoSuchKeyExceptionTo_p_except__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((except::Exception *)  ((except::NoSuchKeyException *) x));
}
static void *_p_except__NullPointerReferenceExceptionTo_p_except__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((except::Exception *)  ((except::NullPointerReferenceException *) x));
}
static void *_p_except__OutOfMemoryExceptionTo_p_except__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((except::Exception *)  ((except::OutOfMemoryException *) x));
}
static void *_p_except__IndexOutOfRangeExceptionTo_p_except__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((except::Exception *)  ((except::IndexOutOfRangeException *) x));
}
static void *_p_except__InvalidFormatExceptionTo_p_except__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((except::Exception *)  ((except::InvalidFormatException *) x));
}
static void *_p_except__BadCastExceptionTo_p_except__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((except::Exception *)  ((except::BadCastException *) x));
}
static void *_p_except__FileNotFoundExceptionTo_p_except__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((except::Exception *) (except::IOException *) ((except::FileNotFoundException *) x));
}
static void *_p_except__IOExceptionTo_p_except__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((except::Exception *)  ((except::IOException *) x));
}
static void *_p_six__DESValidationExceptionTo_p_except__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((except::Exception *)  ((six::DESValidationException *) x));
}
static void *_p_six__MissingRequiredExceptionTo_p_except__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((except::Exception *)  ((six::MissingRequiredException *) x));
}
static void *_p_six__UninitializedValueExceptionTo_p_except__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((except::Exception *)  ((six::UninitializedValueException *) x));
}
static swig_type_info _swigt__p_ConstParameterCollectionIteratorT = {"_p_ConstParameterCollectionIteratorT", "ConstParameterCollectionIteratorT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Like_T = {"_p_Like_T", "Like_T *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Options = {"_p_Options", "Options *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ParameterCollectionIteratorT = {"_p_ParameterCollectionIteratorT", "ParameterCollectionIteratorT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ParameterIter = {"_p_ParameterIter", "ParameterIter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ParameterMap = {"_p_ParameterMap", "ParameterMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XMLControlRegistry = {"_p_XMLControlRegistry", "XMLControlRegistry *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *|sys::byte *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_except__Context = {"_p_except__Context", "except::Context *|six::ValidationContext *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_except__Exception = {"_p_except__Exception", "except::Exception *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_except__ParseException = {"_p_except__ParseException", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_except__SerializationException = {"_p_except__SerializationException", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_except__InvalidArgumentException = {"_p_except__InvalidArgumentException", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_except__NotImplementedException = {"_p_except__NotImplementedException", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_except__KeyAlreadyExistsException = {"_p_except__KeyAlreadyExistsException", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_except__NoSuchReferenceException = {"_p_except__NoSuchReferenceException", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_except__NoSuchKeyException = {"_p_except__NoSuchKeyException", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_except__OutOfMemoryException = {"_p_except__OutOfMemoryException", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_except__IndexOutOfRangeException = {"_p_except__IndexOutOfRangeException", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_except__InvalidFormatException = {"_p_except__InvalidFormatException", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_except__BadCastException = {"_p_except__BadCastException", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_except__FileNotFoundException = {"_p_except__FileNotFoundException", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_except__IOException = {"_p_except__IOException", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_except__NullPointerReferenceException = {"_p_except__NullPointerReferenceException", "except::NullPointerReferenceException *|except::NullPointerReference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_except__Throwable = {"_p_except__Throwable", "except::Throwable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|sys::Handle_T *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int16_t = {"_p_int16_t", "sys::Int16_T *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int32_t = {"_p_int32_t", "sys::Int32_T *|int32_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int64_t = {"_p_int64_t", "sys::Int64_T *|int64_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int8_t = {"_p_int8_t", "sys::Int8_T *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_io__InputStream = {"_p_io__InputStream", "::io::InputStream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_logging__Logger = {"_p_logging__Logger", "logging::Logger *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_math__linear__VectorNT_2_double_t = {"_p_math__linear__VectorNT_2_double_t", "scene::Vector2 *|six::Vector2 *|math::linear::VectorN< 2,double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_math__linear__VectorNT_3_double_t = {"_p_math__linear__VectorNT_3_double_t", "Vector3 *|scene::Vector3 *|six::Vector3 *|math::linear::VectorN< 3,double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_math__linear__VectorT_double_t = {"_p_math__linear__VectorT_double_t", "VectorDouble *|math::linear::Vector< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_math__poly__OneDT_double_t = {"_p_math__poly__OneDT_double_t", "six::Poly1D *|math::poly::OneD< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_math__poly__OneDT_math__linear__VectorNT_3_double_t_t = {"_p_math__poly__OneDT_math__linear__VectorNT_3_double_t_t", "six::PolyXYZ *|math::poly::OneD< math::linear::VectorN< 3,double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_math__poly__TwoDT_double_t = {"_p_math__poly__TwoDT_double_t", "six::Poly2D *|math::poly::TwoD< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCloneablePtrT_six__AmplitudeTable_t = {"_p_mem__ScopedCloneablePtrT_six__AmplitudeTable_t", "mem::ScopedCloneablePtr< six::AmplitudeTable > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCloneablePtrT_six__CollectionInformation_t = {"_p_mem__ScopedCloneablePtrT_six__CollectionInformation_t", "mem::ScopedCloneablePtr< six::CollectionInformation > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCopyablePtrT_six__Components_t = {"_p_mem__ScopedCopyablePtrT_six__Components_t", "mem::ScopedCopyablePtr< six::Components > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCopyablePtrT_six__CompositeSCP_t = {"_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t", "mem::ScopedCopyablePtr< six::CompositeSCP > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCopyablePtrT_six__CorrCoefs_t = {"_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t", "mem::ScopedCopyablePtr< six::CorrCoefs > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t = {"_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t", "mem::ScopedCopyablePtr< six::ErrorStatistics > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCopyablePtrT_six__GeoInfo_t = {"_p_mem__ScopedCopyablePtrT_six__GeoInfo_t", "mem::ScopedCopyablePtr< six::GeoInfo > *|std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCopyablePtrT_six__IonoError_t = {"_p_mem__ScopedCopyablePtrT_six__IonoError_t", "mem::ScopedCopyablePtr< six::IonoError > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCopyablePtrT_six__LUT_t = {"_p_mem__ScopedCopyablePtrT_six__LUT_t", "mem::ScopedCopyablePtr< six::LUT > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCopyablePtrT_six__MatchInformation_t = {"_p_mem__ScopedCopyablePtrT_six__MatchInformation_t", "mem::ScopedCopyablePtr< six::MatchInformation > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCopyablePtrT_six__MatchType_t = {"_p_mem__ScopedCopyablePtrT_six__MatchType_t", "std::vector< mem::ScopedCopyablePtr< six::MatchType > >::value_type *|mem::ScopedCopyablePtr< six::MatchType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCopyablePtrT_six__PosVelError_t = {"_p_mem__ScopedCopyablePtrT_six__PosVelError_t", "mem::ScopedCopyablePtr< six::PosVelError > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCopyablePtrT_six__RadarSensor_t = {"_p_mem__ScopedCopyablePtrT_six__RadarSensor_t", "mem::ScopedCopyablePtr< six::RadarSensor > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCopyablePtrT_six__Radiometric_t = {"_p_mem__ScopedCopyablePtrT_six__Radiometric_t", "mem::ScopedCopyablePtr< six::Radiometric > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCopyablePtrT_six__TropoError_t = {"_p_mem__ScopedCopyablePtrT_six__TropoError_t", "mem::ScopedCopyablePtr< six::TropoError > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mt__SingletonT_six__XMLControlRegistry_true_t = {"_p_mt__SingletonT_six__XMLControlRegistry_true_t", "six::XMLControlFactory *|mt::Singleton< six::XMLControlRegistry,true > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_nitf_DateTime = {"_p_nitf_DateTime", "nitf_DateTime *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_nitf__DateTime = {"_p_nitf__DateTime", "nitf::DateTime *|six::DateTime *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_nitf__FileSecurity = {"_p_nitf__FileSecurity", "nitf::FileSecurity *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_off_t = {"_p_off_t", "off_t *|sys::Off_T *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_PyObject = {"_p_p_PyObject", "PyObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pid_t = {"_p_pid_t", "sys::Pid_T *|pid_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_scene__AngleMagnitude = {"_p_scene__AngleMagnitude", "scene::AngleMagnitude *|six::AngleMagnitude *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_scene__Errors = {"_p_scene__Errors", "scene::Errors *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_scene__FrameType = {"_p_scene__FrameType", "scene::FrameType *|six::FrameType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_scene__LatLon = {"_p_scene__LatLon", "scene::LatLon *|six::LatLon *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_scene__LatLonAlt = {"_p_scene__LatLonAlt", "scene::LatLonAlt *|six::LatLonAlt *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_scene__PlaneProjectionModel = {"_p_scene__PlaneProjectionModel", "scene::PlaneProjectionModel *|scene::XRGYCRProjectionModel *|scene::XCTYATProjectionModel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__AmplitudeTable = {"_p_six__AmplitudeTable", "six::AmplitudeTable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__AppliedType = {"_p_six__AppliedType", "six::AppliedType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__AutofocusType = {"_p_six__AutofocusType", "six::AutofocusType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__BooleanType = {"_p_six__BooleanType", "six::BooleanType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__ByteSwapping = {"_p_six__ByteSwapping", "six::ByteSwapping *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__Classification = {"_p_six__Classification", "six::Classification *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__CollectType = {"_p_six__CollectType", "six::CollectType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__CollectionInformation = {"_p_six__CollectionInformation", "six::CollectionInformation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__ComplexImageGridType = {"_p_six__ComplexImageGridType", "six::ComplexImageGridType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__ComplexImagePlaneType = {"_p_six__ComplexImagePlaneType", "six::ComplexImagePlaneType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__Components = {"_p_six__Components", "six::Components *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__CompositeSCP = {"_p_six__CompositeSCP", "six::CompositeSCP *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__Constants = {"_p_six__Constants", "six::Constants *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__CornersT_scene__LatLonAlt_t = {"_p_six__CornersT_scene__LatLonAlt_t", "six::Corners< scene::LatLonAlt > *|six::LatLonAltCorners *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__CornersT_scene__LatLon_t = {"_p_six__CornersT_scene__LatLon_t", "six::LatLonCorners *|six::Corners< scene::LatLon > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__CorrCoefs = {"_p_six__CorrCoefs", "six::CorrCoefs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__DESValidationException = {"_p_six__DESValidationException", "six::DESValidationException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__Data = {"_p_six__Data", "six::Data *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__DataType = {"_p_six__DataType", "six::DataType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__DecimationMethod = {"_p_six__DecimationMethod", "six::DecimationMethod *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__DecorrType = {"_p_six__DecorrType", "six::DecorrType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__DemodType = {"_p_six__DemodType", "six::DemodType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__DisplayType = {"_p_six__DisplayType", "six::DisplayType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__DualPolarizationType = {"_p_six__DualPolarizationType", "six::DualPolarizationType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__EarthModelType = {"_p_six__EarthModelType", "six::EarthModelType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__ErrorStatistics = {"_p_six__ErrorStatistics", "six::ErrorStatistics *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__FFTSign = {"_p_six__FFTSign", "six::FFTSign *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__GeoDataBase = {"_p_six__GeoDataBase", "six::GeoDataBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__GeoInfo = {"_p_six__GeoInfo", "six::GeoInfo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__ImageBeamCompensationType = {"_p_six__ImageBeamCompensationType", "six::ImageBeamCompensationType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__ImageFormationType = {"_p_six__ImageFormationType", "six::ImageFormationType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__Init = {"_p_six__Init", "six::Init *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__IonoError = {"_p_six__IonoError", "six::IonoError *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__LUT = {"_p_six__LUT", "six::LUT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__MagnificationMethod = {"_p_six__MagnificationMethod", "six::MagnificationMethod *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__MatchCollect = {"_p_six__MatchCollect", "std::vector< six::MatchCollect >::value_type *|six::MatchCollect *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__MatchInformation = {"_p_six__MatchInformation", "six::MatchInformation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__MatchType = {"_p_six__MatchType", "six::MatchType *|std::vector< six::MatchType >::value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__MissingRequiredException = {"_p_six__MissingRequiredException", "six::MissingRequiredException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__NoiseLevel = {"_p_six__NoiseLevel", "six::NoiseLevel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__Options = {"_p_six__Options", "six::Options *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__OrientationType = {"_p_six__OrientationType", "six::OrientationType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__Parameter = {"_p_six__Parameter", "six::Parameter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__ParameterCollection = {"_p_six__ParameterCollection", "six::ParameterCollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__PixelType = {"_p_six__PixelType", "six::PixelType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__PolarizationSequenceType = {"_p_six__PolarizationSequenceType", "six::PolarizationSequenceType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__PolarizationType = {"_p_six__PolarizationType", "six::PolarizationType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__PosVelError = {"_p_six__PosVelError", "six::PosVelError *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__ProjectionType = {"_p_six__ProjectionType", "six::ProjectionType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__RMAlgoType = {"_p_six__RMAlgoType", "six::RMAlgoType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__RadarModeType = {"_p_six__RadarModeType", "six::RadarModeType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__RadarSensor = {"_p_six__RadarSensor", "six::RadarSensor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__Radiometric = {"_p_six__Radiometric", "six::Radiometric *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__ReferencePoint = {"_p_six__ReferencePoint", "six::ReferencePoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__RegionType = {"_p_six__RegionType", "six::RegionType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__RowColEnum = {"_p_six__RowColEnum", "six::RowColEnum *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__SCP = {"_p_six__SCP", "six::SCP *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__SCPType = {"_p_six__SCPType", "six::SCPType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__SideOfTrackType = {"_p_six__SideOfTrackType", "six::SideOfTrackType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__SlowTimeBeamCompensationType = {"_p_six__SlowTimeBeamCompensationType", "six::SlowTimeBeamCompensationType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__TropoError = {"_p_six__TropoError", "six::TropoError *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__UninitializedValueException = {"_p_six__UninitializedValueException", "six::UninitializedValueException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__XMLControl = {"_p_six__XMLControl", "six::XMLControl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__XMLControlCreator = {"_p_six__XMLControlCreator", "six::XMLControlCreator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__XMLControlRegistry = {"_p_six__XMLControlRegistry", "six::XMLControlRegistry *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__XYZEnum = {"_p_six__XYZEnum", "six::XYZEnum *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_t = {"_p_size_t", "sys::Size_T *|size_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ssize_t = {"_p_ssize_t", "sys::SSize_T *|ssize_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t = {"_p_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t", "std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > *|std::vector< mem::ScopedCopyablePtr< six::GeoInfo > >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t = {"_p_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t", "std::allocator< mem::ScopedCopyablePtr< six::MatchType > > *|std::vector< mem::ScopedCopyablePtr< six::MatchType > >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_six__MatchCollect_t = {"_p_std__allocatorT_six__MatchCollect_t", "std::vector< six::MatchCollect >::allocator_type *|std::allocator< six::MatchCollect > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_six__MatchType_t = {"_p_std__allocatorT_six__MatchType_t", "std::vector< six::MatchType >::allocator_type *|std::allocator< six::MatchType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__auto_ptrT_six__AmplitudeTable_t = {"_p_std__auto_ptrT_six__AmplitudeTable_t", "mem::AutoPtr< six::AmplitudeTable > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__auto_ptrT_six__CollectionInformation_t = {"_p_std__auto_ptrT_six__CollectionInformation_t", "mem::AutoPtr< six::CollectionInformation > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__auto_ptrT_six__Components_t = {"_p_std__auto_ptrT_six__Components_t", "mem::AutoPtr< six::Components > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__auto_ptrT_six__CompositeSCP_t = {"_p_std__auto_ptrT_six__CompositeSCP_t", "mem::AutoPtr< six::CompositeSCP > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__auto_ptrT_six__CorrCoefs_t = {"_p_std__auto_ptrT_six__CorrCoefs_t", "mem::AutoPtr< six::CorrCoefs > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__auto_ptrT_six__ErrorStatistics_t = {"_p_std__auto_ptrT_six__ErrorStatistics_t", "mem::AutoPtr< six::ErrorStatistics > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__auto_ptrT_six__GeoInfo_t = {"_p_std__auto_ptrT_six__GeoInfo_t", "mem::AutoPtr< six::GeoInfo > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__auto_ptrT_six__IonoError_t = {"_p_std__auto_ptrT_six__IonoError_t", "mem::AutoPtr< six::IonoError > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__auto_ptrT_six__MatchInformation_t = {"_p_std__auto_ptrT_six__MatchInformation_t", "mem::AutoPtr< six::MatchInformation > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__auto_ptrT_six__MatchType_t = {"_p_std__auto_ptrT_six__MatchType_t", "mem::AutoPtr< six::MatchType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__auto_ptrT_six__PosVelError_t = {"_p_std__auto_ptrT_six__PosVelError_t", "mem::AutoPtr< six::PosVelError > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__auto_ptrT_six__RadarSensor_t = {"_p_std__auto_ptrT_six__RadarSensor_t", "mem::AutoPtr< six::RadarSensor > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__auto_ptrT_six__Radiometric_t = {"_p_std__auto_ptrT_six__Radiometric_t", "mem::AutoPtr< six::Radiometric > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__auto_ptrT_six__TropoError_t = {"_p_std__auto_ptrT_six__TropoError_t", "mem::AutoPtr< six::TropoError > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__auto_ptrT_six__XMLControlCreator_t = {"_p_std__auto_ptrT_six__XMLControlCreator_t", "mem::AutoPtr< six::XMLControlCreator > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_six__Parameter_t__const_iterator = {"_p_std__mapT_std__string_six__Parameter_t__const_iterator", "std::map< std::string,six::Parameter >::const_iterator *|six::Options::ParameterIter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ostream = {"_p_std__ostream", "std::ostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t = {"_p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t", "std::vector< mem::ScopedCopyablePtr< six::GeoInfo >,std::allocator< mem::ScopedCopyablePtr< six::GeoInfo > > > *|std::vector< mem::ScopedCopyablePtr< six::GeoInfo > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t = {"_p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t", "std::vector< mem::ScopedCopyablePtr< six::MatchType > > *|std::vector< mem::ScopedCopyablePtr< six::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::MatchType > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t = {"_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t", "std::vector< six::LatLon,std::allocator< six::LatLon > > *|std::vector< scene::LatLon,std::allocator< scene::LatLon > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t = {"_p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t", "std::vector< six::MatchCollect,std::allocator< six::MatchCollect > > *|std::vector< six::MatchCollect > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t = {"_p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t", "std::vector< six::MatchType,std::allocator< six::MatchType > > *|std::vector< six::MatchType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t = {"_p_std__vectorT_std__string_std__allocatorT_std__string_t_t", "std::vector< std::string,std::allocator< std::string > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t = {"_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t", "std::vector< unsigned char,std::allocator< unsigned char > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_types__RgAzT_double_t = {"_p_types__RgAzT_double_t", "types::RgAz< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_types__RowColT_double_t = {"_p_types__RowColT_double_t", "six::RowColDouble *|types::RowCol< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_types__RowColT_math__poly__TwoDT_double_t_t = {"_p_types__RowColT_math__poly__TwoDT_double_t_t", "types::RowCol< math::poly::TwoD< double > > *|six::RowColPoly2D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_types__RowColT_scene__LatLon_t = {"_p_types__RowColT_scene__LatLon_t", "six::RowColLatLon *|types::RowCol< scene::LatLon > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_types__RowColT_ssize_t_t = {"_p_types__RowColT_ssize_t_t", "six::RowColInt *|types::RowCol< ssize_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint16_t = {"_p_uint16_t", "sys::Uint16_T *|uint16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint32_t = {"_p_uint32_t", "sys::Uint32_T *|uint32_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint64_t = {"_p_uint64_t", "sys::Uint64_T *|uint64_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint8_t = {"_p_uint8_t", "sys::Uint8_T *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|sys::ubyte *|six::UByte *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xml__lite__Document = {"_p_xml__lite__Document", "xml::lite::Document *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_ConstParameterCollectionIteratorT,
  &_swigt__p_Like_T,
  &_swigt__p_Options,
  &_swigt__p_ParameterCollectionIteratorT,
  &_swigt__p_ParameterIter,
  &_swigt__p_ParameterMap,
  &_swigt__p_XMLControlRegistry,
  &_swigt__p_allocator_type,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_except__BadCastException,
  &_swigt__p_except__Context,
  &_swigt__p_except__Exception,
  &_swigt__p_except__FileNotFoundException,
  &_swigt__p_except__IOException,
  &_swigt__p_except__IndexOutOfRangeException,
  &_swigt__p_except__InvalidArgumentException,
  &_swigt__p_except__InvalidFormatException,
  &_swigt__p_except__KeyAlreadyExistsException,
  &_swigt__p_except__NoSuchKeyException,
  &_swigt__p_except__NoSuchReferenceException,
  &_swigt__p_except__NotImplementedException,
  &_swigt__p_except__NullPointerReferenceException,
  &_swigt__p_except__OutOfMemoryException,
  &_swigt__p_except__ParseException,
  &_swigt__p_except__SerializationException,
  &_swigt__p_except__Throwable,
  &_swigt__p_int,
  &_swigt__p_int16_t,
  &_swigt__p_int32_t,
  &_swigt__p_int64_t,
  &_swigt__p_int8_t,
  &_swigt__p_io__InputStream,
  &_swigt__p_logging__Logger,
  &_swigt__p_math__linear__VectorNT_2_double_t,
  &_swigt__p_math__linear__VectorNT_3_double_t,
  &_swigt__p_math__linear__VectorT_double_t,
  &_swigt__p_math__poly__OneDT_double_t,
  &_swigt__p_math__poly__OneDT_math__linear__VectorNT_3_double_t_t,
  &_swigt__p_math__poly__TwoDT_double_t,
  &_swigt__p_mem__ScopedCloneablePtrT_six__AmplitudeTable_t,
  &_swigt__p_mem__ScopedCloneablePtrT_six__CollectionInformation_t,
  &_swigt__p_mem__ScopedCopyablePtrT_six__Components_t,
  &_swigt__p_mem__ScopedCopyablePtrT_six__CompositeSCP_t,
  &_swigt__p_mem__ScopedCopyablePtrT_six__CorrCoefs_t,
  &_swigt__p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t,
  &_swigt__p_mem__ScopedCopyablePtrT_six__GeoInfo_t,
  &_swigt__p_mem__ScopedCopyablePtrT_six__IonoError_t,
  &_swigt__p_mem__ScopedCopyablePtrT_six__LUT_t,
  &_swigt__p_mem__ScopedCopyablePtrT_six__MatchInformation_t,
  &_swigt__p_mem__ScopedCopyablePtrT_six__MatchType_t,
  &_swigt__p_mem__ScopedCopyablePtrT_six__PosVelError_t,
  &_swigt__p_mem__ScopedCopyablePtrT_six__RadarSensor_t,
  &_swigt__p_mem__ScopedCopyablePtrT_six__Radiometric_t,
  &_swigt__p_mem__ScopedCopyablePtrT_six__TropoError_t,
  &_swigt__p_mt__SingletonT_six__XMLControlRegistry_true_t,
  &_swigt__p_nitf_DateTime,
  &_swigt__p_nitf__DateTime,
  &_swigt__p_nitf__FileSecurity,
  &_swigt__p_off_t,
  &_swigt__p_p_PyObject,
  &_swigt__p_pid_t,
  &_swigt__p_scene__AngleMagnitude,
  &_swigt__p_scene__Errors,
  &_swigt__p_scene__FrameType,
  &_swigt__p_scene__LatLon,
  &_swigt__p_scene__LatLonAlt,
  &_swigt__p_scene__PlaneProjectionModel,
  &_swigt__p_six__AmplitudeTable,
  &_swigt__p_six__AppliedType,
  &_swigt__p_six__AutofocusType,
  &_swigt__p_six__BooleanType,
  &_swigt__p_six__ByteSwapping,
  &_swigt__p_six__Classification,
  &_swigt__p_six__CollectType,
  &_swigt__p_six__CollectionInformation,
  &_swigt__p_six__ComplexImageGridType,
  &_swigt__p_six__ComplexImagePlaneType,
  &_swigt__p_six__Components,
  &_swigt__p_six__CompositeSCP,
  &_swigt__p_six__Constants,
  &_swigt__p_six__CornersT_scene__LatLonAlt_t,
  &_swigt__p_six__CornersT_scene__LatLon_t,
  &_swigt__p_six__CorrCoefs,
  &_swigt__p_six__DESValidationException,
  &_swigt__p_six__Data,
  &_swigt__p_six__DataType,
  &_swigt__p_six__DecimationMethod,
  &_swigt__p_six__DecorrType,
  &_swigt__p_six__DemodType,
  &_swigt__p_six__DisplayType,
  &_swigt__p_six__DualPolarizationType,
  &_swigt__p_six__EarthModelType,
  &_swigt__p_six__ErrorStatistics,
  &_swigt__p_six__FFTSign,
  &_swigt__p_six__GeoDataBase,
  &_swigt__p_six__GeoInfo,
  &_swigt__p_six__ImageBeamCompensationType,
  &_swigt__p_six__ImageFormationType,
  &_swigt__p_six__Init,
  &_swigt__p_six__IonoError,
  &_swigt__p_six__LUT,
  &_swigt__p_six__MagnificationMethod,
  &_swigt__p_six__MatchCollect,
  &_swigt__p_six__MatchInformation,
  &_swigt__p_six__MatchType,
  &_swigt__p_six__MissingRequiredException,
  &_swigt__p_six__NoiseLevel,
  &_swigt__p_six__Options,
  &_swigt__p_six__OrientationType,
  &_swigt__p_six__Parameter,
  &_swigt__p_six__ParameterCollection,
  &_swigt__p_six__PixelType,
  &_swigt__p_six__PolarizationSequenceType,
  &_swigt__p_six__PolarizationType,
  &_swigt__p_six__PosVelError,
  &_swigt__p_six__ProjectionType,
  &_swigt__p_six__RMAlgoType,
  &_swigt__p_six__RadarModeType,
  &_swigt__p_six__RadarSensor,
  &_swigt__p_six__Radiometric,
  &_swigt__p_six__ReferencePoint,
  &_swigt__p_six__RegionType,
  &_swigt__p_six__RowColEnum,
  &_swigt__p_six__SCP,
  &_swigt__p_six__SCPType,
  &_swigt__p_six__SideOfTrackType,
  &_swigt__p_six__SlowTimeBeamCompensationType,
  &_swigt__p_six__TropoError,
  &_swigt__p_six__UninitializedValueException,
  &_swigt__p_six__XMLControl,
  &_swigt__p_six__XMLControlCreator,
  &_swigt__p_six__XMLControlRegistry,
  &_swigt__p_six__XYZEnum,
  &_swigt__p_size_t,
  &_swigt__p_size_type,
  &_swigt__p_ssize_t,
  &_swigt__p_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t,
  &_swigt__p_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t,
  &_swigt__p_std__allocatorT_six__MatchCollect_t,
  &_swigt__p_std__allocatorT_six__MatchType_t,
  &_swigt__p_std__auto_ptrT_six__AmplitudeTable_t,
  &_swigt__p_std__auto_ptrT_six__CollectionInformation_t,
  &_swigt__p_std__auto_ptrT_six__Components_t,
  &_swigt__p_std__auto_ptrT_six__CompositeSCP_t,
  &_swigt__p_std__auto_ptrT_six__CorrCoefs_t,
  &_swigt__p_std__auto_ptrT_six__ErrorStatistics_t,
  &_swigt__p_std__auto_ptrT_six__GeoInfo_t,
  &_swigt__p_std__auto_ptrT_six__IonoError_t,
  &_swigt__p_std__auto_ptrT_six__MatchInformation_t,
  &_swigt__p_std__auto_ptrT_six__MatchType_t,
  &_swigt__p_std__auto_ptrT_six__PosVelError_t,
  &_swigt__p_std__auto_ptrT_six__RadarSensor_t,
  &_swigt__p_std__auto_ptrT_six__Radiometric_t,
  &_swigt__p_std__auto_ptrT_six__TropoError_t,
  &_swigt__p_std__auto_ptrT_six__XMLControlCreator_t,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__mapT_std__string_six__Parameter_t__const_iterator,
  &_swigt__p_std__ostream,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t,
  &_swigt__p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t,
  &_swigt__p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t,
  &_swigt__p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t,
  &_swigt__p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t,
  &_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  &_swigt__p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t,
  &_swigt__p_swig__SwigPyIterator,
  &_swigt__p_types__RgAzT_double_t,
  &_swigt__p_types__RowColT_double_t,
  &_swigt__p_types__RowColT_math__poly__TwoDT_double_t_t,
  &_swigt__p_types__RowColT_scene__LatLon_t,
  &_swigt__p_types__RowColT_ssize_t_t,
  &_swigt__p_uint16_t,
  &_swigt__p_uint32_t,
  &_swigt__p_uint64_t,
  &_swigt__p_uint8_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_value_type,
  &_swigt__p_xml__lite__Document,
};

static swig_cast_info _swigc__p_ConstParameterCollectionIteratorT[] = {  {&_swigt__p_ConstParameterCollectionIteratorT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Like_T[] = {  {&_swigt__p_Like_T, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Options[] = {  {&_swigt__p_Options, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ParameterCollectionIteratorT[] = {  {&_swigt__p_ParameterCollectionIteratorT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ParameterIter[] = {  {&_swigt__p_ParameterIter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ParameterMap[] = {  {&_swigt__p_ParameterMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XMLControlRegistry[] = {  {&_swigt__p_XMLControlRegistry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_except__Context[] = {  {&_swigt__p_except__Context, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_except__ParseException[] = {{&_swigt__p_except__ParseException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_except__SerializationException[] = {{&_swigt__p_except__SerializationException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_except__InvalidArgumentException[] = {{&_swigt__p_except__InvalidArgumentException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_except__NotImplementedException[] = {{&_swigt__p_except__NotImplementedException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_except__KeyAlreadyExistsException[] = {{&_swigt__p_except__KeyAlreadyExistsException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_except__NoSuchReferenceException[] = {{&_swigt__p_except__NoSuchReferenceException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_except__NoSuchKeyException[] = {{&_swigt__p_except__NoSuchKeyException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_except__OutOfMemoryException[] = {{&_swigt__p_except__OutOfMemoryException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_except__IndexOutOfRangeException[] = {{&_swigt__p_except__IndexOutOfRangeException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_except__InvalidFormatException[] = {{&_swigt__p_except__InvalidFormatException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_except__BadCastException[] = {{&_swigt__p_except__BadCastException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_except__FileNotFoundException[] = {{&_swigt__p_except__FileNotFoundException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_except__IOException[] = {{&_swigt__p_except__IOException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_except__Exception[] = {  {&_swigt__p_except__ParseException, _p_except__ParseExceptionTo_p_except__Exception, 0, 0},  {&_swigt__p_except__SerializationException, _p_except__SerializationExceptionTo_p_except__Exception, 0, 0},  {&_swigt__p_except__InvalidArgumentException, _p_except__InvalidArgumentExceptionTo_p_except__Exception, 0, 0},  {&_swigt__p_except__NotImplementedException, _p_except__NotImplementedExceptionTo_p_except__Exception, 0, 0},  {&_swigt__p_except__KeyAlreadyExistsException, _p_except__KeyAlreadyExistsExceptionTo_p_except__Exception, 0, 0},  {&_swigt__p_except__NoSuchReferenceException, _p_except__NoSuchReferenceExceptionTo_p_except__Exception, 0, 0},  {&_swigt__p_except__NoSuchKeyException, _p_except__NoSuchKeyExceptionTo_p_except__Exception, 0, 0},  {&_swigt__p_except__NullPointerReferenceException, _p_except__NullPointerReferenceExceptionTo_p_except__Exception, 0, 0},  {&_swigt__p_except__OutOfMemoryException, _p_except__OutOfMemoryExceptionTo_p_except__Exception, 0, 0},  {&_swigt__p_except__IndexOutOfRangeException, _p_except__IndexOutOfRangeExceptionTo_p_except__Exception, 0, 0},  {&_swigt__p_except__InvalidFormatException, _p_except__InvalidFormatExceptionTo_p_except__Exception, 0, 0},  {&_swigt__p_except__BadCastException, _p_except__BadCastExceptionTo_p_except__Exception, 0, 0},  {&_swigt__p_except__FileNotFoundException, _p_except__FileNotFoundExceptionTo_p_except__Exception, 0, 0},  {&_swigt__p_except__Exception, 0, 0, 0},  {&_swigt__p_except__IOException, _p_except__IOExceptionTo_p_except__Exception, 0, 0},  {&_swigt__p_six__DESValidationException, _p_six__DESValidationExceptionTo_p_except__Exception, 0, 0},  {&_swigt__p_six__MissingRequiredException, _p_six__MissingRequiredExceptionTo_p_except__Exception, 0, 0},  {&_swigt__p_six__UninitializedValueException, _p_six__UninitializedValueExceptionTo_p_except__Exception, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_except__NullPointerReferenceException[] = {  {&_swigt__p_except__NullPointerReferenceException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_except__Throwable[] = {  {&_swigt__p_except__Throwable, 0, 0, 0},  {&_swigt__p_except__SerializationException, _p_except__SerializationExceptionTo_p_except__Throwable, 0, 0},  {&_swigt__p_except__InvalidArgumentException, _p_except__InvalidArgumentExceptionTo_p_except__Throwable, 0, 0},  {&_swigt__p_except__NotImplementedException, _p_except__NotImplementedExceptionTo_p_except__Throwable, 0, 0},  {&_swigt__p_except__KeyAlreadyExistsException, _p_except__KeyAlreadyExistsExceptionTo_p_except__Throwable, 0, 0},  {&_swigt__p_except__NoSuchReferenceException, _p_except__NoSuchReferenceExceptionTo_p_except__Throwable, 0, 0},  {&_swigt__p_except__NoSuchKeyException, _p_except__NoSuchKeyExceptionTo_p_except__Throwable, 0, 0},  {&_swigt__p_except__NullPointerReferenceException, _p_except__NullPointerReferenceExceptionTo_p_except__Throwable, 0, 0},  {&_swigt__p_except__OutOfMemoryException, _p_except__OutOfMemoryExceptionTo_p_except__Throwable, 0, 0},  {&_swigt__p_except__IndexOutOfRangeException, _p_except__IndexOutOfRangeExceptionTo_p_except__Throwable, 0, 0},  {&_swigt__p_except__InvalidFormatException, _p_except__InvalidFormatExceptionTo_p_except__Throwable, 0, 0},  {&_swigt__p_except__BadCastException, _p_except__BadCastExceptionTo_p_except__Throwable, 0, 0},  {&_swigt__p_except__FileNotFoundException, _p_except__FileNotFoundExceptionTo_p_except__Throwable, 0, 0},  {&_swigt__p_except__IOException, _p_except__IOExceptionTo_p_except__Throwable, 0, 0},  {&_swigt__p_except__Exception, _p_except__ExceptionTo_p_except__Throwable, 0, 0},  {&_swigt__p_except__ParseException, _p_except__ParseExceptionTo_p_except__Throwable, 0, 0},  {&_swigt__p_six__DESValidationException, _p_six__DESValidationExceptionTo_p_except__Throwable, 0, 0},  {&_swigt__p_six__MissingRequiredException, _p_six__MissingRequiredExceptionTo_p_except__Throwable, 0, 0},  {&_swigt__p_six__UninitializedValueException, _p_six__UninitializedValueExceptionTo_p_except__Throwable, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int16_t[] = {  {&_swigt__p_int16_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int32_t[] = {  {&_swigt__p_int32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int64_t[] = {  {&_swigt__p_int64_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int8_t[] = {  {&_swigt__p_int8_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_io__InputStream[] = {  {&_swigt__p_io__InputStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_logging__Logger[] = {  {&_swigt__p_logging__Logger, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_math__linear__VectorNT_2_double_t[] = {  {&_swigt__p_math__linear__VectorNT_2_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_math__linear__VectorNT_3_double_t[] = {  {&_swigt__p_math__linear__VectorNT_3_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_math__linear__VectorT_double_t[] = {  {&_swigt__p_math__linear__VectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_math__poly__OneDT_double_t[] = {  {&_swigt__p_math__poly__OneDT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_math__poly__OneDT_math__linear__VectorNT_3_double_t_t[] = {  {&_swigt__p_math__poly__OneDT_math__linear__VectorNT_3_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_math__poly__TwoDT_double_t[] = {  {&_swigt__p_math__poly__TwoDT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCloneablePtrT_six__AmplitudeTable_t[] = {  {&_swigt__p_mem__ScopedCloneablePtrT_six__AmplitudeTable_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCloneablePtrT_six__CollectionInformation_t[] = {  {&_swigt__p_mem__ScopedCloneablePtrT_six__CollectionInformation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCopyablePtrT_six__Components_t[] = {  {&_swigt__p_mem__ScopedCopyablePtrT_six__Components_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCopyablePtrT_six__CompositeSCP_t[] = {  {&_swigt__p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCopyablePtrT_six__CorrCoefs_t[] = {  {&_swigt__p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t[] = {  {&_swigt__p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCopyablePtrT_six__GeoInfo_t[] = {  {&_swigt__p_mem__ScopedCopyablePtrT_six__GeoInfo_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCopyablePtrT_six__IonoError_t[] = {  {&_swigt__p_mem__ScopedCopyablePtrT_six__IonoError_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCopyablePtrT_six__LUT_t[] = {  {&_swigt__p_mem__ScopedCopyablePtrT_six__LUT_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCopyablePtrT_six__MatchInformation_t[] = {  {&_swigt__p_mem__ScopedCopyablePtrT_six__MatchInformation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCopyablePtrT_six__MatchType_t[] = {  {&_swigt__p_mem__ScopedCopyablePtrT_six__MatchType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCopyablePtrT_six__PosVelError_t[] = {  {&_swigt__p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCopyablePtrT_six__RadarSensor_t[] = {  {&_swigt__p_mem__ScopedCopyablePtrT_six__RadarSensor_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCopyablePtrT_six__Radiometric_t[] = {  {&_swigt__p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCopyablePtrT_six__TropoError_t[] = {  {&_swigt__p_mem__ScopedCopyablePtrT_six__TropoError_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mt__SingletonT_six__XMLControlRegistry_true_t[] = {  {&_swigt__p_mt__SingletonT_six__XMLControlRegistry_true_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_nitf_DateTime[] = {  {&_swigt__p_nitf_DateTime, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_nitf__DateTime[] = {  {&_swigt__p_nitf__DateTime, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_nitf__FileSecurity[] = {  {&_swigt__p_nitf__FileSecurity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_off_t[] = {  {&_swigt__p_off_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_PyObject[] = {  {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pid_t[] = {  {&_swigt__p_pid_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_scene__AngleMagnitude[] = {  {&_swigt__p_scene__AngleMagnitude, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_scene__Errors[] = {  {&_swigt__p_scene__Errors, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_scene__FrameType[] = {  {&_swigt__p_scene__FrameType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_scene__LatLon[] = {  {&_swigt__p_scene__LatLon, 0, 0, 0},  {&_swigt__p_scene__LatLonAlt, _p_scene__LatLonAltTo_p_scene__LatLon, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_scene__LatLonAlt[] = {  {&_swigt__p_scene__LatLonAlt, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_scene__PlaneProjectionModel[] = {  {&_swigt__p_scene__PlaneProjectionModel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__AmplitudeTable[] = {  {&_swigt__p_six__AmplitudeTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__AppliedType[] = {  {&_swigt__p_six__AppliedType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__AutofocusType[] = {  {&_swigt__p_six__AutofocusType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__BooleanType[] = {  {&_swigt__p_six__BooleanType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__ByteSwapping[] = {  {&_swigt__p_six__ByteSwapping, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__Classification[] = {  {&_swigt__p_six__Classification, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__CollectType[] = {  {&_swigt__p_six__CollectType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__CollectionInformation[] = {  {&_swigt__p_six__CollectionInformation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__ComplexImageGridType[] = {  {&_swigt__p_six__ComplexImageGridType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__ComplexImagePlaneType[] = {  {&_swigt__p_six__ComplexImagePlaneType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__Components[] = {  {&_swigt__p_six__Components, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__CompositeSCP[] = {  {&_swigt__p_six__CompositeSCP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__Constants[] = {  {&_swigt__p_six__Constants, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__CornersT_scene__LatLonAlt_t[] = {  {&_swigt__p_six__CornersT_scene__LatLonAlt_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__CornersT_scene__LatLon_t[] = {  {&_swigt__p_six__CornersT_scene__LatLon_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__CorrCoefs[] = {  {&_swigt__p_six__CorrCoefs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__DESValidationException[] = {  {&_swigt__p_six__DESValidationException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__Data[] = {  {&_swigt__p_six__Data, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__DataType[] = {  {&_swigt__p_six__DataType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__DecimationMethod[] = {  {&_swigt__p_six__DecimationMethod, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__DecorrType[] = {  {&_swigt__p_six__DecorrType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__DemodType[] = {  {&_swigt__p_six__DemodType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__DisplayType[] = {  {&_swigt__p_six__DisplayType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__DualPolarizationType[] = {  {&_swigt__p_six__DualPolarizationType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__EarthModelType[] = {  {&_swigt__p_six__EarthModelType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__ErrorStatistics[] = {  {&_swigt__p_six__ErrorStatistics, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__FFTSign[] = {  {&_swigt__p_six__FFTSign, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__GeoDataBase[] = {  {&_swigt__p_six__GeoDataBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__GeoInfo[] = {  {&_swigt__p_six__GeoInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__ImageBeamCompensationType[] = {  {&_swigt__p_six__ImageBeamCompensationType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__ImageFormationType[] = {  {&_swigt__p_six__ImageFormationType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__Init[] = {  {&_swigt__p_six__Init, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__IonoError[] = {  {&_swigt__p_six__IonoError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__LUT[] = {  {&_swigt__p_six__LUT, 0, 0, 0},  {&_swigt__p_six__AmplitudeTable, _p_six__AmplitudeTableTo_p_six__LUT, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__MagnificationMethod[] = {  {&_swigt__p_six__MagnificationMethod, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__MatchCollect[] = {  {&_swigt__p_six__MatchCollect, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__MatchInformation[] = {  {&_swigt__p_six__MatchInformation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__MatchType[] = {  {&_swigt__p_six__MatchType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__MissingRequiredException[] = {  {&_swigt__p_six__MissingRequiredException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__NoiseLevel[] = {  {&_swigt__p_six__NoiseLevel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__Options[] = {  {&_swigt__p_six__Options, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__OrientationType[] = {  {&_swigt__p_six__OrientationType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__Parameter[] = {  {&_swigt__p_six__Parameter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__ParameterCollection[] = {  {&_swigt__p_six__ParameterCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__PixelType[] = {  {&_swigt__p_six__PixelType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__PolarizationSequenceType[] = {  {&_swigt__p_six__PolarizationSequenceType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__PolarizationType[] = {  {&_swigt__p_six__PolarizationType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__PosVelError[] = {  {&_swigt__p_six__PosVelError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__ProjectionType[] = {  {&_swigt__p_six__ProjectionType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__RMAlgoType[] = {  {&_swigt__p_six__RMAlgoType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__RadarModeType[] = {  {&_swigt__p_six__RadarModeType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__RadarSensor[] = {  {&_swigt__p_six__RadarSensor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__Radiometric[] = {  {&_swigt__p_six__Radiometric, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__ReferencePoint[] = {  {&_swigt__p_six__ReferencePoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__RegionType[] = {  {&_swigt__p_six__RegionType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__RowColEnum[] = {  {&_swigt__p_six__RowColEnum, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__SCP[] = {  {&_swigt__p_six__SCP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__SCPType[] = {  {&_swigt__p_six__SCPType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__SideOfTrackType[] = {  {&_swigt__p_six__SideOfTrackType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__SlowTimeBeamCompensationType[] = {  {&_swigt__p_six__SlowTimeBeamCompensationType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__TropoError[] = {  {&_swigt__p_six__TropoError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__UninitializedValueException[] = {  {&_swigt__p_six__UninitializedValueException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__XMLControl[] = {  {&_swigt__p_six__XMLControl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__XMLControlCreator[] = {  {&_swigt__p_six__XMLControlCreator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__XMLControlRegistry[] = {  {&_swigt__p_six__XMLControlRegistry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__XYZEnum[] = {  {&_swigt__p_six__XYZEnum, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_t[] = {  {&_swigt__p_size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ssize_t[] = {  {&_swigt__p_ssize_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t[] = {  {&_swigt__p_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t[] = {  {&_swigt__p_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_six__MatchCollect_t[] = {  {&_swigt__p_std__allocatorT_six__MatchCollect_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_six__MatchType_t[] = {  {&_swigt__p_std__allocatorT_six__MatchType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__auto_ptrT_six__AmplitudeTable_t[] = {  {&_swigt__p_std__auto_ptrT_six__AmplitudeTable_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__auto_ptrT_six__CollectionInformation_t[] = {  {&_swigt__p_std__auto_ptrT_six__CollectionInformation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__auto_ptrT_six__Components_t[] = {  {&_swigt__p_std__auto_ptrT_six__Components_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__auto_ptrT_six__CompositeSCP_t[] = {  {&_swigt__p_std__auto_ptrT_six__CompositeSCP_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__auto_ptrT_six__CorrCoefs_t[] = {  {&_swigt__p_std__auto_ptrT_six__CorrCoefs_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__auto_ptrT_six__ErrorStatistics_t[] = {  {&_swigt__p_std__auto_ptrT_six__ErrorStatistics_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__auto_ptrT_six__GeoInfo_t[] = {  {&_swigt__p_std__auto_ptrT_six__GeoInfo_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__auto_ptrT_six__IonoError_t[] = {  {&_swigt__p_std__auto_ptrT_six__IonoError_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__auto_ptrT_six__MatchInformation_t[] = {  {&_swigt__p_std__auto_ptrT_six__MatchInformation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__auto_ptrT_six__MatchType_t[] = {  {&_swigt__p_std__auto_ptrT_six__MatchType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__auto_ptrT_six__PosVelError_t[] = {  {&_swigt__p_std__auto_ptrT_six__PosVelError_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__auto_ptrT_six__RadarSensor_t[] = {  {&_swigt__p_std__auto_ptrT_six__RadarSensor_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__auto_ptrT_six__Radiometric_t[] = {  {&_swigt__p_std__auto_ptrT_six__Radiometric_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__auto_ptrT_six__TropoError_t[] = {  {&_swigt__p_std__auto_ptrT_six__TropoError_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__auto_ptrT_six__XMLControlCreator_t[] = {  {&_swigt__p_std__auto_ptrT_six__XMLControlCreator_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_six__Parameter_t__const_iterator[] = {  {&_swigt__p_std__mapT_std__string_six__Parameter_t__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ostream[] = {  {&_swigt__p_std__ostream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t[] = {  {&_swigt__p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t[] = {  {&_swigt__p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t[] = {  {&_swigt__p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t[] = {  {&_swigt__p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t[] = {  {&_swigt__p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t[] = {  {&_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t[] = {  {&_swigt__p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_types__RgAzT_double_t[] = {  {&_swigt__p_types__RgAzT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_types__RowColT_double_t[] = {  {&_swigt__p_types__RowColT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_types__RowColT_math__poly__TwoDT_double_t_t[] = {  {&_swigt__p_types__RowColT_math__poly__TwoDT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_types__RowColT_scene__LatLon_t[] = {  {&_swigt__p_types__RowColT_scene__LatLon_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_types__RowColT_ssize_t_t[] = {  {&_swigt__p_types__RowColT_ssize_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint16_t[] = {  {&_swigt__p_uint16_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint32_t[] = {  {&_swigt__p_uint32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint64_t[] = {  {&_swigt__p_uint64_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint8_t[] = {  {&_swigt__p_uint8_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xml__lite__Document[] = {  {&_swigt__p_xml__lite__Document, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_ConstParameterCollectionIteratorT,
  _swigc__p_Like_T,
  _swigc__p_Options,
  _swigc__p_ParameterCollectionIteratorT,
  _swigc__p_ParameterIter,
  _swigc__p_ParameterMap,
  _swigc__p_XMLControlRegistry,
  _swigc__p_allocator_type,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_except__BadCastException,
  _swigc__p_except__Context,
  _swigc__p_except__Exception,
  _swigc__p_except__FileNotFoundException,
  _swigc__p_except__IOException,
  _swigc__p_except__IndexOutOfRangeException,
  _swigc__p_except__InvalidArgumentException,
  _swigc__p_except__InvalidFormatException,
  _swigc__p_except__KeyAlreadyExistsException,
  _swigc__p_except__NoSuchKeyException,
  _swigc__p_except__NoSuchReferenceException,
  _swigc__p_except__NotImplementedException,
  _swigc__p_except__NullPointerReferenceException,
  _swigc__p_except__OutOfMemoryException,
  _swigc__p_except__ParseException,
  _swigc__p_except__SerializationException,
  _swigc__p_except__Throwable,
  _swigc__p_int,
  _swigc__p_int16_t,
  _swigc__p_int32_t,
  _swigc__p_int64_t,
  _swigc__p_int8_t,
  _swigc__p_io__InputStream,
  _swigc__p_logging__Logger,
  _swigc__p_math__linear__VectorNT_2_double_t,
  _swigc__p_math__linear__VectorNT_3_double_t,
  _swigc__p_math__linear__VectorT_double_t,
  _swigc__p_math__poly__OneDT_double_t,
  _swigc__p_math__poly__OneDT_math__linear__VectorNT_3_double_t_t,
  _swigc__p_math__poly__TwoDT_double_t,
  _swigc__p_mem__ScopedCloneablePtrT_six__AmplitudeTable_t,
  _swigc__p_mem__ScopedCloneablePtrT_six__CollectionInformation_t,
  _swigc__p_mem__ScopedCopyablePtrT_six__Components_t,
  _swigc__p_mem__ScopedCopyablePtrT_six__CompositeSCP_t,
  _swigc__p_mem__ScopedCopyablePtrT_six__CorrCoefs_t,
  _swigc__p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t,
  _swigc__p_mem__ScopedCopyablePtrT_six__GeoInfo_t,
  _swigc__p_mem__ScopedCopyablePtrT_six__IonoError_t,
  _swigc__p_mem__ScopedCopyablePtrT_six__LUT_t,
  _swigc__p_mem__ScopedCopyablePtrT_six__MatchInformation_t,
  _swigc__p_mem__ScopedCopyablePtrT_six__MatchType_t,
  _swigc__p_mem__ScopedCopyablePtrT_six__PosVelError_t,
  _swigc__p_mem__ScopedCopyablePtrT_six__RadarSensor_t,
  _swigc__p_mem__ScopedCopyablePtrT_six__Radiometric_t,
  _swigc__p_mem__ScopedCopyablePtrT_six__TropoError_t,
  _swigc__p_mt__SingletonT_six__XMLControlRegistry_true_t,
  _swigc__p_nitf_DateTime,
  _swigc__p_nitf__DateTime,
  _swigc__p_nitf__FileSecurity,
  _swigc__p_off_t,
  _swigc__p_p_PyObject,
  _swigc__p_pid_t,
  _swigc__p_scene__AngleMagnitude,
  _swigc__p_scene__Errors,
  _swigc__p_scene__FrameType,
  _swigc__p_scene__LatLon,
  _swigc__p_scene__LatLonAlt,
  _swigc__p_scene__PlaneProjectionModel,
  _swigc__p_six__AmplitudeTable,
  _swigc__p_six__AppliedType,
  _swigc__p_six__AutofocusType,
  _swigc__p_six__BooleanType,
  _swigc__p_six__ByteSwapping,
  _swigc__p_six__Classification,
  _swigc__p_six__CollectType,
  _swigc__p_six__CollectionInformation,
  _swigc__p_six__ComplexImageGridType,
  _swigc__p_six__ComplexImagePlaneType,
  _swigc__p_six__Components,
  _swigc__p_six__CompositeSCP,
  _swigc__p_six__Constants,
  _swigc__p_six__CornersT_scene__LatLonAlt_t,
  _swigc__p_six__CornersT_scene__LatLon_t,
  _swigc__p_six__CorrCoefs,
  _swigc__p_six__DESValidationException,
  _swigc__p_six__Data,
  _swigc__p_six__DataType,
  _swigc__p_six__DecimationMethod,
  _swigc__p_six__DecorrType,
  _swigc__p_six__DemodType,
  _swigc__p_six__DisplayType,
  _swigc__p_six__DualPolarizationType,
  _swigc__p_six__EarthModelType,
  _swigc__p_six__ErrorStatistics,
  _swigc__p_six__FFTSign,
  _swigc__p_six__GeoDataBase,
  _swigc__p_six__GeoInfo,
  _swigc__p_six__ImageBeamCompensationType,
  _swigc__p_six__ImageFormationType,
  _swigc__p_six__Init,
  _swigc__p_six__IonoError,
  _swigc__p_six__LUT,
  _swigc__p_six__MagnificationMethod,
  _swigc__p_six__MatchCollect,
  _swigc__p_six__MatchInformation,
  _swigc__p_six__MatchType,
  _swigc__p_six__MissingRequiredException,
  _swigc__p_six__NoiseLevel,
  _swigc__p_six__Options,
  _swigc__p_six__OrientationType,
  _swigc__p_six__Parameter,
  _swigc__p_six__ParameterCollection,
  _swigc__p_six__PixelType,
  _swigc__p_six__PolarizationSequenceType,
  _swigc__p_six__PolarizationType,
  _swigc__p_six__PosVelError,
  _swigc__p_six__ProjectionType,
  _swigc__p_six__RMAlgoType,
  _swigc__p_six__RadarModeType,
  _swigc__p_six__RadarSensor,
  _swigc__p_six__Radiometric,
  _swigc__p_six__ReferencePoint,
  _swigc__p_six__RegionType,
  _swigc__p_six__RowColEnum,
  _swigc__p_six__SCP,
  _swigc__p_six__SCPType,
  _swigc__p_six__SideOfTrackType,
  _swigc__p_six__SlowTimeBeamCompensationType,
  _swigc__p_six__TropoError,
  _swigc__p_six__UninitializedValueException,
  _swigc__p_six__XMLControl,
  _swigc__p_six__XMLControlCreator,
  _swigc__p_six__XMLControlRegistry,
  _swigc__p_six__XYZEnum,
  _swigc__p_size_t,
  _swigc__p_size_type,
  _swigc__p_ssize_t,
  _swigc__p_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t,
  _swigc__p_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t,
  _swigc__p_std__allocatorT_six__MatchCollect_t,
  _swigc__p_std__allocatorT_six__MatchType_t,
  _swigc__p_std__auto_ptrT_six__AmplitudeTable_t,
  _swigc__p_std__auto_ptrT_six__CollectionInformation_t,
  _swigc__p_std__auto_ptrT_six__Components_t,
  _swigc__p_std__auto_ptrT_six__CompositeSCP_t,
  _swigc__p_std__auto_ptrT_six__CorrCoefs_t,
  _swigc__p_std__auto_ptrT_six__ErrorStatistics_t,
  _swigc__p_std__auto_ptrT_six__GeoInfo_t,
  _swigc__p_std__auto_ptrT_six__IonoError_t,
  _swigc__p_std__auto_ptrT_six__MatchInformation_t,
  _swigc__p_std__auto_ptrT_six__MatchType_t,
  _swigc__p_std__auto_ptrT_six__PosVelError_t,
  _swigc__p_std__auto_ptrT_six__RadarSensor_t,
  _swigc__p_std__auto_ptrT_six__Radiometric_t,
  _swigc__p_std__auto_ptrT_six__TropoError_t,
  _swigc__p_std__auto_ptrT_six__XMLControlCreator_t,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__mapT_std__string_six__Parameter_t__const_iterator,
  _swigc__p_std__ostream,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_std__allocatorT_mem__ScopedCopyablePtrT_six__GeoInfo_t_t_t,
  _swigc__p_std__vectorT_mem__ScopedCopyablePtrT_six__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__MatchType_t_t_t,
  _swigc__p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t,
  _swigc__p_std__vectorT_six__MatchCollect_std__allocatorT_six__MatchCollect_t_t,
  _swigc__p_std__vectorT_six__MatchType_std__allocatorT_six__MatchType_t_t,
  _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  _swigc__p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t,
  _swigc__p_swig__SwigPyIterator,
  _swigc__p_types__RgAzT_double_t,
  _swigc__p_types__RowColT_double_t,
  _swigc__p_types__RowColT_math__poly__TwoDT_double_t_t,
  _swigc__p_types__RowColT_scene__LatLon_t,
  _swigc__p_types__RowColT_ssize_t_t,
  _swigc__p_uint16_t,
  _swigc__p_uint32_t,
  _swigc__p_uint64_t,
  _swigc__p_uint8_t,
  _swigc__p_unsigned_char,
  _swigc__p_value_type,
  _swigc__p_xml__lite__Document,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = nullptr;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == nullptr && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(nullptr, 0)
#else
        PyObject_HEAD_INIT(nullptr)
        0,                                  /* ob_size */
#endif
        (char *)"swigvarlink",              /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        (printfunc) swig_varlink_print,     /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
        0,                                  /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
        0,                                  /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
        0,                                  /* tp_allocs */
        0,                                  /* tp_frees */
        0,                                  /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
        0,                                  /* tp_prev */
#endif
        0                                   /* tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
#if PY_VERSION_HEX < 0x02020000
      varlink_type.ob_type = &PyType_Type;
#else
      if (PyType_Ready(&varlink_type) < 0)
      return nullptr;
#endif
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md;
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
# if PY_VERSION_HEX >= 0x03020000
    PyModuleDef_HEAD_INIT,
# else
    {
      PyObject_HEAD_INIT(nullptr)
      nullptr, /* m_init */
      0,    /* m_index */
      nullptr, /* m_copy */
    },
# endif
    (char *) SWIG_name,
    nullptr,
    -1,
    SwigMethods,
    nullptr,
    nullptr,
    nullptr,
    nullptr
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, nullptr, nullptr, nullptr
  };
  static SwigPyGetSet thisown_getset_closure = {
    (PyCFunction) SwigPyObject_own,
    (PyCFunction) SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, nullptr, &thisown_getset_closure
  };
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  PyTypeObject *swigpyobject;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* Metaclass is used to implement static member variables */
  metatype = SwigPyObjectType();
  assert(metatype);
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  swigpyobject = SwigPyObject_TypeOnce();
  
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = swigpyobject;
  } else if (swigpyobject->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return nullptr;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != nullptr; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  
  PyDateTime_IMPORT;
  
  PyDict_SetItemString(md,(char *)"cvar", SWIG_globals());
  SWIG_addvarlink(SWIG_globals(),(char *)"NOT_SET_VALUE",Swig_var_NOT_SET_VALUE_get, Swig_var_NOT_SET_VALUE_set);
  SWIG_Python_SetConstant(d, "AppliedType_IS_FALSE",SWIG_From_int(static_cast< int >(six::AppliedType::IS_FALSE)));
  SWIG_Python_SetConstant(d, "AppliedType_IS_TRUE",SWIG_From_int(static_cast< int >(six::AppliedType::IS_TRUE)));
  SWIG_Python_SetConstant(d, "AppliedType_NOT_SET",SWIG_From_int(static_cast< int >(six::AppliedType::NOT_SET)));
  SWIG_Python_SetConstant(d, "AutofocusType_NO",SWIG_From_int(static_cast< int >(six::AutofocusType::NO)));
  SWIG_Python_SetConstant(d, "AutofocusType_GLOBAL",SWIG_From_int(static_cast< int >(six::AutofocusType::GLOBAL)));
  SWIG_Python_SetConstant(d, "AutofocusType_SV",SWIG_From_int(static_cast< int >(six::AutofocusType::SV)));
  SWIG_Python_SetConstant(d, "AutofocusType_NOT_SET",SWIG_From_int(static_cast< int >(six::AutofocusType::NOT_SET)));
  SWIG_Python_SetConstant(d, "BooleanType_IS_FALSE",SWIG_From_int(static_cast< int >(six::BooleanType::IS_FALSE)));
  SWIG_Python_SetConstant(d, "BooleanType_IS_TRUE",SWIG_From_int(static_cast< int >(six::BooleanType::IS_TRUE)));
  SWIG_Python_SetConstant(d, "BooleanType_NOT_SET",SWIG_From_int(static_cast< int >(six::BooleanType::NOT_SET)));
  SWIG_Python_SetConstant(d, "ByteSwapping_SWAP_OFF",SWIG_From_int(static_cast< int >(six::ByteSwapping::SWAP_OFF)));
  SWIG_Python_SetConstant(d, "ByteSwapping_SWAP_ON",SWIG_From_int(static_cast< int >(six::ByteSwapping::SWAP_ON)));
  SWIG_Python_SetConstant(d, "ByteSwapping_SWAP_AUTO",SWIG_From_int(static_cast< int >(six::ByteSwapping::SWAP_AUTO)));
  SWIG_Python_SetConstant(d, "ByteSwapping_NOT_SET",SWIG_From_int(static_cast< int >(six::ByteSwapping::NOT_SET)));
  SWIG_Python_SetConstant(d, "CollectType_MONOSTATIC",SWIG_From_int(static_cast< int >(six::CollectType::MONOSTATIC)));
  SWIG_Python_SetConstant(d, "CollectType_BISTATIC",SWIG_From_int(static_cast< int >(six::CollectType::BISTATIC)));
  SWIG_Python_SetConstant(d, "CollectType_NOT_SET",SWIG_From_int(static_cast< int >(six::CollectType::NOT_SET)));
  SWIG_Python_SetConstant(d, "ComplexImageGridType_RGAZIM",SWIG_From_int(static_cast< int >(six::ComplexImageGridType::RGAZIM)));
  SWIG_Python_SetConstant(d, "ComplexImageGridType_RGZERO",SWIG_From_int(static_cast< int >(six::ComplexImageGridType::RGZERO)));
  SWIG_Python_SetConstant(d, "ComplexImageGridType_XRGYCR",SWIG_From_int(static_cast< int >(six::ComplexImageGridType::XRGYCR)));
  SWIG_Python_SetConstant(d, "ComplexImageGridType_XCTYAT",SWIG_From_int(static_cast< int >(six::ComplexImageGridType::XCTYAT)));
  SWIG_Python_SetConstant(d, "ComplexImageGridType_PLANE",SWIG_From_int(static_cast< int >(six::ComplexImageGridType::PLANE)));
  SWIG_Python_SetConstant(d, "ComplexImageGridType_NOT_SET",SWIG_From_int(static_cast< int >(six::ComplexImageGridType::NOT_SET)));
  SWIG_Python_SetConstant(d, "ComplexImagePlaneType_OTHER",SWIG_From_int(static_cast< int >(six::ComplexImagePlaneType::OTHER)));
  SWIG_Python_SetConstant(d, "ComplexImagePlaneType_SLANT",SWIG_From_int(static_cast< int >(six::ComplexImagePlaneType::SLANT)));
  SWIG_Python_SetConstant(d, "ComplexImagePlaneType_GROUND",SWIG_From_int(static_cast< int >(six::ComplexImagePlaneType::GROUND)));
  SWIG_Python_SetConstant(d, "ComplexImagePlaneType_NOT_SET",SWIG_From_int(static_cast< int >(six::ComplexImagePlaneType::NOT_SET)));
  SWIG_Python_SetConstant(d, "DataType_COMPLEX",SWIG_From_int(static_cast< int >(six::DataType::COMPLEX)));
  SWIG_Python_SetConstant(d, "DataType_DERIVED",SWIG_From_int(static_cast< int >(six::DataType::DERIVED)));
  SWIG_Python_SetConstant(d, "DataType_NOT_SET",SWIG_From_int(static_cast< int >(six::DataType::NOT_SET)));
  SWIG_Python_SetConstant(d, "DecimationMethod_NEAREST_NEIGHBOR",SWIG_From_int(static_cast< int >(six::DecimationMethod::NEAREST_NEIGHBOR)));
  SWIG_Python_SetConstant(d, "DecimationMethod_BILINEAR",SWIG_From_int(static_cast< int >(six::DecimationMethod::BILINEAR)));
  SWIG_Python_SetConstant(d, "DecimationMethod_BRIGHTEST_PIXEL",SWIG_From_int(static_cast< int >(six::DecimationMethod::BRIGHTEST_PIXEL)));
  SWIG_Python_SetConstant(d, "DecimationMethod_LAGRANGE",SWIG_From_int(static_cast< int >(six::DecimationMethod::LAGRANGE)));
  SWIG_Python_SetConstant(d, "DecimationMethod_NOT_SET",SWIG_From_int(static_cast< int >(six::DecimationMethod::NOT_SET)));
  SWIG_Python_SetConstant(d, "DemodType_STRETCH",SWIG_From_int(static_cast< int >(six::DemodType::STRETCH)));
  SWIG_Python_SetConstant(d, "DemodType_CHIRP",SWIG_From_int(static_cast< int >(six::DemodType::CHIRP)));
  SWIG_Python_SetConstant(d, "DemodType_NOT_SET",SWIG_From_int(static_cast< int >(six::DemodType::NOT_SET)));
  SWIG_Python_SetConstant(d, "DisplayType_COLOR",SWIG_From_int(static_cast< int >(six::DisplayType::COLOR)));
  SWIG_Python_SetConstant(d, "DisplayType_MONO",SWIG_From_int(static_cast< int >(six::DisplayType::MONO)));
  SWIG_Python_SetConstant(d, "DisplayType_NOT_SET",SWIG_From_int(static_cast< int >(six::DisplayType::NOT_SET)));
  SWIG_Python_SetConstant(d, "DualPolarizationType_OTHER",SWIG_From_int(static_cast< int >(six::DualPolarizationType::OTHER)));
  SWIG_Python_SetConstant(d, "DualPolarizationType_V_V",SWIG_From_int(static_cast< int >(six::DualPolarizationType::V_V)));
  SWIG_Python_SetConstant(d, "DualPolarizationType_V_H",SWIG_From_int(static_cast< int >(six::DualPolarizationType::V_H)));
  SWIG_Python_SetConstant(d, "DualPolarizationType_V_RHC",SWIG_From_int(static_cast< int >(six::DualPolarizationType::V_RHC)));
  SWIG_Python_SetConstant(d, "DualPolarizationType_V_LHC",SWIG_From_int(static_cast< int >(six::DualPolarizationType::V_LHC)));
  SWIG_Python_SetConstant(d, "DualPolarizationType_H_V",SWIG_From_int(static_cast< int >(six::DualPolarizationType::H_V)));
  SWIG_Python_SetConstant(d, "DualPolarizationType_H_H",SWIG_From_int(static_cast< int >(six::DualPolarizationType::H_H)));
  SWIG_Python_SetConstant(d, "DualPolarizationType_H_RHC",SWIG_From_int(static_cast< int >(six::DualPolarizationType::H_RHC)));
  SWIG_Python_SetConstant(d, "DualPolarizationType_H_LHC",SWIG_From_int(static_cast< int >(six::DualPolarizationType::H_LHC)));
  SWIG_Python_SetConstant(d, "DualPolarizationType_RHC_RHC",SWIG_From_int(static_cast< int >(six::DualPolarizationType::RHC_RHC)));
  SWIG_Python_SetConstant(d, "DualPolarizationType_RHC_LHC",SWIG_From_int(static_cast< int >(six::DualPolarizationType::RHC_LHC)));
  SWIG_Python_SetConstant(d, "DualPolarizationType_RHC_V",SWIG_From_int(static_cast< int >(six::DualPolarizationType::RHC_V)));
  SWIG_Python_SetConstant(d, "DualPolarizationType_RHC_H",SWIG_From_int(static_cast< int >(six::DualPolarizationType::RHC_H)));
  SWIG_Python_SetConstant(d, "DualPolarizationType_LHC_RHC",SWIG_From_int(static_cast< int >(six::DualPolarizationType::LHC_RHC)));
  SWIG_Python_SetConstant(d, "DualPolarizationType_LHC_LHC",SWIG_From_int(static_cast< int >(six::DualPolarizationType::LHC_LHC)));
  SWIG_Python_SetConstant(d, "DualPolarizationType_LHC_V",SWIG_From_int(static_cast< int >(six::DualPolarizationType::LHC_V)));
  SWIG_Python_SetConstant(d, "DualPolarizationType_LHC_H",SWIG_From_int(static_cast< int >(six::DualPolarizationType::LHC_H)));
  SWIG_Python_SetConstant(d, "DualPolarizationType_UNKNOWN",SWIG_From_int(static_cast< int >(six::DualPolarizationType::UNKNOWN)));
  SWIG_Python_SetConstant(d, "DualPolarizationType_NOT_SET",SWIG_From_int(static_cast< int >(six::DualPolarizationType::NOT_SET)));
  SWIG_Python_SetConstant(d, "EarthModelType_WGS84",SWIG_From_int(static_cast< int >(six::EarthModelType::WGS84)));
  SWIG_Python_SetConstant(d, "EarthModelType_NOT_SET",SWIG_From_int(static_cast< int >(six::EarthModelType::NOT_SET)));
  SWIG_Python_SetConstant(d, "FFTSign_NEG",SWIG_From_int(static_cast< int >(six::FFTSign::NEG)));
  SWIG_Python_SetConstant(d, "FFTSign_POS",SWIG_From_int(static_cast< int >(six::FFTSign::POS)));
  SWIG_Python_SetConstant(d, "FFTSign_NOT_SET",SWIG_From_int(static_cast< int >(six::FFTSign::NOT_SET)));
  SWIG_Python_SetConstant(d, "ImageBeamCompensationType_NO",SWIG_From_int(static_cast< int >(six::ImageBeamCompensationType::NO)));
  SWIG_Python_SetConstant(d, "ImageBeamCompensationType_SV",SWIG_From_int(static_cast< int >(six::ImageBeamCompensationType::SV)));
  SWIG_Python_SetConstant(d, "ImageBeamCompensationType_NOT_SET",SWIG_From_int(static_cast< int >(six::ImageBeamCompensationType::NOT_SET)));
  SWIG_Python_SetConstant(d, "ImageFormationType_OTHER",SWIG_From_int(static_cast< int >(six::ImageFormationType::OTHER)));
  SWIG_Python_SetConstant(d, "ImageFormationType_PFA",SWIG_From_int(static_cast< int >(six::ImageFormationType::PFA)));
  SWIG_Python_SetConstant(d, "ImageFormationType_RMA",SWIG_From_int(static_cast< int >(six::ImageFormationType::RMA)));
  SWIG_Python_SetConstant(d, "ImageFormationType_RGAZCOMP",SWIG_From_int(static_cast< int >(six::ImageFormationType::RGAZCOMP)));
  SWIG_Python_SetConstant(d, "ImageFormationType_NOT_SET",SWIG_From_int(static_cast< int >(six::ImageFormationType::NOT_SET)));
  SWIG_Python_SetConstant(d, "MagnificationMethod_NEAREST_NEIGHBOR",SWIG_From_int(static_cast< int >(six::MagnificationMethod::NEAREST_NEIGHBOR)));
  SWIG_Python_SetConstant(d, "MagnificationMethod_BILINEAR",SWIG_From_int(static_cast< int >(six::MagnificationMethod::BILINEAR)));
  SWIG_Python_SetConstant(d, "MagnificationMethod_LAGRANGE",SWIG_From_int(static_cast< int >(six::MagnificationMethod::LAGRANGE)));
  SWIG_Python_SetConstant(d, "MagnificationMethod_NOT_SET",SWIG_From_int(static_cast< int >(six::MagnificationMethod::NOT_SET)));
  SWIG_Python_SetConstant(d, "OrientationType_UP",SWIG_From_int(static_cast< int >(six::OrientationType::UP)));
  SWIG_Python_SetConstant(d, "OrientationType_DOWN",SWIG_From_int(static_cast< int >(six::OrientationType::DOWN)));
  SWIG_Python_SetConstant(d, "OrientationType_LEFT",SWIG_From_int(static_cast< int >(six::OrientationType::LEFT)));
  SWIG_Python_SetConstant(d, "OrientationType_RIGHT",SWIG_From_int(static_cast< int >(six::OrientationType::RIGHT)));
  SWIG_Python_SetConstant(d, "OrientationType_ARBITRARY",SWIG_From_int(static_cast< int >(six::OrientationType::ARBITRARY)));
  SWIG_Python_SetConstant(d, "OrientationType_NOT_SET",SWIG_From_int(static_cast< int >(six::OrientationType::NOT_SET)));
  SWIG_Python_SetConstant(d, "PixelType_RE32F_IM32F",SWIG_From_int(static_cast< int >(six::PixelType::RE32F_IM32F)));
  SWIG_Python_SetConstant(d, "PixelType_RE16I_IM16I",SWIG_From_int(static_cast< int >(six::PixelType::RE16I_IM16I)));
  SWIG_Python_SetConstant(d, "PixelType_AMP8I_PHS8I",SWIG_From_int(static_cast< int >(six::PixelType::AMP8I_PHS8I)));
  SWIG_Python_SetConstant(d, "PixelType_MONO8I",SWIG_From_int(static_cast< int >(six::PixelType::MONO8I)));
  SWIG_Python_SetConstant(d, "PixelType_MONO8LU",SWIG_From_int(static_cast< int >(six::PixelType::MONO8LU)));
  SWIG_Python_SetConstant(d, "PixelType_MONO16I",SWIG_From_int(static_cast< int >(six::PixelType::MONO16I)));
  SWIG_Python_SetConstant(d, "PixelType_RGB8LU",SWIG_From_int(static_cast< int >(six::PixelType::RGB8LU)));
  SWIG_Python_SetConstant(d, "PixelType_RGB24I",SWIG_From_int(static_cast< int >(six::PixelType::RGB24I)));
  SWIG_Python_SetConstant(d, "PixelType_NOT_SET",SWIG_From_int(static_cast< int >(six::PixelType::NOT_SET)));
  SWIG_Python_SetConstant(d, "PolarizationSequenceType_OTHER",SWIG_From_int(static_cast< int >(six::PolarizationSequenceType::OTHER)));
  SWIG_Python_SetConstant(d, "PolarizationSequenceType_V",SWIG_From_int(static_cast< int >(six::PolarizationSequenceType::V)));
  SWIG_Python_SetConstant(d, "PolarizationSequenceType_H",SWIG_From_int(static_cast< int >(six::PolarizationSequenceType::H)));
  SWIG_Python_SetConstant(d, "PolarizationSequenceType_RHC",SWIG_From_int(static_cast< int >(six::PolarizationSequenceType::RHC)));
  SWIG_Python_SetConstant(d, "PolarizationSequenceType_LHC",SWIG_From_int(static_cast< int >(six::PolarizationSequenceType::LHC)));
  SWIG_Python_SetConstant(d, "PolarizationSequenceType_UNKNOWN",SWIG_From_int(static_cast< int >(six::PolarizationSequenceType::UNKNOWN)));
  SWIG_Python_SetConstant(d, "PolarizationSequenceType_SEQUENCE",SWIG_From_int(static_cast< int >(six::PolarizationSequenceType::SEQUENCE)));
  SWIG_Python_SetConstant(d, "PolarizationSequenceType_NOT_SET",SWIG_From_int(static_cast< int >(six::PolarizationSequenceType::NOT_SET)));
  SWIG_Python_SetConstant(d, "PolarizationType_OTHER",SWIG_From_int(static_cast< int >(six::PolarizationType::OTHER)));
  SWIG_Python_SetConstant(d, "PolarizationType_V",SWIG_From_int(static_cast< int >(six::PolarizationType::V)));
  SWIG_Python_SetConstant(d, "PolarizationType_H",SWIG_From_int(static_cast< int >(six::PolarizationType::H)));
  SWIG_Python_SetConstant(d, "PolarizationType_RHC",SWIG_From_int(static_cast< int >(six::PolarizationType::RHC)));
  SWIG_Python_SetConstant(d, "PolarizationType_LHC",SWIG_From_int(static_cast< int >(six::PolarizationType::LHC)));
  SWIG_Python_SetConstant(d, "PolarizationType_NOT_SET",SWIG_From_int(static_cast< int >(six::PolarizationType::NOT_SET)));
  SWIG_Python_SetConstant(d, "ProjectionType_PLANE",SWIG_From_int(static_cast< int >(six::ProjectionType::PLANE)));
  SWIG_Python_SetConstant(d, "ProjectionType_GEOGRAPHIC",SWIG_From_int(static_cast< int >(six::ProjectionType::GEOGRAPHIC)));
  SWIG_Python_SetConstant(d, "ProjectionType_CYLINDRICAL",SWIG_From_int(static_cast< int >(six::ProjectionType::CYLINDRICAL)));
  SWIG_Python_SetConstant(d, "ProjectionType_POLYNOMIAL",SWIG_From_int(static_cast< int >(six::ProjectionType::POLYNOMIAL)));
  SWIG_Python_SetConstant(d, "ProjectionType_NOT_SET",SWIG_From_int(static_cast< int >(six::ProjectionType::NOT_SET)));
  SWIG_Python_SetConstant(d, "RMAlgoType_OMEGA_K",SWIG_From_int(static_cast< int >(six::RMAlgoType::OMEGA_K)));
  SWIG_Python_SetConstant(d, "RMAlgoType_CSA",SWIG_From_int(static_cast< int >(six::RMAlgoType::CSA)));
  SWIG_Python_SetConstant(d, "RMAlgoType_RG_DOP",SWIG_From_int(static_cast< int >(six::RMAlgoType::RG_DOP)));
  SWIG_Python_SetConstant(d, "RMAlgoType_NOT_SET",SWIG_From_int(static_cast< int >(six::RMAlgoType::NOT_SET)));
  SWIG_Python_SetConstant(d, "RadarModeType_SPOTLIGHT",SWIG_From_int(static_cast< int >(six::RadarModeType::SPOTLIGHT)));
  SWIG_Python_SetConstant(d, "RadarModeType_STRIPMAP",SWIG_From_int(static_cast< int >(six::RadarModeType::STRIPMAP)));
  SWIG_Python_SetConstant(d, "RadarModeType_DYNAMIC_STRIPMAP",SWIG_From_int(static_cast< int >(six::RadarModeType::DYNAMIC_STRIPMAP)));
  SWIG_Python_SetConstant(d, "RadarModeType_SCANSAR",SWIG_From_int(static_cast< int >(six::RadarModeType::SCANSAR)));
  SWIG_Python_SetConstant(d, "RadarModeType_NOT_SET",SWIG_From_int(static_cast< int >(six::RadarModeType::NOT_SET)));
  SWIG_Python_SetConstant(d, "RegionType_SUB_REGION",SWIG_From_int(static_cast< int >(six::RegionType::SUB_REGION)));
  SWIG_Python_SetConstant(d, "RegionType_GEOGRAPHIC_INFO",SWIG_From_int(static_cast< int >(six::RegionType::GEOGRAPHIC_INFO)));
  SWIG_Python_SetConstant(d, "RegionType_NOT_SET",SWIG_From_int(static_cast< int >(six::RegionType::NOT_SET)));
  SWIG_Python_SetConstant(d, "RowColEnum_ROW",SWIG_From_int(static_cast< int >(six::RowColEnum::ROW)));
  SWIG_Python_SetConstant(d, "RowColEnum_COL",SWIG_From_int(static_cast< int >(six::RowColEnum::COL)));
  SWIG_Python_SetConstant(d, "RowColEnum_NOT_SET",SWIG_From_int(static_cast< int >(six::RowColEnum::NOT_SET)));
  SWIG_Python_SetConstant(d, "SCPType_SCP_ROW_COL",SWIG_From_int(static_cast< int >(six::SCPType::SCP_ROW_COL)));
  SWIG_Python_SetConstant(d, "SCPType_SCP_RG_AZ",SWIG_From_int(static_cast< int >(six::SCPType::SCP_RG_AZ)));
  SWIG_Python_SetConstant(d, "SCPType_NOT_SET",SWIG_From_int(static_cast< int >(six::SCPType::NOT_SET)));
  SWIG_Python_SetConstant(d, "SideOfTrackType_LEFT",SWIG_From_int(static_cast< int >(six::SideOfTrackType::LEFT)));
  SWIG_Python_SetConstant(d, "SideOfTrackType_RIGHT",SWIG_From_int(static_cast< int >(six::SideOfTrackType::RIGHT)));
  SWIG_Python_SetConstant(d, "SideOfTrackType_NOT_SET",SWIG_From_int(static_cast< int >(six::SideOfTrackType::NOT_SET)));
  SWIG_Python_SetConstant(d, "SlowTimeBeamCompensationType_NO",SWIG_From_int(static_cast< int >(six::SlowTimeBeamCompensationType::NO)));
  SWIG_Python_SetConstant(d, "SlowTimeBeamCompensationType_GLOBAL",SWIG_From_int(static_cast< int >(six::SlowTimeBeamCompensationType::GLOBAL)));
  SWIG_Python_SetConstant(d, "SlowTimeBeamCompensationType_SV",SWIG_From_int(static_cast< int >(six::SlowTimeBeamCompensationType::SV)));
  SWIG_Python_SetConstant(d, "SlowTimeBeamCompensationType_NOT_SET",SWIG_From_int(static_cast< int >(six::SlowTimeBeamCompensationType::NOT_SET)));
  SWIG_Python_SetConstant(d, "XYZEnum_X",SWIG_From_int(static_cast< int >(six::XYZEnum::X)));
  SWIG_Python_SetConstant(d, "XYZEnum_Y",SWIG_From_int(static_cast< int >(six::XYZEnum::Y)));
  SWIG_Python_SetConstant(d, "XYZEnum_Z",SWIG_From_int(static_cast< int >(six::XYZEnum::Z)));
  SWIG_Python_SetConstant(d, "XYZEnum_NOT_SET",SWIG_From_int(static_cast< int >(six::XYZEnum::NOT_SET)));
  SWIG_addvarlink(SWIG_globals(),(char *)"SCHEMA_PATH",Swig_var_SCHEMA_PATH_get, Swig_var_SCHEMA_PATH_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"Constants_IS_SIZE_MAX",Swig_var_Constants_IS_SIZE_MAX_get, Swig_var_Constants_IS_SIZE_MAX_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"Constants_GT_SIZE_MAX",Swig_var_Constants_GT_SIZE_MAX_get, Swig_var_Constants_GT_SIZE_MAX_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"Constants_ILOC_MAX",Swig_var_Constants_ILOC_MAX_get, Swig_var_Constants_ILOC_MAX_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"Constants_GT_XML_KEY",Swig_var_Constants_GT_XML_KEY_get, Swig_var_Constants_GT_XML_KEY_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"Constants_GT_XML_TAG",Swig_var_Constants_GT_XML_TAG_get, Swig_var_Constants_GT_XML_TAG_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"Constants_DES_VERSION",Swig_var_Constants_DES_VERSION_get, Swig_var_Constants_DES_VERSION_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"Constants_DES_VERSION_STR",Swig_var_Constants_DES_VERSION_STR_get, Swig_var_Constants_DES_VERSION_STR_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"Constants_DES_USER_DEFINED_SUBHEADER_TAG",Swig_var_Constants_DES_USER_DEFINED_SUBHEADER_TAG_get, Swig_var_Constants_DES_USER_DEFINED_SUBHEADER_TAG_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"Constants_DES_USER_DEFINED_SUBHEADER_ID",Swig_var_Constants_DES_USER_DEFINED_SUBHEADER_ID_get, Swig_var_Constants_DES_USER_DEFINED_SUBHEADER_ID_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"Constants_DES_USER_DEFINED_SUBHEADER_LENGTH",Swig_var_Constants_DES_USER_DEFINED_SUBHEADER_LENGTH_get, Swig_var_Constants_DES_USER_DEFINED_SUBHEADER_LENGTH_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"Constants_SICD_DESSHSI",Swig_var_Constants_SICD_DESSHSI_get, Swig_var_Constants_SICD_DESSHSI_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"Constants_SIDD_DESSHSI",Swig_var_Constants_SIDD_DESSHSI_get, Swig_var_Constants_SIDD_DESSHSI_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"Constants_EXCESS_BANDWIDTH_FACTOR",Swig_var_Constants_EXCESS_BANDWIDTH_FACTOR_get, Swig_var_Constants_EXCESS_BANDWIDTH_FACTOR_set);
  SWIG_Python_SetConstant(d, "FRAME_MODE",SWIG_From_int(static_cast< int >(six::FRAME_MODE)));
  SWIG_Python_SetConstant(d, "SCAN_MODE",SWIG_From_int(static_cast< int >(six::SCAN_MODE)));
  SWIG_Python_SetConstant(d, "CompositeSCP_ROW_COL",SWIG_From_int(static_cast< int >(six::CompositeSCP::ROW_COL)));
  SWIG_Python_SetConstant(d, "CompositeSCP_RG_AZ",SWIG_From_int(static_cast< int >(six::CompositeSCP::RG_AZ)));
  SWIG_addvarlink(SWIG_globals(),(char *)"Radiometric_NL_ABSOLUTE",Swig_var_Radiometric_NL_ABSOLUTE_get, Swig_var_Radiometric_NL_ABSOLUTE_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"Radiometric_NL_RELATIVE",Swig_var_Radiometric_NL_RELATIVE_get, Swig_var_Radiometric_NL_RELATIVE_set);
  SWIG_Python_SetConstant(d, "LatLonCorners_NUM_CORNERS",SWIG_From_size_t(static_cast< size_t >(six::Corners< scene::LatLon >::NUM_CORNERS)));
  SWIG_Python_SetConstant(d, "LatLonCorners_UPPER_LEFT",SWIG_From_size_t(static_cast< size_t >(six::Corners< scene::LatLon >::UPPER_LEFT)));
  SWIG_Python_SetConstant(d, "LatLonCorners_FIRST_ROW_FIRST_COL",SWIG_From_size_t(static_cast< size_t >(six::Corners< scene::LatLon >::FIRST_ROW_FIRST_COL)));
  SWIG_Python_SetConstant(d, "LatLonCorners_UPPER_RIGHT",SWIG_From_size_t(static_cast< size_t >(six::Corners< scene::LatLon >::UPPER_RIGHT)));
  SWIG_Python_SetConstant(d, "LatLonCorners_FIRST_ROW_LAST_COL",SWIG_From_size_t(static_cast< size_t >(six::Corners< scene::LatLon >::FIRST_ROW_LAST_COL)));
  SWIG_Python_SetConstant(d, "LatLonCorners_LOWER_RIGHT",SWIG_From_size_t(static_cast< size_t >(six::Corners< scene::LatLon >::LOWER_RIGHT)));
  SWIG_Python_SetConstant(d, "LatLonCorners_LAST_ROW_LAST_COL",SWIG_From_size_t(static_cast< size_t >(six::Corners< scene::LatLon >::LAST_ROW_LAST_COL)));
  SWIG_Python_SetConstant(d, "LatLonCorners_LOWER_LEFT",SWIG_From_size_t(static_cast< size_t >(six::Corners< scene::LatLon >::LOWER_LEFT)));
  SWIG_Python_SetConstant(d, "LatLonCorners_LAST_ROW_FIRST_COL",SWIG_From_size_t(static_cast< size_t >(six::Corners< scene::LatLon >::LAST_ROW_FIRST_COL)));
  SWIG_Python_SetConstant(d, "LatLonAltCorners_NUM_CORNERS",SWIG_From_size_t(static_cast< size_t >(six::Corners< scene::LatLonAlt >::NUM_CORNERS)));
  SWIG_Python_SetConstant(d, "LatLonAltCorners_UPPER_LEFT",SWIG_From_size_t(static_cast< size_t >(six::Corners< scene::LatLonAlt >::UPPER_LEFT)));
  SWIG_Python_SetConstant(d, "LatLonAltCorners_FIRST_ROW_FIRST_COL",SWIG_From_size_t(static_cast< size_t >(six::Corners< scene::LatLonAlt >::FIRST_ROW_FIRST_COL)));
  SWIG_Python_SetConstant(d, "LatLonAltCorners_UPPER_RIGHT",SWIG_From_size_t(static_cast< size_t >(six::Corners< scene::LatLonAlt >::UPPER_RIGHT)));
  SWIG_Python_SetConstant(d, "LatLonAltCorners_FIRST_ROW_LAST_COL",SWIG_From_size_t(static_cast< size_t >(six::Corners< scene::LatLonAlt >::FIRST_ROW_LAST_COL)));
  SWIG_Python_SetConstant(d, "LatLonAltCorners_LOWER_RIGHT",SWIG_From_size_t(static_cast< size_t >(six::Corners< scene::LatLonAlt >::LOWER_RIGHT)));
  SWIG_Python_SetConstant(d, "LatLonAltCorners_LAST_ROW_LAST_COL",SWIG_From_size_t(static_cast< size_t >(six::Corners< scene::LatLonAlt >::LAST_ROW_LAST_COL)));
  SWIG_Python_SetConstant(d, "LatLonAltCorners_LOWER_LEFT",SWIG_From_size_t(static_cast< size_t >(six::Corners< scene::LatLonAlt >::LOWER_LEFT)));
  SWIG_Python_SetConstant(d, "LatLonAltCorners_LAST_ROW_FIRST_COL",SWIG_From_size_t(static_cast< size_t >(six::Corners< scene::LatLonAlt >::LAST_ROW_FIRST_COL)));
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

