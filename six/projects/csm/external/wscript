import sys, os, shutil, re
from waflib import Options, Logs

def options(opt):
    opt.add_option('--disable-csm', action='store_false', dest='enable_csm', default=True,
                   help='turn off CSM support')

def configure(conf):
    if Options.options.enable_csm:
        winRegex = r'win32'
        osxRegex = r'darwin'
        # If we are building with gcc on Windows, some of the CSM stuff
        # doesn't compile.  No one is going to ever need to build CSM
        # plugins in this paradigm as MSP and GXP won't be able to use
        # them anyhow
        # The CSM build doesn't work on Mac... again, no one will need to build
        # plugins there though
        if re.match(osxRegex,sys.platform) or (re.match(winRegex, sys.platform) and 'MSVC_VERSION' not in conf.env):
            Logs.warn('Disabling CSM as it is not supported on this platform')
        else:
            # NOTE: This was downloaded from
            # https://github.com/sminster/csm/releases/tag/v3.0.3.3 2019.09.23.
            #if Options.options.csm_version == '3.0.3.3':
            #    csmZipfile = 'csm-3.0.3.3_2019.09.23.zip'
            #else:
            #    csmZipfile = 'csm-3.0.1_2013.07.03.zip'

            # NOTE: Originally checked in the VTS zip file that was received from
            #       Leonard Tomko that corresponded to CSM 3.0.1.  However, this
            #       did not compile against the "latest" 3.0.1 from GitHub so
            #       needed to make a few local mods to vts.cpp.  Since I was
            #       re-zipping anyway, trimmed this down to just the header and
            #       source files that were needed
            conf.env['HAVE_CSM'] = True

            if Options.options.csm_version == '3.0.3.3':
                conf.env['INCLUDES_CSM'] = os.path.join(conf.path.abspath(), 'csm-3.0.3.3')
                conf.env['CSM_DIR'] = 'csm-3.0.3.3'
            else:
                conf.env['INCLUDES_CSM'] = os.path.join(conf.path.abspath(), 'csm-master')
                conf.env['CSM_DIR'] = 'csm-master'

def build(bld):
    if 'HAVE_CSM' in bld.env:
        csmDir = bld.env['CSM_DIR']
        bld(features = 'cxx cshlib',
            target='CSMAPI', name='CSMAPI',
            includes='.',
            export_includes='.',
            source=bld.path.find_dir(csmDir).ant_glob('*.cpp'),
            path=bld.path.find_dir(csmDir),
            install_path=bld.env['install_libdir'])

        # NOTE: With this approach, our vts binary will be dependent on the
        #       CSMAPI shared library.  If we wanted to eliminate the
        #       dependency, we could recompile in the CSM source code that we
        #       need to use.
        vtsDir = 'vts_301_0'
        six_root = '../../../../../..'
        install = six_root + '/install'
        coda_oss = six_root + '/externals/coda-oss/modules/c++'
        bld.program(target='vts', name='vts',
                    includes=['include',
                        install + '/include',
                        coda_oss + '/sys/include', coda_oss + '/str/include', coda_oss + '/except/include'],
                    source=bld.path.find_dir(os.path.join(vtsDir, 'source')).ant_glob('*.cpp'),
                    use='sys-c++ CSMAPI THREAD DL',
                    path=bld.path.find_dir(vtsDir),
                    install_path=bld.env['install_bindir'])

def distclean(context):
    # remove the unzipped directory
    dirs = filter(lambda x: os.path.exists(os.path.join(context.path.abspath(), x)),
                  ['csm-master'])
    for d in dirs:
        try:
            shutil.rmtree(os.path.join(context.path.abspath(), d), ignore_errors=True)
        except:{}
