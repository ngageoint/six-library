from os.path import join, basename
import os
from waflib import Utils
from build import swigCopyGeneratedSources
distclean = options = configure = lambda p: None

def build(bld):
    variant = bld.env['VARIANT'] or 'default'
    env = bld.all_envs[variant]
    # For some reason this doesn't always happen otherwise..
    bld.env['PYTHONDIR'] = env['PYTHONDIR']

    # first compile a few py files
    obj = bld(features = 'py',
              target = '_nitropy_py',
              env=env.derive(),
              install_path='${PYTHONDIR}/nitf',
              source=bld.path.make_node('source').ant_glob('**/*.py'))

    bld(features='add_targets', targets_to_add='py_test_utils')

    # then a c extension module
    if 'SWIG' in env and env['SWIG']:
        # TODO: Update build.py's swigModule() to handle compiling C modules
        #       'features' and 'swig_flags' will be different
        tsk = bld(
            features = 'cxx cshlib pyext add_targets',
            source = 'source/nitro.i',
            target = '_nitropy',
            use='numpyutils-c++ nitf-c++',
            env=env.derive(),
            # -py3 is needed for bindings with arg annotations
            swig_flags='-c++ -python -py3',
            install_path='${PYTHONDIR}/nitf',
            name='nitf-python',
            targets_to_add='_nitropy_py',
            swig_install_fun=swigCopyGeneratedSources)

    else:
        bld(
            features = 'cxx cshlib pyext add_targets',
            source = 'source/generated/nitropy_wrap.cxx',
            target = '_nitropy',
            use='numpyutils-c++ nitf-c++',
            env=env.derive(),
            targets_to_add='_nitropy_py',
            install_path='${PYTHONDIR}/nitf')

