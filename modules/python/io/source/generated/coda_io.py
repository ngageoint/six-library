# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_coda_io')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_coda_io')
    _coda_io = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_coda_io', [dirname(__file__)])
        except ImportError:
            import _coda_io
            return _coda_io
        try:
            _mod = imp.load_module('_coda_io', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _coda_io = swig_import_helper()
    del swig_import_helper
else:
    import _coda_io
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class InputStream(_object):
    """Proxy of C++ io::InputStream class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputStream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InputStream, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    IS_EOF = _coda_io.InputStream_IS_EOF
    IS_END = _coda_io.InputStream_IS_END
    DEFAULT_CHUNK_SIZE = _coda_io.InputStream_DEFAULT_CHUNK_SIZE
    __swig_destroy__ = _coda_io.delete_InputStream
    __del__ = lambda self: None

    def available(self) -> "sys::Off_T":
        """available(InputStream self) -> sys::Off_T"""
        return _coda_io.InputStream_available(self)


    def read(self, buffer: 'void *', len: 'size_t', verifyFullRead: 'bool'=False) -> "sys::SSize_T":
        """
        read(InputStream self, void * buffer, size_t len, bool verifyFullRead=False) -> sys::SSize_T
        read(InputStream self, void * buffer, size_t len) -> sys::SSize_T
        """
        return _coda_io.InputStream_read(self, buffer, len, verifyFullRead)


    def readln(self, cStr: 'sys::byte *', strLenPlusNullByte: 'sys::Size_T const') -> "sys::SSize_T":
        """readln(InputStream self, sys::byte * cStr, sys::Size_T const strLenPlusNullByte) -> sys::SSize_T"""
        return _coda_io.InputStream_readln(self, cStr, strLenPlusNullByte)


    def streamTo(self, *args) -> "sys::SSize_T":
        """
        streamTo(InputStream self, OutputStream & soi, sys::SSize_T numBytes) -> sys::SSize_T
        streamTo(InputStream self, OutputStream & soi) -> sys::SSize_T
        """
        return _coda_io.InputStream_streamTo(self, *args)

InputStream_swigregister = _coda_io.InputStream_swigregister
InputStream_swigregister(InputStream)

class OutputStream(_object):
    """Proxy of C++ io::OutputStream class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutputStream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OutputStream, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _coda_io.delete_OutputStream
    __del__ = lambda self: None

    def writeln(self, *args) -> "void":
        """
        writeln(OutputStream self, std::string const & str)
        writeln(OutputStream self, coda_oss::u8string const & str)
        """
        return _coda_io.OutputStream_writeln(self, *args)


    def write(self, *args) -> "void":
        """
        write(OutputStream self, sys::byte b)
        write(OutputStream self, coda_oss::byte b)
        write(OutputStream self, std::string const & str)
        write(OutputStream self, coda_oss::u8string const & str)
        write(OutputStream self, void const * buffer, size_t len)
        """
        return _coda_io.OutputStream_write(self, *args)


    def flush(self) -> "void":
        """flush(OutputStream self)"""
        return _coda_io.OutputStream_flush(self)


    def close(self) -> "void":
        """close(OutputStream self)"""
        return _coda_io.OutputStream_close(self)

OutputStream_swigregister = _coda_io.OutputStream_swigregister
OutputStream_swigregister(OutputStream)

class BidirectionalStream(InputStream, OutputStream):
    """Proxy of C++ io::BidirectionalStream class."""

    __swig_setmethods__ = {}
    for _s in [InputStream, OutputStream]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BidirectionalStream, name, value)
    __swig_getmethods__ = {}
    for _s in [InputStream, OutputStream]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BidirectionalStream, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _coda_io.delete_BidirectionalStream
    __del__ = lambda self: None
BidirectionalStream_swigregister = _coda_io.BidirectionalStream_swigregister
BidirectionalStream_swigregister(BidirectionalStream)

class Seekable(_object):
    """Proxy of C++ io::Seekable class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Seekable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Seekable, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _coda_io.delete_Seekable
    __del__ = lambda self: None
    Whence_CURRENT = _coda_io.Seekable_Whence_CURRENT
    Whence_START = _coda_io.Seekable_Whence_START
    Whence_END = _coda_io.Seekable_Whence_END
    CURRENT = _coda_io.Seekable_CURRENT
    START = _coda_io.Seekable_START
    END = _coda_io.Seekable_END

    def seek(self, offset: 'sys::Off_T', whence: 'io::Seekable::Whence') -> "sys::Off_T":
        """seek(Seekable self, sys::Off_T offset, io::Seekable::Whence whence) -> sys::Off_T"""
        return _coda_io.Seekable_seek(self, offset, whence)


    def tell(self) -> "sys::Off_T":
        """tell(Seekable self) -> sys::Off_T"""
        return _coda_io.Seekable_tell(self)

Seekable_swigregister = _coda_io.Seekable_swigregister
Seekable_swigregister(Seekable)

class SeekableInputStream(InputStream, Seekable):
    """Proxy of C++ io::SeekableInputStream class."""

    __swig_setmethods__ = {}
    for _s in [InputStream, Seekable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SeekableInputStream, name, value)
    __swig_getmethods__ = {}
    for _s in [InputStream, Seekable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SeekableInputStream, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _coda_io.delete_SeekableInputStream
    __del__ = lambda self: None

    def streamTo(self, *args) -> "sys::SSize_T":
        """
        streamTo(SeekableInputStream self, OutputStream & soi, sys::SSize_T numBytes) -> sys::SSize_T
        streamTo(SeekableInputStream self, OutputStream & soi) -> sys::SSize_T
        """
        return _coda_io.SeekableInputStream_streamTo(self, *args)

SeekableInputStream_swigregister = _coda_io.SeekableInputStream_swigregister
SeekableInputStream_swigregister(SeekableInputStream)

class SeekableOutputStream(OutputStream, Seekable):
    """Proxy of C++ io::SeekableOutputStream class."""

    __swig_setmethods__ = {}
    for _s in [OutputStream, Seekable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SeekableOutputStream, name, value)
    __swig_getmethods__ = {}
    for _s in [OutputStream, Seekable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SeekableOutputStream, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _coda_io.delete_SeekableOutputStream
    __del__ = lambda self: None
SeekableOutputStream_swigregister = _coda_io.SeekableOutputStream_swigregister
SeekableOutputStream_swigregister(SeekableOutputStream)

class SeekableBidirectionalStream(BidirectionalStream, Seekable):
    """Proxy of C++ io::SeekableBidirectionalStream class."""

    __swig_setmethods__ = {}
    for _s in [BidirectionalStream, Seekable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SeekableBidirectionalStream, name, value)
    __swig_getmethods__ = {}
    for _s in [BidirectionalStream, Seekable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SeekableBidirectionalStream, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _coda_io.delete_SeekableBidirectionalStream
    __del__ = lambda self: None

    def streamTo(self, *args) -> "sys::SSize_T":
        """
        streamTo(SeekableBidirectionalStream self, OutputStream & soi, sys::SSize_T numBytes) -> sys::SSize_T
        streamTo(SeekableBidirectionalStream self, OutputStream & soi) -> sys::SSize_T
        """
        return _coda_io.SeekableBidirectionalStream_streamTo(self, *args)

SeekableBidirectionalStream_swigregister = _coda_io.SeekableBidirectionalStream_swigregister
SeekableBidirectionalStream_swigregister(SeekableBidirectionalStream)

class NullInputStream(InputStream):
    """Proxy of C++ io::NullInputStream class."""

    __swig_setmethods__ = {}
    for _s in [InputStream]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NullInputStream, name, value)
    __swig_getmethods__ = {}
    for _s in [InputStream]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NullInputStream, name)
    __repr__ = _swig_repr

    def __init__(self, size: 'sys::SSize_T'):
        """__init__(io::NullInputStream self, sys::SSize_T size) -> NullInputStream"""
        this = _coda_io.new_NullInputStream(size)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def available(self) -> "sys::Off_T":
        """available(NullInputStream self) -> sys::Off_T"""
        return _coda_io.NullInputStream_available(self)


    def readln(self, cStr: 'sys::byte *', strLenPlusNullByte: 'sys::Size_T const') -> "sys::SSize_T":
        """readln(NullInputStream self, sys::byte * cStr, sys::Size_T const strLenPlusNullByte) -> sys::SSize_T"""
        return _coda_io.NullInputStream_readln(self, cStr, strLenPlusNullByte)


    def streamTo(self, *args) -> "sys::SSize_T":
        """
        streamTo(NullInputStream self, OutputStream soi, sys::SSize_T numBytes) -> sys::SSize_T
        streamTo(NullInputStream self, OutputStream soi) -> sys::SSize_T
        """
        return _coda_io.NullInputStream_streamTo(self, *args)

    __swig_destroy__ = _coda_io.delete_NullInputStream
    __del__ = lambda self: None
NullInputStream_swigregister = _coda_io.NullInputStream_swigregister
NullInputStream_swigregister(NullInputStream)

class NullOutputStream(OutputStream):
    """Proxy of C++ io::NullOutputStream class."""

    __swig_setmethods__ = {}
    for _s in [OutputStream]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NullOutputStream, name, value)
    __swig_getmethods__ = {}
    for _s in [OutputStream]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NullOutputStream, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(io::NullOutputStream self) -> NullOutputStream"""
        this = _coda_io.new_NullOutputStream()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def writeln(self, arg2: 'std::string const &') -> "void":
        """writeln(NullOutputStream self, std::string const & arg2)"""
        return _coda_io.NullOutputStream_writeln(self, arg2)


    def write(self, *args) -> "void":
        """
        write(NullOutputStream self, sys::byte arg2)
        write(NullOutputStream self, std::string const & arg2)
        write(NullOutputStream self, void const * arg2, size_t arg3)
        """
        return _coda_io.NullOutputStream_write(self, *args)


    def flush(self) -> "void":
        """flush(NullOutputStream self)"""
        return _coda_io.NullOutputStream_flush(self)

    __swig_destroy__ = _coda_io.delete_NullOutputStream
    __del__ = lambda self: None
NullOutputStream_swigregister = _coda_io.NullOutputStream_swigregister
NullOutputStream_swigregister(NullOutputStream)

class SeekableNullOutputStream(SeekableOutputStream):
    """Proxy of C++ io::SeekableNullOutputStream class."""

    __swig_setmethods__ = {}
    for _s in [SeekableOutputStream]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SeekableNullOutputStream, name, value)
    __swig_getmethods__ = {}
    for _s in [SeekableOutputStream]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SeekableNullOutputStream, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(io::SeekableNullOutputStream self) -> SeekableNullOutputStream"""
        this = _coda_io.new_SeekableNullOutputStream()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def write(self, arg2: 'void const *', numBytes: 'size_t') -> "void":
        """write(SeekableNullOutputStream self, void const * arg2, size_t numBytes)"""
        return _coda_io.SeekableNullOutputStream_write(self, arg2, numBytes)


    def flush(self) -> "void":
        """flush(SeekableNullOutputStream self)"""
        return _coda_io.SeekableNullOutputStream_flush(self)


    def seek(self, offset: 'sys::Off_T', whence: 'io::Seekable::Whence') -> "sys::Off_T":
        """seek(SeekableNullOutputStream self, sys::Off_T offset, io::Seekable::Whence whence) -> sys::Off_T"""
        return _coda_io.SeekableNullOutputStream_seek(self, offset, whence)


    def tell(self) -> "sys::Off_T":
        """tell(SeekableNullOutputStream self) -> sys::Off_T"""
        return _coda_io.SeekableNullOutputStream_tell(self)

    __swig_destroy__ = _coda_io.delete_SeekableNullOutputStream
    __del__ = lambda self: None
SeekableNullOutputStream_swigregister = _coda_io.SeekableNullOutputStream_swigregister
SeekableNullOutputStream_swigregister(SeekableNullOutputStream)

class FileInputStream(SeekableInputStream):
    """Proxy of C++ io::FileInputStreamOS class."""

    __swig_setmethods__ = {}
    for _s in [SeekableInputStream]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileInputStream, name, value)
    __swig_getmethods__ = {}
    for _s in [SeekableInputStream]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileInputStream, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        FileInputStreamOS() -> FileInputStream
        FileInputStreamOS(std::string const & inputFile) -> FileInputStream
        FileInputStreamOS(coda_oss::filesystem::path const & inputFile) -> FileInputStream
        FileInputStreamOS(char const * inputFile) -> FileInputStream
        __init__(io::FileInputStreamOS self, sys::File const & inputFile) -> FileInputStream
        """
        this = _coda_io.new_FileInputStream(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coda_io.delete_FileInputStream
    __del__ = lambda self: None

    def available(self) -> "sys::Off_T":
        """available(FileInputStream self) -> sys::Off_T"""
        return _coda_io.FileInputStream_available(self)


    def isOpen(self) -> "bool":
        """isOpen(FileInputStream self) -> bool"""
        return _coda_io.FileInputStream_isOpen(self)


    def create(self, str: 'std::string const &') -> "void":
        """create(FileInputStream self, std::string const & str)"""
        return _coda_io.FileInputStream_create(self, str)


    def seek(self, off: 'sys::Off_T', whence: 'io::Seekable::Whence') -> "sys::Off_T":
        """seek(FileInputStream self, sys::Off_T off, io::Seekable::Whence whence) -> sys::Off_T"""
        return _coda_io.FileInputStream_seek(self, off, whence)


    def tell(self) -> "sys::Off_T":
        """tell(FileInputStream self) -> sys::Off_T"""
        return _coda_io.FileInputStream_tell(self)


    def close(self) -> "void":
        """close(FileInputStream self)"""
        return _coda_io.FileInputStream_close(self)

FileInputStream_swigregister = _coda_io.FileInputStream_swigregister
FileInputStream_swigregister(FileInputStream)

class FileOutputStream(SeekableOutputStream):
    """Proxy of C++ io::FileOutputStreamOS class."""

    __swig_setmethods__ = {}
    for _s in [SeekableOutputStream]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileOutputStream, name, value)
    __swig_getmethods__ = {}
    for _s in [SeekableOutputStream]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileOutputStream, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        FileOutputStreamOS() -> FileOutputStream
        FileOutputStreamOS(io::FileOutputStreamOS::path const & outputFile, int creationFlags) -> FileOutputStream
        __init__(io::FileOutputStreamOS self, io::FileOutputStreamOS::path const & outputFile) -> FileOutputStream
        """
        this = _coda_io.new_FileOutputStream(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coda_io.delete_FileOutputStream
    __del__ = lambda self: None

    def isOpen(self) -> "bool":
        """isOpen(FileOutputStream self) -> bool"""
        return _coda_io.FileOutputStream_isOpen(self)


    def create(self, *args) -> "void":
        """
        create(FileOutputStream self, io::FileOutputStreamOS::path const & str, int creationFlags)
        create(FileOutputStream self, io::FileOutputStreamOS::path const & str)
        """
        return _coda_io.FileOutputStream_create(self, *args)


    def close(self) -> "void":
        """close(FileOutputStream self)"""
        return _coda_io.FileOutputStream_close(self)


    def flush(self) -> "void":
        """flush(FileOutputStream self)"""
        return _coda_io.FileOutputStream_flush(self)


    def seek(self, offset: 'sys::Off_T', whence: 'io::Seekable::Whence') -> "sys::Off_T":
        """seek(FileOutputStream self, sys::Off_T offset, io::Seekable::Whence whence) -> sys::Off_T"""
        return _coda_io.FileOutputStream_seek(self, offset, whence)


    def tell(self) -> "sys::Off_T":
        """tell(FileOutputStream self) -> sys::Off_T"""
        return _coda_io.FileOutputStream_tell(self)


    def write(self, *args) -> "void":
        """
        write(FileOutputStream self)
        write(FileOutputStream self, void const * buffer, size_t len)
        """
        return _coda_io.FileOutputStream_write(self, *args)

FileOutputStream_swigregister = _coda_io.FileOutputStream_swigregister
FileOutputStream_swigregister(FileOutputStream)

# This file is compatible with both classic and new-style classes.


