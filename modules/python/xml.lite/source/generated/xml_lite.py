# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_xml_lite')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_xml_lite')
    _xml_lite = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_xml_lite', [dirname(__file__)])
        except ImportError:
            import _xml_lite
            return _xml_lite
        try:
            _mod = imp.load_module('_xml_lite', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _xml_lite = swig_import_helper()
    del swig_import_helper
else:
    import _xml_lite
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class Element(_object):
    """Proxy of C++ xml::lite::Element class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Element, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Element, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _xml_lite.delete_Element
    __del__ = lambda self: None

    def destroyChildren(self) -> "void":
        """destroyChildren(Element self)"""
        return _xml_lite.Element_destroyChildren(self)


    def __init__(self, *args):
        """
        __init__(xml::lite::Element self) -> Element
        __init__(xml::lite::Element self, std::string const & qname, std::string const & uri, std::string const & characterData) -> Element
        __init__(xml::lite::Element self, std::string const & qname, std::string const & uri) -> Element
        __init__(xml::lite::Element self, std::string const & qname) -> Element
        __init__(xml::lite::Element self, xml::lite::QName const & qname, coda_oss::u8string const & characterData) -> Element
        __init__(xml::lite::Element self, Element arg2) -> Element
        __init__(xml::lite::Element self, Element arg2) -> Element
        """
        this = _xml_lite.new_Element(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self, element: 'Element') -> "void":
        """clone(Element self, Element element)"""
        return _xml_lite.Element_clone(self, element)


    def attribute(self, s: 'std::string const &') -> "std::string &":
        """attribute(Element self, std::string const & s) -> std::string &"""
        return _xml_lite.Element_attribute(self, s)


    def getElementByTagNameNS(self, *args) -> "xml::lite::Element &":
        """
        getElementByTagNameNS(Element self, std::nothrow_t arg2, std::string const & qname, bool recurse=False) -> Element
        getElementByTagNameNS(Element self, std::nothrow_t arg2, std::string const & qname) -> Element
        getElementByTagNameNS(Element self, std::string const & qname, bool recurse=False) -> Element
        getElementByTagNameNS(Element self, std::string const & qname) -> Element
        """
        return _xml_lite.Element_getElementByTagNameNS(self, *args)


    def getElementsByTagNameNS(self, *args) -> "std::vector< xml::lite::Element * >":
        """
        getElementsByTagNameNS(Element self, std::string const & qname, std::vector< xml::lite::Element * > & elements, bool recurse=False)
        getElementsByTagNameNS(Element self, std::string const & qname, std::vector< xml::lite::Element * > & elements)
        getElementsByTagNameNS(Element self, std::string const & qname, bool recurse=False) -> std::vector< xml::lite::Element * >
        getElementsByTagNameNS(Element self, std::string const & qname) -> std::vector< xml::lite::Element * >
        """
        return _xml_lite.Element_getElementsByTagNameNS(self, *args)


    def getElementByTagName(self, *args) -> "xml::lite::Element &":
        """
        getElementByTagName(Element self, std::nothrow_t arg2, std::string const & localName, bool recurse=False) -> Element
        getElementByTagName(Element self, std::nothrow_t arg2, std::string const & localName) -> Element
        getElementByTagName(Element self, std::string const & localName, bool recurse=False) -> Element
        getElementByTagName(Element self, std::string const & localName) -> Element
        getElementByTagName(Element self, std::nothrow_t arg2, xml::lite::QName const & arg3, bool recurse=False) -> Element
        getElementByTagName(Element self, std::nothrow_t arg2, xml::lite::QName const & arg3) -> Element
        getElementByTagName(Element self, std::nothrow_t t, std::string const & uri, std::string const & localName, bool recurse=False) -> Element
        getElementByTagName(Element self, std::nothrow_t t, std::string const & uri, std::string const & localName) -> Element
        getElementByTagName(Element self, xml::lite::QName const & arg2, bool recurse=False) -> Element
        getElementByTagName(Element self, xml::lite::QName const & arg2) -> Element
        getElementByTagName(Element self, std::string const & uri, std::string const & localName, bool recurse=False) -> Element
        getElementByTagName(Element self, std::string const & uri, std::string const & localName) -> Element
        """
        return _xml_lite.Element_getElementByTagName(self, *args)


    def getElementsByTagName(self, *args) -> "std::vector< xml::lite::Element * >":
        """
        getElementsByTagName(Element self, std::string const & localName, std::vector< xml::lite::Element * > & elements, bool recurse=False)
        getElementsByTagName(Element self, std::string const & localName, std::vector< xml::lite::Element * > & elements)
        getElementsByTagName(Element self, std::string const & localName, bool recurse=False) -> std::vector< xml::lite::Element * >
        getElementsByTagName(Element self, std::string const & localName) -> std::vector< xml::lite::Element * >
        getElementsByTagName(Element self, xml::lite::QName const & name, std::vector< xml::lite::Element * > & elements, bool recurse=False)
        getElementsByTagName(Element self, xml::lite::QName const & name, std::vector< xml::lite::Element * > & elements)
        getElementsByTagName(Element self, std::string const & uri, std::string const & localName, std::vector< xml::lite::Element * > & elements, bool recurse=False)
        getElementsByTagName(Element self, std::string const & uri, std::string const & localName, std::vector< xml::lite::Element * > & elements)
        getElementsByTagName(Element self, xml::lite::QName const & name, bool recurse=False) -> std::vector< xml::lite::Element * >
        getElementsByTagName(Element self, xml::lite::QName const & name) -> std::vector< xml::lite::Element * >
        getElementsByTagName(Element self, std::string const & uri, std::string const & localName, bool recurse=False) -> std::vector< xml::lite::Element * >
        getElementsByTagName(Element self, std::string const & uri, std::string const & localName) -> std::vector< xml::lite::Element * >
        """
        return _xml_lite.Element_getElementsByTagName(self, *args)


    def setNamespacePrefix(self, *args) -> "void":
        """
        setNamespacePrefix(Element self, std::string prefix, xml::lite::Uri const & arg3)
        setNamespacePrefix(Element self, std::string prefix, std::string uri)
        """
        return _xml_lite.Element_setNamespacePrefix(self, *args)


    def setNamespaceURI(self, *args) -> "void":
        """
        setNamespaceURI(Element self, std::string prefix, xml::lite::Uri const & arg3)
        setNamespaceURI(Element self, std::string prefix, std::string uri)
        """
        return _xml_lite.Element_setNamespaceURI(self, *args)


    def _print(self, stream: 'io::OutputStream &') -> "void":
        """_print(Element self, io::OutputStream & stream)"""
        return _xml_lite.Element__print(self, stream)


    def prettyPrint(self, *args) -> "void":
        """
        prettyPrint(Element self, io::OutputStream & stream, std::string const & formatter)
        prettyPrint(Element self, io::OutputStream & stream)
        """
        return _xml_lite.Element_prettyPrint(self, *args)


    def consoleOutput_(self, stream: 'io::OutputStream &') -> "void":
        """consoleOutput_(Element self, io::OutputStream & stream)"""
        return _xml_lite.Element_consoleOutput_(self, stream)


    def prettyConsoleOutput_(self, *args) -> "void":
        """
        prettyConsoleOutput_(Element self, io::OutputStream & stream, std::string const & formatter)
        prettyConsoleOutput_(Element self, io::OutputStream & stream)
        """
        return _xml_lite.Element_prettyConsoleOutput_(self, *args)


    def hasElement(self, *args) -> "bool":
        """
        hasElement(Element self, std::string const & localName) -> bool
        hasElement(Element self, xml::lite::QName const & arg2) -> bool
        hasElement(Element self, std::string const & uri, std::string const & localName) -> bool
        """
        return _xml_lite.Element_hasElement(self, *args)


    def getCharacterData(self, *args) -> "coda_oss::u8string &":
        """
        getCharacterData(Element self) -> std::string
        getCharacterData(Element self, coda_oss::u8string & result) -> coda_oss::u8string &
        """
        return _xml_lite.Element_getCharacterData(self, *args)


    def setCharacterData(self, *args) -> "void":
        """
        setCharacterData(Element self, std::string const & arg2)
        setCharacterData(Element self, coda_oss::u8string s)
        """
        return _xml_lite.Element_setCharacterData(self, *args)


    def setLocalName(self, localName: 'std::string const &') -> "void":
        """setLocalName(Element self, std::string const & localName)"""
        return _xml_lite.Element_setLocalName(self, localName)


    def getLocalName(self) -> "std::string":
        """getLocalName(Element self) -> std::string"""
        return _xml_lite.Element_getLocalName(self)


    def setQName(self, *args) -> "void":
        """
        setQName(Element self, std::string const & qname)
        setQName(Element self, xml::lite::QName const & qname)
        """
        return _xml_lite.Element_setQName(self, *args)


    def getQName(self, *args) -> "void":
        """
        getQName(Element self) -> std::string
        getQName(Element self, xml::lite::QName & result)
        """
        return _xml_lite.Element_getQName(self, *args)


    def setUri(self, *args) -> "void":
        """
        setUri(Element self, xml::lite::Uri const & uri)
        setUri(Element self, std::string const & uri)
        """
        return _xml_lite.Element_setUri(self, *args)


    def getUri(self, *args) -> "void":
        """
        getUri(Element self) -> std::string
        getUri(Element self, xml::lite::Uri & result)
        """
        return _xml_lite.Element_getUri(self, *args)


    def setPrefix(self, prefix: 'std::string const &') -> "void":
        """setPrefix(Element self, std::string const & prefix)"""
        return _xml_lite.Element_setPrefix(self, prefix)


    def getChildren(self, *args) -> "std::vector< xml::lite::Element * > const &":
        """
        getChildren(Element self) -> std::vector< xml::lite::Element * >
        getChildren(Element self) -> std::vector< xml::lite::Element * > const &
        """
        return _xml_lite.Element_getChildren(self, *args)


    def clearChildren(self) -> "void":
        """clearChildren(Element self)"""
        return _xml_lite.Element_clearChildren(self)


    def getParent(self) -> "xml::lite::Element *":
        """getParent(Element self) -> Element"""
        return _xml_lite.Element_getParent(self)


    def setParent(self, parent: 'Element') -> "void":
        """setParent(Element self, Element parent)"""
        return _xml_lite.Element_setParent(self, parent)

Element_swigregister = _xml_lite.Element_swigregister
Element_swigregister(Element)


def add(arg1: 'xml::lite::QName const &', value: 'std::string const &', parent: 'Element') -> "xml::lite::Element &":
    """add(xml::lite::QName const & arg1, std::string const & value, Element parent) -> Element"""
    return _xml_lite.add(arg1, value, parent)
class Document(_object):
    """Proxy of C++ xml::lite::Document class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Document, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Document, name)
    __repr__ = _swig_repr

    def __init__(self, rootNode: 'Element'=None, own: 'bool'=True):
        """
        __init__(xml::lite::Document self, Element rootNode=None, bool own=True) -> Document
        __init__(xml::lite::Document self, Element rootNode=None) -> Document
        __init__(xml::lite::Document self) -> Document
        """
        this = _xml_lite.new_Document(rootNode, own)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xml_lite.delete_Document
    __del__ = lambda self: None

    def createElement(self, *args) -> "xml::lite::Element *":
        """
        createElement(Document self, std::string const & qname, std::string const & uri, std::string characterData) -> Element
        createElement(Document self, std::string const & qname, std::string const & uri) -> Element
        """
        return _xml_lite.Document_createElement(self, *args)


    def destroy(self) -> "void":
        """destroy(Document self)"""
        return _xml_lite.Document_destroy(self)


    def insert(self, element: 'Element', underThis: 'Element') -> "void":
        """insert(Document self, Element element, Element underThis)"""
        return _xml_lite.Document_insert(self, element, underThis)


    def remove(self, *args) -> "void":
        """
        remove(Document self, Element toDelete)
        remove(Document self, Element toDelete, Element fromHere)
        """
        return _xml_lite.Document_remove(self, *args)


    def setRootElement(self, element: 'Element', own: 'bool'=True) -> "void":
        """
        setRootElement(Document self, Element element, bool own=True)
        setRootElement(Document self, Element element)
        """
        return _xml_lite.Document_setRootElement(self, element, own)


    def getRootElement(self, *args) -> "xml::lite::Element *":
        """
        getRootElement(Document self, bool steal=False) -> Element
        getRootElement(Document self) -> Element
        getRootElement(Document self) -> Element
        """
        return _xml_lite.Document_getRootElement(self, *args)

Document_swigregister = _xml_lite.Document_swigregister
Document_swigregister(Document)


def getRootElement(*args) -> "xml::lite::Element const &":
    """
    getRootElement(Document doc) -> Element
    getRootElement(Document doc) -> Element
    getRootElement(Document pDoc) -> Element
    getRootElement(Document pDoc) -> Element
    """
    return _xml_lite.getRootElement(*args)
class MinidomParser(_object):
    """Proxy of C++ xml::lite::MinidomParser class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MinidomParser, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MinidomParser, name)
    __repr__ = _swig_repr

    def __init__(self, storeEncoding: 'bool'=True):
        """
        __init__(xml::lite::MinidomParser self, bool storeEncoding=True) -> MinidomParser
        __init__(xml::lite::MinidomParser self) -> MinidomParser
        """
        this = _xml_lite.new_MinidomParser(storeEncoding)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xml_lite.delete_MinidomParser
    __del__ = lambda self: None

    def parse(self, *args) -> "void":
        """
        parse(MinidomParser self, io::InputStream & arg2, int size)
        parse(MinidomParser self, io::InputStream & arg2)
        parse(MinidomParser self, io::InputStream & arg2, void const * pInitialEncoding, void const * pFallbackEncoding, int size)
        parse(MinidomParser self, io::InputStream & arg2, void const * pInitialEncoding, void const * pFallbackEncoding)
        """
        return _xml_lite.MinidomParser_parse(self, *args)


    def clear(self) -> "void":
        """clear(MinidomParser self)"""
        return _xml_lite.MinidomParser_clear(self)


    def getDocument(self, *args) -> "std::unique_ptr< xml::lite::Document > &":
        """
        getDocument(MinidomParser self) -> Document
        getDocument(MinidomParser self, bool steal=False) -> Document
        getDocument(MinidomParser self) -> Document
        getDocument(MinidomParser self, std::unique_ptr< xml::lite::Document > & arg2) -> std::unique_ptr< xml::lite::Document > &
        """
        return _xml_lite.MinidomParser_getDocument(self, *args)


    def getReader(self, *args) -> "XMLReader &":
        """
        getReader(MinidomParser self) -> XMLReader const
        getReader(MinidomParser self) -> XMLReader &
        """
        return _xml_lite.MinidomParser_getReader(self, *args)


    def getHandler(self) -> "MinidomHandler &":
        """getHandler(MinidomParser self) -> MinidomHandler &"""
        return _xml_lite.MinidomParser_getHandler(self)


    def setDocument(self, *args) -> "void":
        """
        setDocument(MinidomParser self, Document newDocument, bool own=True)
        setDocument(MinidomParser self, Document newDocument)
        setDocument(MinidomParser self, std::unique_ptr< xml::lite::Document > && arg2)
        """
        return _xml_lite.MinidomParser_setDocument(self, *args)


    def preserveCharacterData(self, preserve: 'bool') -> "void":
        """preserveCharacterData(MinidomParser self, bool preserve)"""
        return _xml_lite.MinidomParser_preserveCharacterData(self, preserve)

MinidomParser_swigregister = _xml_lite.MinidomParser_swigregister
MinidomParser_swigregister(MinidomParser)


def getDocument(xmlParser: 'MinidomParser') -> "xml::lite::Document &":
    """getDocument(MinidomParser xmlParser) -> Document"""
    return _xml_lite.getDocument(xmlParser)
# This file is compatible with both classic and new-style classes.


