#!/usr/bin/env python

# If you are reading this, I assume you've made an update to waf and are trying to figure out
# how to repackage it.

# IT IS CRITICAL THAT YOU DO ALL YOUR WAF-HACKING WITH PYTHON 3.
# Waf has a feature that re-writes your code to be Python 2.4 compatable if
# it detects Python 2. We do not want these updates in the included library.
# If you accidentally unpack waf with Python 2, you will have to start over.

# First, navigate to the directory containing the updated `waflib` folder.
# Copy the contents of the following waf build files for the current version (1.7.14):
#  - https://gitlab.com/ita1024/waf/raw/waf-1.7.14/waf-light
#  - https://gitlab.com/ita1024/waf/raw/waf-1.7.14/wscript
#
# Your directory structure should look like this:
# -root
#  |- waflib
#     |- ansiterm.py
#     |- Build.py  #etc
#  |- waf-light
#  |- wscript

# Call `python waf-light configure --make-waf build`
# Copy the new `waf` file to `coda-oss/build`

import os, sys, subprocess

path_to_waf = os.path.join(os.path.dirname(__file__), 'build', 'waf')

cmd = [sys.executable, path_to_waf] + sys.argv[1:]
try:
    sys.exit(subprocess.call(cmd))
except KeyboardInterrupt:
    sys.exit(1)
