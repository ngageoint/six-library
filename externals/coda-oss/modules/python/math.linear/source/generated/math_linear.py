# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _math_linear
else:
    import _math_linear

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import coda.coda_except
class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _math_linear.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _math_linear.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        r"""incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _math_linear.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        r"""decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _math_linear.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        r"""distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _math_linear.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        r"""equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _math_linear.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _math_linear.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _math_linear.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _math_linear.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _math_linear.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        r"""advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _math_linear.SwigPyIterator_advance(self, n)

    def __eq__(self, x: "SwigPyIterator") -> "bool":
        r"""__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _math_linear.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: "SwigPyIterator") -> "bool":
        r"""__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _math_linear.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        r"""__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _math_linear.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        r"""__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _math_linear.SwigPyIterator___isub__(self, n)

    def __add__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        r"""__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _math_linear.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _math_linear.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _math_linear:
_math_linear.SwigPyIterator_swigregister(SwigPyIterator)


from coda.coda_types import pickle

import coda.coda_types
import coda.coda_sys
class std_vector_double(object):
    r"""Proxy of C++ std::vector< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(std_vector_double self) -> SwigPyIterator"""
        return _math_linear.std_vector_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(std_vector_double self) -> bool"""
        return _math_linear.std_vector_double___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(std_vector_double self) -> bool"""
        return _math_linear.std_vector_double___bool__(self)

    def __len__(self) -> "std::vector< double >::size_type":
        r"""__len__(std_vector_double self) -> std::vector< double >::size_type"""
        return _math_linear.std_vector_double___len__(self)

    def __getslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "std::vector< double,std::allocator< double > > *":
        r"""__getslice__(std_vector_double self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> std_vector_double"""
        return _math_linear.std_vector_double___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(std_vector_double self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)
        __setslice__(std_vector_double self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, std_vector_double v)
        """
        return _math_linear.std_vector_double___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "void":
        r"""__delslice__(std_vector_double self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)"""
        return _math_linear.std_vector_double___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(std_vector_double self, std::vector< double >::difference_type i)
        __delitem__(std_vector_double self, PySliceObject * slice)
        """
        return _math_linear.std_vector_double___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< double >::value_type const &":
        r"""
        __getitem__(std_vector_double self, PySliceObject * slice) -> std_vector_double
        __getitem__(std_vector_double self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &
        """
        return _math_linear.std_vector_double___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(std_vector_double self, PySliceObject * slice, std_vector_double v)
        __setitem__(std_vector_double self, PySliceObject * slice)
        __setitem__(std_vector_double self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)
        """
        return _math_linear.std_vector_double___setitem__(self, *args)

    def pop(self) -> "std::vector< double >::value_type":
        r"""pop(std_vector_double self) -> std::vector< double >::value_type"""
        return _math_linear.std_vector_double_pop(self)

    def append(self, x: "std::vector< double >::value_type const &") -> "void":
        r"""append(std_vector_double self, std::vector< double >::value_type const & x)"""
        return _math_linear.std_vector_double_append(self, x)

    def empty(self) -> "bool":
        r"""empty(std_vector_double self) -> bool"""
        return _math_linear.std_vector_double_empty(self)

    def size(self) -> "std::vector< double >::size_type":
        r"""size(std_vector_double self) -> std::vector< double >::size_type"""
        return _math_linear.std_vector_double_size(self)

    def swap(self, v: "std_vector_double") -> "void":
        r"""swap(std_vector_double self, std_vector_double v)"""
        return _math_linear.std_vector_double_swap(self, v)

    def begin(self) -> "std::vector< double >::iterator":
        r"""begin(std_vector_double self) -> std::vector< double >::iterator"""
        return _math_linear.std_vector_double_begin(self)

    def end(self) -> "std::vector< double >::iterator":
        r"""end(std_vector_double self) -> std::vector< double >::iterator"""
        return _math_linear.std_vector_double_end(self)

    def rbegin(self) -> "std::vector< double >::reverse_iterator":
        r"""rbegin(std_vector_double self) -> std::vector< double >::reverse_iterator"""
        return _math_linear.std_vector_double_rbegin(self)

    def rend(self) -> "std::vector< double >::reverse_iterator":
        r"""rend(std_vector_double self) -> std::vector< double >::reverse_iterator"""
        return _math_linear.std_vector_double_rend(self)

    def clear(self) -> "void":
        r"""clear(std_vector_double self)"""
        return _math_linear.std_vector_double_clear(self)

    def get_allocator(self) -> "std::vector< double >::allocator_type":
        r"""get_allocator(std_vector_double self) -> std::vector< double >::allocator_type"""
        return _math_linear.std_vector_double_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(std_vector_double self)"""
        return _math_linear.std_vector_double_pop_back(self)

    def erase(self, *args) -> "std::vector< double >::iterator":
        r"""
        erase(std_vector_double self, std::vector< double >::iterator pos) -> std::vector< double >::iterator
        erase(std_vector_double self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator
        """
        return _math_linear.std_vector_double_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(std_vector_double self) -> std_vector_double
        __init__(std_vector_double self, std_vector_double other) -> std_vector_double
        __init__(std_vector_double self, std::vector< double >::size_type size) -> std_vector_double
        __init__(std_vector_double self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> std_vector_double
        """
        _math_linear.std_vector_double_swiginit(self, _math_linear.new_std_vector_double(*args))

    def push_back(self, x: "std::vector< double >::value_type const &") -> "void":
        r"""push_back(std_vector_double self, std::vector< double >::value_type const & x)"""
        return _math_linear.std_vector_double_push_back(self, x)

    def front(self) -> "std::vector< double >::value_type const &":
        r"""front(std_vector_double self) -> std::vector< double >::value_type const &"""
        return _math_linear.std_vector_double_front(self)

    def back(self) -> "std::vector< double >::value_type const &":
        r"""back(std_vector_double self) -> std::vector< double >::value_type const &"""
        return _math_linear.std_vector_double_back(self)

    def assign(self, n: "std::vector< double >::size_type", x: "std::vector< double >::value_type const &") -> "void":
        r"""assign(std_vector_double self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)"""
        return _math_linear.std_vector_double_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(std_vector_double self, std::vector< double >::size_type new_size)
        resize(std_vector_double self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)
        """
        return _math_linear.std_vector_double_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(std_vector_double self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator
        insert(std_vector_double self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)
        """
        return _math_linear.std_vector_double_insert(self, *args)

    def reserve(self, n: "std::vector< double >::size_type") -> "void":
        r"""reserve(std_vector_double self, std::vector< double >::size_type n)"""
        return _math_linear.std_vector_double_reserve(self, n)

    def capacity(self) -> "std::vector< double >::size_type":
        r"""capacity(std_vector_double self) -> std::vector< double >::size_type"""
        return _math_linear.std_vector_double_capacity(self)

    def __getstate__(self):
    # Return a nonempty (thus non-false) tuple with dummy value in first position
        return (-1, tuple(pickle.dumps(elem) for elem in self))

    def __setstate__(self, state):
        self.__init__()
    # State will have a dummy entry in the first position
        for elem in state[1]:
            self.push_back(pickle.loads(elem))

    __swig_destroy__ = _math_linear.delete_std_vector_double

# Register std_vector_double in _math_linear:
_math_linear.std_vector_double_swigregister(std_vector_double)

class std_vector_vector_double(object):
    r"""Proxy of C++ std::vector< std::vector< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(std_vector_vector_double self) -> SwigPyIterator"""
        return _math_linear.std_vector_vector_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(std_vector_vector_double self) -> bool"""
        return _math_linear.std_vector_vector_double___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(std_vector_vector_double self) -> bool"""
        return _math_linear.std_vector_vector_double___bool__(self)

    def __len__(self) -> "std::vector< std::vector< double > >::size_type":
        r"""__len__(std_vector_vector_double self) -> std::vector< std::vector< double > >::size_type"""
        return _math_linear.std_vector_vector_double___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< double > >::difference_type", j: "std::vector< std::vector< double > >::difference_type") -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *":
        r"""__getslice__(std_vector_vector_double self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j) -> std_vector_vector_double"""
        return _math_linear.std_vector_vector_double___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(std_vector_vector_double self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j)
        __setslice__(std_vector_vector_double self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j, std_vector_vector_double v)
        """
        return _math_linear.std_vector_vector_double___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< double > >::difference_type", j: "std::vector< std::vector< double > >::difference_type") -> "void":
        r"""__delslice__(std_vector_vector_double self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j)"""
        return _math_linear.std_vector_vector_double___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(std_vector_vector_double self, std::vector< std::vector< double > >::difference_type i)
        __delitem__(std_vector_vector_double self, PySliceObject * slice)
        """
        return _math_linear.std_vector_vector_double___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< double > >::value_type const &":
        r"""
        __getitem__(std_vector_vector_double self, PySliceObject * slice) -> std_vector_vector_double
        __getitem__(std_vector_vector_double self, std::vector< std::vector< double > >::difference_type i) -> std_vector_double
        """
        return _math_linear.std_vector_vector_double___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(std_vector_vector_double self, PySliceObject * slice, std_vector_vector_double v)
        __setitem__(std_vector_vector_double self, PySliceObject * slice)
        __setitem__(std_vector_vector_double self, std::vector< std::vector< double > >::difference_type i, std_vector_double x)
        """
        return _math_linear.std_vector_vector_double___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< double > >::value_type":
        r"""pop(std_vector_vector_double self) -> std_vector_double"""
        return _math_linear.std_vector_vector_double_pop(self)

    def append(self, x: "std_vector_double") -> "void":
        r"""append(std_vector_vector_double self, std_vector_double x)"""
        return _math_linear.std_vector_vector_double_append(self, x)

    def empty(self) -> "bool":
        r"""empty(std_vector_vector_double self) -> bool"""
        return _math_linear.std_vector_vector_double_empty(self)

    def size(self) -> "std::vector< std::vector< double > >::size_type":
        r"""size(std_vector_vector_double self) -> std::vector< std::vector< double > >::size_type"""
        return _math_linear.std_vector_vector_double_size(self)

    def swap(self, v: "std_vector_vector_double") -> "void":
        r"""swap(std_vector_vector_double self, std_vector_vector_double v)"""
        return _math_linear.std_vector_vector_double_swap(self, v)

    def begin(self) -> "std::vector< std::vector< double > >::iterator":
        r"""begin(std_vector_vector_double self) -> std::vector< std::vector< double > >::iterator"""
        return _math_linear.std_vector_vector_double_begin(self)

    def end(self) -> "std::vector< std::vector< double > >::iterator":
        r"""end(std_vector_vector_double self) -> std::vector< std::vector< double > >::iterator"""
        return _math_linear.std_vector_vector_double_end(self)

    def rbegin(self) -> "std::vector< std::vector< double > >::reverse_iterator":
        r"""rbegin(std_vector_vector_double self) -> std::vector< std::vector< double > >::reverse_iterator"""
        return _math_linear.std_vector_vector_double_rbegin(self)

    def rend(self) -> "std::vector< std::vector< double > >::reverse_iterator":
        r"""rend(std_vector_vector_double self) -> std::vector< std::vector< double > >::reverse_iterator"""
        return _math_linear.std_vector_vector_double_rend(self)

    def clear(self) -> "void":
        r"""clear(std_vector_vector_double self)"""
        return _math_linear.std_vector_vector_double_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< double > >::allocator_type":
        r"""get_allocator(std_vector_vector_double self) -> std::vector< std::vector< double > >::allocator_type"""
        return _math_linear.std_vector_vector_double_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(std_vector_vector_double self)"""
        return _math_linear.std_vector_vector_double_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< double > >::iterator":
        r"""
        erase(std_vector_vector_double self, std::vector< std::vector< double > >::iterator pos) -> std::vector< std::vector< double > >::iterator
        erase(std_vector_vector_double self, std::vector< std::vector< double > >::iterator first, std::vector< std::vector< double > >::iterator last) -> std::vector< std::vector< double > >::iterator
        """
        return _math_linear.std_vector_vector_double_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(std_vector_vector_double self) -> std_vector_vector_double
        __init__(std_vector_vector_double self, std_vector_vector_double other) -> std_vector_vector_double
        __init__(std_vector_vector_double self, std::vector< std::vector< double > >::size_type size) -> std_vector_vector_double
        __init__(std_vector_vector_double self, std::vector< std::vector< double > >::size_type size, std_vector_double value) -> std_vector_vector_double
        """
        _math_linear.std_vector_vector_double_swiginit(self, _math_linear.new_std_vector_vector_double(*args))

    def push_back(self, x: "std_vector_double") -> "void":
        r"""push_back(std_vector_vector_double self, std_vector_double x)"""
        return _math_linear.std_vector_vector_double_push_back(self, x)

    def front(self) -> "std::vector< std::vector< double > >::value_type const &":
        r"""front(std_vector_vector_double self) -> std_vector_double"""
        return _math_linear.std_vector_vector_double_front(self)

    def back(self) -> "std::vector< std::vector< double > >::value_type const &":
        r"""back(std_vector_vector_double self) -> std_vector_double"""
        return _math_linear.std_vector_vector_double_back(self)

    def assign(self, n: "std::vector< std::vector< double > >::size_type", x: "std_vector_double") -> "void":
        r"""assign(std_vector_vector_double self, std::vector< std::vector< double > >::size_type n, std_vector_double x)"""
        return _math_linear.std_vector_vector_double_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(std_vector_vector_double self, std::vector< std::vector< double > >::size_type new_size)
        resize(std_vector_vector_double self, std::vector< std::vector< double > >::size_type new_size, std_vector_double x)
        """
        return _math_linear.std_vector_vector_double_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(std_vector_vector_double self, std::vector< std::vector< double > >::iterator pos, std_vector_double x) -> std::vector< std::vector< double > >::iterator
        insert(std_vector_vector_double self, std::vector< std::vector< double > >::iterator pos, std::vector< std::vector< double > >::size_type n, std_vector_double x)
        """
        return _math_linear.std_vector_vector_double_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< double > >::size_type") -> "void":
        r"""reserve(std_vector_vector_double self, std::vector< std::vector< double > >::size_type n)"""
        return _math_linear.std_vector_vector_double_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< double > >::size_type":
        r"""capacity(std_vector_vector_double self) -> std::vector< std::vector< double > >::size_type"""
        return _math_linear.std_vector_vector_double_capacity(self)

    def __getstate__(self):
    # Return a nonempty (thus non-false) tuple with dummy value in first position
        return (-1, tuple(pickle.dumps(elem) for elem in self))

    def __setstate__(self, state):
        self.__init__()
    # State will have a dummy entry in the first position
        for elem in state[1]:
            self.push_back(pickle.loads(elem))

    __swig_destroy__ = _math_linear.delete_std_vector_vector_double

# Register std_vector_vector_double in _math_linear:
_math_linear.std_vector_vector_double_swigregister(std_vector_vector_double)

class Matrix1x1(object):
    r"""Proxy of C++ math::linear::MatrixMxN< 1,1,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mRaw = property(_math_linear.Matrix1x1_mRaw_get, _math_linear.Matrix1x1_mRaw_set, doc=r"""mRaw : a(1).a(1).double""")

    def __init__(self, *args):
        r"""
        __init__(Matrix1x1 self) -> Matrix1x1
        __init__(Matrix1x1 self, double cv) -> Matrix1x1
        __init__(Matrix1x1 self, double const * raw) -> Matrix1x1
        __init__(Matrix1x1 self, std_vector_double raw) -> Matrix1x1
        __init__(Matrix1x1 self, Matrix1x1 mx) -> Matrix1x1
        """
        _math_linear.Matrix1x1_swiginit(self, _math_linear.new_Matrix1x1(*args))
    __swig_destroy__ = _math_linear.delete_Matrix1x1

    def __call__(self, *args) -> "double &":
        r"""
        __call__(Matrix1x1 self, size_t i, size_t j) -> double
        __call__(Matrix1x1 self, size_t i, size_t j) -> double &
        """
        return _math_linear.Matrix1x1___call__(self, *args)

    def row(self, *args) -> "void":
        r"""
        row(Matrix1x1 self, size_t i) -> double const
        row(Matrix1x1 self, size_t i) -> double
        row(Matrix1x1 self, size_t i, double const * vec)
        row(Matrix1x1 self, size_t i, std_vector_double vec)
        """
        return _math_linear.Matrix1x1_row(self, *args)

    def col(self, *args) -> "void":
        r"""
        col(Matrix1x1 self, size_t j) -> std_vector_double
        col(Matrix1x1 self, size_t j, double const * vec)
        col(Matrix1x1 self, size_t j, std_vector_double vec)
        col(Matrix1x1 self, size_t colIdx, Matrix1x1 vec)
        """
        return _math_linear.Matrix1x1_col(self, *args)

    def rows(self) -> "size_t":
        r"""rows(Matrix1x1 self) -> size_t"""
        return _math_linear.Matrix1x1_rows(self)

    def cols(self) -> "size_t":
        r"""cols(Matrix1x1 self) -> size_t"""
        return _math_linear.Matrix1x1_cols(self)

    def size(self) -> "size_t":
        r"""size(Matrix1x1 self) -> size_t"""
        return _math_linear.Matrix1x1_size(self)

    def scale(self, scalar: "double") -> "math::linear::MatrixMxN< 1,1,double > &":
        r"""scale(Matrix1x1 self, double scalar) -> Matrix1x1"""
        return _math_linear.Matrix1x1_scale(self, scalar)

    def multiply(self, scalar: "double") -> "math::linear::MatrixMxN< 1,1 >":
        r"""multiply(Matrix1x1 self, double scalar) -> Matrix1x1"""
        return _math_linear.Matrix1x1_multiply(self, scalar)

    def scaleDiagonal(self, mx: "Matrix1x1") -> "math::linear::MatrixMxN< 1,1,double > &":
        r"""scaleDiagonal(Matrix1x1 self, Matrix1x1 mx) -> Matrix1x1"""
        return _math_linear.Matrix1x1_scaleDiagonal(self, mx)

    def multiplyDiagonal(self, mx: "Matrix1x1") -> "math::linear::MatrixMxN< 1,1,double >":
        r"""multiplyDiagonal(Matrix1x1 self, Matrix1x1 mx) -> Matrix1x1"""
        return _math_linear.Matrix1x1_multiplyDiagonal(self, mx)

    def __iadd__(self, mx: "Matrix1x1") -> "math::linear::MatrixMxN< 1,1,double >::Like_T &":
        r"""__iadd__(Matrix1x1 self, Matrix1x1 mx) -> Matrix1x1"""
        return _math_linear.Matrix1x1___iadd__(self, mx)

    def __isub__(self, mx: "Matrix1x1") -> "math::linear::MatrixMxN< 1,1,double >::Like_T &":
        r"""__isub__(Matrix1x1 self, Matrix1x1 mx) -> Matrix1x1"""
        return _math_linear.Matrix1x1___isub__(self, mx)

    def add(self, mx: "Matrix1x1") -> "math::linear::MatrixMxN< 1,1,double >::Like_T":
        r"""add(Matrix1x1 self, Matrix1x1 mx) -> Matrix1x1"""
        return _math_linear.Matrix1x1_add(self, mx)

    def subtract(self, mx: "Matrix1x1") -> "math::linear::MatrixMxN< 1,1,double >::Like_T":
        r"""subtract(Matrix1x1 self, Matrix1x1 mx) -> Matrix1x1"""
        return _math_linear.Matrix1x1_subtract(self, mx)

    def transpose(self) -> "math::linear::MatrixMxN< 1,1,double >":
        r"""transpose(Matrix1x1 self) -> Matrix1x1"""
        return _math_linear.Matrix1x1_transpose(self)

    def decomposeLU(self, pivotsM: "VectorSizeT") -> "math::linear::MatrixMxN< 1,1,double >::Like_T":
        r"""decomposeLU(Matrix1x1 self, VectorSizeT pivotsM) -> Matrix1x1"""
        return _math_linear.Matrix1x1_decomposeLU(self, pivotsM)

    def permute(self, pivotsM: "VectorSizeT", n: "size_t"=1) -> "math::linear::MatrixMxN< 1,1,double >::Like_T":
        r"""permute(Matrix1x1 self, VectorSizeT pivotsM, size_t n=1) -> Matrix1x1"""
        return _math_linear.Matrix1x1_permute(self, pivotsM, n)

    def normSq(self) -> "double":
        r"""normSq(Matrix1x1 self) -> double"""
        return _math_linear.Matrix1x1_normSq(self)

    def norm(self) -> "double":
        r"""norm(Matrix1x1 self) -> double"""
        return _math_linear.Matrix1x1_norm(self)

    def normalize(self) -> "math::linear::MatrixMxN< 1,1,double > &":
        r"""normalize(Matrix1x1 self) -> Matrix1x1"""
        return _math_linear.Matrix1x1_normalize(self)

    def unit(self) -> "math::linear::MatrixMxN< 1,1,double >::Like_T":
        r"""unit(Matrix1x1 self) -> Matrix1x1"""
        return _math_linear.Matrix1x1_unit(self)

    def __add__(self, mx: "Matrix1x1") -> "math::linear::MatrixMxN< 1,1,double >::Like_T":
        r"""__add__(Matrix1x1 self, Matrix1x1 mx) -> Matrix1x1"""
        return _math_linear.Matrix1x1___add__(self, mx)

    def __sub__(self, mx: "Matrix1x1") -> "math::linear::MatrixMxN< 1,1,double >::Like_T":
        r"""__sub__(Matrix1x1 self, Matrix1x1 mx) -> Matrix1x1"""
        return _math_linear.Matrix1x1___sub__(self, mx)

    def __mul__(self, scalar: "double") -> "math::linear::MatrixMxN< 1,1,double >::Like_T":
        r"""__mul__(Matrix1x1 self, double scalar) -> Matrix1x1"""
        return _math_linear.Matrix1x1___mul__(self, scalar)

    def __truediv__(self, *args):
        return _math_linear.Matrix1x1___truediv__(self, *args)
    __div__ = __truediv__



    def __neg__(self) -> "math::linear::MatrixMxN< 1,1,double >::Like_T":
        r"""__neg__(Matrix1x1 self) -> Matrix1x1"""
        return _math_linear.Matrix1x1___neg__(self)

    def __getitem__(self, inObj: "PyObject *") -> "double":
        r"""__getitem__(Matrix1x1 self, PyObject * inObj) -> double"""
        return _math_linear.Matrix1x1___getitem__(self, inObj)

    def __setitem__(self, inObj: "PyObject *", val: "double") -> "void":
        r"""__setitem__(Matrix1x1 self, PyObject * inObj, double val)"""
        return _math_linear.Matrix1x1___setitem__(self, inObj, val)

    def __str__(self) -> "std::string":
        r"""__str__(Matrix1x1 self) -> std::string"""
        return _math_linear.Matrix1x1___str__(self)

    def vals(self) -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >":
        r"""vals(Matrix1x1 self) -> std_vector_vector_double"""
        return _math_linear.Matrix1x1_vals(self)

# Register Matrix1x1 in _math_linear:
_math_linear.Matrix1x1_swigregister(Matrix1x1)

class Matrix1x2(object):
    r"""Proxy of C++ math::linear::MatrixMxN< 1,2,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mRaw = property(_math_linear.Matrix1x2_mRaw_get, _math_linear.Matrix1x2_mRaw_set, doc=r"""mRaw : a(1).a(2).double""")

    def __init__(self, *args):
        r"""
        __init__(Matrix1x2 self) -> Matrix1x2
        __init__(Matrix1x2 self, double cv) -> Matrix1x2
        __init__(Matrix1x2 self, double const * raw) -> Matrix1x2
        __init__(Matrix1x2 self, std_vector_double raw) -> Matrix1x2
        __init__(Matrix1x2 self, Matrix1x2 mx) -> Matrix1x2
        """
        _math_linear.Matrix1x2_swiginit(self, _math_linear.new_Matrix1x2(*args))
    __swig_destroy__ = _math_linear.delete_Matrix1x2

    def __call__(self, *args) -> "double &":
        r"""
        __call__(Matrix1x2 self, size_t i, size_t j) -> double
        __call__(Matrix1x2 self, size_t i, size_t j) -> double &
        """
        return _math_linear.Matrix1x2___call__(self, *args)

    def row(self, *args) -> "void":
        r"""
        row(Matrix1x2 self, size_t i) -> double const
        row(Matrix1x2 self, size_t i) -> double
        row(Matrix1x2 self, size_t i, double const * vec)
        row(Matrix1x2 self, size_t i, std_vector_double vec)
        """
        return _math_linear.Matrix1x2_row(self, *args)

    def col(self, *args) -> "void":
        r"""
        col(Matrix1x2 self, size_t j) -> std_vector_double
        col(Matrix1x2 self, size_t j, double const * vec)
        col(Matrix1x2 self, size_t j, std_vector_double vec)
        col(Matrix1x2 self, size_t colIdx, Matrix1x1 vec)
        """
        return _math_linear.Matrix1x2_col(self, *args)

    def rows(self) -> "size_t":
        r"""rows(Matrix1x2 self) -> size_t"""
        return _math_linear.Matrix1x2_rows(self)

    def cols(self) -> "size_t":
        r"""cols(Matrix1x2 self) -> size_t"""
        return _math_linear.Matrix1x2_cols(self)

    def size(self) -> "size_t":
        r"""size(Matrix1x2 self) -> size_t"""
        return _math_linear.Matrix1x2_size(self)

    def scale(self, scalar: "double") -> "math::linear::MatrixMxN< 1,2,double > &":
        r"""scale(Matrix1x2 self, double scalar) -> Matrix1x2"""
        return _math_linear.Matrix1x2_scale(self, scalar)

    def multiply(self, scalar: "double") -> "math::linear::MatrixMxN< 1,2 >":
        r"""multiply(Matrix1x2 self, double scalar) -> Matrix1x2"""
        return _math_linear.Matrix1x2_multiply(self, scalar)

    def scaleDiagonal(self, mx: "Matrix2x2") -> "math::linear::MatrixMxN< 1,2,double > &":
        r"""scaleDiagonal(Matrix1x2 self, Matrix2x2 mx) -> Matrix1x2"""
        return _math_linear.Matrix1x2_scaleDiagonal(self, mx)

    def multiplyDiagonal(self, mx: "Matrix2x2") -> "math::linear::MatrixMxN< 1,2,double >":
        r"""multiplyDiagonal(Matrix1x2 self, Matrix2x2 mx) -> Matrix1x2"""
        return _math_linear.Matrix1x2_multiplyDiagonal(self, mx)

    def __iadd__(self, mx: "Matrix1x2") -> "math::linear::MatrixMxN< 1,2,double >::Like_T &":
        r"""__iadd__(Matrix1x2 self, Matrix1x2 mx) -> Matrix1x2"""
        return _math_linear.Matrix1x2___iadd__(self, mx)

    def __isub__(self, mx: "Matrix1x2") -> "math::linear::MatrixMxN< 1,2,double >::Like_T &":
        r"""__isub__(Matrix1x2 self, Matrix1x2 mx) -> Matrix1x2"""
        return _math_linear.Matrix1x2___isub__(self, mx)

    def add(self, mx: "Matrix1x2") -> "math::linear::MatrixMxN< 1,2,double >::Like_T":
        r"""add(Matrix1x2 self, Matrix1x2 mx) -> Matrix1x2"""
        return _math_linear.Matrix1x2_add(self, mx)

    def subtract(self, mx: "Matrix1x2") -> "math::linear::MatrixMxN< 1,2,double >::Like_T":
        r"""subtract(Matrix1x2 self, Matrix1x2 mx) -> Matrix1x2"""
        return _math_linear.Matrix1x2_subtract(self, mx)

    def transpose(self) -> "math::linear::MatrixMxN< 2,1,double >":
        r"""transpose(Matrix1x2 self) -> Matrix2x1"""
        return _math_linear.Matrix1x2_transpose(self)

    def decomposeLU(self, pivotsM: "VectorSizeT") -> "math::linear::MatrixMxN< 1,2,double >::Like_T":
        r"""decomposeLU(Matrix1x2 self, VectorSizeT pivotsM) -> Matrix1x2"""
        return _math_linear.Matrix1x2_decomposeLU(self, pivotsM)

    def permute(self, pivotsM: "VectorSizeT", n: "size_t"=2) -> "math::linear::MatrixMxN< 1,2,double >::Like_T":
        r"""permute(Matrix1x2 self, VectorSizeT pivotsM, size_t n=2) -> Matrix1x2"""
        return _math_linear.Matrix1x2_permute(self, pivotsM, n)

    def normSq(self) -> "double":
        r"""normSq(Matrix1x2 self) -> double"""
        return _math_linear.Matrix1x2_normSq(self)

    def norm(self) -> "double":
        r"""norm(Matrix1x2 self) -> double"""
        return _math_linear.Matrix1x2_norm(self)

    def normalize(self) -> "math::linear::MatrixMxN< 1,2,double > &":
        r"""normalize(Matrix1x2 self) -> Matrix1x2"""
        return _math_linear.Matrix1x2_normalize(self)

    def unit(self) -> "math::linear::MatrixMxN< 1,2,double >::Like_T":
        r"""unit(Matrix1x2 self) -> Matrix1x2"""
        return _math_linear.Matrix1x2_unit(self)

    def __add__(self, mx: "Matrix1x2") -> "math::linear::MatrixMxN< 1,2,double >::Like_T":
        r"""__add__(Matrix1x2 self, Matrix1x2 mx) -> Matrix1x2"""
        return _math_linear.Matrix1x2___add__(self, mx)

    def __sub__(self, mx: "Matrix1x2") -> "math::linear::MatrixMxN< 1,2,double >::Like_T":
        r"""__sub__(Matrix1x2 self, Matrix1x2 mx) -> Matrix1x2"""
        return _math_linear.Matrix1x2___sub__(self, mx)

    def __mul__(self, scalar: "double") -> "math::linear::MatrixMxN< 1,2,double >::Like_T":
        r"""__mul__(Matrix1x2 self, double scalar) -> Matrix1x2"""
        return _math_linear.Matrix1x2___mul__(self, scalar)

    def __truediv__(self, *args):
        return _math_linear.Matrix1x2___truediv__(self, *args)
    __div__ = __truediv__



    def __neg__(self) -> "math::linear::MatrixMxN< 1,2,double >::Like_T":
        r"""__neg__(Matrix1x2 self) -> Matrix1x2"""
        return _math_linear.Matrix1x2___neg__(self)

    def __getitem__(self, inObj: "PyObject *") -> "double":
        r"""__getitem__(Matrix1x2 self, PyObject * inObj) -> double"""
        return _math_linear.Matrix1x2___getitem__(self, inObj)

    def __setitem__(self, inObj: "PyObject *", val: "double") -> "void":
        r"""__setitem__(Matrix1x2 self, PyObject * inObj, double val)"""
        return _math_linear.Matrix1x2___setitem__(self, inObj, val)

    def __str__(self) -> "std::string":
        r"""__str__(Matrix1x2 self) -> std::string"""
        return _math_linear.Matrix1x2___str__(self)

    def vals(self) -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >":
        r"""vals(Matrix1x2 self) -> std_vector_vector_double"""
        return _math_linear.Matrix1x2_vals(self)

# Register Matrix1x2 in _math_linear:
_math_linear.Matrix1x2_swigregister(Matrix1x2)

class Matrix1x3(object):
    r"""Proxy of C++ math::linear::MatrixMxN< 1,3,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mRaw = property(_math_linear.Matrix1x3_mRaw_get, _math_linear.Matrix1x3_mRaw_set, doc=r"""mRaw : a(1).a(3).double""")

    def __init__(self, *args):
        r"""
        __init__(Matrix1x3 self) -> Matrix1x3
        __init__(Matrix1x3 self, double cv) -> Matrix1x3
        __init__(Matrix1x3 self, double const * raw) -> Matrix1x3
        __init__(Matrix1x3 self, std_vector_double raw) -> Matrix1x3
        __init__(Matrix1x3 self, Matrix1x3 mx) -> Matrix1x3
        """
        _math_linear.Matrix1x3_swiginit(self, _math_linear.new_Matrix1x3(*args))
    __swig_destroy__ = _math_linear.delete_Matrix1x3

    def __call__(self, *args) -> "double &":
        r"""
        __call__(Matrix1x3 self, size_t i, size_t j) -> double
        __call__(Matrix1x3 self, size_t i, size_t j) -> double &
        """
        return _math_linear.Matrix1x3___call__(self, *args)

    def row(self, *args) -> "void":
        r"""
        row(Matrix1x3 self, size_t i) -> double const
        row(Matrix1x3 self, size_t i) -> double
        row(Matrix1x3 self, size_t i, double const * vec)
        row(Matrix1x3 self, size_t i, std_vector_double vec)
        """
        return _math_linear.Matrix1x3_row(self, *args)

    def col(self, *args) -> "void":
        r"""
        col(Matrix1x3 self, size_t j) -> std_vector_double
        col(Matrix1x3 self, size_t j, double const * vec)
        col(Matrix1x3 self, size_t j, std_vector_double vec)
        col(Matrix1x3 self, size_t colIdx, Matrix1x1 vec)
        """
        return _math_linear.Matrix1x3_col(self, *args)

    def rows(self) -> "size_t":
        r"""rows(Matrix1x3 self) -> size_t"""
        return _math_linear.Matrix1x3_rows(self)

    def cols(self) -> "size_t":
        r"""cols(Matrix1x3 self) -> size_t"""
        return _math_linear.Matrix1x3_cols(self)

    def size(self) -> "size_t":
        r"""size(Matrix1x3 self) -> size_t"""
        return _math_linear.Matrix1x3_size(self)

    def scale(self, scalar: "double") -> "math::linear::MatrixMxN< 1,3,double > &":
        r"""scale(Matrix1x3 self, double scalar) -> Matrix1x3"""
        return _math_linear.Matrix1x3_scale(self, scalar)

    def multiply(self, scalar: "double") -> "math::linear::MatrixMxN< 1,3 >":
        r"""multiply(Matrix1x3 self, double scalar) -> Matrix1x3"""
        return _math_linear.Matrix1x3_multiply(self, scalar)

    def scaleDiagonal(self, mx: "Matrix3x3") -> "math::linear::MatrixMxN< 1,3,double > &":
        r"""scaleDiagonal(Matrix1x3 self, Matrix3x3 mx) -> Matrix1x3"""
        return _math_linear.Matrix1x3_scaleDiagonal(self, mx)

    def multiplyDiagonal(self, mx: "Matrix3x3") -> "math::linear::MatrixMxN< 1,3,double >":
        r"""multiplyDiagonal(Matrix1x3 self, Matrix3x3 mx) -> Matrix1x3"""
        return _math_linear.Matrix1x3_multiplyDiagonal(self, mx)

    def __iadd__(self, mx: "Matrix1x3") -> "math::linear::MatrixMxN< 1,3,double >::Like_T &":
        r"""__iadd__(Matrix1x3 self, Matrix1x3 mx) -> Matrix1x3"""
        return _math_linear.Matrix1x3___iadd__(self, mx)

    def __isub__(self, mx: "Matrix1x3") -> "math::linear::MatrixMxN< 1,3,double >::Like_T &":
        r"""__isub__(Matrix1x3 self, Matrix1x3 mx) -> Matrix1x3"""
        return _math_linear.Matrix1x3___isub__(self, mx)

    def add(self, mx: "Matrix1x3") -> "math::linear::MatrixMxN< 1,3,double >::Like_T":
        r"""add(Matrix1x3 self, Matrix1x3 mx) -> Matrix1x3"""
        return _math_linear.Matrix1x3_add(self, mx)

    def subtract(self, mx: "Matrix1x3") -> "math::linear::MatrixMxN< 1,3,double >::Like_T":
        r"""subtract(Matrix1x3 self, Matrix1x3 mx) -> Matrix1x3"""
        return _math_linear.Matrix1x3_subtract(self, mx)

    def transpose(self) -> "math::linear::MatrixMxN< 3,1,double >":
        r"""transpose(Matrix1x3 self) -> Matrix3x1"""
        return _math_linear.Matrix1x3_transpose(self)

    def decomposeLU(self, pivotsM: "VectorSizeT") -> "math::linear::MatrixMxN< 1,3,double >::Like_T":
        r"""decomposeLU(Matrix1x3 self, VectorSizeT pivotsM) -> Matrix1x3"""
        return _math_linear.Matrix1x3_decomposeLU(self, pivotsM)

    def permute(self, pivotsM: "VectorSizeT", n: "size_t"=3) -> "math::linear::MatrixMxN< 1,3,double >::Like_T":
        r"""permute(Matrix1x3 self, VectorSizeT pivotsM, size_t n=3) -> Matrix1x3"""
        return _math_linear.Matrix1x3_permute(self, pivotsM, n)

    def normSq(self) -> "double":
        r"""normSq(Matrix1x3 self) -> double"""
        return _math_linear.Matrix1x3_normSq(self)

    def norm(self) -> "double":
        r"""norm(Matrix1x3 self) -> double"""
        return _math_linear.Matrix1x3_norm(self)

    def normalize(self) -> "math::linear::MatrixMxN< 1,3,double > &":
        r"""normalize(Matrix1x3 self) -> Matrix1x3"""
        return _math_linear.Matrix1x3_normalize(self)

    def unit(self) -> "math::linear::MatrixMxN< 1,3,double >::Like_T":
        r"""unit(Matrix1x3 self) -> Matrix1x3"""
        return _math_linear.Matrix1x3_unit(self)

    def __add__(self, mx: "Matrix1x3") -> "math::linear::MatrixMxN< 1,3,double >::Like_T":
        r"""__add__(Matrix1x3 self, Matrix1x3 mx) -> Matrix1x3"""
        return _math_linear.Matrix1x3___add__(self, mx)

    def __sub__(self, mx: "Matrix1x3") -> "math::linear::MatrixMxN< 1,3,double >::Like_T":
        r"""__sub__(Matrix1x3 self, Matrix1x3 mx) -> Matrix1x3"""
        return _math_linear.Matrix1x3___sub__(self, mx)

    def __mul__(self, scalar: "double") -> "math::linear::MatrixMxN< 1,3,double >::Like_T":
        r"""__mul__(Matrix1x3 self, double scalar) -> Matrix1x3"""
        return _math_linear.Matrix1x3___mul__(self, scalar)

    def __truediv__(self, *args):
        return _math_linear.Matrix1x3___truediv__(self, *args)
    __div__ = __truediv__



    def __neg__(self) -> "math::linear::MatrixMxN< 1,3,double >::Like_T":
        r"""__neg__(Matrix1x3 self) -> Matrix1x3"""
        return _math_linear.Matrix1x3___neg__(self)

    def __getitem__(self, inObj: "PyObject *") -> "double":
        r"""__getitem__(Matrix1x3 self, PyObject * inObj) -> double"""
        return _math_linear.Matrix1x3___getitem__(self, inObj)

    def __setitem__(self, inObj: "PyObject *", val: "double") -> "void":
        r"""__setitem__(Matrix1x3 self, PyObject * inObj, double val)"""
        return _math_linear.Matrix1x3___setitem__(self, inObj, val)

    def __str__(self) -> "std::string":
        r"""__str__(Matrix1x3 self) -> std::string"""
        return _math_linear.Matrix1x3___str__(self)

    def vals(self) -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >":
        r"""vals(Matrix1x3 self) -> std_vector_vector_double"""
        return _math_linear.Matrix1x3_vals(self)

# Register Matrix1x3 in _math_linear:
_math_linear.Matrix1x3_swigregister(Matrix1x3)

class Matrix2x1(object):
    r"""Proxy of C++ math::linear::MatrixMxN< 2,1,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mRaw = property(_math_linear.Matrix2x1_mRaw_get, _math_linear.Matrix2x1_mRaw_set, doc=r"""mRaw : a(2).a(1).double""")

    def __init__(self, *args):
        r"""
        __init__(Matrix2x1 self) -> Matrix2x1
        __init__(Matrix2x1 self, double cv) -> Matrix2x1
        __init__(Matrix2x1 self, double const * raw) -> Matrix2x1
        __init__(Matrix2x1 self, std_vector_double raw) -> Matrix2x1
        __init__(Matrix2x1 self, Matrix2x1 mx) -> Matrix2x1
        """
        _math_linear.Matrix2x1_swiginit(self, _math_linear.new_Matrix2x1(*args))
    __swig_destroy__ = _math_linear.delete_Matrix2x1

    def __call__(self, *args) -> "double &":
        r"""
        __call__(Matrix2x1 self, size_t i, size_t j) -> double
        __call__(Matrix2x1 self, size_t i, size_t j) -> double &
        """
        return _math_linear.Matrix2x1___call__(self, *args)

    def row(self, *args) -> "void":
        r"""
        row(Matrix2x1 self, size_t i) -> double const
        row(Matrix2x1 self, size_t i) -> double
        row(Matrix2x1 self, size_t i, double const * vec)
        row(Matrix2x1 self, size_t i, std_vector_double vec)
        """
        return _math_linear.Matrix2x1_row(self, *args)

    def col(self, *args) -> "void":
        r"""
        col(Matrix2x1 self, size_t j) -> std_vector_double
        col(Matrix2x1 self, size_t j, double const * vec)
        col(Matrix2x1 self, size_t j, std_vector_double vec)
        col(Matrix2x1 self, size_t colIdx, Matrix2x1 vec)
        """
        return _math_linear.Matrix2x1_col(self, *args)

    def rows(self) -> "size_t":
        r"""rows(Matrix2x1 self) -> size_t"""
        return _math_linear.Matrix2x1_rows(self)

    def cols(self) -> "size_t":
        r"""cols(Matrix2x1 self) -> size_t"""
        return _math_linear.Matrix2x1_cols(self)

    def size(self) -> "size_t":
        r"""size(Matrix2x1 self) -> size_t"""
        return _math_linear.Matrix2x1_size(self)

    def scale(self, scalar: "double") -> "math::linear::MatrixMxN< 2,1,double > &":
        r"""scale(Matrix2x1 self, double scalar) -> Matrix2x1"""
        return _math_linear.Matrix2x1_scale(self, scalar)

    def multiply(self, scalar: "double") -> "math::linear::MatrixMxN< 2,1 >":
        r"""multiply(Matrix2x1 self, double scalar) -> Matrix2x1"""
        return _math_linear.Matrix2x1_multiply(self, scalar)

    def scaleDiagonal(self, mx: "Matrix1x1") -> "math::linear::MatrixMxN< 2,1,double > &":
        r"""scaleDiagonal(Matrix2x1 self, Matrix1x1 mx) -> Matrix2x1"""
        return _math_linear.Matrix2x1_scaleDiagonal(self, mx)

    def multiplyDiagonal(self, mx: "Matrix1x1") -> "math::linear::MatrixMxN< 2,1,double >":
        r"""multiplyDiagonal(Matrix2x1 self, Matrix1x1 mx) -> Matrix2x1"""
        return _math_linear.Matrix2x1_multiplyDiagonal(self, mx)

    def __iadd__(self, mx: "Matrix2x1") -> "math::linear::MatrixMxN< 2,1,double >::Like_T &":
        r"""__iadd__(Matrix2x1 self, Matrix2x1 mx) -> Matrix2x1"""
        return _math_linear.Matrix2x1___iadd__(self, mx)

    def __isub__(self, mx: "Matrix2x1") -> "math::linear::MatrixMxN< 2,1,double >::Like_T &":
        r"""__isub__(Matrix2x1 self, Matrix2x1 mx) -> Matrix2x1"""
        return _math_linear.Matrix2x1___isub__(self, mx)

    def add(self, mx: "Matrix2x1") -> "math::linear::MatrixMxN< 2,1,double >::Like_T":
        r"""add(Matrix2x1 self, Matrix2x1 mx) -> Matrix2x1"""
        return _math_linear.Matrix2x1_add(self, mx)

    def subtract(self, mx: "Matrix2x1") -> "math::linear::MatrixMxN< 2,1,double >::Like_T":
        r"""subtract(Matrix2x1 self, Matrix2x1 mx) -> Matrix2x1"""
        return _math_linear.Matrix2x1_subtract(self, mx)

    def transpose(self) -> "math::linear::MatrixMxN< 1,2,double >":
        r"""transpose(Matrix2x1 self) -> Matrix1x2"""
        return _math_linear.Matrix2x1_transpose(self)

    def decomposeLU(self, pivotsM: "VectorSizeT") -> "math::linear::MatrixMxN< 2,1,double >::Like_T":
        r"""decomposeLU(Matrix2x1 self, VectorSizeT pivotsM) -> Matrix2x1"""
        return _math_linear.Matrix2x1_decomposeLU(self, pivotsM)

    def permute(self, pivotsM: "VectorSizeT", n: "size_t"=1) -> "math::linear::MatrixMxN< 2,1,double >::Like_T":
        r"""permute(Matrix2x1 self, VectorSizeT pivotsM, size_t n=1) -> Matrix2x1"""
        return _math_linear.Matrix2x1_permute(self, pivotsM, n)

    def normSq(self) -> "double":
        r"""normSq(Matrix2x1 self) -> double"""
        return _math_linear.Matrix2x1_normSq(self)

    def norm(self) -> "double":
        r"""norm(Matrix2x1 self) -> double"""
        return _math_linear.Matrix2x1_norm(self)

    def normalize(self) -> "math::linear::MatrixMxN< 2,1,double > &":
        r"""normalize(Matrix2x1 self) -> Matrix2x1"""
        return _math_linear.Matrix2x1_normalize(self)

    def unit(self) -> "math::linear::MatrixMxN< 2,1,double >::Like_T":
        r"""unit(Matrix2x1 self) -> Matrix2x1"""
        return _math_linear.Matrix2x1_unit(self)

    def __add__(self, mx: "Matrix2x1") -> "math::linear::MatrixMxN< 2,1,double >::Like_T":
        r"""__add__(Matrix2x1 self, Matrix2x1 mx) -> Matrix2x1"""
        return _math_linear.Matrix2x1___add__(self, mx)

    def __sub__(self, mx: "Matrix2x1") -> "math::linear::MatrixMxN< 2,1,double >::Like_T":
        r"""__sub__(Matrix2x1 self, Matrix2x1 mx) -> Matrix2x1"""
        return _math_linear.Matrix2x1___sub__(self, mx)

    def __mul__(self, scalar: "double") -> "math::linear::MatrixMxN< 2,1,double >::Like_T":
        r"""__mul__(Matrix2x1 self, double scalar) -> Matrix2x1"""
        return _math_linear.Matrix2x1___mul__(self, scalar)

    def __truediv__(self, *args):
        return _math_linear.Matrix2x1___truediv__(self, *args)
    __div__ = __truediv__



    def __neg__(self) -> "math::linear::MatrixMxN< 2,1,double >::Like_T":
        r"""__neg__(Matrix2x1 self) -> Matrix2x1"""
        return _math_linear.Matrix2x1___neg__(self)

    def __getitem__(self, inObj: "PyObject *") -> "double":
        r"""__getitem__(Matrix2x1 self, PyObject * inObj) -> double"""
        return _math_linear.Matrix2x1___getitem__(self, inObj)

    def __setitem__(self, inObj: "PyObject *", val: "double") -> "void":
        r"""__setitem__(Matrix2x1 self, PyObject * inObj, double val)"""
        return _math_linear.Matrix2x1___setitem__(self, inObj, val)

    def __str__(self) -> "std::string":
        r"""__str__(Matrix2x1 self) -> std::string"""
        return _math_linear.Matrix2x1___str__(self)

    def vals(self) -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >":
        r"""vals(Matrix2x1 self) -> std_vector_vector_double"""
        return _math_linear.Matrix2x1_vals(self)

# Register Matrix2x1 in _math_linear:
_math_linear.Matrix2x1_swigregister(Matrix2x1)

class Matrix2x2(object):
    r"""Proxy of C++ math::linear::MatrixMxN< 2,2,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mRaw = property(_math_linear.Matrix2x2_mRaw_get, _math_linear.Matrix2x2_mRaw_set, doc=r"""mRaw : a(2).a(2).double""")

    def __init__(self, *args):
        r"""
        __init__(Matrix2x2 self) -> Matrix2x2
        __init__(Matrix2x2 self, double cv) -> Matrix2x2
        __init__(Matrix2x2 self, double const * raw) -> Matrix2x2
        __init__(Matrix2x2 self, std_vector_double raw) -> Matrix2x2
        __init__(Matrix2x2 self, Matrix2x2 mx) -> Matrix2x2
        """
        _math_linear.Matrix2x2_swiginit(self, _math_linear.new_Matrix2x2(*args))
    __swig_destroy__ = _math_linear.delete_Matrix2x2

    def __call__(self, *args) -> "double &":
        r"""
        __call__(Matrix2x2 self, size_t i, size_t j) -> double
        __call__(Matrix2x2 self, size_t i, size_t j) -> double &
        """
        return _math_linear.Matrix2x2___call__(self, *args)

    def row(self, *args) -> "void":
        r"""
        row(Matrix2x2 self, size_t i) -> double const
        row(Matrix2x2 self, size_t i) -> double
        row(Matrix2x2 self, size_t i, double const * vec)
        row(Matrix2x2 self, size_t i, std_vector_double vec)
        """
        return _math_linear.Matrix2x2_row(self, *args)

    def col(self, *args) -> "void":
        r"""
        col(Matrix2x2 self, size_t j) -> std_vector_double
        col(Matrix2x2 self, size_t j, double const * vec)
        col(Matrix2x2 self, size_t j, std_vector_double vec)
        col(Matrix2x2 self, size_t colIdx, Matrix2x1 vec)
        """
        return _math_linear.Matrix2x2_col(self, *args)

    def rows(self) -> "size_t":
        r"""rows(Matrix2x2 self) -> size_t"""
        return _math_linear.Matrix2x2_rows(self)

    def cols(self) -> "size_t":
        r"""cols(Matrix2x2 self) -> size_t"""
        return _math_linear.Matrix2x2_cols(self)

    def size(self) -> "size_t":
        r"""size(Matrix2x2 self) -> size_t"""
        return _math_linear.Matrix2x2_size(self)

    def scale(self, scalar: "double") -> "math::linear::MatrixMxN< 2,2,double > &":
        r"""scale(Matrix2x2 self, double scalar) -> Matrix2x2"""
        return _math_linear.Matrix2x2_scale(self, scalar)

    def multiply(self, scalar: "double") -> "math::linear::MatrixMxN< 2,2 >":
        r"""multiply(Matrix2x2 self, double scalar) -> Matrix2x2"""
        return _math_linear.Matrix2x2_multiply(self, scalar)

    def scaleDiagonal(self, mx: "Matrix2x2") -> "math::linear::MatrixMxN< 2,2,double > &":
        r"""scaleDiagonal(Matrix2x2 self, Matrix2x2 mx) -> Matrix2x2"""
        return _math_linear.Matrix2x2_scaleDiagonal(self, mx)

    def multiplyDiagonal(self, mx: "Matrix2x2") -> "math::linear::MatrixMxN< 2,2,double >":
        r"""multiplyDiagonal(Matrix2x2 self, Matrix2x2 mx) -> Matrix2x2"""
        return _math_linear.Matrix2x2_multiplyDiagonal(self, mx)

    def __iadd__(self, mx: "Matrix2x2") -> "math::linear::MatrixMxN< 2,2,double >::Like_T &":
        r"""__iadd__(Matrix2x2 self, Matrix2x2 mx) -> Matrix2x2"""
        return _math_linear.Matrix2x2___iadd__(self, mx)

    def __isub__(self, mx: "Matrix2x2") -> "math::linear::MatrixMxN< 2,2,double >::Like_T &":
        r"""__isub__(Matrix2x2 self, Matrix2x2 mx) -> Matrix2x2"""
        return _math_linear.Matrix2x2___isub__(self, mx)

    def add(self, mx: "Matrix2x2") -> "math::linear::MatrixMxN< 2,2,double >::Like_T":
        r"""add(Matrix2x2 self, Matrix2x2 mx) -> Matrix2x2"""
        return _math_linear.Matrix2x2_add(self, mx)

    def subtract(self, mx: "Matrix2x2") -> "math::linear::MatrixMxN< 2,2,double >::Like_T":
        r"""subtract(Matrix2x2 self, Matrix2x2 mx) -> Matrix2x2"""
        return _math_linear.Matrix2x2_subtract(self, mx)

    def transpose(self) -> "math::linear::MatrixMxN< 2,2,double >":
        r"""transpose(Matrix2x2 self) -> Matrix2x2"""
        return _math_linear.Matrix2x2_transpose(self)

    def decomposeLU(self, pivotsM: "VectorSizeT") -> "math::linear::MatrixMxN< 2,2,double >::Like_T":
        r"""decomposeLU(Matrix2x2 self, VectorSizeT pivotsM) -> Matrix2x2"""
        return _math_linear.Matrix2x2_decomposeLU(self, pivotsM)

    def permute(self, pivotsM: "VectorSizeT", n: "size_t"=2) -> "math::linear::MatrixMxN< 2,2,double >::Like_T":
        r"""permute(Matrix2x2 self, VectorSizeT pivotsM, size_t n=2) -> Matrix2x2"""
        return _math_linear.Matrix2x2_permute(self, pivotsM, n)

    def normSq(self) -> "double":
        r"""normSq(Matrix2x2 self) -> double"""
        return _math_linear.Matrix2x2_normSq(self)

    def norm(self) -> "double":
        r"""norm(Matrix2x2 self) -> double"""
        return _math_linear.Matrix2x2_norm(self)

    def normalize(self) -> "math::linear::MatrixMxN< 2,2,double > &":
        r"""normalize(Matrix2x2 self) -> Matrix2x2"""
        return _math_linear.Matrix2x2_normalize(self)

    def unit(self) -> "math::linear::MatrixMxN< 2,2,double >::Like_T":
        r"""unit(Matrix2x2 self) -> Matrix2x2"""
        return _math_linear.Matrix2x2_unit(self)

    def __add__(self, mx: "Matrix2x2") -> "math::linear::MatrixMxN< 2,2,double >::Like_T":
        r"""__add__(Matrix2x2 self, Matrix2x2 mx) -> Matrix2x2"""
        return _math_linear.Matrix2x2___add__(self, mx)

    def __sub__(self, mx: "Matrix2x2") -> "math::linear::MatrixMxN< 2,2,double >::Like_T":
        r"""__sub__(Matrix2x2 self, Matrix2x2 mx) -> Matrix2x2"""
        return _math_linear.Matrix2x2___sub__(self, mx)

    def __mul__(self, scalar: "double") -> "math::linear::MatrixMxN< 2,2,double >::Like_T":
        r"""__mul__(Matrix2x2 self, double scalar) -> Matrix2x2"""
        return _math_linear.Matrix2x2___mul__(self, scalar)

    def __truediv__(self, *args):
        return _math_linear.Matrix2x2___truediv__(self, *args)
    __div__ = __truediv__



    def __neg__(self) -> "math::linear::MatrixMxN< 2,2,double >::Like_T":
        r"""__neg__(Matrix2x2 self) -> Matrix2x2"""
        return _math_linear.Matrix2x2___neg__(self)

    def __getitem__(self, inObj: "PyObject *") -> "double":
        r"""__getitem__(Matrix2x2 self, PyObject * inObj) -> double"""
        return _math_linear.Matrix2x2___getitem__(self, inObj)

    def __setitem__(self, inObj: "PyObject *", val: "double") -> "void":
        r"""__setitem__(Matrix2x2 self, PyObject * inObj, double val)"""
        return _math_linear.Matrix2x2___setitem__(self, inObj, val)

    def __str__(self) -> "std::string":
        r"""__str__(Matrix2x2 self) -> std::string"""
        return _math_linear.Matrix2x2___str__(self)

    def vals(self) -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >":
        r"""vals(Matrix2x2 self) -> std_vector_vector_double"""
        return _math_linear.Matrix2x2_vals(self)

# Register Matrix2x2 in _math_linear:
_math_linear.Matrix2x2_swigregister(Matrix2x2)

class Matrix2x3(object):
    r"""Proxy of C++ math::linear::MatrixMxN< 2,3,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mRaw = property(_math_linear.Matrix2x3_mRaw_get, _math_linear.Matrix2x3_mRaw_set, doc=r"""mRaw : a(2).a(3).double""")

    def __init__(self, *args):
        r"""
        __init__(Matrix2x3 self) -> Matrix2x3
        __init__(Matrix2x3 self, double cv) -> Matrix2x3
        __init__(Matrix2x3 self, double const * raw) -> Matrix2x3
        __init__(Matrix2x3 self, std_vector_double raw) -> Matrix2x3
        __init__(Matrix2x3 self, Matrix2x3 mx) -> Matrix2x3
        """
        _math_linear.Matrix2x3_swiginit(self, _math_linear.new_Matrix2x3(*args))
    __swig_destroy__ = _math_linear.delete_Matrix2x3

    def __call__(self, *args) -> "double &":
        r"""
        __call__(Matrix2x3 self, size_t i, size_t j) -> double
        __call__(Matrix2x3 self, size_t i, size_t j) -> double &
        """
        return _math_linear.Matrix2x3___call__(self, *args)

    def row(self, *args) -> "void":
        r"""
        row(Matrix2x3 self, size_t i) -> double const
        row(Matrix2x3 self, size_t i) -> double
        row(Matrix2x3 self, size_t i, double const * vec)
        row(Matrix2x3 self, size_t i, std_vector_double vec)
        """
        return _math_linear.Matrix2x3_row(self, *args)

    def col(self, *args) -> "void":
        r"""
        col(Matrix2x3 self, size_t j) -> std_vector_double
        col(Matrix2x3 self, size_t j, double const * vec)
        col(Matrix2x3 self, size_t j, std_vector_double vec)
        col(Matrix2x3 self, size_t colIdx, Matrix2x1 vec)
        """
        return _math_linear.Matrix2x3_col(self, *args)

    def rows(self) -> "size_t":
        r"""rows(Matrix2x3 self) -> size_t"""
        return _math_linear.Matrix2x3_rows(self)

    def cols(self) -> "size_t":
        r"""cols(Matrix2x3 self) -> size_t"""
        return _math_linear.Matrix2x3_cols(self)

    def size(self) -> "size_t":
        r"""size(Matrix2x3 self) -> size_t"""
        return _math_linear.Matrix2x3_size(self)

    def scale(self, scalar: "double") -> "math::linear::MatrixMxN< 2,3,double > &":
        r"""scale(Matrix2x3 self, double scalar) -> Matrix2x3"""
        return _math_linear.Matrix2x3_scale(self, scalar)

    def multiply(self, scalar: "double") -> "math::linear::MatrixMxN< 2,3 >":
        r"""multiply(Matrix2x3 self, double scalar) -> Matrix2x3"""
        return _math_linear.Matrix2x3_multiply(self, scalar)

    def scaleDiagonal(self, mx: "Matrix3x3") -> "math::linear::MatrixMxN< 2,3,double > &":
        r"""scaleDiagonal(Matrix2x3 self, Matrix3x3 mx) -> Matrix2x3"""
        return _math_linear.Matrix2x3_scaleDiagonal(self, mx)

    def multiplyDiagonal(self, mx: "Matrix3x3") -> "math::linear::MatrixMxN< 2,3,double >":
        r"""multiplyDiagonal(Matrix2x3 self, Matrix3x3 mx) -> Matrix2x3"""
        return _math_linear.Matrix2x3_multiplyDiagonal(self, mx)

    def __iadd__(self, mx: "Matrix2x3") -> "math::linear::MatrixMxN< 2,3,double >::Like_T &":
        r"""__iadd__(Matrix2x3 self, Matrix2x3 mx) -> Matrix2x3"""
        return _math_linear.Matrix2x3___iadd__(self, mx)

    def __isub__(self, mx: "Matrix2x3") -> "math::linear::MatrixMxN< 2,3,double >::Like_T &":
        r"""__isub__(Matrix2x3 self, Matrix2x3 mx) -> Matrix2x3"""
        return _math_linear.Matrix2x3___isub__(self, mx)

    def add(self, mx: "Matrix2x3") -> "math::linear::MatrixMxN< 2,3,double >::Like_T":
        r"""add(Matrix2x3 self, Matrix2x3 mx) -> Matrix2x3"""
        return _math_linear.Matrix2x3_add(self, mx)

    def subtract(self, mx: "Matrix2x3") -> "math::linear::MatrixMxN< 2,3,double >::Like_T":
        r"""subtract(Matrix2x3 self, Matrix2x3 mx) -> Matrix2x3"""
        return _math_linear.Matrix2x3_subtract(self, mx)

    def transpose(self) -> "math::linear::MatrixMxN< 3,2,double >":
        r"""transpose(Matrix2x3 self) -> Matrix3x2"""
        return _math_linear.Matrix2x3_transpose(self)

    def decomposeLU(self, pivotsM: "VectorSizeT") -> "math::linear::MatrixMxN< 2,3,double >::Like_T":
        r"""decomposeLU(Matrix2x3 self, VectorSizeT pivotsM) -> Matrix2x3"""
        return _math_linear.Matrix2x3_decomposeLU(self, pivotsM)

    def permute(self, pivotsM: "VectorSizeT", n: "size_t"=3) -> "math::linear::MatrixMxN< 2,3,double >::Like_T":
        r"""permute(Matrix2x3 self, VectorSizeT pivotsM, size_t n=3) -> Matrix2x3"""
        return _math_linear.Matrix2x3_permute(self, pivotsM, n)

    def normSq(self) -> "double":
        r"""normSq(Matrix2x3 self) -> double"""
        return _math_linear.Matrix2x3_normSq(self)

    def norm(self) -> "double":
        r"""norm(Matrix2x3 self) -> double"""
        return _math_linear.Matrix2x3_norm(self)

    def normalize(self) -> "math::linear::MatrixMxN< 2,3,double > &":
        r"""normalize(Matrix2x3 self) -> Matrix2x3"""
        return _math_linear.Matrix2x3_normalize(self)

    def unit(self) -> "math::linear::MatrixMxN< 2,3,double >::Like_T":
        r"""unit(Matrix2x3 self) -> Matrix2x3"""
        return _math_linear.Matrix2x3_unit(self)

    def __add__(self, mx: "Matrix2x3") -> "math::linear::MatrixMxN< 2,3,double >::Like_T":
        r"""__add__(Matrix2x3 self, Matrix2x3 mx) -> Matrix2x3"""
        return _math_linear.Matrix2x3___add__(self, mx)

    def __sub__(self, mx: "Matrix2x3") -> "math::linear::MatrixMxN< 2,3,double >::Like_T":
        r"""__sub__(Matrix2x3 self, Matrix2x3 mx) -> Matrix2x3"""
        return _math_linear.Matrix2x3___sub__(self, mx)

    def __mul__(self, scalar: "double") -> "math::linear::MatrixMxN< 2,3,double >::Like_T":
        r"""__mul__(Matrix2x3 self, double scalar) -> Matrix2x3"""
        return _math_linear.Matrix2x3___mul__(self, scalar)

    def __truediv__(self, *args):
        return _math_linear.Matrix2x3___truediv__(self, *args)
    __div__ = __truediv__



    def __neg__(self) -> "math::linear::MatrixMxN< 2,3,double >::Like_T":
        r"""__neg__(Matrix2x3 self) -> Matrix2x3"""
        return _math_linear.Matrix2x3___neg__(self)

    def __getitem__(self, inObj: "PyObject *") -> "double":
        r"""__getitem__(Matrix2x3 self, PyObject * inObj) -> double"""
        return _math_linear.Matrix2x3___getitem__(self, inObj)

    def __setitem__(self, inObj: "PyObject *", val: "double") -> "void":
        r"""__setitem__(Matrix2x3 self, PyObject * inObj, double val)"""
        return _math_linear.Matrix2x3___setitem__(self, inObj, val)

    def __str__(self) -> "std::string":
        r"""__str__(Matrix2x3 self) -> std::string"""
        return _math_linear.Matrix2x3___str__(self)

    def vals(self) -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >":
        r"""vals(Matrix2x3 self) -> std_vector_vector_double"""
        return _math_linear.Matrix2x3_vals(self)

# Register Matrix2x3 in _math_linear:
_math_linear.Matrix2x3_swigregister(Matrix2x3)

class Matrix2x7(object):
    r"""Proxy of C++ math::linear::MatrixMxN< 2,7,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mRaw = property(_math_linear.Matrix2x7_mRaw_get, _math_linear.Matrix2x7_mRaw_set, doc=r"""mRaw : a(2).a(7).double""")

    def __init__(self, *args):
        r"""
        __init__(Matrix2x7 self) -> Matrix2x7
        __init__(Matrix2x7 self, double cv) -> Matrix2x7
        __init__(Matrix2x7 self, double const * raw) -> Matrix2x7
        __init__(Matrix2x7 self, std_vector_double raw) -> Matrix2x7
        __init__(Matrix2x7 self, Matrix2x7 mx) -> Matrix2x7
        """
        _math_linear.Matrix2x7_swiginit(self, _math_linear.new_Matrix2x7(*args))
    __swig_destroy__ = _math_linear.delete_Matrix2x7

    def __call__(self, *args) -> "double &":
        r"""
        __call__(Matrix2x7 self, size_t i, size_t j) -> double
        __call__(Matrix2x7 self, size_t i, size_t j) -> double &
        """
        return _math_linear.Matrix2x7___call__(self, *args)

    def row(self, *args) -> "void":
        r"""
        row(Matrix2x7 self, size_t i) -> double const
        row(Matrix2x7 self, size_t i) -> double
        row(Matrix2x7 self, size_t i, double const * vec)
        row(Matrix2x7 self, size_t i, std_vector_double vec)
        """
        return _math_linear.Matrix2x7_row(self, *args)

    def col(self, *args) -> "void":
        r"""
        col(Matrix2x7 self, size_t j) -> std_vector_double
        col(Matrix2x7 self, size_t j, double const * vec)
        col(Matrix2x7 self, size_t j, std_vector_double vec)
        col(Matrix2x7 self, size_t colIdx, Matrix2x1 vec)
        """
        return _math_linear.Matrix2x7_col(self, *args)

    def rows(self) -> "size_t":
        r"""rows(Matrix2x7 self) -> size_t"""
        return _math_linear.Matrix2x7_rows(self)

    def cols(self) -> "size_t":
        r"""cols(Matrix2x7 self) -> size_t"""
        return _math_linear.Matrix2x7_cols(self)

    def size(self) -> "size_t":
        r"""size(Matrix2x7 self) -> size_t"""
        return _math_linear.Matrix2x7_size(self)

    def scale(self, scalar: "double") -> "math::linear::MatrixMxN< 2,7,double > &":
        r"""scale(Matrix2x7 self, double scalar) -> Matrix2x7"""
        return _math_linear.Matrix2x7_scale(self, scalar)

    def multiply(self, scalar: "double") -> "math::linear::MatrixMxN< 2,7 >":
        r"""multiply(Matrix2x7 self, double scalar) -> Matrix2x7"""
        return _math_linear.Matrix2x7_multiply(self, scalar)

    def scaleDiagonal(self, mx: "Matrix7x7") -> "math::linear::MatrixMxN< 2,7,double > &":
        r"""scaleDiagonal(Matrix2x7 self, Matrix7x7 mx) -> Matrix2x7"""
        return _math_linear.Matrix2x7_scaleDiagonal(self, mx)

    def multiplyDiagonal(self, mx: "Matrix7x7") -> "math::linear::MatrixMxN< 2,7,double >":
        r"""multiplyDiagonal(Matrix2x7 self, Matrix7x7 mx) -> Matrix2x7"""
        return _math_linear.Matrix2x7_multiplyDiagonal(self, mx)

    def __iadd__(self, mx: "Matrix2x7") -> "math::linear::MatrixMxN< 2,7,double >::Like_T &":
        r"""__iadd__(Matrix2x7 self, Matrix2x7 mx) -> Matrix2x7"""
        return _math_linear.Matrix2x7___iadd__(self, mx)

    def __isub__(self, mx: "Matrix2x7") -> "math::linear::MatrixMxN< 2,7,double >::Like_T &":
        r"""__isub__(Matrix2x7 self, Matrix2x7 mx) -> Matrix2x7"""
        return _math_linear.Matrix2x7___isub__(self, mx)

    def add(self, mx: "Matrix2x7") -> "math::linear::MatrixMxN< 2,7,double >::Like_T":
        r"""add(Matrix2x7 self, Matrix2x7 mx) -> Matrix2x7"""
        return _math_linear.Matrix2x7_add(self, mx)

    def subtract(self, mx: "Matrix2x7") -> "math::linear::MatrixMxN< 2,7,double >::Like_T":
        r"""subtract(Matrix2x7 self, Matrix2x7 mx) -> Matrix2x7"""
        return _math_linear.Matrix2x7_subtract(self, mx)

    def transpose(self) -> "math::linear::MatrixMxN< 7,2,double >":
        r"""transpose(Matrix2x7 self) -> Matrix7x2"""
        return _math_linear.Matrix2x7_transpose(self)

    def decomposeLU(self, pivotsM: "VectorSizeT") -> "math::linear::MatrixMxN< 2,7,double >::Like_T":
        r"""decomposeLU(Matrix2x7 self, VectorSizeT pivotsM) -> Matrix2x7"""
        return _math_linear.Matrix2x7_decomposeLU(self, pivotsM)

    def permute(self, pivotsM: "VectorSizeT", n: "size_t"=7) -> "math::linear::MatrixMxN< 2,7,double >::Like_T":
        r"""permute(Matrix2x7 self, VectorSizeT pivotsM, size_t n=7) -> Matrix2x7"""
        return _math_linear.Matrix2x7_permute(self, pivotsM, n)

    def normSq(self) -> "double":
        r"""normSq(Matrix2x7 self) -> double"""
        return _math_linear.Matrix2x7_normSq(self)

    def norm(self) -> "double":
        r"""norm(Matrix2x7 self) -> double"""
        return _math_linear.Matrix2x7_norm(self)

    def normalize(self) -> "math::linear::MatrixMxN< 2,7,double > &":
        r"""normalize(Matrix2x7 self) -> Matrix2x7"""
        return _math_linear.Matrix2x7_normalize(self)

    def unit(self) -> "math::linear::MatrixMxN< 2,7,double >::Like_T":
        r"""unit(Matrix2x7 self) -> Matrix2x7"""
        return _math_linear.Matrix2x7_unit(self)

    def __add__(self, mx: "Matrix2x7") -> "math::linear::MatrixMxN< 2,7,double >::Like_T":
        r"""__add__(Matrix2x7 self, Matrix2x7 mx) -> Matrix2x7"""
        return _math_linear.Matrix2x7___add__(self, mx)

    def __sub__(self, mx: "Matrix2x7") -> "math::linear::MatrixMxN< 2,7,double >::Like_T":
        r"""__sub__(Matrix2x7 self, Matrix2x7 mx) -> Matrix2x7"""
        return _math_linear.Matrix2x7___sub__(self, mx)

    def __mul__(self, scalar: "double") -> "math::linear::MatrixMxN< 2,7,double >::Like_T":
        r"""__mul__(Matrix2x7 self, double scalar) -> Matrix2x7"""
        return _math_linear.Matrix2x7___mul__(self, scalar)

    def __truediv__(self, *args):
        return _math_linear.Matrix2x7___truediv__(self, *args)
    __div__ = __truediv__



    def __neg__(self) -> "math::linear::MatrixMxN< 2,7,double >::Like_T":
        r"""__neg__(Matrix2x7 self) -> Matrix2x7"""
        return _math_linear.Matrix2x7___neg__(self)

    def __getitem__(self, inObj: "PyObject *") -> "double":
        r"""__getitem__(Matrix2x7 self, PyObject * inObj) -> double"""
        return _math_linear.Matrix2x7___getitem__(self, inObj)

    def __setitem__(self, inObj: "PyObject *", val: "double") -> "void":
        r"""__setitem__(Matrix2x7 self, PyObject * inObj, double val)"""
        return _math_linear.Matrix2x7___setitem__(self, inObj, val)

    def __str__(self) -> "std::string":
        r"""__str__(Matrix2x7 self) -> std::string"""
        return _math_linear.Matrix2x7___str__(self)

    def vals(self) -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >":
        r"""vals(Matrix2x7 self) -> std_vector_vector_double"""
        return _math_linear.Matrix2x7_vals(self)

# Register Matrix2x7 in _math_linear:
_math_linear.Matrix2x7_swigregister(Matrix2x7)

class Matrix3x1(object):
    r"""Proxy of C++ math::linear::MatrixMxN< 3,1,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mRaw = property(_math_linear.Matrix3x1_mRaw_get, _math_linear.Matrix3x1_mRaw_set, doc=r"""mRaw : a(3).a(1).double""")

    def __init__(self, *args):
        r"""
        __init__(Matrix3x1 self) -> Matrix3x1
        __init__(Matrix3x1 self, double cv) -> Matrix3x1
        __init__(Matrix3x1 self, double const * raw) -> Matrix3x1
        __init__(Matrix3x1 self, std_vector_double raw) -> Matrix3x1
        __init__(Matrix3x1 self, Matrix3x1 mx) -> Matrix3x1
        """
        _math_linear.Matrix3x1_swiginit(self, _math_linear.new_Matrix3x1(*args))
    __swig_destroy__ = _math_linear.delete_Matrix3x1

    def __call__(self, *args) -> "double &":
        r"""
        __call__(Matrix3x1 self, size_t i, size_t j) -> double
        __call__(Matrix3x1 self, size_t i, size_t j) -> double &
        """
        return _math_linear.Matrix3x1___call__(self, *args)

    def row(self, *args) -> "void":
        r"""
        row(Matrix3x1 self, size_t i) -> double const
        row(Matrix3x1 self, size_t i) -> double
        row(Matrix3x1 self, size_t i, double const * vec)
        row(Matrix3x1 self, size_t i, std_vector_double vec)
        """
        return _math_linear.Matrix3x1_row(self, *args)

    def col(self, *args) -> "void":
        r"""
        col(Matrix3x1 self, size_t j) -> std_vector_double
        col(Matrix3x1 self, size_t j, double const * vec)
        col(Matrix3x1 self, size_t j, std_vector_double vec)
        col(Matrix3x1 self, size_t colIdx, Matrix3x1 vec)
        """
        return _math_linear.Matrix3x1_col(self, *args)

    def rows(self) -> "size_t":
        r"""rows(Matrix3x1 self) -> size_t"""
        return _math_linear.Matrix3x1_rows(self)

    def cols(self) -> "size_t":
        r"""cols(Matrix3x1 self) -> size_t"""
        return _math_linear.Matrix3x1_cols(self)

    def size(self) -> "size_t":
        r"""size(Matrix3x1 self) -> size_t"""
        return _math_linear.Matrix3x1_size(self)

    def scale(self, scalar: "double") -> "math::linear::MatrixMxN< 3,1,double > &":
        r"""scale(Matrix3x1 self, double scalar) -> Matrix3x1"""
        return _math_linear.Matrix3x1_scale(self, scalar)

    def multiply(self, scalar: "double") -> "math::linear::MatrixMxN< 3,1 >":
        r"""multiply(Matrix3x1 self, double scalar) -> Matrix3x1"""
        return _math_linear.Matrix3x1_multiply(self, scalar)

    def scaleDiagonal(self, mx: "Matrix1x1") -> "math::linear::MatrixMxN< 3,1,double > &":
        r"""scaleDiagonal(Matrix3x1 self, Matrix1x1 mx) -> Matrix3x1"""
        return _math_linear.Matrix3x1_scaleDiagonal(self, mx)

    def multiplyDiagonal(self, mx: "Matrix1x1") -> "math::linear::MatrixMxN< 3,1,double >":
        r"""multiplyDiagonal(Matrix3x1 self, Matrix1x1 mx) -> Matrix3x1"""
        return _math_linear.Matrix3x1_multiplyDiagonal(self, mx)

    def __iadd__(self, mx: "Matrix3x1") -> "math::linear::MatrixMxN< 3,1,double >::Like_T &":
        r"""__iadd__(Matrix3x1 self, Matrix3x1 mx) -> Matrix3x1"""
        return _math_linear.Matrix3x1___iadd__(self, mx)

    def __isub__(self, mx: "Matrix3x1") -> "math::linear::MatrixMxN< 3,1,double >::Like_T &":
        r"""__isub__(Matrix3x1 self, Matrix3x1 mx) -> Matrix3x1"""
        return _math_linear.Matrix3x1___isub__(self, mx)

    def add(self, mx: "Matrix3x1") -> "math::linear::MatrixMxN< 3,1,double >::Like_T":
        r"""add(Matrix3x1 self, Matrix3x1 mx) -> Matrix3x1"""
        return _math_linear.Matrix3x1_add(self, mx)

    def subtract(self, mx: "Matrix3x1") -> "math::linear::MatrixMxN< 3,1,double >::Like_T":
        r"""subtract(Matrix3x1 self, Matrix3x1 mx) -> Matrix3x1"""
        return _math_linear.Matrix3x1_subtract(self, mx)

    def transpose(self) -> "math::linear::MatrixMxN< 1,3,double >":
        r"""transpose(Matrix3x1 self) -> Matrix1x3"""
        return _math_linear.Matrix3x1_transpose(self)

    def decomposeLU(self, pivotsM: "VectorSizeT") -> "math::linear::MatrixMxN< 3,1,double >::Like_T":
        r"""decomposeLU(Matrix3x1 self, VectorSizeT pivotsM) -> Matrix3x1"""
        return _math_linear.Matrix3x1_decomposeLU(self, pivotsM)

    def permute(self, pivotsM: "VectorSizeT", n: "size_t"=1) -> "math::linear::MatrixMxN< 3,1,double >::Like_T":
        r"""permute(Matrix3x1 self, VectorSizeT pivotsM, size_t n=1) -> Matrix3x1"""
        return _math_linear.Matrix3x1_permute(self, pivotsM, n)

    def normSq(self) -> "double":
        r"""normSq(Matrix3x1 self) -> double"""
        return _math_linear.Matrix3x1_normSq(self)

    def norm(self) -> "double":
        r"""norm(Matrix3x1 self) -> double"""
        return _math_linear.Matrix3x1_norm(self)

    def normalize(self) -> "math::linear::MatrixMxN< 3,1,double > &":
        r"""normalize(Matrix3x1 self) -> Matrix3x1"""
        return _math_linear.Matrix3x1_normalize(self)

    def unit(self) -> "math::linear::MatrixMxN< 3,1,double >::Like_T":
        r"""unit(Matrix3x1 self) -> Matrix3x1"""
        return _math_linear.Matrix3x1_unit(self)

    def __add__(self, mx: "Matrix3x1") -> "math::linear::MatrixMxN< 3,1,double >::Like_T":
        r"""__add__(Matrix3x1 self, Matrix3x1 mx) -> Matrix3x1"""
        return _math_linear.Matrix3x1___add__(self, mx)

    def __sub__(self, mx: "Matrix3x1") -> "math::linear::MatrixMxN< 3,1,double >::Like_T":
        r"""__sub__(Matrix3x1 self, Matrix3x1 mx) -> Matrix3x1"""
        return _math_linear.Matrix3x1___sub__(self, mx)

    def __mul__(self, scalar: "double") -> "math::linear::MatrixMxN< 3,1,double >::Like_T":
        r"""__mul__(Matrix3x1 self, double scalar) -> Matrix3x1"""
        return _math_linear.Matrix3x1___mul__(self, scalar)

    def __truediv__(self, *args):
        return _math_linear.Matrix3x1___truediv__(self, *args)
    __div__ = __truediv__



    def __neg__(self) -> "math::linear::MatrixMxN< 3,1,double >::Like_T":
        r"""__neg__(Matrix3x1 self) -> Matrix3x1"""
        return _math_linear.Matrix3x1___neg__(self)

    def __getitem__(self, inObj: "PyObject *") -> "double":
        r"""__getitem__(Matrix3x1 self, PyObject * inObj) -> double"""
        return _math_linear.Matrix3x1___getitem__(self, inObj)

    def __setitem__(self, inObj: "PyObject *", val: "double") -> "void":
        r"""__setitem__(Matrix3x1 self, PyObject * inObj, double val)"""
        return _math_linear.Matrix3x1___setitem__(self, inObj, val)

    def __str__(self) -> "std::string":
        r"""__str__(Matrix3x1 self) -> std::string"""
        return _math_linear.Matrix3x1___str__(self)

    def vals(self) -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >":
        r"""vals(Matrix3x1 self) -> std_vector_vector_double"""
        return _math_linear.Matrix3x1_vals(self)

# Register Matrix3x1 in _math_linear:
_math_linear.Matrix3x1_swigregister(Matrix3x1)

class Matrix3x2(object):
    r"""Proxy of C++ math::linear::MatrixMxN< 3,2,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mRaw = property(_math_linear.Matrix3x2_mRaw_get, _math_linear.Matrix3x2_mRaw_set, doc=r"""mRaw : a(3).a(2).double""")

    def __init__(self, *args):
        r"""
        __init__(Matrix3x2 self) -> Matrix3x2
        __init__(Matrix3x2 self, double cv) -> Matrix3x2
        __init__(Matrix3x2 self, double const * raw) -> Matrix3x2
        __init__(Matrix3x2 self, std_vector_double raw) -> Matrix3x2
        __init__(Matrix3x2 self, Matrix3x2 mx) -> Matrix3x2
        """
        _math_linear.Matrix3x2_swiginit(self, _math_linear.new_Matrix3x2(*args))
    __swig_destroy__ = _math_linear.delete_Matrix3x2

    def __call__(self, *args) -> "double &":
        r"""
        __call__(Matrix3x2 self, size_t i, size_t j) -> double
        __call__(Matrix3x2 self, size_t i, size_t j) -> double &
        """
        return _math_linear.Matrix3x2___call__(self, *args)

    def row(self, *args) -> "void":
        r"""
        row(Matrix3x2 self, size_t i) -> double const
        row(Matrix3x2 self, size_t i) -> double
        row(Matrix3x2 self, size_t i, double const * vec)
        row(Matrix3x2 self, size_t i, std_vector_double vec)
        """
        return _math_linear.Matrix3x2_row(self, *args)

    def col(self, *args) -> "void":
        r"""
        col(Matrix3x2 self, size_t j) -> std_vector_double
        col(Matrix3x2 self, size_t j, double const * vec)
        col(Matrix3x2 self, size_t j, std_vector_double vec)
        col(Matrix3x2 self, size_t colIdx, Matrix3x1 vec)
        """
        return _math_linear.Matrix3x2_col(self, *args)

    def rows(self) -> "size_t":
        r"""rows(Matrix3x2 self) -> size_t"""
        return _math_linear.Matrix3x2_rows(self)

    def cols(self) -> "size_t":
        r"""cols(Matrix3x2 self) -> size_t"""
        return _math_linear.Matrix3x2_cols(self)

    def size(self) -> "size_t":
        r"""size(Matrix3x2 self) -> size_t"""
        return _math_linear.Matrix3x2_size(self)

    def scale(self, scalar: "double") -> "math::linear::MatrixMxN< 3,2,double > &":
        r"""scale(Matrix3x2 self, double scalar) -> Matrix3x2"""
        return _math_linear.Matrix3x2_scale(self, scalar)

    def multiply(self, scalar: "double") -> "math::linear::MatrixMxN< 3,2 >":
        r"""multiply(Matrix3x2 self, double scalar) -> Matrix3x2"""
        return _math_linear.Matrix3x2_multiply(self, scalar)

    def scaleDiagonal(self, mx: "Matrix2x2") -> "math::linear::MatrixMxN< 3,2,double > &":
        r"""scaleDiagonal(Matrix3x2 self, Matrix2x2 mx) -> Matrix3x2"""
        return _math_linear.Matrix3x2_scaleDiagonal(self, mx)

    def multiplyDiagonal(self, mx: "Matrix2x2") -> "math::linear::MatrixMxN< 3,2,double >":
        r"""multiplyDiagonal(Matrix3x2 self, Matrix2x2 mx) -> Matrix3x2"""
        return _math_linear.Matrix3x2_multiplyDiagonal(self, mx)

    def __iadd__(self, mx: "Matrix3x2") -> "math::linear::MatrixMxN< 3,2,double >::Like_T &":
        r"""__iadd__(Matrix3x2 self, Matrix3x2 mx) -> Matrix3x2"""
        return _math_linear.Matrix3x2___iadd__(self, mx)

    def __isub__(self, mx: "Matrix3x2") -> "math::linear::MatrixMxN< 3,2,double >::Like_T &":
        r"""__isub__(Matrix3x2 self, Matrix3x2 mx) -> Matrix3x2"""
        return _math_linear.Matrix3x2___isub__(self, mx)

    def add(self, mx: "Matrix3x2") -> "math::linear::MatrixMxN< 3,2,double >::Like_T":
        r"""add(Matrix3x2 self, Matrix3x2 mx) -> Matrix3x2"""
        return _math_linear.Matrix3x2_add(self, mx)

    def subtract(self, mx: "Matrix3x2") -> "math::linear::MatrixMxN< 3,2,double >::Like_T":
        r"""subtract(Matrix3x2 self, Matrix3x2 mx) -> Matrix3x2"""
        return _math_linear.Matrix3x2_subtract(self, mx)

    def transpose(self) -> "math::linear::MatrixMxN< 2,3,double >":
        r"""transpose(Matrix3x2 self) -> Matrix2x3"""
        return _math_linear.Matrix3x2_transpose(self)

    def decomposeLU(self, pivotsM: "VectorSizeT") -> "math::linear::MatrixMxN< 3,2,double >::Like_T":
        r"""decomposeLU(Matrix3x2 self, VectorSizeT pivotsM) -> Matrix3x2"""
        return _math_linear.Matrix3x2_decomposeLU(self, pivotsM)

    def permute(self, pivotsM: "VectorSizeT", n: "size_t"=2) -> "math::linear::MatrixMxN< 3,2,double >::Like_T":
        r"""permute(Matrix3x2 self, VectorSizeT pivotsM, size_t n=2) -> Matrix3x2"""
        return _math_linear.Matrix3x2_permute(self, pivotsM, n)

    def normSq(self) -> "double":
        r"""normSq(Matrix3x2 self) -> double"""
        return _math_linear.Matrix3x2_normSq(self)

    def norm(self) -> "double":
        r"""norm(Matrix3x2 self) -> double"""
        return _math_linear.Matrix3x2_norm(self)

    def normalize(self) -> "math::linear::MatrixMxN< 3,2,double > &":
        r"""normalize(Matrix3x2 self) -> Matrix3x2"""
        return _math_linear.Matrix3x2_normalize(self)

    def unit(self) -> "math::linear::MatrixMxN< 3,2,double >::Like_T":
        r"""unit(Matrix3x2 self) -> Matrix3x2"""
        return _math_linear.Matrix3x2_unit(self)

    def __add__(self, mx: "Matrix3x2") -> "math::linear::MatrixMxN< 3,2,double >::Like_T":
        r"""__add__(Matrix3x2 self, Matrix3x2 mx) -> Matrix3x2"""
        return _math_linear.Matrix3x2___add__(self, mx)

    def __sub__(self, mx: "Matrix3x2") -> "math::linear::MatrixMxN< 3,2,double >::Like_T":
        r"""__sub__(Matrix3x2 self, Matrix3x2 mx) -> Matrix3x2"""
        return _math_linear.Matrix3x2___sub__(self, mx)

    def __mul__(self, scalar: "double") -> "math::linear::MatrixMxN< 3,2,double >::Like_T":
        r"""__mul__(Matrix3x2 self, double scalar) -> Matrix3x2"""
        return _math_linear.Matrix3x2___mul__(self, scalar)

    def __truediv__(self, *args):
        return _math_linear.Matrix3x2___truediv__(self, *args)
    __div__ = __truediv__



    def __neg__(self) -> "math::linear::MatrixMxN< 3,2,double >::Like_T":
        r"""__neg__(Matrix3x2 self) -> Matrix3x2"""
        return _math_linear.Matrix3x2___neg__(self)

    def __getitem__(self, inObj: "PyObject *") -> "double":
        r"""__getitem__(Matrix3x2 self, PyObject * inObj) -> double"""
        return _math_linear.Matrix3x2___getitem__(self, inObj)

    def __setitem__(self, inObj: "PyObject *", val: "double") -> "void":
        r"""__setitem__(Matrix3x2 self, PyObject * inObj, double val)"""
        return _math_linear.Matrix3x2___setitem__(self, inObj, val)

    def __str__(self) -> "std::string":
        r"""__str__(Matrix3x2 self) -> std::string"""
        return _math_linear.Matrix3x2___str__(self)

    def vals(self) -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >":
        r"""vals(Matrix3x2 self) -> std_vector_vector_double"""
        return _math_linear.Matrix3x2_vals(self)

# Register Matrix3x2 in _math_linear:
_math_linear.Matrix3x2_swigregister(Matrix3x2)

class Matrix3x3(object):
    r"""Proxy of C++ math::linear::MatrixMxN< 3,3,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mRaw = property(_math_linear.Matrix3x3_mRaw_get, _math_linear.Matrix3x3_mRaw_set, doc=r"""mRaw : a(3).a(3).double""")

    def __init__(self, *args):
        r"""
        __init__(Matrix3x3 self) -> Matrix3x3
        __init__(Matrix3x3 self, double cv) -> Matrix3x3
        __init__(Matrix3x3 self, double const * raw) -> Matrix3x3
        __init__(Matrix3x3 self, std_vector_double raw) -> Matrix3x3
        __init__(Matrix3x3 self, Matrix3x3 mx) -> Matrix3x3
        """
        _math_linear.Matrix3x3_swiginit(self, _math_linear.new_Matrix3x3(*args))
    __swig_destroy__ = _math_linear.delete_Matrix3x3

    def __call__(self, *args) -> "double &":
        r"""
        __call__(Matrix3x3 self, size_t i, size_t j) -> double
        __call__(Matrix3x3 self, size_t i, size_t j) -> double &
        """
        return _math_linear.Matrix3x3___call__(self, *args)

    def row(self, *args) -> "void":
        r"""
        row(Matrix3x3 self, size_t i) -> double const
        row(Matrix3x3 self, size_t i) -> double
        row(Matrix3x3 self, size_t i, double const * vec)
        row(Matrix3x3 self, size_t i, std_vector_double vec)
        """
        return _math_linear.Matrix3x3_row(self, *args)

    def col(self, *args) -> "void":
        r"""
        col(Matrix3x3 self, size_t j) -> std_vector_double
        col(Matrix3x3 self, size_t j, double const * vec)
        col(Matrix3x3 self, size_t j, std_vector_double vec)
        col(Matrix3x3 self, size_t colIdx, Matrix3x1 vec)
        """
        return _math_linear.Matrix3x3_col(self, *args)

    def rows(self) -> "size_t":
        r"""rows(Matrix3x3 self) -> size_t"""
        return _math_linear.Matrix3x3_rows(self)

    def cols(self) -> "size_t":
        r"""cols(Matrix3x3 self) -> size_t"""
        return _math_linear.Matrix3x3_cols(self)

    def size(self) -> "size_t":
        r"""size(Matrix3x3 self) -> size_t"""
        return _math_linear.Matrix3x3_size(self)

    def scale(self, scalar: "double") -> "math::linear::MatrixMxN< 3,3,double > &":
        r"""scale(Matrix3x3 self, double scalar) -> Matrix3x3"""
        return _math_linear.Matrix3x3_scale(self, scalar)

    def multiply(self, scalar: "double") -> "math::linear::MatrixMxN< 3,3 >":
        r"""multiply(Matrix3x3 self, double scalar) -> Matrix3x3"""
        return _math_linear.Matrix3x3_multiply(self, scalar)

    def scaleDiagonal(self, mx: "Matrix3x3") -> "math::linear::MatrixMxN< 3,3,double > &":
        r"""scaleDiagonal(Matrix3x3 self, Matrix3x3 mx) -> Matrix3x3"""
        return _math_linear.Matrix3x3_scaleDiagonal(self, mx)

    def multiplyDiagonal(self, mx: "Matrix3x3") -> "math::linear::MatrixMxN< 3,3,double >":
        r"""multiplyDiagonal(Matrix3x3 self, Matrix3x3 mx) -> Matrix3x3"""
        return _math_linear.Matrix3x3_multiplyDiagonal(self, mx)

    def __iadd__(self, mx: "Matrix3x3") -> "math::linear::MatrixMxN< 3,3,double >::Like_T &":
        r"""__iadd__(Matrix3x3 self, Matrix3x3 mx) -> Matrix3x3"""
        return _math_linear.Matrix3x3___iadd__(self, mx)

    def __isub__(self, mx: "Matrix3x3") -> "math::linear::MatrixMxN< 3,3,double >::Like_T &":
        r"""__isub__(Matrix3x3 self, Matrix3x3 mx) -> Matrix3x3"""
        return _math_linear.Matrix3x3___isub__(self, mx)

    def add(self, mx: "Matrix3x3") -> "math::linear::MatrixMxN< 3,3,double >::Like_T":
        r"""add(Matrix3x3 self, Matrix3x3 mx) -> Matrix3x3"""
        return _math_linear.Matrix3x3_add(self, mx)

    def subtract(self, mx: "Matrix3x3") -> "math::linear::MatrixMxN< 3,3,double >::Like_T":
        r"""subtract(Matrix3x3 self, Matrix3x3 mx) -> Matrix3x3"""
        return _math_linear.Matrix3x3_subtract(self, mx)

    def transpose(self) -> "math::linear::MatrixMxN< 3,3,double >":
        r"""transpose(Matrix3x3 self) -> Matrix3x3"""
        return _math_linear.Matrix3x3_transpose(self)

    def decomposeLU(self, pivotsM: "VectorSizeT") -> "math::linear::MatrixMxN< 3,3,double >::Like_T":
        r"""decomposeLU(Matrix3x3 self, VectorSizeT pivotsM) -> Matrix3x3"""
        return _math_linear.Matrix3x3_decomposeLU(self, pivotsM)

    def permute(self, pivotsM: "VectorSizeT", n: "size_t"=3) -> "math::linear::MatrixMxN< 3,3,double >::Like_T":
        r"""permute(Matrix3x3 self, VectorSizeT pivotsM, size_t n=3) -> Matrix3x3"""
        return _math_linear.Matrix3x3_permute(self, pivotsM, n)

    def normSq(self) -> "double":
        r"""normSq(Matrix3x3 self) -> double"""
        return _math_linear.Matrix3x3_normSq(self)

    def norm(self) -> "double":
        r"""norm(Matrix3x3 self) -> double"""
        return _math_linear.Matrix3x3_norm(self)

    def normalize(self) -> "math::linear::MatrixMxN< 3,3,double > &":
        r"""normalize(Matrix3x3 self) -> Matrix3x3"""
        return _math_linear.Matrix3x3_normalize(self)

    def unit(self) -> "math::linear::MatrixMxN< 3,3,double >::Like_T":
        r"""unit(Matrix3x3 self) -> Matrix3x3"""
        return _math_linear.Matrix3x3_unit(self)

    def __add__(self, mx: "Matrix3x3") -> "math::linear::MatrixMxN< 3,3,double >::Like_T":
        r"""__add__(Matrix3x3 self, Matrix3x3 mx) -> Matrix3x3"""
        return _math_linear.Matrix3x3___add__(self, mx)

    def __sub__(self, mx: "Matrix3x3") -> "math::linear::MatrixMxN< 3,3,double >::Like_T":
        r"""__sub__(Matrix3x3 self, Matrix3x3 mx) -> Matrix3x3"""
        return _math_linear.Matrix3x3___sub__(self, mx)

    def __mul__(self, scalar: "double") -> "math::linear::MatrixMxN< 3,3,double >::Like_T":
        r"""__mul__(Matrix3x3 self, double scalar) -> Matrix3x3"""
        return _math_linear.Matrix3x3___mul__(self, scalar)

    def __truediv__(self, *args):
        return _math_linear.Matrix3x3___truediv__(self, *args)
    __div__ = __truediv__



    def __neg__(self) -> "math::linear::MatrixMxN< 3,3,double >::Like_T":
        r"""__neg__(Matrix3x3 self) -> Matrix3x3"""
        return _math_linear.Matrix3x3___neg__(self)

    def __getitem__(self, inObj: "PyObject *") -> "double":
        r"""__getitem__(Matrix3x3 self, PyObject * inObj) -> double"""
        return _math_linear.Matrix3x3___getitem__(self, inObj)

    def __setitem__(self, inObj: "PyObject *", val: "double") -> "void":
        r"""__setitem__(Matrix3x3 self, PyObject * inObj, double val)"""
        return _math_linear.Matrix3x3___setitem__(self, inObj, val)

    def __str__(self) -> "std::string":
        r"""__str__(Matrix3x3 self) -> std::string"""
        return _math_linear.Matrix3x3___str__(self)

    def vals(self) -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >":
        r"""vals(Matrix3x3 self) -> std_vector_vector_double"""
        return _math_linear.Matrix3x3_vals(self)

# Register Matrix3x3 in _math_linear:
_math_linear.Matrix3x3_swigregister(Matrix3x3)

class Matrix3x7(object):
    r"""Proxy of C++ math::linear::MatrixMxN< 3,7,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mRaw = property(_math_linear.Matrix3x7_mRaw_get, _math_linear.Matrix3x7_mRaw_set, doc=r"""mRaw : a(3).a(7).double""")

    def __init__(self, *args):
        r"""
        __init__(Matrix3x7 self) -> Matrix3x7
        __init__(Matrix3x7 self, double cv) -> Matrix3x7
        __init__(Matrix3x7 self, double const * raw) -> Matrix3x7
        __init__(Matrix3x7 self, std_vector_double raw) -> Matrix3x7
        __init__(Matrix3x7 self, Matrix3x7 mx) -> Matrix3x7
        """
        _math_linear.Matrix3x7_swiginit(self, _math_linear.new_Matrix3x7(*args))
    __swig_destroy__ = _math_linear.delete_Matrix3x7

    def __call__(self, *args) -> "double &":
        r"""
        __call__(Matrix3x7 self, size_t i, size_t j) -> double
        __call__(Matrix3x7 self, size_t i, size_t j) -> double &
        """
        return _math_linear.Matrix3x7___call__(self, *args)

    def row(self, *args) -> "void":
        r"""
        row(Matrix3x7 self, size_t i) -> double const
        row(Matrix3x7 self, size_t i) -> double
        row(Matrix3x7 self, size_t i, double const * vec)
        row(Matrix3x7 self, size_t i, std_vector_double vec)
        """
        return _math_linear.Matrix3x7_row(self, *args)

    def col(self, *args) -> "void":
        r"""
        col(Matrix3x7 self, size_t j) -> std_vector_double
        col(Matrix3x7 self, size_t j, double const * vec)
        col(Matrix3x7 self, size_t j, std_vector_double vec)
        col(Matrix3x7 self, size_t colIdx, Matrix3x1 vec)
        """
        return _math_linear.Matrix3x7_col(self, *args)

    def rows(self) -> "size_t":
        r"""rows(Matrix3x7 self) -> size_t"""
        return _math_linear.Matrix3x7_rows(self)

    def cols(self) -> "size_t":
        r"""cols(Matrix3x7 self) -> size_t"""
        return _math_linear.Matrix3x7_cols(self)

    def size(self) -> "size_t":
        r"""size(Matrix3x7 self) -> size_t"""
        return _math_linear.Matrix3x7_size(self)

    def scale(self, scalar: "double") -> "math::linear::MatrixMxN< 3,7,double > &":
        r"""scale(Matrix3x7 self, double scalar) -> Matrix3x7"""
        return _math_linear.Matrix3x7_scale(self, scalar)

    def multiply(self, scalar: "double") -> "math::linear::MatrixMxN< 3,7 >":
        r"""multiply(Matrix3x7 self, double scalar) -> Matrix3x7"""
        return _math_linear.Matrix3x7_multiply(self, scalar)

    def scaleDiagonal(self, mx: "Matrix7x7") -> "math::linear::MatrixMxN< 3,7,double > &":
        r"""scaleDiagonal(Matrix3x7 self, Matrix7x7 mx) -> Matrix3x7"""
        return _math_linear.Matrix3x7_scaleDiagonal(self, mx)

    def multiplyDiagonal(self, mx: "Matrix7x7") -> "math::linear::MatrixMxN< 3,7,double >":
        r"""multiplyDiagonal(Matrix3x7 self, Matrix7x7 mx) -> Matrix3x7"""
        return _math_linear.Matrix3x7_multiplyDiagonal(self, mx)

    def __iadd__(self, mx: "Matrix3x7") -> "math::linear::MatrixMxN< 3,7,double >::Like_T &":
        r"""__iadd__(Matrix3x7 self, Matrix3x7 mx) -> Matrix3x7"""
        return _math_linear.Matrix3x7___iadd__(self, mx)

    def __isub__(self, mx: "Matrix3x7") -> "math::linear::MatrixMxN< 3,7,double >::Like_T &":
        r"""__isub__(Matrix3x7 self, Matrix3x7 mx) -> Matrix3x7"""
        return _math_linear.Matrix3x7___isub__(self, mx)

    def add(self, mx: "Matrix3x7") -> "math::linear::MatrixMxN< 3,7,double >::Like_T":
        r"""add(Matrix3x7 self, Matrix3x7 mx) -> Matrix3x7"""
        return _math_linear.Matrix3x7_add(self, mx)

    def subtract(self, mx: "Matrix3x7") -> "math::linear::MatrixMxN< 3,7,double >::Like_T":
        r"""subtract(Matrix3x7 self, Matrix3x7 mx) -> Matrix3x7"""
        return _math_linear.Matrix3x7_subtract(self, mx)

    def transpose(self) -> "math::linear::MatrixMxN< 7,3,double >":
        r"""transpose(Matrix3x7 self) -> Matrix7x3"""
        return _math_linear.Matrix3x7_transpose(self)

    def decomposeLU(self, pivotsM: "VectorSizeT") -> "math::linear::MatrixMxN< 3,7,double >::Like_T":
        r"""decomposeLU(Matrix3x7 self, VectorSizeT pivotsM) -> Matrix3x7"""
        return _math_linear.Matrix3x7_decomposeLU(self, pivotsM)

    def permute(self, pivotsM: "VectorSizeT", n: "size_t"=7) -> "math::linear::MatrixMxN< 3,7,double >::Like_T":
        r"""permute(Matrix3x7 self, VectorSizeT pivotsM, size_t n=7) -> Matrix3x7"""
        return _math_linear.Matrix3x7_permute(self, pivotsM, n)

    def normSq(self) -> "double":
        r"""normSq(Matrix3x7 self) -> double"""
        return _math_linear.Matrix3x7_normSq(self)

    def norm(self) -> "double":
        r"""norm(Matrix3x7 self) -> double"""
        return _math_linear.Matrix3x7_norm(self)

    def normalize(self) -> "math::linear::MatrixMxN< 3,7,double > &":
        r"""normalize(Matrix3x7 self) -> Matrix3x7"""
        return _math_linear.Matrix3x7_normalize(self)

    def unit(self) -> "math::linear::MatrixMxN< 3,7,double >::Like_T":
        r"""unit(Matrix3x7 self) -> Matrix3x7"""
        return _math_linear.Matrix3x7_unit(self)

    def __add__(self, mx: "Matrix3x7") -> "math::linear::MatrixMxN< 3,7,double >::Like_T":
        r"""__add__(Matrix3x7 self, Matrix3x7 mx) -> Matrix3x7"""
        return _math_linear.Matrix3x7___add__(self, mx)

    def __sub__(self, mx: "Matrix3x7") -> "math::linear::MatrixMxN< 3,7,double >::Like_T":
        r"""__sub__(Matrix3x7 self, Matrix3x7 mx) -> Matrix3x7"""
        return _math_linear.Matrix3x7___sub__(self, mx)

    def __mul__(self, scalar: "double") -> "math::linear::MatrixMxN< 3,7,double >::Like_T":
        r"""__mul__(Matrix3x7 self, double scalar) -> Matrix3x7"""
        return _math_linear.Matrix3x7___mul__(self, scalar)

    def __truediv__(self, *args):
        return _math_linear.Matrix3x7___truediv__(self, *args)
    __div__ = __truediv__



    def __neg__(self) -> "math::linear::MatrixMxN< 3,7,double >::Like_T":
        r"""__neg__(Matrix3x7 self) -> Matrix3x7"""
        return _math_linear.Matrix3x7___neg__(self)

    def __getitem__(self, inObj: "PyObject *") -> "double":
        r"""__getitem__(Matrix3x7 self, PyObject * inObj) -> double"""
        return _math_linear.Matrix3x7___getitem__(self, inObj)

    def __setitem__(self, inObj: "PyObject *", val: "double") -> "void":
        r"""__setitem__(Matrix3x7 self, PyObject * inObj, double val)"""
        return _math_linear.Matrix3x7___setitem__(self, inObj, val)

    def __str__(self) -> "std::string":
        r"""__str__(Matrix3x7 self) -> std::string"""
        return _math_linear.Matrix3x7___str__(self)

    def vals(self) -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >":
        r"""vals(Matrix3x7 self) -> std_vector_vector_double"""
        return _math_linear.Matrix3x7_vals(self)

# Register Matrix3x7 in _math_linear:
_math_linear.Matrix3x7_swigregister(Matrix3x7)

class Matrix7x2(object):
    r"""Proxy of C++ math::linear::MatrixMxN< 7,2,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mRaw = property(_math_linear.Matrix7x2_mRaw_get, _math_linear.Matrix7x2_mRaw_set, doc=r"""mRaw : a(7).a(2).double""")

    def __init__(self, *args):
        r"""
        __init__(Matrix7x2 self) -> Matrix7x2
        __init__(Matrix7x2 self, double cv) -> Matrix7x2
        __init__(Matrix7x2 self, double const * raw) -> Matrix7x2
        __init__(Matrix7x2 self, std_vector_double raw) -> Matrix7x2
        __init__(Matrix7x2 self, Matrix7x2 mx) -> Matrix7x2
        """
        _math_linear.Matrix7x2_swiginit(self, _math_linear.new_Matrix7x2(*args))
    __swig_destroy__ = _math_linear.delete_Matrix7x2

    def __call__(self, *args) -> "double &":
        r"""
        __call__(Matrix7x2 self, size_t i, size_t j) -> double
        __call__(Matrix7x2 self, size_t i, size_t j) -> double &
        """
        return _math_linear.Matrix7x2___call__(self, *args)

    def row(self, *args) -> "void":
        r"""
        row(Matrix7x2 self, size_t i) -> double const
        row(Matrix7x2 self, size_t i) -> double
        row(Matrix7x2 self, size_t i, double const * vec)
        row(Matrix7x2 self, size_t i, std_vector_double vec)
        """
        return _math_linear.Matrix7x2_row(self, *args)

    def col(self, *args) -> "void":
        r"""
        col(Matrix7x2 self, size_t j) -> std_vector_double
        col(Matrix7x2 self, size_t j, double const * vec)
        col(Matrix7x2 self, size_t j, std_vector_double vec)
        col(Matrix7x2 self, size_t colIdx, math::linear::MatrixMxN< 7,1,double > const & vec)
        """
        return _math_linear.Matrix7x2_col(self, *args)

    def rows(self) -> "size_t":
        r"""rows(Matrix7x2 self) -> size_t"""
        return _math_linear.Matrix7x2_rows(self)

    def cols(self) -> "size_t":
        r"""cols(Matrix7x2 self) -> size_t"""
        return _math_linear.Matrix7x2_cols(self)

    def size(self) -> "size_t":
        r"""size(Matrix7x2 self) -> size_t"""
        return _math_linear.Matrix7x2_size(self)

    def scale(self, scalar: "double") -> "math::linear::MatrixMxN< 7,2,double > &":
        r"""scale(Matrix7x2 self, double scalar) -> Matrix7x2"""
        return _math_linear.Matrix7x2_scale(self, scalar)

    def multiply(self, scalar: "double") -> "math::linear::MatrixMxN< 7,2 >":
        r"""multiply(Matrix7x2 self, double scalar) -> Matrix7x2"""
        return _math_linear.Matrix7x2_multiply(self, scalar)

    def scaleDiagonal(self, mx: "Matrix2x2") -> "math::linear::MatrixMxN< 7,2,double > &":
        r"""scaleDiagonal(Matrix7x2 self, Matrix2x2 mx) -> Matrix7x2"""
        return _math_linear.Matrix7x2_scaleDiagonal(self, mx)

    def multiplyDiagonal(self, mx: "Matrix2x2") -> "math::linear::MatrixMxN< 7,2,double >":
        r"""multiplyDiagonal(Matrix7x2 self, Matrix2x2 mx) -> Matrix7x2"""
        return _math_linear.Matrix7x2_multiplyDiagonal(self, mx)

    def __iadd__(self, mx: "Matrix7x2") -> "math::linear::MatrixMxN< 7,2,double >::Like_T &":
        r"""__iadd__(Matrix7x2 self, Matrix7x2 mx) -> Matrix7x2"""
        return _math_linear.Matrix7x2___iadd__(self, mx)

    def __isub__(self, mx: "Matrix7x2") -> "math::linear::MatrixMxN< 7,2,double >::Like_T &":
        r"""__isub__(Matrix7x2 self, Matrix7x2 mx) -> Matrix7x2"""
        return _math_linear.Matrix7x2___isub__(self, mx)

    def add(self, mx: "Matrix7x2") -> "math::linear::MatrixMxN< 7,2,double >::Like_T":
        r"""add(Matrix7x2 self, Matrix7x2 mx) -> Matrix7x2"""
        return _math_linear.Matrix7x2_add(self, mx)

    def subtract(self, mx: "Matrix7x2") -> "math::linear::MatrixMxN< 7,2,double >::Like_T":
        r"""subtract(Matrix7x2 self, Matrix7x2 mx) -> Matrix7x2"""
        return _math_linear.Matrix7x2_subtract(self, mx)

    def transpose(self) -> "math::linear::MatrixMxN< 2,7,double >":
        r"""transpose(Matrix7x2 self) -> Matrix2x7"""
        return _math_linear.Matrix7x2_transpose(self)

    def decomposeLU(self, pivotsM: "VectorSizeT") -> "math::linear::MatrixMxN< 7,2,double >::Like_T":
        r"""decomposeLU(Matrix7x2 self, VectorSizeT pivotsM) -> Matrix7x2"""
        return _math_linear.Matrix7x2_decomposeLU(self, pivotsM)

    def permute(self, pivotsM: "VectorSizeT", n: "size_t"=2) -> "math::linear::MatrixMxN< 7,2,double >::Like_T":
        r"""permute(Matrix7x2 self, VectorSizeT pivotsM, size_t n=2) -> Matrix7x2"""
        return _math_linear.Matrix7x2_permute(self, pivotsM, n)

    def normSq(self) -> "double":
        r"""normSq(Matrix7x2 self) -> double"""
        return _math_linear.Matrix7x2_normSq(self)

    def norm(self) -> "double":
        r"""norm(Matrix7x2 self) -> double"""
        return _math_linear.Matrix7x2_norm(self)

    def normalize(self) -> "math::linear::MatrixMxN< 7,2,double > &":
        r"""normalize(Matrix7x2 self) -> Matrix7x2"""
        return _math_linear.Matrix7x2_normalize(self)

    def unit(self) -> "math::linear::MatrixMxN< 7,2,double >::Like_T":
        r"""unit(Matrix7x2 self) -> Matrix7x2"""
        return _math_linear.Matrix7x2_unit(self)

    def __add__(self, mx: "Matrix7x2") -> "math::linear::MatrixMxN< 7,2,double >::Like_T":
        r"""__add__(Matrix7x2 self, Matrix7x2 mx) -> Matrix7x2"""
        return _math_linear.Matrix7x2___add__(self, mx)

    def __sub__(self, mx: "Matrix7x2") -> "math::linear::MatrixMxN< 7,2,double >::Like_T":
        r"""__sub__(Matrix7x2 self, Matrix7x2 mx) -> Matrix7x2"""
        return _math_linear.Matrix7x2___sub__(self, mx)

    def __mul__(self, scalar: "double") -> "math::linear::MatrixMxN< 7,2,double >::Like_T":
        r"""__mul__(Matrix7x2 self, double scalar) -> Matrix7x2"""
        return _math_linear.Matrix7x2___mul__(self, scalar)

    def __truediv__(self, *args):
        return _math_linear.Matrix7x2___truediv__(self, *args)
    __div__ = __truediv__



    def __neg__(self) -> "math::linear::MatrixMxN< 7,2,double >::Like_T":
        r"""__neg__(Matrix7x2 self) -> Matrix7x2"""
        return _math_linear.Matrix7x2___neg__(self)

    def __getitem__(self, inObj: "PyObject *") -> "double":
        r"""__getitem__(Matrix7x2 self, PyObject * inObj) -> double"""
        return _math_linear.Matrix7x2___getitem__(self, inObj)

    def __setitem__(self, inObj: "PyObject *", val: "double") -> "void":
        r"""__setitem__(Matrix7x2 self, PyObject * inObj, double val)"""
        return _math_linear.Matrix7x2___setitem__(self, inObj, val)

    def __str__(self) -> "std::string":
        r"""__str__(Matrix7x2 self) -> std::string"""
        return _math_linear.Matrix7x2___str__(self)

    def vals(self) -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >":
        r"""vals(Matrix7x2 self) -> std_vector_vector_double"""
        return _math_linear.Matrix7x2_vals(self)

# Register Matrix7x2 in _math_linear:
_math_linear.Matrix7x2_swigregister(Matrix7x2)

class Matrix7x3(object):
    r"""Proxy of C++ math::linear::MatrixMxN< 7,3,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mRaw = property(_math_linear.Matrix7x3_mRaw_get, _math_linear.Matrix7x3_mRaw_set, doc=r"""mRaw : a(7).a(3).double""")

    def __init__(self, *args):
        r"""
        __init__(Matrix7x3 self) -> Matrix7x3
        __init__(Matrix7x3 self, double cv) -> Matrix7x3
        __init__(Matrix7x3 self, double const * raw) -> Matrix7x3
        __init__(Matrix7x3 self, std_vector_double raw) -> Matrix7x3
        __init__(Matrix7x3 self, Matrix7x3 mx) -> Matrix7x3
        """
        _math_linear.Matrix7x3_swiginit(self, _math_linear.new_Matrix7x3(*args))
    __swig_destroy__ = _math_linear.delete_Matrix7x3

    def __call__(self, *args) -> "double &":
        r"""
        __call__(Matrix7x3 self, size_t i, size_t j) -> double
        __call__(Matrix7x3 self, size_t i, size_t j) -> double &
        """
        return _math_linear.Matrix7x3___call__(self, *args)

    def row(self, *args) -> "void":
        r"""
        row(Matrix7x3 self, size_t i) -> double const
        row(Matrix7x3 self, size_t i) -> double
        row(Matrix7x3 self, size_t i, double const * vec)
        row(Matrix7x3 self, size_t i, std_vector_double vec)
        """
        return _math_linear.Matrix7x3_row(self, *args)

    def col(self, *args) -> "void":
        r"""
        col(Matrix7x3 self, size_t j) -> std_vector_double
        col(Matrix7x3 self, size_t j, double const * vec)
        col(Matrix7x3 self, size_t j, std_vector_double vec)
        col(Matrix7x3 self, size_t colIdx, math::linear::MatrixMxN< 7,1,double > const & vec)
        """
        return _math_linear.Matrix7x3_col(self, *args)

    def rows(self) -> "size_t":
        r"""rows(Matrix7x3 self) -> size_t"""
        return _math_linear.Matrix7x3_rows(self)

    def cols(self) -> "size_t":
        r"""cols(Matrix7x3 self) -> size_t"""
        return _math_linear.Matrix7x3_cols(self)

    def size(self) -> "size_t":
        r"""size(Matrix7x3 self) -> size_t"""
        return _math_linear.Matrix7x3_size(self)

    def scale(self, scalar: "double") -> "math::linear::MatrixMxN< 7,3,double > &":
        r"""scale(Matrix7x3 self, double scalar) -> Matrix7x3"""
        return _math_linear.Matrix7x3_scale(self, scalar)

    def multiply(self, scalar: "double") -> "math::linear::MatrixMxN< 7,3 >":
        r"""multiply(Matrix7x3 self, double scalar) -> Matrix7x3"""
        return _math_linear.Matrix7x3_multiply(self, scalar)

    def scaleDiagonal(self, mx: "Matrix3x3") -> "math::linear::MatrixMxN< 7,3,double > &":
        r"""scaleDiagonal(Matrix7x3 self, Matrix3x3 mx) -> Matrix7x3"""
        return _math_linear.Matrix7x3_scaleDiagonal(self, mx)

    def multiplyDiagonal(self, mx: "Matrix3x3") -> "math::linear::MatrixMxN< 7,3,double >":
        r"""multiplyDiagonal(Matrix7x3 self, Matrix3x3 mx) -> Matrix7x3"""
        return _math_linear.Matrix7x3_multiplyDiagonal(self, mx)

    def __iadd__(self, mx: "Matrix7x3") -> "math::linear::MatrixMxN< 7,3,double >::Like_T &":
        r"""__iadd__(Matrix7x3 self, Matrix7x3 mx) -> Matrix7x3"""
        return _math_linear.Matrix7x3___iadd__(self, mx)

    def __isub__(self, mx: "Matrix7x3") -> "math::linear::MatrixMxN< 7,3,double >::Like_T &":
        r"""__isub__(Matrix7x3 self, Matrix7x3 mx) -> Matrix7x3"""
        return _math_linear.Matrix7x3___isub__(self, mx)

    def add(self, mx: "Matrix7x3") -> "math::linear::MatrixMxN< 7,3,double >::Like_T":
        r"""add(Matrix7x3 self, Matrix7x3 mx) -> Matrix7x3"""
        return _math_linear.Matrix7x3_add(self, mx)

    def subtract(self, mx: "Matrix7x3") -> "math::linear::MatrixMxN< 7,3,double >::Like_T":
        r"""subtract(Matrix7x3 self, Matrix7x3 mx) -> Matrix7x3"""
        return _math_linear.Matrix7x3_subtract(self, mx)

    def transpose(self) -> "math::linear::MatrixMxN< 3,7,double >":
        r"""transpose(Matrix7x3 self) -> Matrix3x7"""
        return _math_linear.Matrix7x3_transpose(self)

    def decomposeLU(self, pivotsM: "VectorSizeT") -> "math::linear::MatrixMxN< 7,3,double >::Like_T":
        r"""decomposeLU(Matrix7x3 self, VectorSizeT pivotsM) -> Matrix7x3"""
        return _math_linear.Matrix7x3_decomposeLU(self, pivotsM)

    def permute(self, pivotsM: "VectorSizeT", n: "size_t"=3) -> "math::linear::MatrixMxN< 7,3,double >::Like_T":
        r"""permute(Matrix7x3 self, VectorSizeT pivotsM, size_t n=3) -> Matrix7x3"""
        return _math_linear.Matrix7x3_permute(self, pivotsM, n)

    def normSq(self) -> "double":
        r"""normSq(Matrix7x3 self) -> double"""
        return _math_linear.Matrix7x3_normSq(self)

    def norm(self) -> "double":
        r"""norm(Matrix7x3 self) -> double"""
        return _math_linear.Matrix7x3_norm(self)

    def normalize(self) -> "math::linear::MatrixMxN< 7,3,double > &":
        r"""normalize(Matrix7x3 self) -> Matrix7x3"""
        return _math_linear.Matrix7x3_normalize(self)

    def unit(self) -> "math::linear::MatrixMxN< 7,3,double >::Like_T":
        r"""unit(Matrix7x3 self) -> Matrix7x3"""
        return _math_linear.Matrix7x3_unit(self)

    def __add__(self, mx: "Matrix7x3") -> "math::linear::MatrixMxN< 7,3,double >::Like_T":
        r"""__add__(Matrix7x3 self, Matrix7x3 mx) -> Matrix7x3"""
        return _math_linear.Matrix7x3___add__(self, mx)

    def __sub__(self, mx: "Matrix7x3") -> "math::linear::MatrixMxN< 7,3,double >::Like_T":
        r"""__sub__(Matrix7x3 self, Matrix7x3 mx) -> Matrix7x3"""
        return _math_linear.Matrix7x3___sub__(self, mx)

    def __mul__(self, scalar: "double") -> "math::linear::MatrixMxN< 7,3,double >::Like_T":
        r"""__mul__(Matrix7x3 self, double scalar) -> Matrix7x3"""
        return _math_linear.Matrix7x3___mul__(self, scalar)

    def __truediv__(self, *args):
        return _math_linear.Matrix7x3___truediv__(self, *args)
    __div__ = __truediv__



    def __neg__(self) -> "math::linear::MatrixMxN< 7,3,double >::Like_T":
        r"""__neg__(Matrix7x3 self) -> Matrix7x3"""
        return _math_linear.Matrix7x3___neg__(self)

    def __getitem__(self, inObj: "PyObject *") -> "double":
        r"""__getitem__(Matrix7x3 self, PyObject * inObj) -> double"""
        return _math_linear.Matrix7x3___getitem__(self, inObj)

    def __setitem__(self, inObj: "PyObject *", val: "double") -> "void":
        r"""__setitem__(Matrix7x3 self, PyObject * inObj, double val)"""
        return _math_linear.Matrix7x3___setitem__(self, inObj, val)

    def __str__(self) -> "std::string":
        r"""__str__(Matrix7x3 self) -> std::string"""
        return _math_linear.Matrix7x3___str__(self)

    def vals(self) -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >":
        r"""vals(Matrix7x3 self) -> std_vector_vector_double"""
        return _math_linear.Matrix7x3_vals(self)

# Register Matrix7x3 in _math_linear:
_math_linear.Matrix7x3_swigregister(Matrix7x3)

class Matrix7x7(object):
    r"""Proxy of C++ math::linear::MatrixMxN< 7,7,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mRaw = property(_math_linear.Matrix7x7_mRaw_get, _math_linear.Matrix7x7_mRaw_set, doc=r"""mRaw : a(7).a(7).double""")

    def __init__(self, *args):
        r"""
        __init__(Matrix7x7 self) -> Matrix7x7
        __init__(Matrix7x7 self, double cv) -> Matrix7x7
        __init__(Matrix7x7 self, double const * raw) -> Matrix7x7
        __init__(Matrix7x7 self, std_vector_double raw) -> Matrix7x7
        __init__(Matrix7x7 self, Matrix7x7 mx) -> Matrix7x7
        """
        _math_linear.Matrix7x7_swiginit(self, _math_linear.new_Matrix7x7(*args))
    __swig_destroy__ = _math_linear.delete_Matrix7x7

    def __call__(self, *args) -> "double &":
        r"""
        __call__(Matrix7x7 self, size_t i, size_t j) -> double
        __call__(Matrix7x7 self, size_t i, size_t j) -> double &
        """
        return _math_linear.Matrix7x7___call__(self, *args)

    def row(self, *args) -> "void":
        r"""
        row(Matrix7x7 self, size_t i) -> double const
        row(Matrix7x7 self, size_t i) -> double
        row(Matrix7x7 self, size_t i, double const * vec)
        row(Matrix7x7 self, size_t i, std_vector_double vec)
        """
        return _math_linear.Matrix7x7_row(self, *args)

    def col(self, *args) -> "void":
        r"""
        col(Matrix7x7 self, size_t j) -> std_vector_double
        col(Matrix7x7 self, size_t j, double const * vec)
        col(Matrix7x7 self, size_t j, std_vector_double vec)
        col(Matrix7x7 self, size_t colIdx, math::linear::MatrixMxN< 7,1,double > const & vec)
        """
        return _math_linear.Matrix7x7_col(self, *args)

    def rows(self) -> "size_t":
        r"""rows(Matrix7x7 self) -> size_t"""
        return _math_linear.Matrix7x7_rows(self)

    def cols(self) -> "size_t":
        r"""cols(Matrix7x7 self) -> size_t"""
        return _math_linear.Matrix7x7_cols(self)

    def size(self) -> "size_t":
        r"""size(Matrix7x7 self) -> size_t"""
        return _math_linear.Matrix7x7_size(self)

    def scale(self, scalar: "double") -> "math::linear::MatrixMxN< 7,7,double > &":
        r"""scale(Matrix7x7 self, double scalar) -> Matrix7x7"""
        return _math_linear.Matrix7x7_scale(self, scalar)

    def multiply(self, scalar: "double") -> "math::linear::MatrixMxN< 7,7 >":
        r"""multiply(Matrix7x7 self, double scalar) -> Matrix7x7"""
        return _math_linear.Matrix7x7_multiply(self, scalar)

    def scaleDiagonal(self, mx: "Matrix7x7") -> "math::linear::MatrixMxN< 7,7,double > &":
        r"""scaleDiagonal(Matrix7x7 self, Matrix7x7 mx) -> Matrix7x7"""
        return _math_linear.Matrix7x7_scaleDiagonal(self, mx)

    def multiplyDiagonal(self, mx: "Matrix7x7") -> "math::linear::MatrixMxN< 7,7,double >":
        r"""multiplyDiagonal(Matrix7x7 self, Matrix7x7 mx) -> Matrix7x7"""
        return _math_linear.Matrix7x7_multiplyDiagonal(self, mx)

    def __iadd__(self, mx: "Matrix7x7") -> "math::linear::MatrixMxN< 7,7,double >::Like_T &":
        r"""__iadd__(Matrix7x7 self, Matrix7x7 mx) -> Matrix7x7"""
        return _math_linear.Matrix7x7___iadd__(self, mx)

    def __isub__(self, mx: "Matrix7x7") -> "math::linear::MatrixMxN< 7,7,double >::Like_T &":
        r"""__isub__(Matrix7x7 self, Matrix7x7 mx) -> Matrix7x7"""
        return _math_linear.Matrix7x7___isub__(self, mx)

    def add(self, mx: "Matrix7x7") -> "math::linear::MatrixMxN< 7,7,double >::Like_T":
        r"""add(Matrix7x7 self, Matrix7x7 mx) -> Matrix7x7"""
        return _math_linear.Matrix7x7_add(self, mx)

    def subtract(self, mx: "Matrix7x7") -> "math::linear::MatrixMxN< 7,7,double >::Like_T":
        r"""subtract(Matrix7x7 self, Matrix7x7 mx) -> Matrix7x7"""
        return _math_linear.Matrix7x7_subtract(self, mx)

    def transpose(self) -> "math::linear::MatrixMxN< 7,7,double >":
        r"""transpose(Matrix7x7 self) -> Matrix7x7"""
        return _math_linear.Matrix7x7_transpose(self)

    def decomposeLU(self, pivotsM: "VectorSizeT") -> "math::linear::MatrixMxN< 7,7,double >::Like_T":
        r"""decomposeLU(Matrix7x7 self, VectorSizeT pivotsM) -> Matrix7x7"""
        return _math_linear.Matrix7x7_decomposeLU(self, pivotsM)

    def permute(self, pivotsM: "VectorSizeT", n: "size_t"=7) -> "math::linear::MatrixMxN< 7,7,double >::Like_T":
        r"""permute(Matrix7x7 self, VectorSizeT pivotsM, size_t n=7) -> Matrix7x7"""
        return _math_linear.Matrix7x7_permute(self, pivotsM, n)

    def normSq(self) -> "double":
        r"""normSq(Matrix7x7 self) -> double"""
        return _math_linear.Matrix7x7_normSq(self)

    def norm(self) -> "double":
        r"""norm(Matrix7x7 self) -> double"""
        return _math_linear.Matrix7x7_norm(self)

    def normalize(self) -> "math::linear::MatrixMxN< 7,7,double > &":
        r"""normalize(Matrix7x7 self) -> Matrix7x7"""
        return _math_linear.Matrix7x7_normalize(self)

    def unit(self) -> "math::linear::MatrixMxN< 7,7,double >::Like_T":
        r"""unit(Matrix7x7 self) -> Matrix7x7"""
        return _math_linear.Matrix7x7_unit(self)

    def __add__(self, mx: "Matrix7x7") -> "math::linear::MatrixMxN< 7,7,double >::Like_T":
        r"""__add__(Matrix7x7 self, Matrix7x7 mx) -> Matrix7x7"""
        return _math_linear.Matrix7x7___add__(self, mx)

    def __sub__(self, mx: "Matrix7x7") -> "math::linear::MatrixMxN< 7,7,double >::Like_T":
        r"""__sub__(Matrix7x7 self, Matrix7x7 mx) -> Matrix7x7"""
        return _math_linear.Matrix7x7___sub__(self, mx)

    def __mul__(self, scalar: "double") -> "math::linear::MatrixMxN< 7,7,double >::Like_T":
        r"""__mul__(Matrix7x7 self, double scalar) -> Matrix7x7"""
        return _math_linear.Matrix7x7___mul__(self, scalar)

    def __truediv__(self, *args):
        return _math_linear.Matrix7x7___truediv__(self, *args)
    __div__ = __truediv__



    def __neg__(self) -> "math::linear::MatrixMxN< 7,7,double >::Like_T":
        r"""__neg__(Matrix7x7 self) -> Matrix7x7"""
        return _math_linear.Matrix7x7___neg__(self)

    def __getitem__(self, inObj: "PyObject *") -> "double":
        r"""__getitem__(Matrix7x7 self, PyObject * inObj) -> double"""
        return _math_linear.Matrix7x7___getitem__(self, inObj)

    def __setitem__(self, inObj: "PyObject *", val: "double") -> "void":
        r"""__setitem__(Matrix7x7 self, PyObject * inObj, double val)"""
        return _math_linear.Matrix7x7___setitem__(self, inObj, val)

    def __str__(self) -> "std::string":
        r"""__str__(Matrix7x7 self) -> std::string"""
        return _math_linear.Matrix7x7___str__(self)

    def vals(self) -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >":
        r"""vals(Matrix7x7 self) -> std_vector_vector_double"""
        return _math_linear.Matrix7x7_vals(self)

# Register Matrix7x7 in _math_linear:
_math_linear.Matrix7x7_swigregister(Matrix7x7)

class Vector2(object):
    r"""Proxy of C++ math::linear::VectorN< 2,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Vector2 self) -> Vector2
        __init__(Vector2 self, double sv) -> Vector2
        __init__(Vector2 self, double const * raw) -> Vector2
        __init__(Vector2 self, Vector2 v) -> Vector2
        __init__(Vector2 self, Matrix2x1 mx) -> Vector2
        __init__(Vector2 self, std_vector_double raw) -> Vector2
        """
        _math_linear.Vector2_swiginit(self, _math_linear.new_Vector2(*args))
    __swig_destroy__ = _math_linear.delete_Vector2

    def matrix(self, *args) -> "math::linear::MatrixMxN< 2,1,double > const &":
        r"""
        matrix(Vector2 self) -> Matrix2x1
        matrix(Vector2 self) -> Matrix2x1
        """
        return _math_linear.Vector2_matrix(self, *args)

    def size(self) -> "size_t":
        r"""size(Vector2 self) -> size_t"""
        return _math_linear.Vector2_size(self)

    def dot(self, vec: "Vector2") -> "double":
        r"""dot(Vector2 self, Vector2 vec) -> double"""
        return _math_linear.Vector2_dot(self, vec)

    def normDot(self, vec: "Vector2") -> "double":
        r"""normDot(Vector2 self, Vector2 vec) -> double"""
        return _math_linear.Vector2_normDot(self, vec)

    def norm(self) -> "double":
        r"""norm(Vector2 self) -> double"""
        return _math_linear.Vector2_norm(self)

    def normSq(self) -> "double":
        r"""normSq(Vector2 self) -> double"""
        return _math_linear.Vector2_normSq(self)

    def angle(self, v: "Vector2") -> "double":
        r"""angle(Vector2 self, Vector2 v) -> double"""
        return _math_linear.Vector2_angle(self, v)

    def normalize(self) -> "void":
        r"""normalize(Vector2 self)"""
        return _math_linear.Vector2_normalize(self)

    def unit(self) -> "math::linear::VectorN< 2,double >::Like_T":
        r"""unit(Vector2 self) -> Vector2"""
        return _math_linear.Vector2_unit(self)

    def scale(self, scalar: "double") -> "void":
        r"""scale(Vector2 self, double scalar)"""
        return _math_linear.Vector2_scale(self, scalar)

    def __iadd__(self, v: "Vector2") -> "math::linear::VectorN< 2,double >::Like_T &":
        r"""__iadd__(Vector2 self, Vector2 v) -> Vector2"""
        return _math_linear.Vector2___iadd__(self, v)

    def __isub__(self, v: "Vector2") -> "math::linear::VectorN< 2,double >::Like_T &":
        r"""__isub__(Vector2 self, Vector2 v) -> Vector2"""
        return _math_linear.Vector2___isub__(self, v)

    def add(self, v: "Vector2") -> "math::linear::VectorN< 2,double >::Like_T":
        r"""add(Vector2 self, Vector2 v) -> Vector2"""
        return _math_linear.Vector2_add(self, v)

    def subtract(self, v: "Vector2") -> "math::linear::VectorN< 2,double >::Like_T":
        r"""subtract(Vector2 self, Vector2 v) -> Vector2"""
        return _math_linear.Vector2_subtract(self, v)

    def __add__(self, v: "Vector2") -> "math::linear::VectorN< 2,double >::Like_T":
        r"""__add__(Vector2 self, Vector2 v) -> Vector2"""
        return _math_linear.Vector2___add__(self, v)

    def __sub__(self, v: "Vector2") -> "math::linear::VectorN< 2,double >::Like_T":
        r"""__sub__(Vector2 self, Vector2 v) -> Vector2"""
        return _math_linear.Vector2___sub__(self, v)

    def __neg__(self) -> "math::linear::VectorN< 2,double >::Like_T":
        r"""__neg__(Vector2 self) -> Vector2"""
        return _math_linear.Vector2___neg__(self)

    def __imul__(self, *args) -> "math::linear::VectorN< 2,double >::Like_T &":
        r"""
        __imul__(Vector2 self, Vector2 v) -> Vector2
        __imul__(Vector2 self, double sv) -> Vector2
        """
        return _math_linear.Vector2___imul__(self, *args)

    def __itruediv__(self, *args):
        return _math_linear.Vector2___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __mul__(self, *args) -> "math::linear::VectorN< 2,double >::Like_T":
        r"""
        __mul__(Vector2 self, double sv) -> Vector2
        __mul__(Vector2 self, Vector2 v) -> Vector2
        """
        return _math_linear.Vector2___mul__(self, *args)

    def __truediv__(self, *args):
        return _math_linear.Vector2___truediv__(self, *args)
    __div__ = __truediv__



    def __getstate__(self):
        return pickle.dumps(self.vals())
    def __setstate__(self, state):
        self.__init__(pickle.loads(state))


    def __getitem__(self, i: "long") -> "double":
        r"""__getitem__(Vector2 self, long i) -> double"""
        return _math_linear.Vector2___getitem__(self, i)

    def __setitem__(self, i: "long", val: "double") -> "void":
        r"""__setitem__(Vector2 self, long i, double val)"""
        return _math_linear.Vector2___setitem__(self, i, val)

    def __str__(self) -> "std::string":
        r"""__str__(Vector2 self) -> std::string"""
        return _math_linear.Vector2___str__(self)

    def __deepcopy__(self, memo: "PyObject *") -> "math::linear::VectorN< 2,double >":
        r"""__deepcopy__(Vector2 self, PyObject * memo) -> Vector2"""
        return _math_linear.Vector2___deepcopy__(self, memo)

    def vals(self) -> "std::vector< double,std::allocator< double > >":
        r"""vals(Vector2 self) -> std_vector_double"""
        return _math_linear.Vector2_vals(self)

# Register Vector2 in _math_linear:
_math_linear.Vector2_swigregister(Vector2)

class Vector3(object):
    r"""Proxy of C++ math::linear::VectorN< 3,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Vector3 self) -> Vector3
        __init__(Vector3 self, double sv) -> Vector3
        __init__(Vector3 self, double const * raw) -> Vector3
        __init__(Vector3 self, Vector3 v) -> Vector3
        __init__(Vector3 self, Matrix3x1 mx) -> Vector3
        __init__(Vector3 self, std_vector_double raw) -> Vector3
        """
        _math_linear.Vector3_swiginit(self, _math_linear.new_Vector3(*args))
    __swig_destroy__ = _math_linear.delete_Vector3

    def matrix(self, *args) -> "math::linear::MatrixMxN< 3,1,double > const &":
        r"""
        matrix(Vector3 self) -> Matrix3x1
        matrix(Vector3 self) -> Matrix3x1
        """
        return _math_linear.Vector3_matrix(self, *args)

    def size(self) -> "size_t":
        r"""size(Vector3 self) -> size_t"""
        return _math_linear.Vector3_size(self)

    def dot(self, vec: "Vector3") -> "double":
        r"""dot(Vector3 self, Vector3 vec) -> double"""
        return _math_linear.Vector3_dot(self, vec)

    def normDot(self, vec: "Vector3") -> "double":
        r"""normDot(Vector3 self, Vector3 vec) -> double"""
        return _math_linear.Vector3_normDot(self, vec)

    def norm(self) -> "double":
        r"""norm(Vector3 self) -> double"""
        return _math_linear.Vector3_norm(self)

    def normSq(self) -> "double":
        r"""normSq(Vector3 self) -> double"""
        return _math_linear.Vector3_normSq(self)

    def angle(self, v: "Vector3") -> "double":
        r"""angle(Vector3 self, Vector3 v) -> double"""
        return _math_linear.Vector3_angle(self, v)

    def normalize(self) -> "void":
        r"""normalize(Vector3 self)"""
        return _math_linear.Vector3_normalize(self)

    def unit(self) -> "math::linear::VectorN< 3,double >::Like_T":
        r"""unit(Vector3 self) -> Vector3"""
        return _math_linear.Vector3_unit(self)

    def scale(self, scalar: "double") -> "void":
        r"""scale(Vector3 self, double scalar)"""
        return _math_linear.Vector3_scale(self, scalar)

    def __iadd__(self, v: "Vector3") -> "math::linear::VectorN< 3,double >::Like_T &":
        r"""__iadd__(Vector3 self, Vector3 v) -> Vector3"""
        return _math_linear.Vector3___iadd__(self, v)

    def __isub__(self, v: "Vector3") -> "math::linear::VectorN< 3,double >::Like_T &":
        r"""__isub__(Vector3 self, Vector3 v) -> Vector3"""
        return _math_linear.Vector3___isub__(self, v)

    def add(self, v: "Vector3") -> "math::linear::VectorN< 3,double >::Like_T":
        r"""add(Vector3 self, Vector3 v) -> Vector3"""
        return _math_linear.Vector3_add(self, v)

    def subtract(self, v: "Vector3") -> "math::linear::VectorN< 3,double >::Like_T":
        r"""subtract(Vector3 self, Vector3 v) -> Vector3"""
        return _math_linear.Vector3_subtract(self, v)

    def __add__(self, v: "Vector3") -> "math::linear::VectorN< 3,double >::Like_T":
        r"""__add__(Vector3 self, Vector3 v) -> Vector3"""
        return _math_linear.Vector3___add__(self, v)

    def __sub__(self, v: "Vector3") -> "math::linear::VectorN< 3,double >::Like_T":
        r"""__sub__(Vector3 self, Vector3 v) -> Vector3"""
        return _math_linear.Vector3___sub__(self, v)

    def __neg__(self) -> "math::linear::VectorN< 3,double >::Like_T":
        r"""__neg__(Vector3 self) -> Vector3"""
        return _math_linear.Vector3___neg__(self)

    def __imul__(self, *args) -> "math::linear::VectorN< 3,double >::Like_T &":
        r"""
        __imul__(Vector3 self, Vector3 v) -> Vector3
        __imul__(Vector3 self, double sv) -> Vector3
        """
        return _math_linear.Vector3___imul__(self, *args)

    def __itruediv__(self, *args):
        return _math_linear.Vector3___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __mul__(self, *args) -> "math::linear::VectorN< 3,double >::Like_T":
        r"""
        __mul__(Vector3 self, double sv) -> Vector3
        __mul__(Vector3 self, Vector3 v) -> Vector3
        """
        return _math_linear.Vector3___mul__(self, *args)

    def __truediv__(self, *args):
        return _math_linear.Vector3___truediv__(self, *args)
    __div__ = __truediv__



    def __getstate__(self):
        return pickle.dumps(self.vals())
    def __setstate__(self, state):
        self.__init__(pickle.loads(state))


    def __getitem__(self, i: "long") -> "double":
        r"""__getitem__(Vector3 self, long i) -> double"""
        return _math_linear.Vector3___getitem__(self, i)

    def __setitem__(self, i: "long", val: "double") -> "void":
        r"""__setitem__(Vector3 self, long i, double val)"""
        return _math_linear.Vector3___setitem__(self, i, val)

    def __str__(self) -> "std::string":
        r"""__str__(Vector3 self) -> std::string"""
        return _math_linear.Vector3___str__(self)

    def __deepcopy__(self, memo: "PyObject *") -> "math::linear::VectorN< 3,double >":
        r"""__deepcopy__(Vector3 self, PyObject * memo) -> Vector3"""
        return _math_linear.Vector3___deepcopy__(self, memo)

    def vals(self) -> "std::vector< double,std::allocator< double > >":
        r"""vals(Vector3 self) -> std_vector_double"""
        return _math_linear.Vector3_vals(self)

# Register Vector3 in _math_linear:
_math_linear.Vector3_swigregister(Vector3)


def cross(*args) -> "math::linear::Vector< double >":
    r"""
    cross(Vector3 u, Vector3 v) -> Vector3
    cross(VectorDouble u, VectorDouble v) -> VectorDouble
    """
    return _math_linear.cross(*args)
class VectorDouble(object):
    r"""Proxy of C++ math::linear::Vector< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(VectorDouble self) -> VectorDouble
        __init__(VectorDouble self, size_t sz, double sv=0.0) -> VectorDouble
        __init__(VectorDouble self, size_t sz, double const * raw) -> VectorDouble
        __init__(VectorDouble self, VectorDouble v) -> VectorDouble
        __init__(VectorDouble self, std_vector_double v) -> VectorDouble
        __init__(VectorDouble self, MatrixDouble mx) -> VectorDouble
        """
        _math_linear.VectorDouble_swiginit(self, _math_linear.new_VectorDouble(*args))
    __swig_destroy__ = _math_linear.delete_VectorDouble

    def size(self) -> "size_t":
        r"""size(VectorDouble self) -> size_t"""
        return _math_linear.VectorDouble_size(self)

    def matrix(self, *args) -> "math::linear::Matrix2D< double > const &":
        r"""
        matrix(VectorDouble self) -> MatrixDouble
        matrix(VectorDouble self) -> MatrixDouble
        """
        return _math_linear.VectorDouble_matrix(self, *args)

    def get(self) -> "double const *":
        r"""get(VectorDouble self) -> double const *"""
        return _math_linear.VectorDouble_get(self)

    def dot(self, vec_: "VectorDouble") -> "double":
        r"""dot(VectorDouble self, VectorDouble vec_) -> double"""
        return _math_linear.VectorDouble_dot(self, vec_)

    def angle(self, v: "VectorDouble") -> "double":
        r"""angle(VectorDouble self, VectorDouble v) -> double"""
        return _math_linear.VectorDouble_angle(self, v)

    def normSq(self) -> "double":
        r"""normSq(VectorDouble self) -> double"""
        return _math_linear.VectorDouble_normSq(self)

    def norm(self) -> "double":
        r"""norm(VectorDouble self) -> double"""
        return _math_linear.VectorDouble_norm(self)

    def normalize(self) -> "void":
        r"""normalize(VectorDouble self)"""
        return _math_linear.VectorDouble_normalize(self)

    def scale(self, scalar: "double") -> "void":
        r"""scale(VectorDouble self, double scalar)"""
        return _math_linear.VectorDouble_scale(self, scalar)

    def unit(self) -> "math::linear::Vector< double >":
        r"""unit(VectorDouble self) -> VectorDouble"""
        return _math_linear.VectorDouble_unit(self)

    def __iadd__(self, v: "VectorDouble") -> "math::linear::Vector< double > &":
        r"""__iadd__(VectorDouble self, VectorDouble v) -> VectorDouble"""
        return _math_linear.VectorDouble___iadd__(self, v)

    def __isub__(self, v: "VectorDouble") -> "math::linear::Vector< double > &":
        r"""__isub__(VectorDouble self, VectorDouble v) -> VectorDouble"""
        return _math_linear.VectorDouble___isub__(self, v)

    def add(self, v: "VectorDouble") -> "math::linear::Vector< double >":
        r"""add(VectorDouble self, VectorDouble v) -> VectorDouble"""
        return _math_linear.VectorDouble_add(self, v)

    def subtract(self, v: "VectorDouble") -> "math::linear::Vector< double >":
        r"""subtract(VectorDouble self, VectorDouble v) -> VectorDouble"""
        return _math_linear.VectorDouble_subtract(self, v)

    def __add__(self, v: "VectorDouble") -> "math::linear::Vector< double >":
        r"""__add__(VectorDouble self, VectorDouble v) -> VectorDouble"""
        return _math_linear.VectorDouble___add__(self, v)

    def __sub__(self, v: "VectorDouble") -> "math::linear::Vector< double >":
        r"""__sub__(VectorDouble self, VectorDouble v) -> VectorDouble"""
        return _math_linear.VectorDouble___sub__(self, v)

    def __neg__(self) -> "math::linear::Vector< double >":
        r"""__neg__(VectorDouble self) -> VectorDouble"""
        return _math_linear.VectorDouble___neg__(self)

    def __imul__(self, *args) -> "math::linear::Vector< double > &":
        r"""
        __imul__(VectorDouble self, VectorDouble v) -> VectorDouble
        __imul__(VectorDouble self, double sv) -> VectorDouble
        """
        return _math_linear.VectorDouble___imul__(self, *args)

    def __itruediv__(self, *args):
        return _math_linear.VectorDouble___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __mul__(self, *args) -> "math::linear::Vector< double >":
        r"""
        __mul__(VectorDouble self, double sv) -> VectorDouble
        __mul__(VectorDouble self, VectorDouble v) -> VectorDouble
        """
        return _math_linear.VectorDouble___mul__(self, *args)

    def __truediv__(self, *args):
        return _math_linear.VectorDouble___truediv__(self, *args)
    __div__ = __truediv__



    def __getitem__(self, i: "long") -> "double":
        r"""__getitem__(VectorDouble self, long i) -> double"""
        return _math_linear.VectorDouble___getitem__(self, i)

    def __setitem__(self, i: "long", val: "double") -> "void":
        r"""__setitem__(VectorDouble self, long i, double val)"""
        return _math_linear.VectorDouble___setitem__(self, i, val)

    def __str__(self) -> "std::string":
        r"""__str__(VectorDouble self) -> std::string"""
        return _math_linear.VectorDouble___str__(self)

    def vals(self) -> "std::vector< double,std::allocator< double > >":
        r"""vals(VectorDouble self) -> std_vector_double"""
        return _math_linear.VectorDouble_vals(self)

# Register VectorDouble in _math_linear:
_math_linear.VectorDouble_swigregister(VectorDouble)

class MatrixDouble(object):
    r"""Proxy of C++ math::linear::Matrix2D< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MatrixDouble self) -> MatrixDouble
        __init__(MatrixDouble self, size_t M, size_t N, double cv=0) -> MatrixDouble
        __init__(MatrixDouble self, size_t M, size_t N, double const * raw) -> MatrixDouble
        __init__(MatrixDouble self, size_t M, size_t N, std_vector_double raw) -> MatrixDouble
        __init__(MatrixDouble self, MatrixDouble mx) -> MatrixDouble
        __init__(MatrixDouble self, size_t M, size_t N, double * raw, bool adopt) -> MatrixDouble
        """
        _math_linear.MatrixDouble_swiginit(self, _math_linear.new_MatrixDouble(*args))
    __swig_destroy__ = _math_linear.delete_MatrixDouble

    def __call__(self, *args) -> "double &":
        r"""
        __call__(MatrixDouble self, size_t i, size_t j) -> double
        __call__(MatrixDouble self, size_t i, size_t j) -> double &
        """
        return _math_linear.MatrixDouble___call__(self, *args)

    def row(self, *args) -> "void":
        r"""
        row(MatrixDouble self, size_t i) -> double const
        row(MatrixDouble self, size_t i) -> double
        row(MatrixDouble self, size_t i, double const * vec_)
        row(MatrixDouble self, size_t i, std_vector_double vec_)
        """
        return _math_linear.MatrixDouble_row(self, *args)

    def col(self, *args) -> "void":
        r"""
        col(MatrixDouble self, size_t j) -> std_vector_double
        col(MatrixDouble self, size_t j, double const * vec_)
        col(MatrixDouble self, size_t j, std_vector_double vec_)
        """
        return _math_linear.MatrixDouble_col(self, *args)

    def rows(self) -> "size_t":
        r"""rows(MatrixDouble self) -> size_t"""
        return _math_linear.MatrixDouble_rows(self)

    def cols(self) -> "size_t":
        r"""cols(MatrixDouble self) -> size_t"""
        return _math_linear.MatrixDouble_cols(self)

    def size(self) -> "size_t":
        r"""size(MatrixDouble self) -> size_t"""
        return _math_linear.MatrixDouble_size(self)

    def get(self) -> "double const *":
        r"""get(MatrixDouble self) -> double const *"""
        return _math_linear.MatrixDouble_get(self)

    def scale(self, scalar: "double") -> "math::linear::Matrix2D< double > &":
        r"""scale(MatrixDouble self, double scalar) -> MatrixDouble"""
        return _math_linear.MatrixDouble_scale(self, scalar)

    def multiply(self, *args) -> "void":
        r"""
        multiply(MatrixDouble self, double scalar) -> MatrixDouble
        multiply(MatrixDouble self, MatrixDouble mx) -> MatrixDouble
        multiply(MatrixDouble self, MatrixDouble mx, MatrixDouble out)
        """
        return _math_linear.MatrixDouble_multiply(self, *args)

    def scaleDiagonal(self, mx: "MatrixDouble") -> "math::linear::Matrix2D< double > &":
        r"""scaleDiagonal(MatrixDouble self, MatrixDouble mx) -> MatrixDouble"""
        return _math_linear.MatrixDouble_scaleDiagonal(self, mx)

    def scaleDiagonalRowVector(self, mx: "MatrixDouble") -> "math::linear::Matrix2D< double > &":
        r"""scaleDiagonalRowVector(MatrixDouble self, MatrixDouble mx) -> MatrixDouble"""
        return _math_linear.MatrixDouble_scaleDiagonalRowVector(self, mx)

    def multiplyDiagonal(self, mx: "MatrixDouble") -> "math::linear::Matrix2D< double >":
        r"""multiplyDiagonal(MatrixDouble self, MatrixDouble mx) -> MatrixDouble"""
        return _math_linear.MatrixDouble_multiplyDiagonal(self, mx)

    def multiplyDiagonalRowVector(self, mx: "MatrixDouble") -> "math::linear::Matrix2D< double >":
        r"""multiplyDiagonalRowVector(MatrixDouble self, MatrixDouble mx) -> MatrixDouble"""
        return _math_linear.MatrixDouble_multiplyDiagonalRowVector(self, mx)

    def __iadd__(self, mx: "MatrixDouble") -> "math::linear::Matrix2D< double > &":
        r"""__iadd__(MatrixDouble self, MatrixDouble mx) -> MatrixDouble"""
        return _math_linear.MatrixDouble___iadd__(self, mx)

    def __isub__(self, mx: "MatrixDouble") -> "math::linear::Matrix2D< double > &":
        r"""__isub__(MatrixDouble self, MatrixDouble mx) -> MatrixDouble"""
        return _math_linear.MatrixDouble___isub__(self, mx)

    def add(self, mx: "MatrixDouble") -> "math::linear::Matrix2D< double >":
        r"""add(MatrixDouble self, MatrixDouble mx) -> MatrixDouble"""
        return _math_linear.MatrixDouble_add(self, mx)

    def subtract(self, mx: "MatrixDouble") -> "math::linear::Matrix2D< double >":
        r"""subtract(MatrixDouble self, MatrixDouble mx) -> MatrixDouble"""
        return _math_linear.MatrixDouble_subtract(self, mx)

    def transpose(self) -> "math::linear::Matrix2D< double >":
        r"""transpose(MatrixDouble self) -> MatrixDouble"""
        return _math_linear.MatrixDouble_transpose(self)

    def decomposeLU(self, pivotsM: "VectorSizeT") -> "math::linear::Matrix2D< double >":
        r"""decomposeLU(MatrixDouble self, VectorSizeT pivotsM) -> MatrixDouble"""
        return _math_linear.MatrixDouble_decomposeLU(self, pivotsM)

    def permute(self, pivotsM: "VectorSizeT", n: "size_t"=0) -> "math::linear::Matrix2D< double >":
        r"""permute(MatrixDouble self, VectorSizeT pivotsM, size_t n=0) -> MatrixDouble"""
        return _math_linear.MatrixDouble_permute(self, pivotsM, n)

    def normSq(self) -> "double":
        r"""normSq(MatrixDouble self) -> double"""
        return _math_linear.MatrixDouble_normSq(self)

    def norm(self) -> "double":
        r"""norm(MatrixDouble self) -> double"""
        return _math_linear.MatrixDouble_norm(self)

    def normalize(self) -> "math::linear::Matrix2D< double > &":
        r"""normalize(MatrixDouble self) -> MatrixDouble"""
        return _math_linear.MatrixDouble_normalize(self)

    def unit(self) -> "math::linear::Matrix2D< double >":
        r"""unit(MatrixDouble self) -> MatrixDouble"""
        return _math_linear.MatrixDouble_unit(self)

    def __add__(self, mx: "MatrixDouble") -> "math::linear::Matrix2D< double >":
        r"""__add__(MatrixDouble self, MatrixDouble mx) -> MatrixDouble"""
        return _math_linear.MatrixDouble___add__(self, mx)

    def __sub__(self, mx: "MatrixDouble") -> "math::linear::Matrix2D< double >":
        r"""__sub__(MatrixDouble self, MatrixDouble mx) -> MatrixDouble"""
        return _math_linear.MatrixDouble___sub__(self, mx)

    def __truediv__(self, *args):
        return _math_linear.MatrixDouble___truediv__(self, *args)
    __div__ = __truediv__



    def __mul__(self, *args) -> "math::linear::Matrix2D< double >":
        r"""
        __mul__(MatrixDouble self, double scalar) -> MatrixDouble
        __mul__(MatrixDouble self, MatrixDouble mx) -> MatrixDouble
        """
        return _math_linear.MatrixDouble___mul__(self, *args)

    def __neg__(self) -> "math::linear::Matrix2D< double >":
        r"""__neg__(MatrixDouble self) -> MatrixDouble"""
        return _math_linear.MatrixDouble___neg__(self)

    def __getitem__(self, inObj: "PyObject *") -> "double":
        r"""__getitem__(MatrixDouble self, PyObject * inObj) -> double"""
        return _math_linear.MatrixDouble___getitem__(self, inObj)

    def __setitem__(self, inObj: "PyObject *", val: "double") -> "void":
        r"""__setitem__(MatrixDouble self, PyObject * inObj, double val)"""
        return _math_linear.MatrixDouble___setitem__(self, inObj, val)

    def __str__(self) -> "std::string":
        r"""__str__(MatrixDouble self) -> std::string"""
        return _math_linear.MatrixDouble___str__(self)

    def vals(self) -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >":
        r"""vals(MatrixDouble self) -> std_vector_vector_double"""
        return _math_linear.MatrixDouble_vals(self)

# Register MatrixDouble in _math_linear:
_math_linear.MatrixDouble_swigregister(MatrixDouble)



