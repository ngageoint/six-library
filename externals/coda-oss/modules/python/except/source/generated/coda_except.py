# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_coda_except')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_coda_except')
    _coda_except = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_coda_except', [dirname(__file__)])
        except ImportError:
            import _coda_except
            return _coda_except
        try:
            _mod = imp.load_module('_coda_except', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _coda_except = swig_import_helper()
    del swig_import_helper
else:
    import _coda_except
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class Context(_object):
    """Proxy of C++ except::Context class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Context, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Context, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _coda_except.delete_Context
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(except::Context self, char const * file, int line, std::string const & func, std::string const & time, std::string const & message) -> Context
        __init__(except::Context self, char const * file, int line, std::string const & func, std::string const & time) -> Context
        __init__(except::Context self, std::string const & message, char const * file, int line, std::string const & func, std::string const & time) -> Context
        __init__(except::Context self, std::string const & message, char const * file, int line, std::string const & func) -> Context
        __init__(except::Context self, std::string const & message, char const * file, int line) -> Context
        __init__(except::Context self, std::string const & file, int line, std::string const & func, std::string const & time, std::string const & message) -> Context
        __init__(except::Context self, Context arg2) -> Context
        __init__(except::Context self, Context arg2) -> Context
        """
        this = _coda_except.new_Context(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getMessage(self) -> "std::string const &":
        """getMessage(Context self) -> std::string const &"""
        return _coda_except.Context_getMessage(self)


    def getTime(self) -> "std::string const &":
        """getTime(Context self) -> std::string const &"""
        return _coda_except.Context_getTime(self)


    def getFunction(self) -> "std::string const &":
        """getFunction(Context self) -> std::string const &"""
        return _coda_except.Context_getFunction(self)


    def getFile(self) -> "std::string const &":
        """getFile(Context self) -> std::string const &"""
        return _coda_except.Context_getFile(self)


    def getLine(self) -> "int":
        """getLine(Context self) -> int"""
        return _coda_except.Context_getLine(self)

    __swig_setmethods__["mMessage"] = _coda_except.Context_mMessage_set
    __swig_getmethods__["mMessage"] = _coda_except.Context_mMessage_get
    if _newclass:
        mMessage = _swig_property(_coda_except.Context_mMessage_get, _coda_except.Context_mMessage_set)
    __swig_setmethods__["mTime"] = _coda_except.Context_mTime_set
    __swig_getmethods__["mTime"] = _coda_except.Context_mTime_get
    if _newclass:
        mTime = _swig_property(_coda_except.Context_mTime_get, _coda_except.Context_mTime_set)
    __swig_setmethods__["mFunc"] = _coda_except.Context_mFunc_set
    __swig_getmethods__["mFunc"] = _coda_except.Context_mFunc_get
    if _newclass:
        mFunc = _swig_property(_coda_except.Context_mFunc_get, _coda_except.Context_mFunc_set)
    __swig_setmethods__["mFile"] = _coda_except.Context_mFile_set
    __swig_getmethods__["mFile"] = _coda_except.Context_mFile_get
    if _newclass:
        mFile = _swig_property(_coda_except.Context_mFile_get, _coda_except.Context_mFile_set)
    __swig_setmethods__["mLine"] = _coda_except.Context_mLine_set
    __swig_getmethods__["mLine"] = _coda_except.Context_mLine_get
    if _newclass:
        mLine = _swig_property(_coda_except.Context_mLine_get, _coda_except.Context_mLine_set)
Context_swigregister = _coda_except.Context_swigregister
Context_swigregister(Context)


def __lshift__(os: 'std::ostream &', c: 'Context') -> "std::ostream &":
    """__lshift__(std::ostream & os, Context c) -> std::ostream &"""
    return _coda_except.__lshift__(os, c)
class Throwable(_object):
    """Proxy of C++ except::Throwable class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Throwable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Throwable, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(except::Throwable self) -> Throwable
        __init__(except::Throwable self, Throwable arg2) -> Throwable
        __init__(except::Throwable self, Throwable arg2) -> Throwable
        __init__(except::Throwable self, ThrowableEx arg2) -> Throwable
        __init__(except::Throwable self, std::string const & message) -> Throwable
        __init__(except::Throwable self, Context arg2) -> Throwable
        __init__(except::Throwable self, Throwable arg2, Context arg3) -> Throwable
        __init__(except::Throwable self, ThrowableEx arg2, Context arg3) -> Throwable
        """
        this = _coda_except.new_Throwable(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coda_except.delete_Throwable
    __del__ = lambda self: None

    def getMessage(self) -> "std::string":
        """getMessage(Throwable self) -> std::string"""
        return _coda_except.Throwable_getMessage(self)


    def getTrace(self, *args) -> "Trace &":
        """
        getTrace(Throwable self) -> Trace const
        getTrace(Throwable self) -> Trace &
        """
        return _coda_except.Throwable_getTrace(self, *args)


    def getType(self) -> "std::string":
        """getType(Throwable self) -> std::string"""
        return _coda_except.Throwable_getType(self)


    def getBacktrace(self) -> "std::vector< std::string > const &":
        """getBacktrace(Throwable self) -> std::vector< std::string > const &"""
        return _coda_except.Throwable_getBacktrace(self)


    def backtrace(self) -> "except::Throwable &":
        """backtrace(Throwable self) -> Throwable"""
        return _coda_except.Throwable_backtrace(self)


    def toString(self, *args) -> "std::string":
        """
        toString(Throwable self) -> std::string
        toString(Throwable self, bool includeBacktrace) -> std::string
        """
        return _coda_except.Throwable_toString(self, *args)


    def what(self) -> "char const *":
        """what(Throwable self) -> char const *"""
        return _coda_except.Throwable_what(self)

Throwable_swigregister = _coda_except.Throwable_swigregister
Throwable_swigregister(Throwable)

class ThrowableEx(_object):
    """Proxy of C++ except::ThrowableEx class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThrowableEx, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ThrowableEx, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _coda_except.delete_ThrowableEx
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(except::ThrowableEx self) -> ThrowableEx
        __init__(except::ThrowableEx self, ThrowableEx arg2) -> ThrowableEx
        __init__(except::ThrowableEx self, ThrowableEx arg2) -> ThrowableEx
        __init__(except::ThrowableEx self, Throwable arg2) -> ThrowableEx
        __init__(except::ThrowableEx self, std::string const & message) -> ThrowableEx
        __init__(except::ThrowableEx self, Context arg2) -> ThrowableEx
        __init__(except::ThrowableEx self, ThrowableEx arg2, Context arg3) -> ThrowableEx
        __init__(except::ThrowableEx self, Throwable arg2, Context arg3) -> ThrowableEx
        """
        this = _coda_except.new_ThrowableEx(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getMessage(self) -> "std::string":
        """getMessage(ThrowableEx self) -> std::string"""
        return _coda_except.ThrowableEx_getMessage(self)


    def getTrace(self, *args) -> "Trace &":
        """
        getTrace(ThrowableEx self) -> Trace const
        getTrace(ThrowableEx self) -> Trace &
        """
        return _coda_except.ThrowableEx_getTrace(self, *args)


    def getType(self) -> "std::string":
        """getType(ThrowableEx self) -> std::string"""
        return _coda_except.ThrowableEx_getType(self)


    def getBacktrace(self) -> "std::vector< std::string > const &":
        """getBacktrace(ThrowableEx self) -> std::vector< std::string > const &"""
        return _coda_except.ThrowableEx_getBacktrace(self)


    def backtrace(self) -> "except::ThrowableEx &":
        """backtrace(ThrowableEx self) -> ThrowableEx"""
        return _coda_except.ThrowableEx_backtrace(self)


    def toString(self, *args) -> "std::string":
        """
        toString(ThrowableEx self) -> std::string
        toString(ThrowableEx self, bool includeBacktrace) -> std::string
        """
        return _coda_except.ThrowableEx_toString(self, *args)


    def what(self) -> "char const *":
        """what(ThrowableEx self) -> char const *"""
        return _coda_except.ThrowableEx_what(self)

ThrowableEx_swigregister = _coda_except.ThrowableEx_swigregister
ThrowableEx_swigregister(ThrowableEx)

class Exception(Throwable):
    """Proxy of C++ except::Exception class."""

    __swig_setmethods__ = {}
    for _s in [Throwable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Exception, name, value)
    __swig_getmethods__ = {}
    for _s in [Throwable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Exception, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _coda_except.delete_Exception
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(except::Exception self) -> Exception
        __init__(except::Exception self, Context c) -> Exception
        __init__(except::Exception self, Throwable t, Context c) -> Exception
        __init__(except::Exception self, ThrowableEx t, Context c) -> Exception
        __init__(except::Exception self, std::string const & message) -> Exception
        """
        this = _coda_except.new_Exception(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getType(self) -> "std::string":
        """getType(Exception self) -> std::string"""
        return _coda_except.Exception_getType(self)

Exception_swigregister = _coda_except.Exception_swigregister
Exception_swigregister(Exception)

class ExceptionEx(ThrowableEx):
    """Proxy of C++ except::ExceptionEx class."""

    __swig_setmethods__ = {}
    for _s in [ThrowableEx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExceptionEx, name, value)
    __swig_getmethods__ = {}
    for _s in [ThrowableEx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExceptionEx, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _coda_except.delete_ExceptionEx
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(except::ExceptionEx self) -> ExceptionEx
        __init__(except::ExceptionEx self, Context c) -> ExceptionEx
        __init__(except::ExceptionEx self, ThrowableEx t, Context c) -> ExceptionEx
        __init__(except::ExceptionEx self, Throwable t, Context c) -> ExceptionEx
        __init__(except::ExceptionEx self, std::string const & message) -> ExceptionEx
        """
        this = _coda_except.new_ExceptionEx(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getType(self) -> "std::string":
        """getType(ExceptionEx self) -> std::string"""
        return _coda_except.ExceptionEx_getType(self)

ExceptionEx_swigregister = _coda_except.ExceptionEx_swigregister
ExceptionEx_swigregister(ExceptionEx)

class IOException(Exception):
    """Proxy of C++ except::IOException class."""

    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IOException, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _coda_except.delete_IOException
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(except::IOException self) -> IOException
        __init__(except::IOException self, IOException arg2) -> IOException
        __init__(except::IOException self, IOException arg2) -> IOException
        __init__(except::IOException self, Context c) -> IOException
        __init__(except::IOException self, std::string const & msg) -> IOException
        __init__(except::IOException self, Throwable t, Context c) -> IOException
        __init__(except::IOException self, ThrowableEx t, Context c) -> IOException
        """
        this = _coda_except.new_IOException(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getType(self) -> "std::string":
        """getType(IOException self) -> std::string"""
        return _coda_except.IOException_getType(self)

IOException_swigregister = _coda_except.IOException_swigregister
IOException_swigregister(IOException)

class IOExceptionEx(ExceptionEx):
    """Proxy of C++ except::IOExceptionEx class."""

    __swig_setmethods__ = {}
    for _s in [ExceptionEx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOExceptionEx, name, value)
    __swig_getmethods__ = {}
    for _s in [ExceptionEx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IOExceptionEx, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _coda_except.delete_IOExceptionEx
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(except::IOExceptionEx self) -> IOExceptionEx
        __init__(except::IOExceptionEx self, IOExceptionEx arg2) -> IOExceptionEx
        __init__(except::IOExceptionEx self, IOExceptionEx arg2) -> IOExceptionEx
        __init__(except::IOExceptionEx self, Context c) -> IOExceptionEx
        __init__(except::IOExceptionEx self, std::string const & msg) -> IOExceptionEx
        __init__(except::IOExceptionEx self, Throwable t, Context c) -> IOExceptionEx
        __init__(except::IOExceptionEx self, ThrowableEx t, Context c) -> IOExceptionEx
        """
        this = _coda_except.new_IOExceptionEx(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getType(self) -> "std::string":
        """getType(IOExceptionEx self) -> std::string"""
        return _coda_except.IOExceptionEx_getType(self)

IOExceptionEx_swigregister = _coda_except.IOExceptionEx_swigregister
IOExceptionEx_swigregister(IOExceptionEx)

class FileNotFoundException(IOException):
    """Proxy of C++ except::FileNotFoundException class."""

    __swig_setmethods__ = {}
    for _s in [IOException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileNotFoundException, name, value)
    __swig_getmethods__ = {}
    for _s in [IOException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileNotFoundException, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _coda_except.delete_FileNotFoundException
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(except::FileNotFoundException self) -> FileNotFoundException
        __init__(except::FileNotFoundException self, FileNotFoundException arg2) -> FileNotFoundException
        __init__(except::FileNotFoundException self, FileNotFoundException arg2) -> FileNotFoundException
        __init__(except::FileNotFoundException self, Context c) -> FileNotFoundException
        __init__(except::FileNotFoundException self, std::string const & msg) -> FileNotFoundException
        __init__(except::FileNotFoundException self, Throwable t, Context c) -> FileNotFoundException
        __init__(except::FileNotFoundException self, ThrowableEx t, Context c) -> FileNotFoundException
        """
        this = _coda_except.new_FileNotFoundException(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getType(self) -> "std::string":
        """getType(FileNotFoundException self) -> std::string"""
        return _coda_except.FileNotFoundException_getType(self)

FileNotFoundException_swigregister = _coda_except.FileNotFoundException_swigregister
FileNotFoundException_swigregister(FileNotFoundException)

class BadCastException(Exception):
    """Proxy of C++ except::BadCastException class."""

    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BadCastException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BadCastException, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _coda_except.delete_BadCastException
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(except::BadCastException self) -> BadCastException
        __init__(except::BadCastException self, BadCastException arg2) -> BadCastException
        __init__(except::BadCastException self, BadCastException arg2) -> BadCastException
        __init__(except::BadCastException self, Context c) -> BadCastException
        __init__(except::BadCastException self, std::string const & msg) -> BadCastException
        __init__(except::BadCastException self, Throwable t, Context c) -> BadCastException
        __init__(except::BadCastException self, ThrowableEx t, Context c) -> BadCastException
        """
        this = _coda_except.new_BadCastException(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getType(self) -> "std::string":
        """getType(BadCastException self) -> std::string"""
        return _coda_except.BadCastException_getType(self)

BadCastException_swigregister = _coda_except.BadCastException_swigregister
BadCastException_swigregister(BadCastException)

class BadCastExceptionEx(ExceptionEx):
    """Proxy of C++ except::BadCastExceptionEx class."""

    __swig_setmethods__ = {}
    for _s in [ExceptionEx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BadCastExceptionEx, name, value)
    __swig_getmethods__ = {}
    for _s in [ExceptionEx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BadCastExceptionEx, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _coda_except.delete_BadCastExceptionEx
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(except::BadCastExceptionEx self) -> BadCastExceptionEx
        __init__(except::BadCastExceptionEx self, BadCastExceptionEx arg2) -> BadCastExceptionEx
        __init__(except::BadCastExceptionEx self, BadCastExceptionEx arg2) -> BadCastExceptionEx
        __init__(except::BadCastExceptionEx self, Context c) -> BadCastExceptionEx
        __init__(except::BadCastExceptionEx self, std::string const & msg) -> BadCastExceptionEx
        __init__(except::BadCastExceptionEx self, Throwable t, Context c) -> BadCastExceptionEx
        __init__(except::BadCastExceptionEx self, ThrowableEx t, Context c) -> BadCastExceptionEx
        """
        this = _coda_except.new_BadCastExceptionEx(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getType(self) -> "std::string":
        """getType(BadCastExceptionEx self) -> std::string"""
        return _coda_except.BadCastExceptionEx_getType(self)

BadCastExceptionEx_swigregister = _coda_except.BadCastExceptionEx_swigregister
BadCastExceptionEx_swigregister(BadCastExceptionEx)

class InvalidFormatException(Exception):
    """Proxy of C++ except::InvalidFormatException class."""

    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidFormatException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InvalidFormatException, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _coda_except.delete_InvalidFormatException
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(except::InvalidFormatException self) -> InvalidFormatException
        __init__(except::InvalidFormatException self, InvalidFormatException arg2) -> InvalidFormatException
        __init__(except::InvalidFormatException self, InvalidFormatException arg2) -> InvalidFormatException
        __init__(except::InvalidFormatException self, Context c) -> InvalidFormatException
        __init__(except::InvalidFormatException self, std::string const & msg) -> InvalidFormatException
        __init__(except::InvalidFormatException self, Throwable t, Context c) -> InvalidFormatException
        __init__(except::InvalidFormatException self, ThrowableEx t, Context c) -> InvalidFormatException
        """
        this = _coda_except.new_InvalidFormatException(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getType(self) -> "std::string":
        """getType(InvalidFormatException self) -> std::string"""
        return _coda_except.InvalidFormatException_getType(self)

InvalidFormatException_swigregister = _coda_except.InvalidFormatException_swigregister
InvalidFormatException_swigregister(InvalidFormatException)

class InvalidFormatExceptionEx(ExceptionEx):
    """Proxy of C++ except::InvalidFormatExceptionEx class."""

    __swig_setmethods__ = {}
    for _s in [ExceptionEx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidFormatExceptionEx, name, value)
    __swig_getmethods__ = {}
    for _s in [ExceptionEx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InvalidFormatExceptionEx, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _coda_except.delete_InvalidFormatExceptionEx
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(except::InvalidFormatExceptionEx self) -> InvalidFormatExceptionEx
        __init__(except::InvalidFormatExceptionEx self, InvalidFormatExceptionEx arg2) -> InvalidFormatExceptionEx
        __init__(except::InvalidFormatExceptionEx self, InvalidFormatExceptionEx arg2) -> InvalidFormatExceptionEx
        __init__(except::InvalidFormatExceptionEx self, Context c) -> InvalidFormatExceptionEx
        __init__(except::InvalidFormatExceptionEx self, std::string const & msg) -> InvalidFormatExceptionEx
        __init__(except::InvalidFormatExceptionEx self, Throwable t, Context c) -> InvalidFormatExceptionEx
        __init__(except::InvalidFormatExceptionEx self, ThrowableEx t, Context c) -> InvalidFormatExceptionEx
        """
        this = _coda_except.new_InvalidFormatExceptionEx(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getType(self) -> "std::string":
        """getType(InvalidFormatExceptionEx self) -> std::string"""
        return _coda_except.InvalidFormatExceptionEx_getType(self)

InvalidFormatExceptionEx_swigregister = _coda_except.InvalidFormatExceptionEx_swigregister
InvalidFormatExceptionEx_swigregister(InvalidFormatExceptionEx)

class IndexOutOfRangeException(Exception):
    """Proxy of C++ except::IndexOutOfRangeException class."""

    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexOutOfRangeException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IndexOutOfRangeException, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _coda_except.delete_IndexOutOfRangeException
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(except::IndexOutOfRangeException self) -> IndexOutOfRangeException
        __init__(except::IndexOutOfRangeException self, IndexOutOfRangeException arg2) -> IndexOutOfRangeException
        __init__(except::IndexOutOfRangeException self, IndexOutOfRangeException arg2) -> IndexOutOfRangeException
        __init__(except::IndexOutOfRangeException self, Context c) -> IndexOutOfRangeException
        __init__(except::IndexOutOfRangeException self, std::string const & msg) -> IndexOutOfRangeException
        __init__(except::IndexOutOfRangeException self, Throwable t, Context c) -> IndexOutOfRangeException
        __init__(except::IndexOutOfRangeException self, ThrowableEx t, Context c) -> IndexOutOfRangeException
        """
        this = _coda_except.new_IndexOutOfRangeException(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getType(self) -> "std::string":
        """getType(IndexOutOfRangeException self) -> std::string"""
        return _coda_except.IndexOutOfRangeException_getType(self)

IndexOutOfRangeException_swigregister = _coda_except.IndexOutOfRangeException_swigregister
IndexOutOfRangeException_swigregister(IndexOutOfRangeException)

class IndexOutOfRangeExceptionEx(ExceptionEx):
    """Proxy of C++ except::IndexOutOfRangeExceptionEx class."""

    __swig_setmethods__ = {}
    for _s in [ExceptionEx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexOutOfRangeExceptionEx, name, value)
    __swig_getmethods__ = {}
    for _s in [ExceptionEx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IndexOutOfRangeExceptionEx, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _coda_except.delete_IndexOutOfRangeExceptionEx
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(except::IndexOutOfRangeExceptionEx self) -> IndexOutOfRangeExceptionEx
        __init__(except::IndexOutOfRangeExceptionEx self, IndexOutOfRangeExceptionEx arg2) -> IndexOutOfRangeExceptionEx
        __init__(except::IndexOutOfRangeExceptionEx self, IndexOutOfRangeExceptionEx arg2) -> IndexOutOfRangeExceptionEx
        __init__(except::IndexOutOfRangeExceptionEx self, Context c) -> IndexOutOfRangeExceptionEx
        __init__(except::IndexOutOfRangeExceptionEx self, std::string const & msg) -> IndexOutOfRangeExceptionEx
        __init__(except::IndexOutOfRangeExceptionEx self, Throwable t, Context c) -> IndexOutOfRangeExceptionEx
        __init__(except::IndexOutOfRangeExceptionEx self, ThrowableEx t, Context c) -> IndexOutOfRangeExceptionEx
        """
        this = _coda_except.new_IndexOutOfRangeExceptionEx(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getType(self) -> "std::string":
        """getType(IndexOutOfRangeExceptionEx self) -> std::string"""
        return _coda_except.IndexOutOfRangeExceptionEx_getType(self)

IndexOutOfRangeExceptionEx_swigregister = _coda_except.IndexOutOfRangeExceptionEx_swigregister
IndexOutOfRangeExceptionEx_swigregister(IndexOutOfRangeExceptionEx)

class OutOfMemoryException(Exception):
    """Proxy of C++ except::OutOfMemoryException class."""

    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutOfMemoryException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutOfMemoryException, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _coda_except.delete_OutOfMemoryException
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(except::OutOfMemoryException self) -> OutOfMemoryException
        __init__(except::OutOfMemoryException self, OutOfMemoryException arg2) -> OutOfMemoryException
        __init__(except::OutOfMemoryException self, OutOfMemoryException arg2) -> OutOfMemoryException
        __init__(except::OutOfMemoryException self, Context c) -> OutOfMemoryException
        __init__(except::OutOfMemoryException self, std::string const & msg) -> OutOfMemoryException
        __init__(except::OutOfMemoryException self, Throwable t, Context c) -> OutOfMemoryException
        __init__(except::OutOfMemoryException self, ThrowableEx t, Context c) -> OutOfMemoryException
        """
        this = _coda_except.new_OutOfMemoryException(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getType(self) -> "std::string":
        """getType(OutOfMemoryException self) -> std::string"""
        return _coda_except.OutOfMemoryException_getType(self)

OutOfMemoryException_swigregister = _coda_except.OutOfMemoryException_swigregister
OutOfMemoryException_swigregister(OutOfMemoryException)

class OutOfMemoryExceptionEx(ExceptionEx):
    """Proxy of C++ except::OutOfMemoryExceptionEx class."""

    __swig_setmethods__ = {}
    for _s in [ExceptionEx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutOfMemoryExceptionEx, name, value)
    __swig_getmethods__ = {}
    for _s in [ExceptionEx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutOfMemoryExceptionEx, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _coda_except.delete_OutOfMemoryExceptionEx
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(except::OutOfMemoryExceptionEx self) -> OutOfMemoryExceptionEx
        __init__(except::OutOfMemoryExceptionEx self, OutOfMemoryExceptionEx arg2) -> OutOfMemoryExceptionEx
        __init__(except::OutOfMemoryExceptionEx self, OutOfMemoryExceptionEx arg2) -> OutOfMemoryExceptionEx
        __init__(except::OutOfMemoryExceptionEx self, Context c) -> OutOfMemoryExceptionEx
        __init__(except::OutOfMemoryExceptionEx self, std::string const & msg) -> OutOfMemoryExceptionEx
        __init__(except::OutOfMemoryExceptionEx self, Throwable t, Context c) -> OutOfMemoryExceptionEx
        __init__(except::OutOfMemoryExceptionEx self, ThrowableEx t, Context c) -> OutOfMemoryExceptionEx
        """
        this = _coda_except.new_OutOfMemoryExceptionEx(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getType(self) -> "std::string":
        """getType(OutOfMemoryExceptionEx self) -> std::string"""
        return _coda_except.OutOfMemoryExceptionEx_getType(self)

OutOfMemoryExceptionEx_swigregister = _coda_except.OutOfMemoryExceptionEx_swigregister
OutOfMemoryExceptionEx_swigregister(OutOfMemoryExceptionEx)

class NullPointerReferenceException(Exception):
    """Proxy of C++ except::NullPointerReferenceException class."""

    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NullPointerReferenceException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NullPointerReferenceException, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _coda_except.delete_NullPointerReferenceException
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(except::NullPointerReferenceException self) -> NullPointerReferenceException
        __init__(except::NullPointerReferenceException self, NullPointerReferenceException arg2) -> NullPointerReferenceException
        __init__(except::NullPointerReferenceException self, NullPointerReferenceException arg2) -> NullPointerReferenceException
        __init__(except::NullPointerReferenceException self, Context c) -> NullPointerReferenceException
        __init__(except::NullPointerReferenceException self, std::string const & msg) -> NullPointerReferenceException
        __init__(except::NullPointerReferenceException self, Throwable t, Context c) -> NullPointerReferenceException
        __init__(except::NullPointerReferenceException self, ThrowableEx t, Context c) -> NullPointerReferenceException
        """
        this = _coda_except.new_NullPointerReferenceException(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getType(self) -> "std::string":
        """getType(NullPointerReferenceException self) -> std::string"""
        return _coda_except.NullPointerReferenceException_getType(self)

NullPointerReferenceException_swigregister = _coda_except.NullPointerReferenceException_swigregister
NullPointerReferenceException_swigregister(NullPointerReferenceException)

class NullPointerReferenceExceptionEx(ExceptionEx):
    """Proxy of C++ except::NullPointerReferenceExceptionEx class."""

    __swig_setmethods__ = {}
    for _s in [ExceptionEx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NullPointerReferenceExceptionEx, name, value)
    __swig_getmethods__ = {}
    for _s in [ExceptionEx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NullPointerReferenceExceptionEx, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _coda_except.delete_NullPointerReferenceExceptionEx
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(except::NullPointerReferenceExceptionEx self) -> NullPointerReferenceExceptionEx
        __init__(except::NullPointerReferenceExceptionEx self, NullPointerReferenceExceptionEx arg2) -> NullPointerReferenceExceptionEx
        __init__(except::NullPointerReferenceExceptionEx self, NullPointerReferenceExceptionEx arg2) -> NullPointerReferenceExceptionEx
        __init__(except::NullPointerReferenceExceptionEx self, Context c) -> NullPointerReferenceExceptionEx
        __init__(except::NullPointerReferenceExceptionEx self, std::string const & msg) -> NullPointerReferenceExceptionEx
        __init__(except::NullPointerReferenceExceptionEx self, Throwable t, Context c) -> NullPointerReferenceExceptionEx
        __init__(except::NullPointerReferenceExceptionEx self, ThrowableEx t, Context c) -> NullPointerReferenceExceptionEx
        """
        this = _coda_except.new_NullPointerReferenceExceptionEx(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getType(self) -> "std::string":
        """getType(NullPointerReferenceExceptionEx self) -> std::string"""
        return _coda_except.NullPointerReferenceExceptionEx_getType(self)

NullPointerReferenceExceptionEx_swigregister = _coda_except.NullPointerReferenceExceptionEx_swigregister
NullPointerReferenceExceptionEx_swigregister(NullPointerReferenceExceptionEx)

class NoSuchKeyException(Exception):
    """Proxy of C++ except::NoSuchKeyException class."""

    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoSuchKeyException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoSuchKeyException, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _coda_except.delete_NoSuchKeyException
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(except::NoSuchKeyException self) -> NoSuchKeyException
        __init__(except::NoSuchKeyException self, NoSuchKeyException arg2) -> NoSuchKeyException
        __init__(except::NoSuchKeyException self, NoSuchKeyException arg2) -> NoSuchKeyException
        __init__(except::NoSuchKeyException self, Context c) -> NoSuchKeyException
        __init__(except::NoSuchKeyException self, std::string const & msg) -> NoSuchKeyException
        __init__(except::NoSuchKeyException self, Throwable t, Context c) -> NoSuchKeyException
        __init__(except::NoSuchKeyException self, ThrowableEx t, Context c) -> NoSuchKeyException
        """
        this = _coda_except.new_NoSuchKeyException(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getType(self) -> "std::string":
        """getType(NoSuchKeyException self) -> std::string"""
        return _coda_except.NoSuchKeyException_getType(self)

NoSuchKeyException_swigregister = _coda_except.NoSuchKeyException_swigregister
NoSuchKeyException_swigregister(NoSuchKeyException)

class NoSuchKeyExceptionEx(ExceptionEx):
    """Proxy of C++ except::NoSuchKeyExceptionEx class."""

    __swig_setmethods__ = {}
    for _s in [ExceptionEx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoSuchKeyExceptionEx, name, value)
    __swig_getmethods__ = {}
    for _s in [ExceptionEx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoSuchKeyExceptionEx, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _coda_except.delete_NoSuchKeyExceptionEx
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(except::NoSuchKeyExceptionEx self) -> NoSuchKeyExceptionEx
        __init__(except::NoSuchKeyExceptionEx self, NoSuchKeyExceptionEx arg2) -> NoSuchKeyExceptionEx
        __init__(except::NoSuchKeyExceptionEx self, NoSuchKeyExceptionEx arg2) -> NoSuchKeyExceptionEx
        __init__(except::NoSuchKeyExceptionEx self, Context c) -> NoSuchKeyExceptionEx
        __init__(except::NoSuchKeyExceptionEx self, std::string const & msg) -> NoSuchKeyExceptionEx
        __init__(except::NoSuchKeyExceptionEx self, Throwable t, Context c) -> NoSuchKeyExceptionEx
        __init__(except::NoSuchKeyExceptionEx self, ThrowableEx t, Context c) -> NoSuchKeyExceptionEx
        """
        this = _coda_except.new_NoSuchKeyExceptionEx(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getType(self) -> "std::string":
        """getType(NoSuchKeyExceptionEx self) -> std::string"""
        return _coda_except.NoSuchKeyExceptionEx_getType(self)

NoSuchKeyExceptionEx_swigregister = _coda_except.NoSuchKeyExceptionEx_swigregister
NoSuchKeyExceptionEx_swigregister(NoSuchKeyExceptionEx)

class NoSuchReferenceException(Exception):
    """Proxy of C++ except::NoSuchReferenceException class."""

    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoSuchReferenceException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoSuchReferenceException, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _coda_except.delete_NoSuchReferenceException
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(except::NoSuchReferenceException self) -> NoSuchReferenceException
        __init__(except::NoSuchReferenceException self, NoSuchReferenceException arg2) -> NoSuchReferenceException
        __init__(except::NoSuchReferenceException self, NoSuchReferenceException arg2) -> NoSuchReferenceException
        __init__(except::NoSuchReferenceException self, Context c) -> NoSuchReferenceException
        __init__(except::NoSuchReferenceException self, std::string const & msg) -> NoSuchReferenceException
        __init__(except::NoSuchReferenceException self, Throwable t, Context c) -> NoSuchReferenceException
        __init__(except::NoSuchReferenceException self, ThrowableEx t, Context c) -> NoSuchReferenceException
        """
        this = _coda_except.new_NoSuchReferenceException(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getType(self) -> "std::string":
        """getType(NoSuchReferenceException self) -> std::string"""
        return _coda_except.NoSuchReferenceException_getType(self)

NoSuchReferenceException_swigregister = _coda_except.NoSuchReferenceException_swigregister
NoSuchReferenceException_swigregister(NoSuchReferenceException)

class NoSuchReferenceExceptionEx(ExceptionEx):
    """Proxy of C++ except::NoSuchReferenceExceptionEx class."""

    __swig_setmethods__ = {}
    for _s in [ExceptionEx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoSuchReferenceExceptionEx, name, value)
    __swig_getmethods__ = {}
    for _s in [ExceptionEx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoSuchReferenceExceptionEx, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _coda_except.delete_NoSuchReferenceExceptionEx
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(except::NoSuchReferenceExceptionEx self) -> NoSuchReferenceExceptionEx
        __init__(except::NoSuchReferenceExceptionEx self, NoSuchReferenceExceptionEx arg2) -> NoSuchReferenceExceptionEx
        __init__(except::NoSuchReferenceExceptionEx self, NoSuchReferenceExceptionEx arg2) -> NoSuchReferenceExceptionEx
        __init__(except::NoSuchReferenceExceptionEx self, Context c) -> NoSuchReferenceExceptionEx
        __init__(except::NoSuchReferenceExceptionEx self, std::string const & msg) -> NoSuchReferenceExceptionEx
        __init__(except::NoSuchReferenceExceptionEx self, Throwable t, Context c) -> NoSuchReferenceExceptionEx
        __init__(except::NoSuchReferenceExceptionEx self, ThrowableEx t, Context c) -> NoSuchReferenceExceptionEx
        """
        this = _coda_except.new_NoSuchReferenceExceptionEx(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getType(self) -> "std::string":
        """getType(NoSuchReferenceExceptionEx self) -> std::string"""
        return _coda_except.NoSuchReferenceExceptionEx_getType(self)

NoSuchReferenceExceptionEx_swigregister = _coda_except.NoSuchReferenceExceptionEx_swigregister
NoSuchReferenceExceptionEx_swigregister(NoSuchReferenceExceptionEx)

class KeyAlreadyExistsException(Exception):
    """Proxy of C++ except::KeyAlreadyExistsException class."""

    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KeyAlreadyExistsException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KeyAlreadyExistsException, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _coda_except.delete_KeyAlreadyExistsException
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(except::KeyAlreadyExistsException self) -> KeyAlreadyExistsException
        __init__(except::KeyAlreadyExistsException self, KeyAlreadyExistsException arg2) -> KeyAlreadyExistsException
        __init__(except::KeyAlreadyExistsException self, KeyAlreadyExistsException arg2) -> KeyAlreadyExistsException
        __init__(except::KeyAlreadyExistsException self, Context c) -> KeyAlreadyExistsException
        __init__(except::KeyAlreadyExistsException self, std::string const & msg) -> KeyAlreadyExistsException
        __init__(except::KeyAlreadyExistsException self, Throwable t, Context c) -> KeyAlreadyExistsException
        __init__(except::KeyAlreadyExistsException self, ThrowableEx t, Context c) -> KeyAlreadyExistsException
        """
        this = _coda_except.new_KeyAlreadyExistsException(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getType(self) -> "std::string":
        """getType(KeyAlreadyExistsException self) -> std::string"""
        return _coda_except.KeyAlreadyExistsException_getType(self)

KeyAlreadyExistsException_swigregister = _coda_except.KeyAlreadyExistsException_swigregister
KeyAlreadyExistsException_swigregister(KeyAlreadyExistsException)

class KeyAlreadyExistsExceptionEx(ExceptionEx):
    """Proxy of C++ except::KeyAlreadyExistsExceptionEx class."""

    __swig_setmethods__ = {}
    for _s in [ExceptionEx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KeyAlreadyExistsExceptionEx, name, value)
    __swig_getmethods__ = {}
    for _s in [ExceptionEx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KeyAlreadyExistsExceptionEx, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _coda_except.delete_KeyAlreadyExistsExceptionEx
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(except::KeyAlreadyExistsExceptionEx self) -> KeyAlreadyExistsExceptionEx
        __init__(except::KeyAlreadyExistsExceptionEx self, KeyAlreadyExistsExceptionEx arg2) -> KeyAlreadyExistsExceptionEx
        __init__(except::KeyAlreadyExistsExceptionEx self, KeyAlreadyExistsExceptionEx arg2) -> KeyAlreadyExistsExceptionEx
        __init__(except::KeyAlreadyExistsExceptionEx self, Context c) -> KeyAlreadyExistsExceptionEx
        __init__(except::KeyAlreadyExistsExceptionEx self, std::string const & msg) -> KeyAlreadyExistsExceptionEx
        __init__(except::KeyAlreadyExistsExceptionEx self, Throwable t, Context c) -> KeyAlreadyExistsExceptionEx
        __init__(except::KeyAlreadyExistsExceptionEx self, ThrowableEx t, Context c) -> KeyAlreadyExistsExceptionEx
        """
        this = _coda_except.new_KeyAlreadyExistsExceptionEx(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getType(self) -> "std::string":
        """getType(KeyAlreadyExistsExceptionEx self) -> std::string"""
        return _coda_except.KeyAlreadyExistsExceptionEx_getType(self)

KeyAlreadyExistsExceptionEx_swigregister = _coda_except.KeyAlreadyExistsExceptionEx_swigregister
KeyAlreadyExistsExceptionEx_swigregister(KeyAlreadyExistsExceptionEx)

class NotImplementedException(Exception):
    """Proxy of C++ except::NotImplementedException class."""

    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NotImplementedException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NotImplementedException, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _coda_except.delete_NotImplementedException
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(except::NotImplementedException self) -> NotImplementedException
        __init__(except::NotImplementedException self, NotImplementedException arg2) -> NotImplementedException
        __init__(except::NotImplementedException self, NotImplementedException arg2) -> NotImplementedException
        __init__(except::NotImplementedException self, Context c) -> NotImplementedException
        __init__(except::NotImplementedException self, std::string const & msg) -> NotImplementedException
        __init__(except::NotImplementedException self, Throwable t, Context c) -> NotImplementedException
        __init__(except::NotImplementedException self, ThrowableEx t, Context c) -> NotImplementedException
        """
        this = _coda_except.new_NotImplementedException(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getType(self) -> "std::string":
        """getType(NotImplementedException self) -> std::string"""
        return _coda_except.NotImplementedException_getType(self)

NotImplementedException_swigregister = _coda_except.NotImplementedException_swigregister
NotImplementedException_swigregister(NotImplementedException)

class NotImplementedExceptionEx(ExceptionEx):
    """Proxy of C++ except::NotImplementedExceptionEx class."""

    __swig_setmethods__ = {}
    for _s in [ExceptionEx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NotImplementedExceptionEx, name, value)
    __swig_getmethods__ = {}
    for _s in [ExceptionEx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NotImplementedExceptionEx, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _coda_except.delete_NotImplementedExceptionEx
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(except::NotImplementedExceptionEx self) -> NotImplementedExceptionEx
        __init__(except::NotImplementedExceptionEx self, NotImplementedExceptionEx arg2) -> NotImplementedExceptionEx
        __init__(except::NotImplementedExceptionEx self, NotImplementedExceptionEx arg2) -> NotImplementedExceptionEx
        __init__(except::NotImplementedExceptionEx self, Context c) -> NotImplementedExceptionEx
        __init__(except::NotImplementedExceptionEx self, std::string const & msg) -> NotImplementedExceptionEx
        __init__(except::NotImplementedExceptionEx self, Throwable t, Context c) -> NotImplementedExceptionEx
        __init__(except::NotImplementedExceptionEx self, ThrowableEx t, Context c) -> NotImplementedExceptionEx
        """
        this = _coda_except.new_NotImplementedExceptionEx(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getType(self) -> "std::string":
        """getType(NotImplementedExceptionEx self) -> std::string"""
        return _coda_except.NotImplementedExceptionEx_getType(self)

NotImplementedExceptionEx_swigregister = _coda_except.NotImplementedExceptionEx_swigregister
NotImplementedExceptionEx_swigregister(NotImplementedExceptionEx)

class InvalidArgumentException(Exception):
    """Proxy of C++ except::InvalidArgumentException class."""

    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidArgumentException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InvalidArgumentException, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _coda_except.delete_InvalidArgumentException
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(except::InvalidArgumentException self) -> InvalidArgumentException
        __init__(except::InvalidArgumentException self, InvalidArgumentException arg2) -> InvalidArgumentException
        __init__(except::InvalidArgumentException self, InvalidArgumentException arg2) -> InvalidArgumentException
        __init__(except::InvalidArgumentException self, Context c) -> InvalidArgumentException
        __init__(except::InvalidArgumentException self, std::string const & msg) -> InvalidArgumentException
        __init__(except::InvalidArgumentException self, Throwable t, Context c) -> InvalidArgumentException
        __init__(except::InvalidArgumentException self, ThrowableEx t, Context c) -> InvalidArgumentException
        """
        this = _coda_except.new_InvalidArgumentException(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getType(self) -> "std::string":
        """getType(InvalidArgumentException self) -> std::string"""
        return _coda_except.InvalidArgumentException_getType(self)

InvalidArgumentException_swigregister = _coda_except.InvalidArgumentException_swigregister
InvalidArgumentException_swigregister(InvalidArgumentException)

class InvalidArgumentExceptionEx(ExceptionEx):
    """Proxy of C++ except::InvalidArgumentExceptionEx class."""

    __swig_setmethods__ = {}
    for _s in [ExceptionEx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidArgumentExceptionEx, name, value)
    __swig_getmethods__ = {}
    for _s in [ExceptionEx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InvalidArgumentExceptionEx, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _coda_except.delete_InvalidArgumentExceptionEx
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(except::InvalidArgumentExceptionEx self) -> InvalidArgumentExceptionEx
        __init__(except::InvalidArgumentExceptionEx self, InvalidArgumentExceptionEx arg2) -> InvalidArgumentExceptionEx
        __init__(except::InvalidArgumentExceptionEx self, InvalidArgumentExceptionEx arg2) -> InvalidArgumentExceptionEx
        __init__(except::InvalidArgumentExceptionEx self, Context c) -> InvalidArgumentExceptionEx
        __init__(except::InvalidArgumentExceptionEx self, std::string const & msg) -> InvalidArgumentExceptionEx
        __init__(except::InvalidArgumentExceptionEx self, Throwable t, Context c) -> InvalidArgumentExceptionEx
        __init__(except::InvalidArgumentExceptionEx self, ThrowableEx t, Context c) -> InvalidArgumentExceptionEx
        """
        this = _coda_except.new_InvalidArgumentExceptionEx(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getType(self) -> "std::string":
        """getType(InvalidArgumentExceptionEx self) -> std::string"""
        return _coda_except.InvalidArgumentExceptionEx_getType(self)

InvalidArgumentExceptionEx_swigregister = _coda_except.InvalidArgumentExceptionEx_swigregister
InvalidArgumentExceptionEx_swigregister(InvalidArgumentExceptionEx)

class SerializationException(IOException):
    """Proxy of C++ except::SerializationException class."""

    __swig_setmethods__ = {}
    for _s in [IOException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SerializationException, name, value)
    __swig_getmethods__ = {}
    for _s in [IOException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SerializationException, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _coda_except.delete_SerializationException
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(except::SerializationException self) -> SerializationException
        __init__(except::SerializationException self, SerializationException arg2) -> SerializationException
        __init__(except::SerializationException self, SerializationException arg2) -> SerializationException
        __init__(except::SerializationException self, Context c) -> SerializationException
        __init__(except::SerializationException self, std::string const & msg) -> SerializationException
        __init__(except::SerializationException self, Throwable t, Context c) -> SerializationException
        __init__(except::SerializationException self, ThrowableEx t, Context c) -> SerializationException
        """
        this = _coda_except.new_SerializationException(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getType(self) -> "std::string":
        """getType(SerializationException self) -> std::string"""
        return _coda_except.SerializationException_getType(self)

SerializationException_swigregister = _coda_except.SerializationException_swigregister
SerializationException_swigregister(SerializationException)

class ParseException(IOException):
    """Proxy of C++ except::ParseException class."""

    __swig_setmethods__ = {}
    for _s in [IOException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParseException, name, value)
    __swig_getmethods__ = {}
    for _s in [IOException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParseException, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _coda_except.delete_ParseException
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(except::ParseException self) -> ParseException
        __init__(except::ParseException self, ParseException arg2) -> ParseException
        __init__(except::ParseException self, ParseException arg2) -> ParseException
        __init__(except::ParseException self, Context c) -> ParseException
        __init__(except::ParseException self, std::string const & msg) -> ParseException
        __init__(except::ParseException self, Throwable t, Context c) -> ParseException
        __init__(except::ParseException self, ThrowableEx t, Context c) -> ParseException
        """
        this = _coda_except.new_ParseException(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getType(self) -> "std::string":
        """getType(ParseException self) -> std::string"""
        return _coda_except.ParseException_getType(self)

ParseException_swigregister = _coda_except.ParseException_swigregister
ParseException_swigregister(ParseException)

# This file is compatible with both classic and new-style classes.


