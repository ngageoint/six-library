# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _coda_types
else:
    import _coda_types

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _coda_types.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _coda_types.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        r"""incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _coda_types.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        r"""decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _coda_types.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        r"""distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _coda_types.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        r"""equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _coda_types.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _coda_types.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _coda_types.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _coda_types.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _coda_types.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        r"""advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _coda_types.SwigPyIterator_advance(self, n)

    def __eq__(self, x: "SwigPyIterator") -> "bool":
        r"""__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _coda_types.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: "SwigPyIterator") -> "bool":
        r"""__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _coda_types.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        r"""__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _coda_types.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        r"""__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _coda_types.SwigPyIterator___isub__(self, n)

    def __add__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        r"""__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _coda_types.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _coda_types.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _coda_types:
_coda_types.SwigPyIterator_swigregister(SwigPyIterator)

import coda.coda_sys

from . import pickle

class RowColDouble(object):
    r"""Proxy of C++ types::RowCol< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    row = property(_coda_types.RowColDouble_row_get, _coda_types.RowColDouble_row_set, doc=r"""row : double""")
    col = property(_coda_types.RowColDouble_col_get, _coda_types.RowColDouble_col_set, doc=r"""col : double""")

    def __init__(self, *args):
        r"""
        __init__(RowColDouble self) -> RowColDouble
        __init__(RowColDouble self, double r, double c) -> RowColDouble
        __init__(RowColDouble self, std::pair< double,double > const & p) -> RowColDouble
        """
        _coda_types.RowColDouble_swiginit(self, _coda_types.new_RowColDouble(*args))

    def __iadd__(self, scalar: "double") -> "types::RowCol< double > &":
        r"""__iadd__(RowColDouble self, double scalar) -> RowColDouble"""
        return _coda_types.RowColDouble___iadd__(self, scalar)

    def __add__(self, scalar: "double") -> "types::RowCol< double >":
        r"""__add__(RowColDouble self, double scalar) -> RowColDouble"""
        return _coda_types.RowColDouble___add__(self, scalar)

    def __isub__(self, scalar: "double") -> "types::RowCol< double > &":
        r"""__isub__(RowColDouble self, double scalar) -> RowColDouble"""
        return _coda_types.RowColDouble___isub__(self, scalar)

    def __sub__(self, scalar: "double") -> "types::RowCol< double >":
        r"""__sub__(RowColDouble self, double scalar) -> RowColDouble"""
        return _coda_types.RowColDouble___sub__(self, scalar)

    def __imul__(self, scalar: "double") -> "types::RowCol< double > &":
        r"""__imul__(RowColDouble self, double scalar) -> RowColDouble"""
        return _coda_types.RowColDouble___imul__(self, scalar)

    def __mul__(self, scalar: "double") -> "types::RowCol< double >":
        r"""__mul__(RowColDouble self, double scalar) -> RowColDouble"""
        return _coda_types.RowColDouble___mul__(self, scalar)

    def __itruediv__(self, *args):
        return _coda_types.RowColDouble___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _coda_types.RowColDouble___truediv__(self, *args)
    __div__ = __truediv__



    def __eq__(self, p: "RowColDouble") -> "bool":
        r"""__eq__(RowColDouble self, RowColDouble p) -> bool"""
        return _coda_types.RowColDouble___eq__(self, p)

    def __ne__(self, p: "RowColDouble") -> "bool":
        r"""__ne__(RowColDouble self, RowColDouble p) -> bool"""
        return _coda_types.RowColDouble___ne__(self, p)

    def area(self) -> "double":
        r"""area(RowColDouble self) -> double"""
        return _coda_types.RowColDouble_area(self)

    def normL2(self) -> "double":
        r"""normL2(RowColDouble self) -> double"""
        return _coda_types.RowColDouble_normL2(self)

    def __getstate__(self):
        return (self.row, self.col)

    def __setstate__(self, state):
        self.__init__(state[0], state[1])

    __swig_destroy__ = _coda_types.delete_RowColDouble

# Register RowColDouble in _coda_types:
_coda_types.RowColDouble_swigregister(RowColDouble)

class RowColInt(object):
    r"""Proxy of C++ types::RowCol< sys::SSize_T > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    row = property(_coda_types.RowColInt_row_get, _coda_types.RowColInt_row_set, doc=r"""row : ssize_t""")
    col = property(_coda_types.RowColInt_col_get, _coda_types.RowColInt_col_set, doc=r"""col : ssize_t""")

    def __init__(self, *args):
        r"""
        __init__(RowColInt self) -> RowColInt
        __init__(RowColInt self, ssize_t r, ssize_t c) -> RowColInt
        __init__(RowColInt self, std::pair< ssize_t,ssize_t > const & p) -> RowColInt
        """
        _coda_types.RowColInt_swiginit(self, _coda_types.new_RowColInt(*args))

    def __iadd__(self, scalar: "ssize_t") -> "types::RowCol< sys::SSize_T > &":
        r"""__iadd__(RowColInt self, ssize_t scalar) -> RowColInt"""
        return _coda_types.RowColInt___iadd__(self, scalar)

    def __add__(self, scalar: "ssize_t") -> "types::RowCol< sys::SSize_T >":
        r"""__add__(RowColInt self, ssize_t scalar) -> RowColInt"""
        return _coda_types.RowColInt___add__(self, scalar)

    def __isub__(self, scalar: "ssize_t") -> "types::RowCol< sys::SSize_T > &":
        r"""__isub__(RowColInt self, ssize_t scalar) -> RowColInt"""
        return _coda_types.RowColInt___isub__(self, scalar)

    def __sub__(self, scalar: "ssize_t") -> "types::RowCol< sys::SSize_T >":
        r"""__sub__(RowColInt self, ssize_t scalar) -> RowColInt"""
        return _coda_types.RowColInt___sub__(self, scalar)

    def __imul__(self, scalar: "ssize_t") -> "types::RowCol< sys::SSize_T > &":
        r"""__imul__(RowColInt self, ssize_t scalar) -> RowColInt"""
        return _coda_types.RowColInt___imul__(self, scalar)

    def __mul__(self, scalar: "ssize_t") -> "types::RowCol< sys::SSize_T >":
        r"""__mul__(RowColInt self, ssize_t scalar) -> RowColInt"""
        return _coda_types.RowColInt___mul__(self, scalar)

    def __itruediv__(self, *args):
        return _coda_types.RowColInt___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _coda_types.RowColInt___truediv__(self, *args)
    __div__ = __truediv__



    def __eq__(self, p: "RowColInt") -> "bool":
        r"""__eq__(RowColInt self, RowColInt p) -> bool"""
        return _coda_types.RowColInt___eq__(self, p)

    def __ne__(self, p: "RowColInt") -> "bool":
        r"""__ne__(RowColInt self, RowColInt p) -> bool"""
        return _coda_types.RowColInt___ne__(self, p)

    def area(self) -> "ssize_t":
        r"""area(RowColInt self) -> ssize_t"""
        return _coda_types.RowColInt_area(self)

    def normL2(self) -> "ssize_t":
        r"""normL2(RowColInt self) -> ssize_t"""
        return _coda_types.RowColInt_normL2(self)

    def __getstate__(self):
        return (self.row, self.col)

    def __setstate__(self, state):
        self.__init__(state[0], state[1])

    __swig_destroy__ = _coda_types.delete_RowColInt

# Register RowColInt in _coda_types:
_coda_types.RowColInt_swigregister(RowColInt)

class RowColSizeT(object):
    r"""Proxy of C++ types::RowCol< size_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    row = property(_coda_types.RowColSizeT_row_get, _coda_types.RowColSizeT_row_set, doc=r"""row : size_t""")
    col = property(_coda_types.RowColSizeT_col_get, _coda_types.RowColSizeT_col_set, doc=r"""col : size_t""")

    def __init__(self, *args):
        r"""
        __init__(RowColSizeT self) -> RowColSizeT
        __init__(RowColSizeT self, size_t r, size_t c) -> RowColSizeT
        __init__(RowColSizeT self, std::pair< size_t,size_t > const & p) -> RowColSizeT
        """
        _coda_types.RowColSizeT_swiginit(self, _coda_types.new_RowColSizeT(*args))

    def __iadd__(self, scalar: "size_t") -> "types::RowCol< size_t > &":
        r"""__iadd__(RowColSizeT self, size_t scalar) -> RowColSizeT"""
        return _coda_types.RowColSizeT___iadd__(self, scalar)

    def __add__(self, scalar: "size_t") -> "types::RowCol< size_t >":
        r"""__add__(RowColSizeT self, size_t scalar) -> RowColSizeT"""
        return _coda_types.RowColSizeT___add__(self, scalar)

    def __isub__(self, scalar: "size_t") -> "types::RowCol< size_t > &":
        r"""__isub__(RowColSizeT self, size_t scalar) -> RowColSizeT"""
        return _coda_types.RowColSizeT___isub__(self, scalar)

    def __sub__(self, scalar: "size_t") -> "types::RowCol< size_t >":
        r"""__sub__(RowColSizeT self, size_t scalar) -> RowColSizeT"""
        return _coda_types.RowColSizeT___sub__(self, scalar)

    def __imul__(self, scalar: "size_t") -> "types::RowCol< size_t > &":
        r"""__imul__(RowColSizeT self, size_t scalar) -> RowColSizeT"""
        return _coda_types.RowColSizeT___imul__(self, scalar)

    def __mul__(self, scalar: "size_t") -> "types::RowCol< size_t >":
        r"""__mul__(RowColSizeT self, size_t scalar) -> RowColSizeT"""
        return _coda_types.RowColSizeT___mul__(self, scalar)

    def __itruediv__(self, *args):
        return _coda_types.RowColSizeT___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _coda_types.RowColSizeT___truediv__(self, *args)
    __div__ = __truediv__



    def __eq__(self, p: "RowColSizeT") -> "bool":
        r"""__eq__(RowColSizeT self, RowColSizeT p) -> bool"""
        return _coda_types.RowColSizeT___eq__(self, p)

    def __ne__(self, p: "RowColSizeT") -> "bool":
        r"""__ne__(RowColSizeT self, RowColSizeT p) -> bool"""
        return _coda_types.RowColSizeT___ne__(self, p)

    def area(self) -> "size_t":
        r"""area(RowColSizeT self) -> size_t"""
        return _coda_types.RowColSizeT_area(self)

    def normL2(self) -> "size_t":
        r"""normL2(RowColSizeT self) -> size_t"""
        return _coda_types.RowColSizeT_normL2(self)

    def __getstate__(self):
        return (self.row, self.col)

    def __setstate__(self, state):
        self.__init__(state[0], state[1])

    __swig_destroy__ = _coda_types.delete_RowColSizeT

# Register RowColSizeT in _coda_types:
_coda_types.RowColSizeT_swigregister(RowColSizeT)

class RgAzDouble(object):
    r"""Proxy of C++ types::RgAz< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    rg = property(_coda_types.RgAzDouble_rg_get, _coda_types.RgAzDouble_rg_set, doc=r"""rg : double""")
    az = property(_coda_types.RgAzDouble_az_get, _coda_types.RgAzDouble_az_set, doc=r"""az : double""")

    def __init__(self, *args):
        r"""
        __init__(RgAzDouble self) -> RgAzDouble
        __init__(RgAzDouble self, double r, double c) -> RgAzDouble
        __init__(RgAzDouble self, std::pair< double,double > const & p) -> RgAzDouble
        """
        _coda_types.RgAzDouble_swiginit(self, _coda_types.new_RgAzDouble(*args))

    def __iadd__(self, scalar: "double") -> "types::RgAz< double > &":
        r"""__iadd__(RgAzDouble self, double scalar) -> RgAzDouble"""
        return _coda_types.RgAzDouble___iadd__(self, scalar)

    def __add__(self, scalar: "double") -> "types::RgAz< double >":
        r"""__add__(RgAzDouble self, double scalar) -> RgAzDouble"""
        return _coda_types.RgAzDouble___add__(self, scalar)

    def __isub__(self, scalar: "double") -> "types::RgAz< double > &":
        r"""__isub__(RgAzDouble self, double scalar) -> RgAzDouble"""
        return _coda_types.RgAzDouble___isub__(self, scalar)

    def __sub__(self, scalar: "double") -> "types::RgAz< double >":
        r"""__sub__(RgAzDouble self, double scalar) -> RgAzDouble"""
        return _coda_types.RgAzDouble___sub__(self, scalar)

    def __imul__(self, scalar: "double") -> "types::RgAz< double > &":
        r"""__imul__(RgAzDouble self, double scalar) -> RgAzDouble"""
        return _coda_types.RgAzDouble___imul__(self, scalar)

    def __mul__(self, scalar: "double") -> "types::RgAz< double >":
        r"""__mul__(RgAzDouble self, double scalar) -> RgAzDouble"""
        return _coda_types.RgAzDouble___mul__(self, scalar)

    def __itruediv__(self, *args):
        return _coda_types.RgAzDouble___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _coda_types.RgAzDouble___truediv__(self, *args)
    __div__ = __truediv__



    def __eq__(self, p: "RgAzDouble") -> "bool":
        r"""__eq__(RgAzDouble self, RgAzDouble p) -> bool"""
        return _coda_types.RgAzDouble___eq__(self, p)

    def __ne__(self, p: "RgAzDouble") -> "bool":
        r"""__ne__(RgAzDouble self, RgAzDouble p) -> bool"""
        return _coda_types.RgAzDouble___ne__(self, p)

    def __getstate__(self):
        return (self.rg, self.az)

    def __setstate__(self, state):
        self.__init__(state[0], state[1])

    __swig_destroy__ = _coda_types.delete_RgAzDouble

# Register RgAzDouble in _coda_types:
_coda_types.RgAzDouble_swigregister(RgAzDouble)

class VectorRowColInt(object):
    r"""Proxy of C++ std::vector< types::RowCol< sys::SSize_T > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(VectorRowColInt self) -> SwigPyIterator"""
        return _coda_types.VectorRowColInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(VectorRowColInt self) -> bool"""
        return _coda_types.VectorRowColInt___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(VectorRowColInt self) -> bool"""
        return _coda_types.VectorRowColInt___bool__(self)

    def __len__(self) -> "std::vector< types::RowCol< ssize_t > >::size_type":
        r"""__len__(VectorRowColInt self) -> std::vector< types::RowCol< ssize_t > >::size_type"""
        return _coda_types.VectorRowColInt___len__(self)

    def __getslice__(self, i: "std::vector< types::RowCol< ssize_t > >::difference_type", j: "std::vector< types::RowCol< ssize_t > >::difference_type") -> "std::vector< types::RowCol< sys::SSize_T >,std::allocator< types::RowCol< sys::SSize_T > > > *":
        r"""__getslice__(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::difference_type i, std::vector< types::RowCol< ssize_t > >::difference_type j) -> VectorRowColInt"""
        return _coda_types.VectorRowColInt___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::difference_type i, std::vector< types::RowCol< ssize_t > >::difference_type j)
        __setslice__(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::difference_type i, std::vector< types::RowCol< ssize_t > >::difference_type j, VectorRowColInt v)
        """
        return _coda_types.VectorRowColInt___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< types::RowCol< ssize_t > >::difference_type", j: "std::vector< types::RowCol< ssize_t > >::difference_type") -> "void":
        r"""__delslice__(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::difference_type i, std::vector< types::RowCol< ssize_t > >::difference_type j)"""
        return _coda_types.VectorRowColInt___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::difference_type i)
        __delitem__(VectorRowColInt self, PySliceObject * slice)
        """
        return _coda_types.VectorRowColInt___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< types::RowCol< ssize_t > >::value_type const &":
        r"""
        __getitem__(VectorRowColInt self, PySliceObject * slice) -> VectorRowColInt
        __getitem__(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::difference_type i) -> RowColInt
        """
        return _coda_types.VectorRowColInt___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(VectorRowColInt self, PySliceObject * slice, VectorRowColInt v)
        __setitem__(VectorRowColInt self, PySliceObject * slice)
        __setitem__(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::difference_type i, RowColInt x)
        """
        return _coda_types.VectorRowColInt___setitem__(self, *args)

    def pop(self) -> "std::vector< types::RowCol< ssize_t > >::value_type":
        r"""pop(VectorRowColInt self) -> RowColInt"""
        return _coda_types.VectorRowColInt_pop(self)

    def append(self, x: "RowColInt") -> "void":
        r"""append(VectorRowColInt self, RowColInt x)"""
        return _coda_types.VectorRowColInt_append(self, x)

    def empty(self) -> "bool":
        r"""empty(VectorRowColInt self) -> bool"""
        return _coda_types.VectorRowColInt_empty(self)

    def size(self) -> "std::vector< types::RowCol< ssize_t > >::size_type":
        r"""size(VectorRowColInt self) -> std::vector< types::RowCol< ssize_t > >::size_type"""
        return _coda_types.VectorRowColInt_size(self)

    def swap(self, v: "VectorRowColInt") -> "void":
        r"""swap(VectorRowColInt self, VectorRowColInt v)"""
        return _coda_types.VectorRowColInt_swap(self, v)

    def begin(self) -> "std::vector< types::RowCol< ssize_t > >::iterator":
        r"""begin(VectorRowColInt self) -> std::vector< types::RowCol< ssize_t > >::iterator"""
        return _coda_types.VectorRowColInt_begin(self)

    def end(self) -> "std::vector< types::RowCol< ssize_t > >::iterator":
        r"""end(VectorRowColInt self) -> std::vector< types::RowCol< ssize_t > >::iterator"""
        return _coda_types.VectorRowColInt_end(self)

    def rbegin(self) -> "std::vector< types::RowCol< ssize_t > >::reverse_iterator":
        r"""rbegin(VectorRowColInt self) -> std::vector< types::RowCol< ssize_t > >::reverse_iterator"""
        return _coda_types.VectorRowColInt_rbegin(self)

    def rend(self) -> "std::vector< types::RowCol< ssize_t > >::reverse_iterator":
        r"""rend(VectorRowColInt self) -> std::vector< types::RowCol< ssize_t > >::reverse_iterator"""
        return _coda_types.VectorRowColInt_rend(self)

    def clear(self) -> "void":
        r"""clear(VectorRowColInt self)"""
        return _coda_types.VectorRowColInt_clear(self)

    def get_allocator(self) -> "std::vector< types::RowCol< ssize_t > >::allocator_type":
        r"""get_allocator(VectorRowColInt self) -> std::vector< types::RowCol< ssize_t > >::allocator_type"""
        return _coda_types.VectorRowColInt_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(VectorRowColInt self)"""
        return _coda_types.VectorRowColInt_pop_back(self)

    def erase(self, *args) -> "std::vector< types::RowCol< ssize_t > >::iterator":
        r"""
        erase(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::iterator pos) -> std::vector< types::RowCol< ssize_t > >::iterator
        erase(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::iterator first, std::vector< types::RowCol< ssize_t > >::iterator last) -> std::vector< types::RowCol< ssize_t > >::iterator
        """
        return _coda_types.VectorRowColInt_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(VectorRowColInt self) -> VectorRowColInt
        __init__(VectorRowColInt self, VectorRowColInt other) -> VectorRowColInt
        __init__(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::size_type size) -> VectorRowColInt
        __init__(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::size_type size, RowColInt value) -> VectorRowColInt
        """
        _coda_types.VectorRowColInt_swiginit(self, _coda_types.new_VectorRowColInt(*args))

    def push_back(self, x: "RowColInt") -> "void":
        r"""push_back(VectorRowColInt self, RowColInt x)"""
        return _coda_types.VectorRowColInt_push_back(self, x)

    def front(self) -> "std::vector< types::RowCol< ssize_t > >::value_type const &":
        r"""front(VectorRowColInt self) -> RowColInt"""
        return _coda_types.VectorRowColInt_front(self)

    def back(self) -> "std::vector< types::RowCol< ssize_t > >::value_type const &":
        r"""back(VectorRowColInt self) -> RowColInt"""
        return _coda_types.VectorRowColInt_back(self)

    def assign(self, n: "std::vector< types::RowCol< ssize_t > >::size_type", x: "RowColInt") -> "void":
        r"""assign(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::size_type n, RowColInt x)"""
        return _coda_types.VectorRowColInt_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::size_type new_size)
        resize(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::size_type new_size, RowColInt x)
        """
        return _coda_types.VectorRowColInt_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::iterator pos, RowColInt x) -> std::vector< types::RowCol< ssize_t > >::iterator
        insert(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::iterator pos, std::vector< types::RowCol< ssize_t > >::size_type n, RowColInt x)
        """
        return _coda_types.VectorRowColInt_insert(self, *args)

    def reserve(self, n: "std::vector< types::RowCol< ssize_t > >::size_type") -> "void":
        r"""reserve(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::size_type n)"""
        return _coda_types.VectorRowColInt_reserve(self, n)

    def capacity(self) -> "std::vector< types::RowCol< ssize_t > >::size_type":
        r"""capacity(VectorRowColInt self) -> std::vector< types::RowCol< ssize_t > >::size_type"""
        return _coda_types.VectorRowColInt_capacity(self)

    def __getstate__(self):
    # Return a nonempty (thus non-false) tuple with dummy value in first position
        return (-1, tuple(pickle.dumps(elem) for elem in self))

    def __setstate__(self, state):
        self.__init__()
    # State will have a dummy entry in the first position
        for elem in state[1]:
            self.push_back(pickle.loads(elem))

    __swig_destroy__ = _coda_types.delete_VectorRowColInt

# Register VectorRowColInt in _coda_types:
_coda_types.VectorRowColInt_swigregister(VectorRowColInt)

class VectorRowColDouble(object):
    r"""Proxy of C++ std::vector< types::RowCol< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(VectorRowColDouble self) -> SwigPyIterator"""
        return _coda_types.VectorRowColDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(VectorRowColDouble self) -> bool"""
        return _coda_types.VectorRowColDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(VectorRowColDouble self) -> bool"""
        return _coda_types.VectorRowColDouble___bool__(self)

    def __len__(self) -> "std::vector< types::RowCol< double > >::size_type":
        r"""__len__(VectorRowColDouble self) -> std::vector< types::RowCol< double > >::size_type"""
        return _coda_types.VectorRowColDouble___len__(self)

    def __getslice__(self, i: "std::vector< types::RowCol< double > >::difference_type", j: "std::vector< types::RowCol< double > >::difference_type") -> "std::vector< types::RowCol< double >,std::allocator< types::RowCol< double > > > *":
        r"""__getslice__(VectorRowColDouble self, std::vector< types::RowCol< double > >::difference_type i, std::vector< types::RowCol< double > >::difference_type j) -> VectorRowColDouble"""
        return _coda_types.VectorRowColDouble___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(VectorRowColDouble self, std::vector< types::RowCol< double > >::difference_type i, std::vector< types::RowCol< double > >::difference_type j)
        __setslice__(VectorRowColDouble self, std::vector< types::RowCol< double > >::difference_type i, std::vector< types::RowCol< double > >::difference_type j, VectorRowColDouble v)
        """
        return _coda_types.VectorRowColDouble___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< types::RowCol< double > >::difference_type", j: "std::vector< types::RowCol< double > >::difference_type") -> "void":
        r"""__delslice__(VectorRowColDouble self, std::vector< types::RowCol< double > >::difference_type i, std::vector< types::RowCol< double > >::difference_type j)"""
        return _coda_types.VectorRowColDouble___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(VectorRowColDouble self, std::vector< types::RowCol< double > >::difference_type i)
        __delitem__(VectorRowColDouble self, PySliceObject * slice)
        """
        return _coda_types.VectorRowColDouble___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< types::RowCol< double > >::value_type const &":
        r"""
        __getitem__(VectorRowColDouble self, PySliceObject * slice) -> VectorRowColDouble
        __getitem__(VectorRowColDouble self, std::vector< types::RowCol< double > >::difference_type i) -> RowColDouble
        """
        return _coda_types.VectorRowColDouble___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(VectorRowColDouble self, PySliceObject * slice, VectorRowColDouble v)
        __setitem__(VectorRowColDouble self, PySliceObject * slice)
        __setitem__(VectorRowColDouble self, std::vector< types::RowCol< double > >::difference_type i, RowColDouble x)
        """
        return _coda_types.VectorRowColDouble___setitem__(self, *args)

    def pop(self) -> "std::vector< types::RowCol< double > >::value_type":
        r"""pop(VectorRowColDouble self) -> RowColDouble"""
        return _coda_types.VectorRowColDouble_pop(self)

    def append(self, x: "RowColDouble") -> "void":
        r"""append(VectorRowColDouble self, RowColDouble x)"""
        return _coda_types.VectorRowColDouble_append(self, x)

    def empty(self) -> "bool":
        r"""empty(VectorRowColDouble self) -> bool"""
        return _coda_types.VectorRowColDouble_empty(self)

    def size(self) -> "std::vector< types::RowCol< double > >::size_type":
        r"""size(VectorRowColDouble self) -> std::vector< types::RowCol< double > >::size_type"""
        return _coda_types.VectorRowColDouble_size(self)

    def swap(self, v: "VectorRowColDouble") -> "void":
        r"""swap(VectorRowColDouble self, VectorRowColDouble v)"""
        return _coda_types.VectorRowColDouble_swap(self, v)

    def begin(self) -> "std::vector< types::RowCol< double > >::iterator":
        r"""begin(VectorRowColDouble self) -> std::vector< types::RowCol< double > >::iterator"""
        return _coda_types.VectorRowColDouble_begin(self)

    def end(self) -> "std::vector< types::RowCol< double > >::iterator":
        r"""end(VectorRowColDouble self) -> std::vector< types::RowCol< double > >::iterator"""
        return _coda_types.VectorRowColDouble_end(self)

    def rbegin(self) -> "std::vector< types::RowCol< double > >::reverse_iterator":
        r"""rbegin(VectorRowColDouble self) -> std::vector< types::RowCol< double > >::reverse_iterator"""
        return _coda_types.VectorRowColDouble_rbegin(self)

    def rend(self) -> "std::vector< types::RowCol< double > >::reverse_iterator":
        r"""rend(VectorRowColDouble self) -> std::vector< types::RowCol< double > >::reverse_iterator"""
        return _coda_types.VectorRowColDouble_rend(self)

    def clear(self) -> "void":
        r"""clear(VectorRowColDouble self)"""
        return _coda_types.VectorRowColDouble_clear(self)

    def get_allocator(self) -> "std::vector< types::RowCol< double > >::allocator_type":
        r"""get_allocator(VectorRowColDouble self) -> std::vector< types::RowCol< double > >::allocator_type"""
        return _coda_types.VectorRowColDouble_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(VectorRowColDouble self)"""
        return _coda_types.VectorRowColDouble_pop_back(self)

    def erase(self, *args) -> "std::vector< types::RowCol< double > >::iterator":
        r"""
        erase(VectorRowColDouble self, std::vector< types::RowCol< double > >::iterator pos) -> std::vector< types::RowCol< double > >::iterator
        erase(VectorRowColDouble self, std::vector< types::RowCol< double > >::iterator first, std::vector< types::RowCol< double > >::iterator last) -> std::vector< types::RowCol< double > >::iterator
        """
        return _coda_types.VectorRowColDouble_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(VectorRowColDouble self) -> VectorRowColDouble
        __init__(VectorRowColDouble self, VectorRowColDouble other) -> VectorRowColDouble
        __init__(VectorRowColDouble self, std::vector< types::RowCol< double > >::size_type size) -> VectorRowColDouble
        __init__(VectorRowColDouble self, std::vector< types::RowCol< double > >::size_type size, RowColDouble value) -> VectorRowColDouble
        """
        _coda_types.VectorRowColDouble_swiginit(self, _coda_types.new_VectorRowColDouble(*args))

    def push_back(self, x: "RowColDouble") -> "void":
        r"""push_back(VectorRowColDouble self, RowColDouble x)"""
        return _coda_types.VectorRowColDouble_push_back(self, x)

    def front(self) -> "std::vector< types::RowCol< double > >::value_type const &":
        r"""front(VectorRowColDouble self) -> RowColDouble"""
        return _coda_types.VectorRowColDouble_front(self)

    def back(self) -> "std::vector< types::RowCol< double > >::value_type const &":
        r"""back(VectorRowColDouble self) -> RowColDouble"""
        return _coda_types.VectorRowColDouble_back(self)

    def assign(self, n: "std::vector< types::RowCol< double > >::size_type", x: "RowColDouble") -> "void":
        r"""assign(VectorRowColDouble self, std::vector< types::RowCol< double > >::size_type n, RowColDouble x)"""
        return _coda_types.VectorRowColDouble_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(VectorRowColDouble self, std::vector< types::RowCol< double > >::size_type new_size)
        resize(VectorRowColDouble self, std::vector< types::RowCol< double > >::size_type new_size, RowColDouble x)
        """
        return _coda_types.VectorRowColDouble_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(VectorRowColDouble self, std::vector< types::RowCol< double > >::iterator pos, RowColDouble x) -> std::vector< types::RowCol< double > >::iterator
        insert(VectorRowColDouble self, std::vector< types::RowCol< double > >::iterator pos, std::vector< types::RowCol< double > >::size_type n, RowColDouble x)
        """
        return _coda_types.VectorRowColDouble_insert(self, *args)

    def reserve(self, n: "std::vector< types::RowCol< double > >::size_type") -> "void":
        r"""reserve(VectorRowColDouble self, std::vector< types::RowCol< double > >::size_type n)"""
        return _coda_types.VectorRowColDouble_reserve(self, n)

    def capacity(self) -> "std::vector< types::RowCol< double > >::size_type":
        r"""capacity(VectorRowColDouble self) -> std::vector< types::RowCol< double > >::size_type"""
        return _coda_types.VectorRowColDouble_capacity(self)

    def __getstate__(self):
    # Return a nonempty (thus non-false) tuple with dummy value in first position
        return (-1, tuple(pickle.dumps(elem) for elem in self))

    def __setstate__(self, state):
        self.__init__()
    # State will have a dummy entry in the first position
        for elem in state[1]:
            self.push_back(pickle.loads(elem))

    __swig_destroy__ = _coda_types.delete_VectorRowColDouble

# Register VectorRowColDouble in _coda_types:
_coda_types.VectorRowColDouble_swigregister(VectorRowColDouble)

class VectorSizeT(object):
    r"""Proxy of C++ std::vector< size_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(VectorSizeT self) -> SwigPyIterator"""
        return _coda_types.VectorSizeT_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(VectorSizeT self) -> bool"""
        return _coda_types.VectorSizeT___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(VectorSizeT self) -> bool"""
        return _coda_types.VectorSizeT___bool__(self)

    def __len__(self) -> "std::vector< size_t >::size_type":
        r"""__len__(VectorSizeT self) -> std::vector< size_t >::size_type"""
        return _coda_types.VectorSizeT___len__(self)

    def __getslice__(self, i: "std::vector< size_t >::difference_type", j: "std::vector< size_t >::difference_type") -> "std::vector< size_t,std::allocator< size_t > > *":
        r"""__getslice__(VectorSizeT self, std::vector< size_t >::difference_type i, std::vector< size_t >::difference_type j) -> VectorSizeT"""
        return _coda_types.VectorSizeT___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(VectorSizeT self, std::vector< size_t >::difference_type i, std::vector< size_t >::difference_type j)
        __setslice__(VectorSizeT self, std::vector< size_t >::difference_type i, std::vector< size_t >::difference_type j, VectorSizeT v)
        """
        return _coda_types.VectorSizeT___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< size_t >::difference_type", j: "std::vector< size_t >::difference_type") -> "void":
        r"""__delslice__(VectorSizeT self, std::vector< size_t >::difference_type i, std::vector< size_t >::difference_type j)"""
        return _coda_types.VectorSizeT___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(VectorSizeT self, std::vector< size_t >::difference_type i)
        __delitem__(VectorSizeT self, PySliceObject * slice)
        """
        return _coda_types.VectorSizeT___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< size_t >::value_type const &":
        r"""
        __getitem__(VectorSizeT self, PySliceObject * slice) -> VectorSizeT
        __getitem__(VectorSizeT self, std::vector< size_t >::difference_type i) -> std::vector< size_t >::value_type const &
        """
        return _coda_types.VectorSizeT___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(VectorSizeT self, PySliceObject * slice, VectorSizeT v)
        __setitem__(VectorSizeT self, PySliceObject * slice)
        __setitem__(VectorSizeT self, std::vector< size_t >::difference_type i, std::vector< size_t >::value_type const & x)
        """
        return _coda_types.VectorSizeT___setitem__(self, *args)

    def pop(self) -> "std::vector< size_t >::value_type":
        r"""pop(VectorSizeT self) -> std::vector< size_t >::value_type"""
        return _coda_types.VectorSizeT_pop(self)

    def append(self, x: "std::vector< size_t >::value_type const &") -> "void":
        r"""append(VectorSizeT self, std::vector< size_t >::value_type const & x)"""
        return _coda_types.VectorSizeT_append(self, x)

    def empty(self) -> "bool":
        r"""empty(VectorSizeT self) -> bool"""
        return _coda_types.VectorSizeT_empty(self)

    def size(self) -> "std::vector< size_t >::size_type":
        r"""size(VectorSizeT self) -> std::vector< size_t >::size_type"""
        return _coda_types.VectorSizeT_size(self)

    def swap(self, v: "VectorSizeT") -> "void":
        r"""swap(VectorSizeT self, VectorSizeT v)"""
        return _coda_types.VectorSizeT_swap(self, v)

    def begin(self) -> "std::vector< size_t >::iterator":
        r"""begin(VectorSizeT self) -> std::vector< size_t >::iterator"""
        return _coda_types.VectorSizeT_begin(self)

    def end(self) -> "std::vector< size_t >::iterator":
        r"""end(VectorSizeT self) -> std::vector< size_t >::iterator"""
        return _coda_types.VectorSizeT_end(self)

    def rbegin(self) -> "std::vector< size_t >::reverse_iterator":
        r"""rbegin(VectorSizeT self) -> std::vector< size_t >::reverse_iterator"""
        return _coda_types.VectorSizeT_rbegin(self)

    def rend(self) -> "std::vector< size_t >::reverse_iterator":
        r"""rend(VectorSizeT self) -> std::vector< size_t >::reverse_iterator"""
        return _coda_types.VectorSizeT_rend(self)

    def clear(self) -> "void":
        r"""clear(VectorSizeT self)"""
        return _coda_types.VectorSizeT_clear(self)

    def get_allocator(self) -> "std::vector< size_t >::allocator_type":
        r"""get_allocator(VectorSizeT self) -> std::vector< size_t >::allocator_type"""
        return _coda_types.VectorSizeT_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(VectorSizeT self)"""
        return _coda_types.VectorSizeT_pop_back(self)

    def erase(self, *args) -> "std::vector< size_t >::iterator":
        r"""
        erase(VectorSizeT self, std::vector< size_t >::iterator pos) -> std::vector< size_t >::iterator
        erase(VectorSizeT self, std::vector< size_t >::iterator first, std::vector< size_t >::iterator last) -> std::vector< size_t >::iterator
        """
        return _coda_types.VectorSizeT_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(VectorSizeT self) -> VectorSizeT
        __init__(VectorSizeT self, VectorSizeT other) -> VectorSizeT
        __init__(VectorSizeT self, std::vector< size_t >::size_type size) -> VectorSizeT
        __init__(VectorSizeT self, std::vector< size_t >::size_type size, std::vector< size_t >::value_type const & value) -> VectorSizeT
        """
        _coda_types.VectorSizeT_swiginit(self, _coda_types.new_VectorSizeT(*args))

    def push_back(self, x: "std::vector< size_t >::value_type const &") -> "void":
        r"""push_back(VectorSizeT self, std::vector< size_t >::value_type const & x)"""
        return _coda_types.VectorSizeT_push_back(self, x)

    def front(self) -> "std::vector< size_t >::value_type const &":
        r"""front(VectorSizeT self) -> std::vector< size_t >::value_type const &"""
        return _coda_types.VectorSizeT_front(self)

    def back(self) -> "std::vector< size_t >::value_type const &":
        r"""back(VectorSizeT self) -> std::vector< size_t >::value_type const &"""
        return _coda_types.VectorSizeT_back(self)

    def assign(self, n: "std::vector< size_t >::size_type", x: "std::vector< size_t >::value_type const &") -> "void":
        r"""assign(VectorSizeT self, std::vector< size_t >::size_type n, std::vector< size_t >::value_type const & x)"""
        return _coda_types.VectorSizeT_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(VectorSizeT self, std::vector< size_t >::size_type new_size)
        resize(VectorSizeT self, std::vector< size_t >::size_type new_size, std::vector< size_t >::value_type const & x)
        """
        return _coda_types.VectorSizeT_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(VectorSizeT self, std::vector< size_t >::iterator pos, std::vector< size_t >::value_type const & x) -> std::vector< size_t >::iterator
        insert(VectorSizeT self, std::vector< size_t >::iterator pos, std::vector< size_t >::size_type n, std::vector< size_t >::value_type const & x)
        """
        return _coda_types.VectorSizeT_insert(self, *args)

    def reserve(self, n: "std::vector< size_t >::size_type") -> "void":
        r"""reserve(VectorSizeT self, std::vector< size_t >::size_type n)"""
        return _coda_types.VectorSizeT_reserve(self, n)

    def capacity(self) -> "std::vector< size_t >::size_type":
        r"""capacity(VectorSizeT self) -> std::vector< size_t >::size_type"""
        return _coda_types.VectorSizeT_capacity(self)

    def __getstate__(self):
    # Return a nonempty (thus non-false) tuple with dummy value in first position
        return (-1, tuple(pickle.dumps(elem) for elem in self))

    def __setstate__(self, state):
        self.__init__()
    # State will have a dummy entry in the first position
        for elem in state[1]:
            self.push_back(pickle.loads(elem))

    __swig_destroy__ = _coda_types.delete_VectorSizeT

# Register VectorSizeT in _coda_types:
_coda_types.VectorSizeT_swigregister(VectorSizeT)

class VectorString(object):
    r"""Proxy of C++ std::vector< std::string > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(VectorString self) -> SwigPyIterator"""
        return _coda_types.VectorString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(VectorString self) -> bool"""
        return _coda_types.VectorString___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(VectorString self) -> bool"""
        return _coda_types.VectorString___bool__(self)

    def __len__(self) -> "std::vector< std::string >::size_type":
        r"""__len__(VectorString self) -> std::vector< std::string >::size_type"""
        return _coda_types.VectorString___len__(self)

    def __getslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "std::vector< std::string,std::allocator< std::string > > *":
        r"""__getslice__(VectorString self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> VectorString"""
        return _coda_types.VectorString___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(VectorString self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)
        __setslice__(VectorString self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, VectorString v)
        """
        return _coda_types.VectorString___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "void":
        r"""__delslice__(VectorString self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)"""
        return _coda_types.VectorString___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(VectorString self, std::vector< std::string >::difference_type i)
        __delitem__(VectorString self, PySliceObject * slice)
        """
        return _coda_types.VectorString___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::string >::value_type const &":
        r"""
        __getitem__(VectorString self, PySliceObject * slice) -> VectorString
        __getitem__(VectorString self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &
        """
        return _coda_types.VectorString___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(VectorString self, PySliceObject * slice, VectorString v)
        __setitem__(VectorString self, PySliceObject * slice)
        __setitem__(VectorString self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)
        """
        return _coda_types.VectorString___setitem__(self, *args)

    def pop(self) -> "std::vector< std::string >::value_type":
        r"""pop(VectorString self) -> std::vector< std::string >::value_type"""
        return _coda_types.VectorString_pop(self)

    def append(self, x: "std::vector< std::string >::value_type const &") -> "void":
        r"""append(VectorString self, std::vector< std::string >::value_type const & x)"""
        return _coda_types.VectorString_append(self, x)

    def empty(self) -> "bool":
        r"""empty(VectorString self) -> bool"""
        return _coda_types.VectorString_empty(self)

    def size(self) -> "std::vector< std::string >::size_type":
        r"""size(VectorString self) -> std::vector< std::string >::size_type"""
        return _coda_types.VectorString_size(self)

    def swap(self, v: "VectorString") -> "void":
        r"""swap(VectorString self, VectorString v)"""
        return _coda_types.VectorString_swap(self, v)

    def begin(self) -> "std::vector< std::string >::iterator":
        r"""begin(VectorString self) -> std::vector< std::string >::iterator"""
        return _coda_types.VectorString_begin(self)

    def end(self) -> "std::vector< std::string >::iterator":
        r"""end(VectorString self) -> std::vector< std::string >::iterator"""
        return _coda_types.VectorString_end(self)

    def rbegin(self) -> "std::vector< std::string >::reverse_iterator":
        r"""rbegin(VectorString self) -> std::vector< std::string >::reverse_iterator"""
        return _coda_types.VectorString_rbegin(self)

    def rend(self) -> "std::vector< std::string >::reverse_iterator":
        r"""rend(VectorString self) -> std::vector< std::string >::reverse_iterator"""
        return _coda_types.VectorString_rend(self)

    def clear(self) -> "void":
        r"""clear(VectorString self)"""
        return _coda_types.VectorString_clear(self)

    def get_allocator(self) -> "std::vector< std::string >::allocator_type":
        r"""get_allocator(VectorString self) -> std::vector< std::string >::allocator_type"""
        return _coda_types.VectorString_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(VectorString self)"""
        return _coda_types.VectorString_pop_back(self)

    def erase(self, *args) -> "std::vector< std::string >::iterator":
        r"""
        erase(VectorString self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator
        erase(VectorString self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator
        """
        return _coda_types.VectorString_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(VectorString self) -> VectorString
        __init__(VectorString self, VectorString other) -> VectorString
        __init__(VectorString self, std::vector< std::string >::size_type size) -> VectorString
        __init__(VectorString self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> VectorString
        """
        _coda_types.VectorString_swiginit(self, _coda_types.new_VectorString(*args))

    def push_back(self, x: "std::vector< std::string >::value_type const &") -> "void":
        r"""push_back(VectorString self, std::vector< std::string >::value_type const & x)"""
        return _coda_types.VectorString_push_back(self, x)

    def front(self) -> "std::vector< std::string >::value_type const &":
        r"""front(VectorString self) -> std::vector< std::string >::value_type const &"""
        return _coda_types.VectorString_front(self)

    def back(self) -> "std::vector< std::string >::value_type const &":
        r"""back(VectorString self) -> std::vector< std::string >::value_type const &"""
        return _coda_types.VectorString_back(self)

    def assign(self, n: "std::vector< std::string >::size_type", x: "std::vector< std::string >::value_type const &") -> "void":
        r"""assign(VectorString self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)"""
        return _coda_types.VectorString_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(VectorString self, std::vector< std::string >::size_type new_size)
        resize(VectorString self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)
        """
        return _coda_types.VectorString_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(VectorString self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator
        insert(VectorString self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)
        """
        return _coda_types.VectorString_insert(self, *args)

    def reserve(self, n: "std::vector< std::string >::size_type") -> "void":
        r"""reserve(VectorString self, std::vector< std::string >::size_type n)"""
        return _coda_types.VectorString_reserve(self, n)

    def capacity(self) -> "std::vector< std::string >::size_type":
        r"""capacity(VectorString self) -> std::vector< std::string >::size_type"""
        return _coda_types.VectorString_capacity(self)

    def __getstate__(self):
    # Return a nonempty (thus non-false) tuple with dummy value in first position
        return (-1, tuple(pickle.dumps(elem) for elem in self))

    def __setstate__(self, state):
        self.__init__()
    # State will have a dummy entry in the first position
        for elem in state[1]:
            self.push_back(pickle.loads(elem))

    __swig_destroy__ = _coda_types.delete_VectorString

# Register VectorString in _coda_types:
_coda_types.VectorString_swigregister(VectorString)



