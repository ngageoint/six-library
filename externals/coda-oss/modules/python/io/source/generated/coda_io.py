# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _coda_io
else:
    import _coda_io

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class InputStream(object):
    r"""Proxy of C++ io::InputStream class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    IS_EOF = _coda_io.InputStream_IS_EOF
    
    IS_END = _coda_io.InputStream_IS_END
    
    DEFAULT_CHUNK_SIZE = _coda_io.InputStream_DEFAULT_CHUNK_SIZE
    
    __swig_destroy__ = _coda_io.delete_InputStream

    def available(self) -> "sys::Off_T":
        r"""available(InputStream self) -> sys::Off_T"""
        return _coda_io.InputStream_available(self)

    def read(self, buffer: "void *", len: "size_t", verifyFullRead: "bool"=False) -> "sys::SSize_T":
        r"""read(InputStream self, void * buffer, size_t len, bool verifyFullRead=False) -> sys::SSize_T"""
        return _coda_io.InputStream_read(self, buffer, len, verifyFullRead)

    def readln(self, cStr: "sys::byte *", strLenPlusNullByte: "sys::Size_T const") -> "sys::SSize_T":
        r"""readln(InputStream self, sys::byte * cStr, sys::Size_T const strLenPlusNullByte) -> sys::SSize_T"""
        return _coda_io.InputStream_readln(self, cStr, strLenPlusNullByte)

    def streamTo(self, *args) -> "sys::SSize_T":
        r"""streamTo(InputStream self, OutputStream & soi, sys::SSize_T numBytes=IS_END) -> sys::SSize_T"""
        return _coda_io.InputStream_streamTo(self, *args)

# Register InputStream in _coda_io:
_coda_io.InputStream_swigregister(InputStream)

class OutputStream(object):
    r"""Proxy of C++ io::OutputStream class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _coda_io.delete_OutputStream

    def writeln(self, str: "std::string const &") -> "void":
        r"""writeln(OutputStream self, std::string const & str)"""
        return _coda_io.OutputStream_writeln(self, str)

    def write(self, *args) -> "void":
        r"""
        write(OutputStream self, sys::byte b)
        write(OutputStream self, std::string const & str)
        write(OutputStream self, void const * buffer, size_t len)
        """
        return _coda_io.OutputStream_write(self, *args)

    def flush(self) -> "void":
        r"""flush(OutputStream self)"""
        return _coda_io.OutputStream_flush(self)

    def close(self) -> "void":
        r"""close(OutputStream self)"""
        return _coda_io.OutputStream_close(self)

# Register OutputStream in _coda_io:
_coda_io.OutputStream_swigregister(OutputStream)

class BidirectionalStream(InputStream, OutputStream):
    r"""Proxy of C++ io::BidirectionalStream class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _coda_io.delete_BidirectionalStream

# Register BidirectionalStream in _coda_io:
_coda_io.BidirectionalStream_swigregister(BidirectionalStream)

class Seekable(object):
    r"""Proxy of C++ io::Seekable class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _coda_io.delete_Seekable
    Whence_CURRENT = _coda_io.Seekable_Whence_CURRENT
    
    Whence_START = _coda_io.Seekable_Whence_START
    
    Whence_END = _coda_io.Seekable_Whence_END
    
    CURRENT = _coda_io.Seekable_CURRENT
    
    START = _coda_io.Seekable_START
    
    END = _coda_io.Seekable_END
    

    def seek(self, offset: "sys::Off_T", whence: "io::Seekable::Whence") -> "sys::Off_T":
        r"""seek(Seekable self, sys::Off_T offset, io::Seekable::Whence whence) -> sys::Off_T"""
        return _coda_io.Seekable_seek(self, offset, whence)

    def tell(self) -> "sys::Off_T":
        r"""tell(Seekable self) -> sys::Off_T"""
        return _coda_io.Seekable_tell(self)

# Register Seekable in _coda_io:
_coda_io.Seekable_swigregister(Seekable)

class SeekableInputStream(InputStream, Seekable):
    r"""Proxy of C++ io::SeekableInputStream class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _coda_io.delete_SeekableInputStream

    def streamTo(self, *args) -> "sys::SSize_T":
        r"""
        streamTo(SeekableInputStream self, OutputStream & soi, sys::SSize_T numBytes=IS_END) -> sys::SSize_T
        streamTo(SeekableInputStream self, OutputStream & soi) -> sys::SSize_T
        """
        return _coda_io.SeekableInputStream_streamTo(self, *args)

# Register SeekableInputStream in _coda_io:
_coda_io.SeekableInputStream_swigregister(SeekableInputStream)

class SeekableOutputStream(OutputStream, Seekable):
    r"""Proxy of C++ io::SeekableOutputStream class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _coda_io.delete_SeekableOutputStream

# Register SeekableOutputStream in _coda_io:
_coda_io.SeekableOutputStream_swigregister(SeekableOutputStream)

class SeekableBidirectionalStream(BidirectionalStream, Seekable):
    r"""Proxy of C++ io::SeekableBidirectionalStream class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _coda_io.delete_SeekableBidirectionalStream

    def streamTo(self, *args) -> "sys::SSize_T":
        r"""
        streamTo(SeekableBidirectionalStream self, OutputStream & soi, sys::SSize_T numBytes=IS_END) -> sys::SSize_T
        streamTo(SeekableBidirectionalStream self, OutputStream & soi) -> sys::SSize_T
        """
        return _coda_io.SeekableBidirectionalStream_streamTo(self, *args)

# Register SeekableBidirectionalStream in _coda_io:
_coda_io.SeekableBidirectionalStream_swigregister(SeekableBidirectionalStream)

class StringStream(SeekableBidirectionalStream):
    r"""Proxy of C++ io::StringStream class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(StringStream self) -> StringStream"""
        _coda_io.StringStream_swiginit(self, _coda_io.new_StringStream())

    def tell(self) -> "sys::Off_T":
        r"""tell(StringStream self) -> sys::Off_T"""
        return _coda_io.StringStream_tell(self)

    def seek(self, offset: "sys::Off_T", whence: "io::Seekable::Whence") -> "sys::Off_T":
        r"""seek(StringStream self, sys::Off_T offset, io::Seekable::Whence whence) -> sys::Off_T"""
        return _coda_io.StringStream_seek(self, offset, whence)

    def available(self) -> "sys::Off_T":
        r"""available(StringStream self) -> sys::Off_T"""
        return _coda_io.StringStream_available(self)

    def write(self, *args) -> "void":
        r"""
        write(StringStream self, sys::byte b)
        write(StringStream self, std::string const & str)
        write(StringStream self, void const * buffer, size_t len)
        write(StringStream self, void const * buffer, sys::Size_T size)
        """
        return _coda_io.StringStream_write(self, *args)

    def stream(self, *args) -> "std::stringstream &":
        r"""
        stream(StringStream self) -> std::stringstream const
        stream(StringStream self) -> std::stringstream &
        """
        return _coda_io.StringStream_stream(self, *args)

    def reset(self) -> "void":
        r"""reset(StringStream self)"""
        return _coda_io.StringStream_reset(self)

    def str(self) -> "std::string":
        r"""str(StringStream self) -> std::string"""
        return _coda_io.StringStream_str(self)

    def writeBytes(self, bytes: "PyObject *") -> "void":
        r"""writeBytes(StringStream self, PyObject * bytes)"""
        return _coda_io.StringStream_writeBytes(self, bytes)
    __swig_destroy__ = _coda_io.delete_StringStream

# Register StringStream in _coda_io:
_coda_io.StringStream_swigregister(StringStream)

class NullInputStream(InputStream):
    r"""Proxy of C++ io::NullInputStream class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, size: "sys::SSize_T"):
        r"""__init__(NullInputStream self, sys::SSize_T size) -> NullInputStream"""
        _coda_io.NullInputStream_swiginit(self, _coda_io.new_NullInputStream(size))

    def available(self) -> "sys::Off_T":
        r"""available(NullInputStream self) -> sys::Off_T"""
        return _coda_io.NullInputStream_available(self)

    def readln(self, cStr: "sys::byte *", strLenPlusNullByte: "sys::Size_T const") -> "sys::SSize_T":
        r"""readln(NullInputStream self, sys::byte * cStr, sys::Size_T const strLenPlusNullByte) -> sys::SSize_T"""
        return _coda_io.NullInputStream_readln(self, cStr, strLenPlusNullByte)

    def streamTo(self, *args) -> "sys::SSize_T":
        r"""streamTo(NullInputStream self, OutputStream soi, sys::SSize_T numBytes=IS_END) -> sys::SSize_T"""
        return _coda_io.NullInputStream_streamTo(self, *args)
    __swig_destroy__ = _coda_io.delete_NullInputStream

# Register NullInputStream in _coda_io:
_coda_io.NullInputStream_swigregister(NullInputStream)

class NullOutputStream(OutputStream):
    r"""Proxy of C++ io::NullOutputStream class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(NullOutputStream self) -> NullOutputStream"""
        _coda_io.NullOutputStream_swiginit(self, _coda_io.new_NullOutputStream())

    def writeln(self, arg2: "std::string const &") -> "void":
        r"""writeln(NullOutputStream self, std::string const & arg2)"""
        return _coda_io.NullOutputStream_writeln(self, arg2)

    def write(self, *args) -> "void":
        r"""
        write(NullOutputStream self, sys::byte arg2)
        write(NullOutputStream self, std::string const & arg2)
        write(NullOutputStream self, void const * arg2, size_t arg3)
        """
        return _coda_io.NullOutputStream_write(self, *args)

    def flush(self) -> "void":
        r"""flush(NullOutputStream self)"""
        return _coda_io.NullOutputStream_flush(self)
    __swig_destroy__ = _coda_io.delete_NullOutputStream

# Register NullOutputStream in _coda_io:
_coda_io.NullOutputStream_swigregister(NullOutputStream)

class SeekableNullOutputStream(SeekableOutputStream):
    r"""Proxy of C++ io::SeekableNullOutputStream class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(SeekableNullOutputStream self) -> SeekableNullOutputStream"""
        _coda_io.SeekableNullOutputStream_swiginit(self, _coda_io.new_SeekableNullOutputStream())

    def write(self, arg2: "void const *", numBytes: "size_t") -> "void":
        r"""write(SeekableNullOutputStream self, void const * arg2, size_t numBytes)"""
        return _coda_io.SeekableNullOutputStream_write(self, arg2, numBytes)

    def flush(self) -> "void":
        r"""flush(SeekableNullOutputStream self)"""
        return _coda_io.SeekableNullOutputStream_flush(self)

    def seek(self, offset: "sys::Off_T", whence: "io::Seekable::Whence") -> "sys::Off_T":
        r"""seek(SeekableNullOutputStream self, sys::Off_T offset, io::Seekable::Whence whence) -> sys::Off_T"""
        return _coda_io.SeekableNullOutputStream_seek(self, offset, whence)

    def tell(self) -> "sys::Off_T":
        r"""tell(SeekableNullOutputStream self) -> sys::Off_T"""
        return _coda_io.SeekableNullOutputStream_tell(self)
    __swig_destroy__ = _coda_io.delete_SeekableNullOutputStream

# Register SeekableNullOutputStream in _coda_io:
_coda_io.SeekableNullOutputStream_swigregister(SeekableNullOutputStream)

class FileInputStream(SeekableInputStream):
    r"""Proxy of C++ io::FileInputStreamOS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        FileInputStreamOS() -> FileInputStream
        FileInputStreamOS(std::string const & inputFile) -> FileInputStream
        __init__(FileInputStream self, sys::File const & inputFile) -> FileInputStream
        """
        _coda_io.FileInputStream_swiginit(self, _coda_io.new_FileInputStream(*args))
    __swig_destroy__ = _coda_io.delete_FileInputStream

    def available(self) -> "sys::Off_T":
        r"""available(FileInputStream self) -> sys::Off_T"""
        return _coda_io.FileInputStream_available(self)

    def isOpen(self) -> "bool":
        r"""isOpen(FileInputStream self) -> bool"""
        return _coda_io.FileInputStream_isOpen(self)

    def create(self, str: "std::string const &") -> "void":
        r"""create(FileInputStream self, std::string const & str)"""
        return _coda_io.FileInputStream_create(self, str)

    def seek(self, off: "sys::Off_T", whence: "io::Seekable::Whence") -> "sys::Off_T":
        r"""seek(FileInputStream self, sys::Off_T off, io::Seekable::Whence whence) -> sys::Off_T"""
        return _coda_io.FileInputStream_seek(self, off, whence)

    def tell(self) -> "sys::Off_T":
        r"""tell(FileInputStream self) -> sys::Off_T"""
        return _coda_io.FileInputStream_tell(self)

    def close(self) -> "void":
        r"""close(FileInputStream self)"""
        return _coda_io.FileInputStream_close(self)

# Register FileInputStream in _coda_io:
_coda_io.FileInputStream_swigregister(FileInputStream)

class FileOutputStream(SeekableOutputStream):
    r"""Proxy of C++ io::FileOutputStreamOS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        FileOutputStreamOS() -> FileOutputStream
        FileOutputStreamOS(io::FileOutputStreamOS::path const & outputFile, int creationFlags=sys::File::CREATE|sys::File::TRUNCATE) -> FileOutputStream
        """
        _coda_io.FileOutputStream_swiginit(self, _coda_io.new_FileOutputStream(*args))
    __swig_destroy__ = _coda_io.delete_FileOutputStream

    def isOpen(self) -> "bool":
        r"""isOpen(FileOutputStream self) -> bool"""
        return _coda_io.FileOutputStream_isOpen(self)

    def create(self, *args) -> "void":
        r"""create(FileOutputStream self, io::FileOutputStreamOS::path const & str, int creationFlags=sys::File::CREATE|sys::File::TRUNCATE)"""
        return _coda_io.FileOutputStream_create(self, *args)

    def close(self) -> "void":
        r"""close(FileOutputStream self)"""
        return _coda_io.FileOutputStream_close(self)

    def flush(self) -> "void":
        r"""flush(FileOutputStream self)"""
        return _coda_io.FileOutputStream_flush(self)

    def seek(self, offset: "sys::Off_T", whence: "io::Seekable::Whence") -> "sys::Off_T":
        r"""seek(FileOutputStream self, sys::Off_T offset, io::Seekable::Whence whence) -> sys::Off_T"""
        return _coda_io.FileOutputStream_seek(self, offset, whence)

    def tell(self) -> "sys::Off_T":
        r"""tell(FileOutputStream self) -> sys::Off_T"""
        return _coda_io.FileOutputStream_tell(self)

    def write(self, *args) -> "void":
        r"""
        write(FileOutputStream self, sys::byte b)
        write(FileOutputStream self, std::string const & str)
        write(FileOutputStream self, void const * buffer, size_t len)
        """
        return _coda_io.FileOutputStream_write(self, *args)

# Register FileOutputStream in _coda_io:
_coda_io.FileOutputStream_swigregister(FileOutputStream)



