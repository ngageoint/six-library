# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _mt
else:
    import _mt

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import coda.coda_except
import coda.coda_sys
class Runnable(object):
    r"""Proxy of C++ sys::Runnable class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mt.delete_Runnable

    def run(self) -> "void":
        r"""run(Runnable self)"""
        return _mt.Runnable_run(self)

# Register Runnable in _mt:
_mt.Runnable_swigregister(Runnable)

class ThreadPlanner(object):
    r"""Proxy of C++ mt::ThreadPlanner class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, numElements: "size_t", numThreads: "size_t"):
        r"""__init__(ThreadPlanner self, size_t numElements, size_t numThreads) -> ThreadPlanner"""
        _mt.ThreadPlanner_swiginit(self, _mt.new_ThreadPlanner(numElements, numThreads))

    def getNumElementsPerThread(self) -> "size_t":
        r"""getNumElementsPerThread(ThreadPlanner self) -> size_t"""
        return _mt.ThreadPlanner_getNumElementsPerThread(self)

    def getNumThreadsThatWillBeUsed(self) -> "size_t":
        r"""getNumThreadsThatWillBeUsed(ThreadPlanner self) -> size_t"""
        return _mt.ThreadPlanner_getNumThreadsThatWillBeUsed(self)

    def getThreadInfo(self, threadNum: "size_t") -> "PyObject *":
        r"""getThreadInfo(ThreadPlanner self, size_t threadNum) -> PyObject *"""
        return _mt.ThreadPlanner_getThreadInfo(self, threadNum)
    __swig_destroy__ = _mt.delete_ThreadPlanner

# Register ThreadPlanner in _mt:
_mt.ThreadPlanner_swigregister(ThreadPlanner)

class ThreadGroup(object):
    r"""Proxy of C++ mt::ThreadGroup class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ThreadGroup self, bool pinToCPU=getDefaultPinToCPU()) -> ThreadGroup"""
        _mt.ThreadGroup_swiginit(self, _mt.new_ThreadGroup(*args))
    __swig_destroy__ = _mt.delete_ThreadGroup

    def joinAll(self) -> "void":
        r"""joinAll(ThreadGroup self)"""
        return _mt.ThreadGroup_joinAll(self)

    def isPinToCPUEnabled(self) -> "bool":
        r"""isPinToCPUEnabled(ThreadGroup self) -> bool"""
        return _mt.ThreadGroup_isPinToCPUEnabled(self)

    @staticmethod
    def getDefaultPinToCPU() -> "bool":
        r"""getDefaultPinToCPU() -> bool"""
        return _mt.ThreadGroup_getDefaultPinToCPU()

    @staticmethod
    def setDefaultPinToCPU(newDefault: "bool") -> "void":
        r"""setDefaultPinToCPU(bool newDefault)"""
        return _mt.ThreadGroup_setDefaultPinToCPU(newDefault)

    def createThread(self, runnable: "PyObject *") -> "void":
        r"""createThread(ThreadGroup self, PyObject * runnable)"""
        return _mt.ThreadGroup_createThread(self, runnable)

# Register ThreadGroup in _mt:
_mt.ThreadGroup_swigregister(ThreadGroup)

def ThreadGroup_getDefaultPinToCPU() -> "bool":
    r"""ThreadGroup_getDefaultPinToCPU() -> bool"""
    return _mt.ThreadGroup_getDefaultPinToCPU()

def ThreadGroup_setDefaultPinToCPU(newDefault: "bool") -> "void":
    r"""ThreadGroup_setDefaultPinToCPU(bool newDefault)"""
    return _mt.ThreadGroup_setDefaultPinToCPU(newDefault)



