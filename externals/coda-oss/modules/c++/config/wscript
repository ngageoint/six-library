NAME            = 'config'
MAINTAINER      = 'jonathan.means@maxar.com'
VERSION         = '1.2'
USELIB          = 'THREAD DL RT SOCKET'

import os
from build import writeConfig
from waflib import Utils

options = distclean = lambda p: None

def configure(conf):
    # this check defines HAVE_CLOCK_GETTIME, undefine it to keep it out of dumpenv
    if conf.check_cc(lib='rt', uselib_store='RT', function_name='clock_gettime', header_name='time.h', mandatory=False):
        conf.undefine('HAVE_CLOCK_GETTIME')

    # callback function to check for all #defines used by the sys module
    def sys_callback(conf):
        conf.check_cc(header_name='pthread.h', mandatory=False)
        conf.check_cc(header_name='execinfo.h', mandatory=False)
        conf.check_cc(function_name='clock_gettime', header_name='time.h', mandatory=False)
        conf.check_cc(header_name="atomic.h", mandatory=False)
        conf.check_cc(header_name="sys/time.h", mandatory=False)
        conf.check_cc(function_name='localtime_r', header_name="time.h", mandatory=False)
        conf.check_cc(function_name='gmtime_r', header_name="time.h", mandatory=False)
        conf.check_cc(function_name='setenv', header_name="stdlib.h", mandatory=False)
        conf.check_cc(function_name='posix_memalign', header_name="stdlib.h", mandatory=False)
        conf.check_cc(function_name='memalign', header_name="stdlib.h", mandatory=False)

        #find out the size of some types, etc.
        # TODO: This is not using the 32 vs. 64 bit linker flags, so if you're
        #    building with --enable-32bit on 64 bit Linux, sizeof(size_t) will
        #    erroneously be 8 here.
        types_str = '''
            #include <stdio.h>
            int isBigEndian()
            {
                long one = 1;
                return !(*((char *)(&one)));
            }
            int main()
            {
                if (isBigEndian()) printf("bigendian=True\\n");
                else printf("bigendian=False\\n");
                printf("sizeof_size_t=%d\\n", sizeof(size_t));
                return 0;
            }
            '''
        output = conf.check(fragment=types_str, execute=1, msg='Checking system type sizes', define_ret=True)
        t = Utils.str_to_dict(output or '')
        for k, v in t.items():
            try:
                v = int(v)
            except:
                v = v.strip()
                if v == 'True':
                    v = True
                elif v == 'False':
                    v = False
            conf.define(k.upper(), v)
        attribute_noinline_str = '''
            int __attribute__((noinline)) fn() { return 0; }
            int main()
            {
                return fn();
            }
            '''
        conf.check_cxx(fragment=attribute_noinline_str,
                       msg='Checking for __attribute__(noinline)',
                       define_name='HAVE_ATTRIBUTE_NOINLINE',
                       mandatory=False)

        attribute_aligned_str = '''
            int main()
            {
                int var __attribute__((aligned (32)));
                return var;
            }
            '''
        conf.check_cxx(fragment=attribute_aligned_str,
                       msg='Checking for __attribute__(aligned (x))',
                       define_name='HAVE_ATTRIBUTE_ALIGNED',
                       mandatory=False)

        conf.define('CODA_EXPORT', conf.env['declspec_decoration'], quote=False)

        # DEPRECATED.
        # C++11 is required and will always be enabled.
        # Continuing to define this in case downstream code is looking for it
        conf.define('__CODA_CPP11', 1)

    writeConfig(conf, sys_callback, 'coda_oss',
                path=os.path.join('include', 'config'),
                outfile='coda_oss_config.h')


def build(bld):
    includeDirname = os.path.join(bld.env['install_includedir'], 'config')
    configPathname = bld.path.get_bld().ant_glob('**/coda_oss_config.h')
    bld.install_files(dest=includeDirname,
                      files=configPathname)
    bld.module(**globals())
