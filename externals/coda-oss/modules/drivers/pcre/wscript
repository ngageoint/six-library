import os
import sys
import shutil
from os.path import join, split
from waflib import Options, Utils, Context
from waflib.TaskGen import feature, before, task_gen
from build import untarFile

FILENAME_PREFIX = 'pcre2-10.22'
TARBALL_FILENAME = FILENAME_PREFIX + '.tar.gz'
CODE_UNIT_WIDTH = 'PCRE2_CODE_UNIT_WIDTH=8'

def options(opt):
    opt.add_option('--disable-pcre', action='store_false', dest='enable_pcre',
                   help='turn off PCRE')
    opt.add_option('--enable-pcre', action='store_true',
                   default=True, help='turn on PCRE (default)')
    opt.add_option('--with-pcre-home', action='store', dest='pcre_home',
                   help='Specify the PCRE Home - where PCRE is installed to.  Note that this must be the newer PCRE2 (10.x+) version of PCRE.')
    opt.add_option('--build-pcre', action='store_true', dest='build_pcre',
                   help='force building PCRE from scratch',
                   default=os.path.exists(os.path.join(opt.path.abspath(), TARBALL_FILENAME)))
    opt.add_option('--nobuild-pcre', action='store_false', dest='build_pcre',
                   help='force not building PCRE from scratch')

from build import writeConfig

def configure(conf):
    if Options.options.enable_pcre:
        pcreHome = Options.options.pcre_home
        if pcreHome:
            includeDir = os.path.join(pcreHome, 'include')
            if conf.check(lib='pcre2-8', uselib_store='PCRE',
                       header_name='pcre2.h', function_name='pcre2_compile',
                       libpath=os.path.join(pcreHome, 'lib'),
                       includes=includeDir,
                       export_includes=includeDir,
                       defines=CODE_UNIT_WIDTH,
                       msg='Checking for library PCRE', okmsg=pcreHome,
                       mandatory=False):
                           conf.undefine('HAVE_PCRE2_COMPILE')

        elif Options.options.build_pcre:
            # Build is off by default when tarfile not found, fail if forced on
            if not os.path.exists(os.path.join(conf.path.abspath(), TARBALL_FILENAME)):
                conf.fatal('Missing PCRE tarfile')

            # Conveniently,
            # http://www.pcre.org/current/doc/html/NON-AUTOTOOLS-BUILD.txt
            # provides a lot of details on how to build this ourselves
            # This should be roughly analogous to doing PCRE's
            # ./configure --disable-shared --disable-unicode --with-pic

            # Callback function to check for all #defines used by the pcre driver
            def pcre_callback(conf):
                conf.env['DEFINES'] = []

                conf.check_cc(function_name='bcopy', header_name='strings.h', mandatory=False)
                conf.check_cc(header_name='inttypes.h', mandatory=False)
                conf.check_cc(function_name='memmove', header_name='string.h', mandatory=False)
                conf.check_cc(header_name='stdint.h', mandatory=False)
                conf.check_cc(function_name='strerror', header_name='string.h', mandatory=False)
                conf.define('LINK_SIZE', 2)
                matchLimit = 10000000
                conf.define('MATCH_LIMIT', matchLimit)
                conf.define('MATCH_LIMIT_RECURSION', matchLimit)
                conf.define('MAX_NAME_COUNT', 10000)
                conf.define('MAX_NAME_SIZE', 32)
                # This is '\n'
                conf.define('NEWLINE_DEFAULT', 2)
                conf.define('PARENS_NEST_LIMIT', 250)
                if Options.options.shared_libs is None:
                    conf.define('PCRE2_STATIC', 1)

                # Here are some other things in config.h that aren't used either
                # seemingly at all or only by things like pcregrep.c so not
                # wasting time doing config checks on them
                # STDC_HEADERS
                # HAVE_VISIBILITY
                # HAVE_PTHREAD
                # HAVE_PTHREAD_PRIO_INHERIT
                # PACKAGE*
                # conf.check_cc(header_name='bzlib.h', mandatory=False)
                # conf.check_cc(header_name='dirent.h', mandatory=False)
                # conf.check_cc(header_name='dlfcn.h', mandatory=False)
                # conf.check_cc(header_name='editline/readline.h', mandatory=False)
                # conf.check_cc(header_name='edit/readline/readline.h', mandatory=False)
                                
                # conf.check_cc(header_name='stdlib.h', mandatory=False)
                # conf.check_cc(header_name='memory.h', mandatory=False)
                # conf.check_cc(header_name='limits.h', mandatory=False)
                # conf.check_cc(header_name='readline/history.h', mandatory=False)
                # conf.check_cc(header_name='readline/readline.h', mandatory=False)
                # conf.check_cc(header_name='sys/stat.h', mandatory=False)
                # conf.check_cc(header_name='sys/types.h', mandatory=False)
                # conf.check_cc(header_name='sys/wait.h', mandatory=False)
                # conf.check_cc(header_name='unistd.h', mandatory=False)
                # conf.check_cc(header_name='strings.h', mandatory=False)
                # conf.check_cc(header_name='string.h', mandatory=False)
                # conf.check_cc(header_name='windows.h', mandatory=False)
                # conf.check_cc(header_name='zlib.h', mandatory=False)

            conf.env['MAKE_PCRE'] = True
            conf.msg('Building local lib', 'PCRE')
            
            untarFile(path=conf.path, fname=TARBALL_FILENAME, mode='r:gz')

            # Make config.h
            # TODO: Would rather start with config.h.in and use the
            # 'handleDefs' feature but the regex in there that is trying to do
            # the undef substitution is not handling the undef in the initial
            # comments at the top of that file
            driverNode = conf.path.make_node(FILENAME_PREFIX)
            writeConfig(conf, pcre_callback, 'pcre',  
                        outfile=join('src', 'config.h'), 
                        path=driverNode, feature='makeHeader')

            # Slide pcre2.h.generic into place as pcre2.h
            srcDir = join(conf.path.abspath(), FILENAME_PREFIX, 'src')
            shutil.copyfile(join(srcDir, 'pcre2.h.generic'),
                            join(srcDir, 'pcre2.h'))

            # Slide pcre2_chartables.c.dist into place as pcre2_chartables.c
            # NOTE: Older versions of PCRE used to be more complicated because
            # we used to need to compile a dftables executable in the build
            # step to generate this (look at older versions of this wscript if
            # this ever needs to be resurrected).  With the normal PCRE2
            # configure, you can do this via --enable-rebuild-chartables, but
            # what it generates is identical to this file
            shutil.copyfile(join(srcDir, 'pcre2_chartables.c.dist'),
                            join(srcDir, 'pcre2_chartables.c'))

        else:
            if conf.check(lib='pcre2-8', uselib_store='PCRE',
                          header_name='pcre2.h', function_name='pcre2_compile',
                          defines=CODE_UNIT_WIDTH,
                          msg='Checking for library pcre',
                          mandatory=False):
                              conf.undefine('HAVE_PCRE2_COMPILE')

def build(bld):
    env = bld.env
    sourceFiles = []

    if 'MAKE_PCRE' in bld.env:
        driverNode = bld.path.make_node(join(FILENAME_PREFIX, 'src'))
    
        files = ['pcre2_auto_possess.c',
                 'pcre2_chartables.c',
                 'pcre2_compile.c',
                 'pcre2_config.c',
                 'pcre2_context.c',
                 'pcre2_dfa_match.c',
                 'pcre2_error.c',
                 'pcre2_find_bracket.c',
                 'pcre2_jit_compile.c',
                 'pcre2_maketables.c',
                 'pcre2_match.c',
                 'pcre2_match_data.c',
                 'pcre2_newline.c',
                 'pcre2_ord2utf.c',
                 'pcre2_pattern_info.c',
                 'pcre2_serialize.c',
                 'pcre2_string_utils.c',
                 'pcre2_study.c',
                 'pcre2_substitute.c',
                 'pcre2_substring.c',
                 'pcre2_tables.c',
                 'pcre2_ucd.c',
                 'pcre2_valid_utf.c',
                 'pcre2_xclass.c']
    
        pcre = bld(features='c c%s add_targets' % bld.env['LIB_TYPE'] or 'stlib',
                   includes=['.'],
                   export_includes=['.'],
                   target='pcre2-8',
                   source=files,
                   path=driverNode,
                   name='PCRE',
                   targets_to_add=[],
                   defines=['HAVE_CONFIG_H', CODE_UNIT_WIDTH])

        if env['install_libs']:
            pcre.install_path = env['install_libdir']

        if env['install_headers']:
            bld(features='install_tgt', install_path=env['install_includedir'],
                dir=driverNode, files=['pcre2.h'], 
                name='PCRE_HEADERS_INSTALL')

            pcre.targets_to_add += ['PCRE_HEADERS_INSTALL']

        if env['install_source']:
            sourceFiles += [TARBALL_FILENAME]
            pcre.targets_to_add += ['PCRE_SOURCE_INSTALL']

    if env['install_source']:
        sourceNode = bld.path.make_node('source')
        bld.install_tgt(files = sourceFiles,
                        dir = bld.path,
                        install_path = os.path.join('${PREFIX}',
                        sourceNode.path_from(bld.path)),
                        relative_trick=True,
                        name='PCRE_SOURCE_INSTALL')

def distclean(context):
    # Remove the untarred directory    
    untarredDir = join(context.path.abspath(), FILENAME_PREFIX)
    try:
        if os.path.exists(untarredDir):
            shutil.rmtree(untarredDir, ignore_errors=True)
    except:
        pass
