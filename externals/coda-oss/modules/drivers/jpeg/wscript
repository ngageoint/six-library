import os, sys, shutil
from waflib import Options, Utils
from build import untarFile
from os.path import join, exists

sourcepath = 'jpeg-9'
tarfile = 'jpegsrc.v9.tar'

# this fragment is needed because jpeglib.h doesn't include
# the required headers on its own
frag = '''
#include <stddef.h>
#include <stdio.h>
#include <jpeglib.h>

int main(int argc, char **argv)
{
    void *p;
    (void)argc; (void)argv;
    p=(void*)(jpeg_destroy_decompress);
    return 0;
}
'''
def options(opt):
    opt.add_option('--with-jpeg-home', action='store', dest='jpeg_home',
                   help='Specify the JPEG Home - where the JPEG library is installed')
    opt.add_option('--disable-jpeg', action='store_false', dest='enable_jpeg',
                   help='will not build the jpeg (libjpeg) library')
    opt.add_option('--enable-jpeg', action='store_true',
                   default=True, help='will build the jpeg (libjpeg) library if not found on the system (default)')
    opt.add_option('--build-jpeg', action='store_true', dest="build_jpeg",
                   help='force building jpeg (libjpeg) library from scratch',
                   default=os.path.exists(join(opt.path.abspath(), tarfile)))
    opt.add_option('--nobuild-jpeg', action='store_false', dest="build_jpeg",
                   help='force not building jpeg (libjpeg) library from scratch')

from build import writeConfig


def toggleSharedBuild(conf, driverNode):
    decoration = conf.env['declspec_decoration']

    jmorecfg = os.path.join(driverNode.relpath(), 'jmorecfg.h')
    with open(jmorecfg, 'r') as f:
        contents = f.readlines()
    with open(jmorecfg, 'w') as f:
        for line in contents:
            if line.startswith('#define EXTERN(type)'):
                f.write('#define EXTERN(type) extern {0} type\n'.format(decoration))
            elif line.startswith('#define GLOBAL(type)'):
                f.write('#define GLOBAL(type) {0} type\n'.format(decoration))
            else:
                f.write(line)


def configure(conf):
    if Options.options.enable_jpeg:

        jpegHome = Options.options.jpeg_home
        if jpegHome:
            if conf.check(lib='jpeg' if sys.platform != 'win32' else 'libjpeg',
                       uselib_store='JPEG',
                       header_name='jpeglib.h', fragment=frag,
                       libpath=join(jpegHome, 'lib'),
                       includes=join(jpegHome, 'include'),
                       msg='Checking for library libjpeg', okmsg=jpegHome,
                       mandatory=False):
                           conf.undefine('HAVE_JPEGLIB_H')

        elif Options.options.build_jpeg:
            # Build is off by default when tarfile not found, fail if forced on
            if not os.path.exists(join(conf.path.abspath(), tarfile)):
                conf.fatal('Missing libjpeg tarfile')

            # callback function to check for all #defines used by the jpeg driver
            def jpeg_callback(conf):
                # These are needed by jmorecfg.h.  We could just set these defines
                # rather than bothering with the conf check.
                conf.define('HAVE_PROTOTYPES', 1)
                conf.check_cc(fragment='int main(){unsigned short; return 0;}',
                    define_name='HAVE_UNSIGNED_SHORT', msg='Checking for unsigned short',
                    mandatory=False)
                conf.check_cc(fragment='int main(){unsigned char i; return 0;}',
                    define_name='HAVE_UNSIGNED_CHAR', msg='Checking for unsigned char',
                    mandatory=False)
                conf.check_cc(header_name="stddef.h", mandatory=False)
                conf.check_cc(header_name="stdlib.h", mandatory=False)
                conf.check_cc(header_name="locale.h", mandatory=False)

            conf.env['MAKE_JPEG'] = True
            conf.msg('Building local lib', 'jpeg (libjpeg)')

            untarFile(path=conf.path, fname=tarfile)

            # make jconfig.h
            driverNode = conf.path.make_node(sourcepath)
            writeConfig(conf, jpeg_callback, 'jpeg', infile='jconfig.cfg',
                        outfile='jconfig.h', path=driverNode, feature='handleDefs')

            toggleSharedBuild(conf, driverNode)

        else:
            if conf.check(lib='jpeg' if sys.platform != 'win32' else 'libjpeg',
                       uselib_store='JPEG',
                       header_name='jpeglib.h', fragment=frag,
                       msg='Checking for library libjpeg',
                       mandatory=False):
                           conf.undefine('HAVE_JPEGLIB_H')

        conf.env['HAVE_JPEG'] = True

def build(bld):
    variant = bld.env['VARIANT']
    env = bld.all_envs[variant]

    driversNode = bld.path
    sourceFiles = []
    driverNode = driversNode.make_node(sourcepath)

    if 'MAKE_JPEG' in env:
        sources = ('cdjpeg.c',   'jaricom.c',  'jcapimin.c', 'jcapistd.c',
                   'jcarith.c',  'jccoefct.c', 'jccolor.c',  'jcdctmgr.c',
                   'jchuff.c',   'jcinit.c',   'jcmainct.c', 'jcmarker.c',
                   'jcmaster.c', 'jcomapi.c',  'jcparam.c',  'jcprepct.c',
                   'jcsample.c', 'jctrans.c',  'jdapimin.c', 'jdapistd.c',
                   'jdarith.c',  'jdatadst.c', 'jdatasrc.c', 'jdcoefct.c',
                   'jdcolor.c',  'jddctmgr.c', 'jdhuff.c',   'jdinput.c',
                   'jdmainct.c', 'jdmarker.c', 'jdmaster.c', 'jdmerge.c',
                   'jdpostct.c', 'jdsample.c', 'jdtrans.c',  'jerror.c',
                   'jfdctflt.c', 'jfdctfst.c', 'jfdctint.c', 'jidctflt.c',
                   'jidctfst.c', 'jidctint.c', 'jmemmgr.c',  'jmemnobs.c',
                   'jquant1.c',  'jquant2.c',  'jutils.c',   'rdbmp.c',
                   'rdcolmap.c', 'rdgif.c',    'rdppm.c',    'rdrle.c',
                   'rdswitch.c', 'rdtarga.c',  'transupp.c', 'wrbmp.c',
                   'wrgif.c',    'wrppm.c',    'wrrle.c',    'wrtarga.c')

        jpeglib = bld(features='c c%s add_targets' % env['LIB_TYPE'] or 'stlib',
                      includes=['.'],
                      export_includes=['.'],
                      target='libjpeg',
                      source=sources,
                      path=driverNode,
                      defines=env['DEFINES'],
                      uselib='SOCKET',
                      env=env.derive(),
                      name='JPEG',
                      targets_to_add=[])

        if env['install_libs']:
            jpeglib.install_path = env['install_libdir']

        if env['install_headers']:
            bld(features='install_tgt', install_path=env['install_includedir'],
                dir=driverNode, pattern=('jpeglib.h', 'jconfig.h', 'jmorecfg.h',
                                         'jerror.h'),
                name='JPEG_HEADERS_INSTALL')
            jpeglib.targets_to_add += ['JPEG_HEADERS_INSTALL']

        if env['install_source']:
            sourceFiles.append(tarfile)
            jpeglib.targets_to_add += ['JPEG_SOURCE_INSTALL']

    if env['install_source']:
        bld.install_tgt(files=sourceFiles,
                        dir=driversNode,
                        install_path=os.path.join('${PREFIX}', 'source'),
                        relative_trick=True,
                        name='JPEG_SOURCE_INSTALL')

def distclean(context):
    # remove the untarred directories
    import shutil
    dirs = filter(lambda x: exists(join(context.path.abspath(), x)),
                  [sourcepath])
    for d in dirs:
        try:
            shutil.rmtree(join(context.path.abspath(), d), ignore_errors=True)
        except:{}
