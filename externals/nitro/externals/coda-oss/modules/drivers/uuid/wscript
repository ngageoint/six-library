import os
from os.path import join, exists
from waflib import Options, Utils
from waflib.TaskGen import feature, before, task_gen
from build import untarFile, writeConfig, listToTuple

def options(opt):
    if Options.platform != 'win32':
        opt.add_option('--disable-uuid', action='store_false', dest='enable_uuid',
                       help='will not build the uuid library')
        opt.add_option('--enable-uuid', action='store_true',
                       default=True, help='will build the uuid library if not found on the system (default)')
        opt.add_option('--build-uuid', action='store_true', dest='build_uuid',
                       help='force building libuuid from scratch',
                       default=os.path.exists(os.path.join(opt.path.abspath(), 'e2fsprogs-1.40-uuid.tar')))
        opt.add_option('--nobuild-uuid', action='store_false', dest='build_uuid',
                       help='force not building libuuid from scratch')
        opt.add_option('--with-uuid-home', action='store', dest='uuid_home',
                       help='Specify the UUID lib/headers home')


def configure(conf):    
    #-- UUID -------------------------------------------------------------------
    if Options.platform != 'win32' and Options.options.enable_uuid:

        uuidHome = Options.options.uuid_home
        if uuidHome:
            if conf.check(lib='uuid', uselib_store='UUID',
                       header_name='uuid/uuid.h', function_name='uuid_generate',
                       libpath=os.path.join(uuidHome, 'lib'),
                       includes=os.path.join(uuidHome, 'include'),
                       msg='Checking for library uuid', okmsg=uuidHome,
                       mandatory=False):
                           conf.undefine('HAVE_UUID_GENERATE')

        elif Options.options.build_uuid:
            # Build is off by default when tarfile not found, fail if forced on
            if not os.path.exists(os.path.join(conf.path.abspath(), 'e2fsprogs-1.40-uuid.tar')):
                conf.fatal('Missing uuid tarfile')
            
            def uuid_callback(conf):
                return
                
            conf.check_cc(header_name="inttypes.h", mandatory=False)
            
            types_str = '''
                #include <stdio.h>
                int isBigEndian()
                {
                    long one = 1;
                    return !(*((char *)(&one)));
                }
                int main()
                {
                    if (isBigEndian()) printf("bigendian=True\\n");
                    else printf("bigendian=False\\n");
                    printf("sizeof_int=%d\\n", sizeof(int));
                    printf("sizeof_short=%d\\n", sizeof(short));
                    printf("sizeof_long=%d\\n", sizeof(long));
                    printf("sizeof_long_long=%d\\n", sizeof(long long));
                    return 0;
                }
                '''
            #find out the size of some types, etc.
            # TODO: This is not using the 32 vs. 64 bit linker flags, so if you're
            #    building with --enable-32bit on 64 bit Linux, sizeof(size_t) will
            #    erroneously be 8 here.
            output = conf.check(fragment=types_str, execute=1, msg='Checking system type sizes', define_ret=True)
            f = Utils.to_list(output.upper() or '')
            tuple = listToTuple(f)
            defs = tuple[0]
            undefs = tuple[1]
                        
            conf.env['MAKE_UUID'] = True
            conf.msg('Building local lib', 'uuid')
           
            untarFile(path=conf.path, fname='e2fsprogs-1.40-uuid.tar')
            
            fname='e2fsprogs-1.40-uuid'
            driverNode = conf.path.make_node(join(fname, 'lib', 'uuid'))
            
            writeConfig(conf, uuid_callback, 'uuid', infile='uuid_types.h.in',
                        outfile='uuid_types.h', path = driverNode, 
                        feature='m4subst', substDict=defs)
            
        else:
            if conf.check(lib='uuid', uselib_store='UUID',
                       header_name='uuid/uuid.h', function_name='uuid_generate',
                       msg='Checking for library uuid',
                       mandatory=False):
                           conf.undefine('HAVE_UUID_GENERATE')

def build(bld):
    variant = bld.env['VARIANT']
    env = bld.all_envs[variant]

    driversNode = bld.path

    sourceFiles = []

    if 'MAKE_UUID' in env:
        
        fname = 'e2fsprogs-1.40-uuid'
        
        driverNode = driversNode.make_node(fname)
        
        d = {}
        for line in env['DEFINES']:
            split = line.split('=')
            k = split[0]
            v = len(split) == 2 and split[1] or '1'
            if v:
                d[k] = v
        
        sources = map(lambda x: 'lib/uuid/%s' % x,
                    'clear.c compare.c copy.c gen_uuid.c isnull.c pack.c parse.c ' \
                      'unpack.c unparse.c uuid_time.c'.split())
        uuid = bld(features='c c%s add_targets' % env['LIB_TYPE'] or 'stlib',
                                source=sources,
                                export_includes='lib',
                                includes='lib',
                                target='uuid',
                                name='UUID', path=driverNode,
                                env=env.derive(), 
                                defines=env['DEFINES'],
                                targets_to_add=[])
        if env['install_libs']:
            uuid.install_path = env['install_libdir']
        
        if env['install_headers']:
            includeNode = driverNode.make_node(os.path.join('lib', 'uuid'))
            bld(features='install_tgt', 
                install_path=os.path.join(env['install_includedir'], 'uuid'),
                dir=includeNode,
                files=['uuid.h'],
                name='UUID_HEADERS_INSTALL')
            uuid.targets_to_add = ['UUID_HEADERS_INSTALL']

        if env['install_source']:
            sourceFiles += [fname + '.tar']
            uuid.targets_to_add += ['UUID_SOURCE_INSTALL']

    if env['install_source']:
        sourceNode = driversNode.make_node('source')
        bld.install_tgt(files = sourceFiles,
                        dir = driversNode,
                        install_path = os.path.join('${PREFIX}',
                        sourceNode.path_from(driversNode)),
                        relative_trick=True,
                        name='UUID_SOURCE_INSTALL')

def distclean(context):
    #remove the untarred directories
    import shutil
    
    dirs = map(lambda d: os.path.join(context.path.abspath(), d),
               ['e2fsprogs-1.40-uuid'])
    for d in dirs:
        try:
            if os.path.exists(d):
                shutil.rmtree(d, ignore_errors=True)
        except:{}
    
