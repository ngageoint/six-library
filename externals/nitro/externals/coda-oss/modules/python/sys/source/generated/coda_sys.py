# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_coda_sys')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_coda_sys')
    _coda_sys = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_coda_sys', [dirname(__file__)])
        except ImportError:
            import _coda_sys
            return _coda_sys
        try:
            _mod = imp.load_module('_coda_sys', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _coda_sys = swig_import_helper()
    del swig_import_helper
else:
    import _coda_sys
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

NativeLayer_func__ = _coda_sys.NativeLayer_func__
SYS_FUNC = _coda_sys.SYS_FUNC

def isBigEndianSystem() -> "bool":
    """isBigEndianSystem() -> bool"""
    return _coda_sys.isBigEndianSystem()

def byteSwap(*args) -> "void":
    """
    byteSwap(void * buffer, unsigned short elemSize, size_t numElems)
    byteSwap(void const * buffer, unsigned short elemSize, size_t numElems, void * outputBuffer)
    """
    return _coda_sys.byteSwap(*args)

def alignedAlloc(*args) -> "void *":
    """
    alignedAlloc(size_t size, size_t alignment)
    alignedAlloc(size_t size) -> void *
    """
    return _coda_sys.alignedAlloc(*args)

def alignedFree(p: 'void *') -> "void":
    """alignedFree(void * p)"""
    return _coda_sys.alignedFree(p)
class UTCDateTime(_object):
    """Proxy of C++ sys::UTCDateTime class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UTCDateTime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UTCDateTime, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(sys::UTCDateTime self) -> UTCDateTime
        __init__(sys::UTCDateTime self, int hour, int minute, double second) -> UTCDateTime
        __init__(sys::UTCDateTime self, int year, int month, int day) -> UTCDateTime
        __init__(sys::UTCDateTime self, int year, int month, int day, int hour, int minute, double second) -> UTCDateTime
        __init__(sys::UTCDateTime self, double timeInMillis) -> UTCDateTime
        __init__(sys::UTCDateTime self, std::string const & time) -> UTCDateTime
        __init__(sys::UTCDateTime self, std::string const & time, std::string const & format) -> UTCDateTime
        """
        this = _coda_sys.new_UTCDateTime(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def format(self, *args) -> "std::string":
        """
        format(UTCDateTime self)
        format(UTCDateTime self) -> std::string
        """
        return _coda_sys.UTCDateTime_format(self, *args)

    __swig_destroy__ = _coda_sys.delete_UTCDateTime
    __del__ = lambda self: None
UTCDateTime_swigregister = _coda_sys.UTCDateTime_swigregister
UTCDateTime_swigregister(UTCDateTime)
cvar = _coda_sys.cvar
SSE_INSTRUCTION_ALIGNMENT = cvar.SSE_INSTRUCTION_ALIGNMENT


def __lshift__(os: 'std::ostream &', dateTime: 'UTCDateTime') -> "std::ostream &":
    """__lshift__(std::ostream & os, UTCDateTime dateTime) -> std::ostream &"""
    return _coda_sys.__lshift__(os, dateTime)

def __rshift__(arg1: 'std::istream &', dateTime: 'UTCDateTime') -> "std::istream &":
    """__rshift__(std::istream & arg1, UTCDateTime dateTime) -> std::istream &"""
    return _coda_sys.__rshift__(arg1, dateTime)
# This file is compatible with both classic and new-style classes.


