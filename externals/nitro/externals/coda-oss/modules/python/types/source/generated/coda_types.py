# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_coda_types')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_coda_types')
    _coda_types = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_coda_types', [dirname(__file__)])
        except ImportError:
            import _coda_types
            return _coda_types
        try:
            _mod = imp.load_module('_coda_types', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _coda_types = swig_import_helper()
    del swig_import_helper
else:
    import _coda_types
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _coda_types.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        """value(SwigPyIterator self) -> PyObject *"""
        return _coda_types.SwigPyIterator_value(self)


    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        incr(SwigPyIterator self) -> SwigPyIterator
        """
        return _coda_types.SwigPyIterator_incr(self, n)


    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        decr(SwigPyIterator self) -> SwigPyIterator
        """
        return _coda_types.SwigPyIterator_decr(self, n)


    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        """distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _coda_types.SwigPyIterator_distance(self, x)


    def equal(self, x: 'SwigPyIterator') -> "bool":
        """equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _coda_types.SwigPyIterator_equal(self, x)


    def copy(self) -> "swig::SwigPyIterator *":
        """copy(SwigPyIterator self) -> SwigPyIterator"""
        return _coda_types.SwigPyIterator_copy(self)


    def next(self) -> "PyObject *":
        """next(SwigPyIterator self) -> PyObject *"""
        return _coda_types.SwigPyIterator_next(self)


    def __next__(self) -> "PyObject *":
        """__next__(SwigPyIterator self) -> PyObject *"""
        return _coda_types.SwigPyIterator___next__(self)


    def previous(self) -> "PyObject *":
        """previous(SwigPyIterator self) -> PyObject *"""
        return _coda_types.SwigPyIterator_previous(self)


    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        """advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _coda_types.SwigPyIterator_advance(self, n)


    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        """__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _coda_types.SwigPyIterator___eq__(self, x)


    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        """__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _coda_types.SwigPyIterator___ne__(self, x)


    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        """__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _coda_types.SwigPyIterator___iadd__(self, n)


    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        """__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _coda_types.SwigPyIterator___isub__(self, n)


    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        """__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _coda_types.SwigPyIterator___add__(self, n)


    def __sub__(self, *args) -> "ptrdiff_t":
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _coda_types.SwigPyIterator___sub__(self, *args)

    def __iter__(self):
        return self
SwigPyIterator_swigregister = _coda_types.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import coda.coda_sys

from . import pickle

class RowColDouble(_object):
    """Proxy of C++ types::RowCol<(double)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RowColDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RowColDouble, name)
    __repr__ = _swig_repr
    __swig_setmethods__["row"] = _coda_types.RowColDouble_row_set
    __swig_getmethods__["row"] = _coda_types.RowColDouble_row_get
    if _newclass:
        row = _swig_property(_coda_types.RowColDouble_row_get, _coda_types.RowColDouble_row_set)
    __swig_setmethods__["col"] = _coda_types.RowColDouble_col_set
    __swig_getmethods__["col"] = _coda_types.RowColDouble_col_get
    if _newclass:
        col = _swig_property(_coda_types.RowColDouble_col_get, _coda_types.RowColDouble_col_set)

    def __init__(self, *args):
        """
        __init__(types::RowCol<(double)> self) -> RowColDouble
        __init__(types::RowCol<(double)> self, double r, double c) -> RowColDouble
        __init__(types::RowCol<(double)> self, std::pair< double,double > const & p) -> RowColDouble
        """
        this = _coda_types.new_RowColDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iadd__(self, scalar: 'double') -> "types::RowCol< double > &":
        """__iadd__(RowColDouble self, double scalar) -> RowColDouble"""
        return _coda_types.RowColDouble___iadd__(self, scalar)


    def __add__(self, scalar: 'double') -> "types::RowCol< double >":
        """__add__(RowColDouble self, double scalar) -> RowColDouble"""
        return _coda_types.RowColDouble___add__(self, scalar)


    def __isub__(self, scalar: 'double') -> "types::RowCol< double > &":
        """__isub__(RowColDouble self, double scalar) -> RowColDouble"""
        return _coda_types.RowColDouble___isub__(self, scalar)


    def __sub__(self, scalar: 'double') -> "types::RowCol< double >":
        """__sub__(RowColDouble self, double scalar) -> RowColDouble"""
        return _coda_types.RowColDouble___sub__(self, scalar)


    def __imul__(self, scalar: 'double') -> "types::RowCol< double > &":
        """__imul__(RowColDouble self, double scalar) -> RowColDouble"""
        return _coda_types.RowColDouble___imul__(self, scalar)


    def __mul__(self, scalar: 'double') -> "types::RowCol< double >":
        """__mul__(RowColDouble self, double scalar) -> RowColDouble"""
        return _coda_types.RowColDouble___mul__(self, scalar)


    def __itruediv__(self, *args):
        return _coda_types.RowColDouble___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _coda_types.RowColDouble___truediv__(self, *args)
    __div__ = __truediv__



    def __eq__(self, p: 'RowColDouble') -> "bool":
        """__eq__(RowColDouble self, RowColDouble p) -> bool"""
        return _coda_types.RowColDouble___eq__(self, p)


    def __ne__(self, p: 'RowColDouble') -> "bool":
        """__ne__(RowColDouble self, RowColDouble p) -> bool"""
        return _coda_types.RowColDouble___ne__(self, p)


    def area(self) -> "double":
        """area(RowColDouble self) -> double"""
        return _coda_types.RowColDouble_area(self)


    def normL2(self) -> "double":
        """normL2(RowColDouble self) -> double"""
        return _coda_types.RowColDouble_normL2(self)


    def __getstate__(self):
        return (self.row, self.col)

    def __setstate__(self, state):
        self.__init__(state[0], state[1])

    __swig_destroy__ = _coda_types.delete_RowColDouble
    __del__ = lambda self: None
RowColDouble_swigregister = _coda_types.RowColDouble_swigregister
RowColDouble_swigregister(RowColDouble)

class RowColInt(_object):
    """Proxy of C++ types::RowCol<(sys::SSize_T)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RowColInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RowColInt, name)
    __repr__ = _swig_repr
    __swig_setmethods__["row"] = _coda_types.RowColInt_row_set
    __swig_getmethods__["row"] = _coda_types.RowColInt_row_get
    if _newclass:
        row = _swig_property(_coda_types.RowColInt_row_get, _coda_types.RowColInt_row_set)
    __swig_setmethods__["col"] = _coda_types.RowColInt_col_set
    __swig_getmethods__["col"] = _coda_types.RowColInt_col_get
    if _newclass:
        col = _swig_property(_coda_types.RowColInt_col_get, _coda_types.RowColInt_col_set)

    def __init__(self, *args):
        """
        __init__(types::RowCol<(sys::SSize_T)> self) -> RowColInt
        __init__(types::RowCol<(sys::SSize_T)> self, ssize_t r, ssize_t c) -> RowColInt
        __init__(types::RowCol<(sys::SSize_T)> self, std::pair< ssize_t,ssize_t > const & p) -> RowColInt
        """
        this = _coda_types.new_RowColInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iadd__(self, scalar: 'ssize_t') -> "types::RowCol< sys::SSize_T > &":
        """__iadd__(RowColInt self, ssize_t scalar) -> RowColInt"""
        return _coda_types.RowColInt___iadd__(self, scalar)


    def __add__(self, scalar: 'ssize_t') -> "types::RowCol< sys::SSize_T >":
        """__add__(RowColInt self, ssize_t scalar) -> RowColInt"""
        return _coda_types.RowColInt___add__(self, scalar)


    def __isub__(self, scalar: 'ssize_t') -> "types::RowCol< sys::SSize_T > &":
        """__isub__(RowColInt self, ssize_t scalar) -> RowColInt"""
        return _coda_types.RowColInt___isub__(self, scalar)


    def __sub__(self, scalar: 'ssize_t') -> "types::RowCol< sys::SSize_T >":
        """__sub__(RowColInt self, ssize_t scalar) -> RowColInt"""
        return _coda_types.RowColInt___sub__(self, scalar)


    def __imul__(self, scalar: 'ssize_t') -> "types::RowCol< sys::SSize_T > &":
        """__imul__(RowColInt self, ssize_t scalar) -> RowColInt"""
        return _coda_types.RowColInt___imul__(self, scalar)


    def __mul__(self, scalar: 'ssize_t') -> "types::RowCol< sys::SSize_T >":
        """__mul__(RowColInt self, ssize_t scalar) -> RowColInt"""
        return _coda_types.RowColInt___mul__(self, scalar)


    def __itruediv__(self, *args):
        return _coda_types.RowColInt___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _coda_types.RowColInt___truediv__(self, *args)
    __div__ = __truediv__



    def __eq__(self, p: 'RowColInt') -> "bool":
        """__eq__(RowColInt self, RowColInt p) -> bool"""
        return _coda_types.RowColInt___eq__(self, p)


    def __ne__(self, p: 'RowColInt') -> "bool":
        """__ne__(RowColInt self, RowColInt p) -> bool"""
        return _coda_types.RowColInt___ne__(self, p)


    def area(self) -> "ssize_t":
        """area(RowColInt self) -> ssize_t"""
        return _coda_types.RowColInt_area(self)


    def normL2(self) -> "ssize_t":
        """normL2(RowColInt self) -> ssize_t"""
        return _coda_types.RowColInt_normL2(self)


    def __getstate__(self):
        return (self.row, self.col)

    def __setstate__(self, state):
        self.__init__(state[0], state[1])

    __swig_destroy__ = _coda_types.delete_RowColInt
    __del__ = lambda self: None
RowColInt_swigregister = _coda_types.RowColInt_swigregister
RowColInt_swigregister(RowColInt)

class RowColSizeT(_object):
    """Proxy of C++ types::RowCol<(size_t)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RowColSizeT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RowColSizeT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["row"] = _coda_types.RowColSizeT_row_set
    __swig_getmethods__["row"] = _coda_types.RowColSizeT_row_get
    if _newclass:
        row = _swig_property(_coda_types.RowColSizeT_row_get, _coda_types.RowColSizeT_row_set)
    __swig_setmethods__["col"] = _coda_types.RowColSizeT_col_set
    __swig_getmethods__["col"] = _coda_types.RowColSizeT_col_get
    if _newclass:
        col = _swig_property(_coda_types.RowColSizeT_col_get, _coda_types.RowColSizeT_col_set)

    def __init__(self, *args):
        """
        __init__(types::RowCol<(size_t)> self) -> RowColSizeT
        __init__(types::RowCol<(size_t)> self, size_t r, size_t c) -> RowColSizeT
        __init__(types::RowCol<(size_t)> self, std::pair< size_t,size_t > const & p) -> RowColSizeT
        """
        this = _coda_types.new_RowColSizeT(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iadd__(self, scalar: 'size_t') -> "types::RowCol< size_t > &":
        """__iadd__(RowColSizeT self, size_t scalar) -> RowColSizeT"""
        return _coda_types.RowColSizeT___iadd__(self, scalar)


    def __add__(self, scalar: 'size_t') -> "types::RowCol< size_t >":
        """__add__(RowColSizeT self, size_t scalar) -> RowColSizeT"""
        return _coda_types.RowColSizeT___add__(self, scalar)


    def __isub__(self, scalar: 'size_t') -> "types::RowCol< size_t > &":
        """__isub__(RowColSizeT self, size_t scalar) -> RowColSizeT"""
        return _coda_types.RowColSizeT___isub__(self, scalar)


    def __sub__(self, scalar: 'size_t') -> "types::RowCol< size_t >":
        """__sub__(RowColSizeT self, size_t scalar) -> RowColSizeT"""
        return _coda_types.RowColSizeT___sub__(self, scalar)


    def __imul__(self, scalar: 'size_t') -> "types::RowCol< size_t > &":
        """__imul__(RowColSizeT self, size_t scalar) -> RowColSizeT"""
        return _coda_types.RowColSizeT___imul__(self, scalar)


    def __mul__(self, scalar: 'size_t') -> "types::RowCol< size_t >":
        """__mul__(RowColSizeT self, size_t scalar) -> RowColSizeT"""
        return _coda_types.RowColSizeT___mul__(self, scalar)


    def __itruediv__(self, *args):
        return _coda_types.RowColSizeT___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _coda_types.RowColSizeT___truediv__(self, *args)
    __div__ = __truediv__



    def __eq__(self, p: 'RowColSizeT') -> "bool":
        """__eq__(RowColSizeT self, RowColSizeT p) -> bool"""
        return _coda_types.RowColSizeT___eq__(self, p)


    def __ne__(self, p: 'RowColSizeT') -> "bool":
        """__ne__(RowColSizeT self, RowColSizeT p) -> bool"""
        return _coda_types.RowColSizeT___ne__(self, p)


    def area(self) -> "size_t":
        """area(RowColSizeT self) -> size_t"""
        return _coda_types.RowColSizeT_area(self)


    def normL2(self) -> "size_t":
        """normL2(RowColSizeT self) -> size_t"""
        return _coda_types.RowColSizeT_normL2(self)


    def __getstate__(self):
        return (self.row, self.col)

    def __setstate__(self, state):
        self.__init__(state[0], state[1])

    __swig_destroy__ = _coda_types.delete_RowColSizeT
    __del__ = lambda self: None
RowColSizeT_swigregister = _coda_types.RowColSizeT_swigregister
RowColSizeT_swigregister(RowColSizeT)

class RgAzDouble(_object):
    """Proxy of C++ types::RgAz<(double)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RgAzDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RgAzDouble, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rg"] = _coda_types.RgAzDouble_rg_set
    __swig_getmethods__["rg"] = _coda_types.RgAzDouble_rg_get
    if _newclass:
        rg = _swig_property(_coda_types.RgAzDouble_rg_get, _coda_types.RgAzDouble_rg_set)
    __swig_setmethods__["az"] = _coda_types.RgAzDouble_az_set
    __swig_getmethods__["az"] = _coda_types.RgAzDouble_az_get
    if _newclass:
        az = _swig_property(_coda_types.RgAzDouble_az_get, _coda_types.RgAzDouble_az_set)

    def __init__(self, *args):
        """
        __init__(types::RgAz<(double)> self) -> RgAzDouble
        __init__(types::RgAz<(double)> self, double r, double c) -> RgAzDouble
        __init__(types::RgAz<(double)> self, std::pair< double,double > const & p) -> RgAzDouble
        """
        this = _coda_types.new_RgAzDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iadd__(self, scalar: 'double') -> "types::RgAz< double > &":
        """__iadd__(RgAzDouble self, double scalar) -> RgAzDouble"""
        return _coda_types.RgAzDouble___iadd__(self, scalar)


    def __add__(self, scalar: 'double') -> "types::RgAz< double >":
        """__add__(RgAzDouble self, double scalar) -> RgAzDouble"""
        return _coda_types.RgAzDouble___add__(self, scalar)


    def __isub__(self, scalar: 'double') -> "types::RgAz< double > &":
        """__isub__(RgAzDouble self, double scalar) -> RgAzDouble"""
        return _coda_types.RgAzDouble___isub__(self, scalar)


    def __sub__(self, scalar: 'double') -> "types::RgAz< double >":
        """__sub__(RgAzDouble self, double scalar) -> RgAzDouble"""
        return _coda_types.RgAzDouble___sub__(self, scalar)


    def __imul__(self, scalar: 'double') -> "types::RgAz< double > &":
        """__imul__(RgAzDouble self, double scalar) -> RgAzDouble"""
        return _coda_types.RgAzDouble___imul__(self, scalar)


    def __mul__(self, scalar: 'double') -> "types::RgAz< double >":
        """__mul__(RgAzDouble self, double scalar) -> RgAzDouble"""
        return _coda_types.RgAzDouble___mul__(self, scalar)


    def __itruediv__(self, *args):
        return _coda_types.RgAzDouble___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _coda_types.RgAzDouble___truediv__(self, *args)
    __div__ = __truediv__



    def __eq__(self, p: 'RgAzDouble') -> "bool":
        """__eq__(RgAzDouble self, RgAzDouble p) -> bool"""
        return _coda_types.RgAzDouble___eq__(self, p)


    def __ne__(self, p: 'RgAzDouble') -> "bool":
        """__ne__(RgAzDouble self, RgAzDouble p) -> bool"""
        return _coda_types.RgAzDouble___ne__(self, p)


    def __getstate__(self):
        return (self.rg, self.az)

    def __setstate__(self, state):
        self.__init__(state[0], state[1])

    __swig_destroy__ = _coda_types.delete_RgAzDouble
    __del__ = lambda self: None
RgAzDouble_swigregister = _coda_types.RgAzDouble_swigregister
RgAzDouble_swigregister(RgAzDouble)

class VectorRowColInt(_object):
    """Proxy of C++ std::vector<(types::RowCol<(sys::SSize_T)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorRowColInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorRowColInt, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(VectorRowColInt self) -> SwigPyIterator"""
        return _coda_types.VectorRowColInt_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(VectorRowColInt self) -> bool"""
        return _coda_types.VectorRowColInt___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(VectorRowColInt self) -> bool"""
        return _coda_types.VectorRowColInt___bool__(self)


    def __len__(self) -> "std::vector< types::RowCol< ssize_t > >::size_type":
        """__len__(VectorRowColInt self) -> std::vector< types::RowCol< ssize_t > >::size_type"""
        return _coda_types.VectorRowColInt___len__(self)


    def __getslice__(self, i: 'std::vector< types::RowCol< ssize_t > >::difference_type', j: 'std::vector< types::RowCol< ssize_t > >::difference_type') -> "std::vector< types::RowCol< sys::SSize_T >,std::allocator< types::RowCol< sys::SSize_T > > > *":
        """__getslice__(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::difference_type i, std::vector< types::RowCol< ssize_t > >::difference_type j) -> VectorRowColInt"""
        return _coda_types.VectorRowColInt___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::difference_type i, std::vector< types::RowCol< ssize_t > >::difference_type j)
        __setslice__(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::difference_type i, std::vector< types::RowCol< ssize_t > >::difference_type j, VectorRowColInt v)
        """
        return _coda_types.VectorRowColInt___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< types::RowCol< ssize_t > >::difference_type', j: 'std::vector< types::RowCol< ssize_t > >::difference_type') -> "void":
        """__delslice__(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::difference_type i, std::vector< types::RowCol< ssize_t > >::difference_type j)"""
        return _coda_types.VectorRowColInt___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::difference_type i)
        __delitem__(VectorRowColInt self, PySliceObject * slice)
        """
        return _coda_types.VectorRowColInt___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< types::RowCol< ssize_t > >::value_type const &":
        """
        __getitem__(VectorRowColInt self, PySliceObject * slice) -> VectorRowColInt
        __getitem__(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::difference_type i) -> RowColInt
        """
        return _coda_types.VectorRowColInt___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(VectorRowColInt self, PySliceObject * slice, VectorRowColInt v)
        __setitem__(VectorRowColInt self, PySliceObject * slice)
        __setitem__(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::difference_type i, RowColInt x)
        """
        return _coda_types.VectorRowColInt___setitem__(self, *args)


    def pop(self) -> "std::vector< types::RowCol< ssize_t > >::value_type":
        """pop(VectorRowColInt self) -> RowColInt"""
        return _coda_types.VectorRowColInt_pop(self)


    def append(self, x: 'RowColInt') -> "void":
        """append(VectorRowColInt self, RowColInt x)"""
        return _coda_types.VectorRowColInt_append(self, x)


    def empty(self) -> "bool":
        """empty(VectorRowColInt self) -> bool"""
        return _coda_types.VectorRowColInt_empty(self)


    def size(self) -> "std::vector< types::RowCol< ssize_t > >::size_type":
        """size(VectorRowColInt self) -> std::vector< types::RowCol< ssize_t > >::size_type"""
        return _coda_types.VectorRowColInt_size(self)


    def swap(self, v: 'VectorRowColInt') -> "void":
        """swap(VectorRowColInt self, VectorRowColInt v)"""
        return _coda_types.VectorRowColInt_swap(self, v)


    def begin(self) -> "std::vector< types::RowCol< ssize_t > >::iterator":
        """begin(VectorRowColInt self) -> std::vector< types::RowCol< ssize_t > >::iterator"""
        return _coda_types.VectorRowColInt_begin(self)


    def end(self) -> "std::vector< types::RowCol< ssize_t > >::iterator":
        """end(VectorRowColInt self) -> std::vector< types::RowCol< ssize_t > >::iterator"""
        return _coda_types.VectorRowColInt_end(self)


    def rbegin(self) -> "std::vector< types::RowCol< ssize_t > >::reverse_iterator":
        """rbegin(VectorRowColInt self) -> std::vector< types::RowCol< ssize_t > >::reverse_iterator"""
        return _coda_types.VectorRowColInt_rbegin(self)


    def rend(self) -> "std::vector< types::RowCol< ssize_t > >::reverse_iterator":
        """rend(VectorRowColInt self) -> std::vector< types::RowCol< ssize_t > >::reverse_iterator"""
        return _coda_types.VectorRowColInt_rend(self)


    def clear(self) -> "void":
        """clear(VectorRowColInt self)"""
        return _coda_types.VectorRowColInt_clear(self)


    def get_allocator(self) -> "std::vector< types::RowCol< ssize_t > >::allocator_type":
        """get_allocator(VectorRowColInt self) -> std::vector< types::RowCol< ssize_t > >::allocator_type"""
        return _coda_types.VectorRowColInt_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(VectorRowColInt self)"""
        return _coda_types.VectorRowColInt_pop_back(self)


    def erase(self, *args) -> "std::vector< types::RowCol< ssize_t > >::iterator":
        """
        erase(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::iterator pos) -> std::vector< types::RowCol< ssize_t > >::iterator
        erase(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::iterator first, std::vector< types::RowCol< ssize_t > >::iterator last) -> std::vector< types::RowCol< ssize_t > >::iterator
        """
        return _coda_types.VectorRowColInt_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(types::RowCol<(sys::SSize_T)>)> self) -> VectorRowColInt
        __init__(std::vector<(types::RowCol<(sys::SSize_T)>)> self, VectorRowColInt arg2) -> VectorRowColInt
        __init__(std::vector<(types::RowCol<(sys::SSize_T)>)> self, std::vector< types::RowCol< ssize_t > >::size_type size) -> VectorRowColInt
        __init__(std::vector<(types::RowCol<(sys::SSize_T)>)> self, std::vector< types::RowCol< ssize_t > >::size_type size, RowColInt value) -> VectorRowColInt
        """
        this = _coda_types.new_VectorRowColInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'RowColInt') -> "void":
        """push_back(VectorRowColInt self, RowColInt x)"""
        return _coda_types.VectorRowColInt_push_back(self, x)


    def front(self) -> "std::vector< types::RowCol< ssize_t > >::value_type const &":
        """front(VectorRowColInt self) -> RowColInt"""
        return _coda_types.VectorRowColInt_front(self)


    def back(self) -> "std::vector< types::RowCol< ssize_t > >::value_type const &":
        """back(VectorRowColInt self) -> RowColInt"""
        return _coda_types.VectorRowColInt_back(self)


    def assign(self, n: 'std::vector< types::RowCol< ssize_t > >::size_type', x: 'RowColInt') -> "void":
        """assign(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::size_type n, RowColInt x)"""
        return _coda_types.VectorRowColInt_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::size_type new_size)
        resize(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::size_type new_size, RowColInt x)
        """
        return _coda_types.VectorRowColInt_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::iterator pos, RowColInt x) -> std::vector< types::RowCol< ssize_t > >::iterator
        insert(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::iterator pos, std::vector< types::RowCol< ssize_t > >::size_type n, RowColInt x)
        """
        return _coda_types.VectorRowColInt_insert(self, *args)


    def reserve(self, n: 'std::vector< types::RowCol< ssize_t > >::size_type') -> "void":
        """reserve(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::size_type n)"""
        return _coda_types.VectorRowColInt_reserve(self, n)


    def capacity(self) -> "std::vector< types::RowCol< ssize_t > >::size_type":
        """capacity(VectorRowColInt self) -> std::vector< types::RowCol< ssize_t > >::size_type"""
        return _coda_types.VectorRowColInt_capacity(self)


    def __getstate__(self):
    # Return a nonempty (thus non-false) tuple with dummy value in first position
        return (-1, tuple(pickle.dumps(elem) for elem in self))

    def __setstate__(self, state):
        self.__init__()
    # State will have a dummy entry in the first position
        for elem in state[1]:
            self.push_back(pickle.loads(elem))

    __swig_destroy__ = _coda_types.delete_VectorRowColInt
    __del__ = lambda self: None
VectorRowColInt_swigregister = _coda_types.VectorRowColInt_swigregister
VectorRowColInt_swigregister(VectorRowColInt)

class VectorRowColDouble(_object):
    """Proxy of C++ std::vector<(types::RowCol<(double)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorRowColDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorRowColDouble, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(VectorRowColDouble self) -> SwigPyIterator"""
        return _coda_types.VectorRowColDouble_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(VectorRowColDouble self) -> bool"""
        return _coda_types.VectorRowColDouble___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(VectorRowColDouble self) -> bool"""
        return _coda_types.VectorRowColDouble___bool__(self)


    def __len__(self) -> "std::vector< types::RowCol< double > >::size_type":
        """__len__(VectorRowColDouble self) -> std::vector< types::RowCol< double > >::size_type"""
        return _coda_types.VectorRowColDouble___len__(self)


    def __getslice__(self, i: 'std::vector< types::RowCol< double > >::difference_type', j: 'std::vector< types::RowCol< double > >::difference_type') -> "std::vector< types::RowCol< double >,std::allocator< types::RowCol< double > > > *":
        """__getslice__(VectorRowColDouble self, std::vector< types::RowCol< double > >::difference_type i, std::vector< types::RowCol< double > >::difference_type j) -> VectorRowColDouble"""
        return _coda_types.VectorRowColDouble___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(VectorRowColDouble self, std::vector< types::RowCol< double > >::difference_type i, std::vector< types::RowCol< double > >::difference_type j)
        __setslice__(VectorRowColDouble self, std::vector< types::RowCol< double > >::difference_type i, std::vector< types::RowCol< double > >::difference_type j, VectorRowColDouble v)
        """
        return _coda_types.VectorRowColDouble___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< types::RowCol< double > >::difference_type', j: 'std::vector< types::RowCol< double > >::difference_type') -> "void":
        """__delslice__(VectorRowColDouble self, std::vector< types::RowCol< double > >::difference_type i, std::vector< types::RowCol< double > >::difference_type j)"""
        return _coda_types.VectorRowColDouble___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(VectorRowColDouble self, std::vector< types::RowCol< double > >::difference_type i)
        __delitem__(VectorRowColDouble self, PySliceObject * slice)
        """
        return _coda_types.VectorRowColDouble___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< types::RowCol< double > >::value_type const &":
        """
        __getitem__(VectorRowColDouble self, PySliceObject * slice) -> VectorRowColDouble
        __getitem__(VectorRowColDouble self, std::vector< types::RowCol< double > >::difference_type i) -> RowColDouble
        """
        return _coda_types.VectorRowColDouble___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(VectorRowColDouble self, PySliceObject * slice, VectorRowColDouble v)
        __setitem__(VectorRowColDouble self, PySliceObject * slice)
        __setitem__(VectorRowColDouble self, std::vector< types::RowCol< double > >::difference_type i, RowColDouble x)
        """
        return _coda_types.VectorRowColDouble___setitem__(self, *args)


    def pop(self) -> "std::vector< types::RowCol< double > >::value_type":
        """pop(VectorRowColDouble self) -> RowColDouble"""
        return _coda_types.VectorRowColDouble_pop(self)


    def append(self, x: 'RowColDouble') -> "void":
        """append(VectorRowColDouble self, RowColDouble x)"""
        return _coda_types.VectorRowColDouble_append(self, x)


    def empty(self) -> "bool":
        """empty(VectorRowColDouble self) -> bool"""
        return _coda_types.VectorRowColDouble_empty(self)


    def size(self) -> "std::vector< types::RowCol< double > >::size_type":
        """size(VectorRowColDouble self) -> std::vector< types::RowCol< double > >::size_type"""
        return _coda_types.VectorRowColDouble_size(self)


    def swap(self, v: 'VectorRowColDouble') -> "void":
        """swap(VectorRowColDouble self, VectorRowColDouble v)"""
        return _coda_types.VectorRowColDouble_swap(self, v)


    def begin(self) -> "std::vector< types::RowCol< double > >::iterator":
        """begin(VectorRowColDouble self) -> std::vector< types::RowCol< double > >::iterator"""
        return _coda_types.VectorRowColDouble_begin(self)


    def end(self) -> "std::vector< types::RowCol< double > >::iterator":
        """end(VectorRowColDouble self) -> std::vector< types::RowCol< double > >::iterator"""
        return _coda_types.VectorRowColDouble_end(self)


    def rbegin(self) -> "std::vector< types::RowCol< double > >::reverse_iterator":
        """rbegin(VectorRowColDouble self) -> std::vector< types::RowCol< double > >::reverse_iterator"""
        return _coda_types.VectorRowColDouble_rbegin(self)


    def rend(self) -> "std::vector< types::RowCol< double > >::reverse_iterator":
        """rend(VectorRowColDouble self) -> std::vector< types::RowCol< double > >::reverse_iterator"""
        return _coda_types.VectorRowColDouble_rend(self)


    def clear(self) -> "void":
        """clear(VectorRowColDouble self)"""
        return _coda_types.VectorRowColDouble_clear(self)


    def get_allocator(self) -> "std::vector< types::RowCol< double > >::allocator_type":
        """get_allocator(VectorRowColDouble self) -> std::vector< types::RowCol< double > >::allocator_type"""
        return _coda_types.VectorRowColDouble_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(VectorRowColDouble self)"""
        return _coda_types.VectorRowColDouble_pop_back(self)


    def erase(self, *args) -> "std::vector< types::RowCol< double > >::iterator":
        """
        erase(VectorRowColDouble self, std::vector< types::RowCol< double > >::iterator pos) -> std::vector< types::RowCol< double > >::iterator
        erase(VectorRowColDouble self, std::vector< types::RowCol< double > >::iterator first, std::vector< types::RowCol< double > >::iterator last) -> std::vector< types::RowCol< double > >::iterator
        """
        return _coda_types.VectorRowColDouble_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(types::RowCol<(double)>)> self) -> VectorRowColDouble
        __init__(std::vector<(types::RowCol<(double)>)> self, VectorRowColDouble arg2) -> VectorRowColDouble
        __init__(std::vector<(types::RowCol<(double)>)> self, std::vector< types::RowCol< double > >::size_type size) -> VectorRowColDouble
        __init__(std::vector<(types::RowCol<(double)>)> self, std::vector< types::RowCol< double > >::size_type size, RowColDouble value) -> VectorRowColDouble
        """
        this = _coda_types.new_VectorRowColDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'RowColDouble') -> "void":
        """push_back(VectorRowColDouble self, RowColDouble x)"""
        return _coda_types.VectorRowColDouble_push_back(self, x)


    def front(self) -> "std::vector< types::RowCol< double > >::value_type const &":
        """front(VectorRowColDouble self) -> RowColDouble"""
        return _coda_types.VectorRowColDouble_front(self)


    def back(self) -> "std::vector< types::RowCol< double > >::value_type const &":
        """back(VectorRowColDouble self) -> RowColDouble"""
        return _coda_types.VectorRowColDouble_back(self)


    def assign(self, n: 'std::vector< types::RowCol< double > >::size_type', x: 'RowColDouble') -> "void":
        """assign(VectorRowColDouble self, std::vector< types::RowCol< double > >::size_type n, RowColDouble x)"""
        return _coda_types.VectorRowColDouble_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(VectorRowColDouble self, std::vector< types::RowCol< double > >::size_type new_size)
        resize(VectorRowColDouble self, std::vector< types::RowCol< double > >::size_type new_size, RowColDouble x)
        """
        return _coda_types.VectorRowColDouble_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(VectorRowColDouble self, std::vector< types::RowCol< double > >::iterator pos, RowColDouble x) -> std::vector< types::RowCol< double > >::iterator
        insert(VectorRowColDouble self, std::vector< types::RowCol< double > >::iterator pos, std::vector< types::RowCol< double > >::size_type n, RowColDouble x)
        """
        return _coda_types.VectorRowColDouble_insert(self, *args)


    def reserve(self, n: 'std::vector< types::RowCol< double > >::size_type') -> "void":
        """reserve(VectorRowColDouble self, std::vector< types::RowCol< double > >::size_type n)"""
        return _coda_types.VectorRowColDouble_reserve(self, n)


    def capacity(self) -> "std::vector< types::RowCol< double > >::size_type":
        """capacity(VectorRowColDouble self) -> std::vector< types::RowCol< double > >::size_type"""
        return _coda_types.VectorRowColDouble_capacity(self)


    def __getstate__(self):
    # Return a nonempty (thus non-false) tuple with dummy value in first position
        return (-1, tuple(pickle.dumps(elem) for elem in self))

    def __setstate__(self, state):
        self.__init__()
    # State will have a dummy entry in the first position
        for elem in state[1]:
            self.push_back(pickle.loads(elem))

    __swig_destroy__ = _coda_types.delete_VectorRowColDouble
    __del__ = lambda self: None
VectorRowColDouble_swigregister = _coda_types.VectorRowColDouble_swigregister
VectorRowColDouble_swigregister(VectorRowColDouble)

class VectorSizeT(_object):
    """Proxy of C++ std::vector<(size_t)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorSizeT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorSizeT, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(VectorSizeT self) -> SwigPyIterator"""
        return _coda_types.VectorSizeT_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(VectorSizeT self) -> bool"""
        return _coda_types.VectorSizeT___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(VectorSizeT self) -> bool"""
        return _coda_types.VectorSizeT___bool__(self)


    def __len__(self) -> "std::vector< size_t >::size_type":
        """__len__(VectorSizeT self) -> std::vector< size_t >::size_type"""
        return _coda_types.VectorSizeT___len__(self)


    def __getslice__(self, i: 'std::vector< size_t >::difference_type', j: 'std::vector< size_t >::difference_type') -> "std::vector< size_t,std::allocator< size_t > > *":
        """__getslice__(VectorSizeT self, std::vector< size_t >::difference_type i, std::vector< size_t >::difference_type j) -> VectorSizeT"""
        return _coda_types.VectorSizeT___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(VectorSizeT self, std::vector< size_t >::difference_type i, std::vector< size_t >::difference_type j)
        __setslice__(VectorSizeT self, std::vector< size_t >::difference_type i, std::vector< size_t >::difference_type j, VectorSizeT v)
        """
        return _coda_types.VectorSizeT___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< size_t >::difference_type', j: 'std::vector< size_t >::difference_type') -> "void":
        """__delslice__(VectorSizeT self, std::vector< size_t >::difference_type i, std::vector< size_t >::difference_type j)"""
        return _coda_types.VectorSizeT___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(VectorSizeT self, std::vector< size_t >::difference_type i)
        __delitem__(VectorSizeT self, PySliceObject * slice)
        """
        return _coda_types.VectorSizeT___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< size_t >::value_type const &":
        """
        __getitem__(VectorSizeT self, PySliceObject * slice) -> VectorSizeT
        __getitem__(VectorSizeT self, std::vector< size_t >::difference_type i) -> std::vector< size_t >::value_type const &
        """
        return _coda_types.VectorSizeT___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(VectorSizeT self, PySliceObject * slice, VectorSizeT v)
        __setitem__(VectorSizeT self, PySliceObject * slice)
        __setitem__(VectorSizeT self, std::vector< size_t >::difference_type i, std::vector< size_t >::value_type const & x)
        """
        return _coda_types.VectorSizeT___setitem__(self, *args)


    def pop(self) -> "std::vector< size_t >::value_type":
        """pop(VectorSizeT self) -> std::vector< size_t >::value_type"""
        return _coda_types.VectorSizeT_pop(self)


    def append(self, x: 'std::vector< size_t >::value_type const &') -> "void":
        """append(VectorSizeT self, std::vector< size_t >::value_type const & x)"""
        return _coda_types.VectorSizeT_append(self, x)


    def empty(self) -> "bool":
        """empty(VectorSizeT self) -> bool"""
        return _coda_types.VectorSizeT_empty(self)


    def size(self) -> "std::vector< size_t >::size_type":
        """size(VectorSizeT self) -> std::vector< size_t >::size_type"""
        return _coda_types.VectorSizeT_size(self)


    def swap(self, v: 'VectorSizeT') -> "void":
        """swap(VectorSizeT self, VectorSizeT v)"""
        return _coda_types.VectorSizeT_swap(self, v)


    def begin(self) -> "std::vector< size_t >::iterator":
        """begin(VectorSizeT self) -> std::vector< size_t >::iterator"""
        return _coda_types.VectorSizeT_begin(self)


    def end(self) -> "std::vector< size_t >::iterator":
        """end(VectorSizeT self) -> std::vector< size_t >::iterator"""
        return _coda_types.VectorSizeT_end(self)


    def rbegin(self) -> "std::vector< size_t >::reverse_iterator":
        """rbegin(VectorSizeT self) -> std::vector< size_t >::reverse_iterator"""
        return _coda_types.VectorSizeT_rbegin(self)


    def rend(self) -> "std::vector< size_t >::reverse_iterator":
        """rend(VectorSizeT self) -> std::vector< size_t >::reverse_iterator"""
        return _coda_types.VectorSizeT_rend(self)


    def clear(self) -> "void":
        """clear(VectorSizeT self)"""
        return _coda_types.VectorSizeT_clear(self)


    def get_allocator(self) -> "std::vector< size_t >::allocator_type":
        """get_allocator(VectorSizeT self) -> std::vector< size_t >::allocator_type"""
        return _coda_types.VectorSizeT_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(VectorSizeT self)"""
        return _coda_types.VectorSizeT_pop_back(self)


    def erase(self, *args) -> "std::vector< size_t >::iterator":
        """
        erase(VectorSizeT self, std::vector< size_t >::iterator pos) -> std::vector< size_t >::iterator
        erase(VectorSizeT self, std::vector< size_t >::iterator first, std::vector< size_t >::iterator last) -> std::vector< size_t >::iterator
        """
        return _coda_types.VectorSizeT_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(size_t)> self) -> VectorSizeT
        __init__(std::vector<(size_t)> self, VectorSizeT arg2) -> VectorSizeT
        __init__(std::vector<(size_t)> self, std::vector< size_t >::size_type size) -> VectorSizeT
        __init__(std::vector<(size_t)> self, std::vector< size_t >::size_type size, std::vector< size_t >::value_type const & value) -> VectorSizeT
        """
        this = _coda_types.new_VectorSizeT(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< size_t >::value_type const &') -> "void":
        """push_back(VectorSizeT self, std::vector< size_t >::value_type const & x)"""
        return _coda_types.VectorSizeT_push_back(self, x)


    def front(self) -> "std::vector< size_t >::value_type const &":
        """front(VectorSizeT self) -> std::vector< size_t >::value_type const &"""
        return _coda_types.VectorSizeT_front(self)


    def back(self) -> "std::vector< size_t >::value_type const &":
        """back(VectorSizeT self) -> std::vector< size_t >::value_type const &"""
        return _coda_types.VectorSizeT_back(self)


    def assign(self, n: 'std::vector< size_t >::size_type', x: 'std::vector< size_t >::value_type const &') -> "void":
        """assign(VectorSizeT self, std::vector< size_t >::size_type n, std::vector< size_t >::value_type const & x)"""
        return _coda_types.VectorSizeT_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(VectorSizeT self, std::vector< size_t >::size_type new_size)
        resize(VectorSizeT self, std::vector< size_t >::size_type new_size, std::vector< size_t >::value_type const & x)
        """
        return _coda_types.VectorSizeT_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(VectorSizeT self, std::vector< size_t >::iterator pos, std::vector< size_t >::value_type const & x) -> std::vector< size_t >::iterator
        insert(VectorSizeT self, std::vector< size_t >::iterator pos, std::vector< size_t >::size_type n, std::vector< size_t >::value_type const & x)
        """
        return _coda_types.VectorSizeT_insert(self, *args)


    def reserve(self, n: 'std::vector< size_t >::size_type') -> "void":
        """reserve(VectorSizeT self, std::vector< size_t >::size_type n)"""
        return _coda_types.VectorSizeT_reserve(self, n)


    def capacity(self) -> "std::vector< size_t >::size_type":
        """capacity(VectorSizeT self) -> std::vector< size_t >::size_type"""
        return _coda_types.VectorSizeT_capacity(self)


    def __getstate__(self):
    # Return a nonempty (thus non-false) tuple with dummy value in first position
        return (-1, tuple(pickle.dumps(elem) for elem in self))

    def __setstate__(self, state):
        self.__init__()
    # State will have a dummy entry in the first position
        for elem in state[1]:
            self.push_back(pickle.loads(elem))

    __swig_destroy__ = _coda_types.delete_VectorSizeT
    __del__ = lambda self: None
VectorSizeT_swigregister = _coda_types.VectorSizeT_swigregister
VectorSizeT_swigregister(VectorSizeT)

class VectorString(_object):
    """Proxy of C++ std::vector<(std::string)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorString, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(VectorString self) -> SwigPyIterator"""
        return _coda_types.VectorString_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(VectorString self) -> bool"""
        return _coda_types.VectorString___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(VectorString self) -> bool"""
        return _coda_types.VectorString___bool__(self)


    def __len__(self) -> "std::vector< std::string >::size_type":
        """__len__(VectorString self) -> std::vector< std::string >::size_type"""
        return _coda_types.VectorString___len__(self)


    def __getslice__(self, i: 'std::vector< std::string >::difference_type', j: 'std::vector< std::string >::difference_type') -> "std::vector< std::string,std::allocator< std::string > > *":
        """__getslice__(VectorString self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> VectorString"""
        return _coda_types.VectorString___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(VectorString self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)
        __setslice__(VectorString self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, VectorString v)
        """
        return _coda_types.VectorString___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< std::string >::difference_type', j: 'std::vector< std::string >::difference_type') -> "void":
        """__delslice__(VectorString self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)"""
        return _coda_types.VectorString___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(VectorString self, std::vector< std::string >::difference_type i)
        __delitem__(VectorString self, PySliceObject * slice)
        """
        return _coda_types.VectorString___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< std::string >::value_type const &":
        """
        __getitem__(VectorString self, PySliceObject * slice) -> VectorString
        __getitem__(VectorString self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &
        """
        return _coda_types.VectorString___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(VectorString self, PySliceObject * slice, VectorString v)
        __setitem__(VectorString self, PySliceObject * slice)
        __setitem__(VectorString self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)
        """
        return _coda_types.VectorString___setitem__(self, *args)


    def pop(self) -> "std::vector< std::string >::value_type":
        """pop(VectorString self) -> std::vector< std::string >::value_type"""
        return _coda_types.VectorString_pop(self)


    def append(self, x: 'std::vector< std::string >::value_type const &') -> "void":
        """append(VectorString self, std::vector< std::string >::value_type const & x)"""
        return _coda_types.VectorString_append(self, x)


    def empty(self) -> "bool":
        """empty(VectorString self) -> bool"""
        return _coda_types.VectorString_empty(self)


    def size(self) -> "std::vector< std::string >::size_type":
        """size(VectorString self) -> std::vector< std::string >::size_type"""
        return _coda_types.VectorString_size(self)


    def swap(self, v: 'VectorString') -> "void":
        """swap(VectorString self, VectorString v)"""
        return _coda_types.VectorString_swap(self, v)


    def begin(self) -> "std::vector< std::string >::iterator":
        """begin(VectorString self) -> std::vector< std::string >::iterator"""
        return _coda_types.VectorString_begin(self)


    def end(self) -> "std::vector< std::string >::iterator":
        """end(VectorString self) -> std::vector< std::string >::iterator"""
        return _coda_types.VectorString_end(self)


    def rbegin(self) -> "std::vector< std::string >::reverse_iterator":
        """rbegin(VectorString self) -> std::vector< std::string >::reverse_iterator"""
        return _coda_types.VectorString_rbegin(self)


    def rend(self) -> "std::vector< std::string >::reverse_iterator":
        """rend(VectorString self) -> std::vector< std::string >::reverse_iterator"""
        return _coda_types.VectorString_rend(self)


    def clear(self) -> "void":
        """clear(VectorString self)"""
        return _coda_types.VectorString_clear(self)


    def get_allocator(self) -> "std::vector< std::string >::allocator_type":
        """get_allocator(VectorString self) -> std::vector< std::string >::allocator_type"""
        return _coda_types.VectorString_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(VectorString self)"""
        return _coda_types.VectorString_pop_back(self)


    def erase(self, *args) -> "std::vector< std::string >::iterator":
        """
        erase(VectorString self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator
        erase(VectorString self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator
        """
        return _coda_types.VectorString_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::string)> self) -> VectorString
        __init__(std::vector<(std::string)> self, VectorString arg2) -> VectorString
        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size) -> VectorString
        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> VectorString
        """
        this = _coda_types.new_VectorString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< std::string >::value_type const &') -> "void":
        """push_back(VectorString self, std::vector< std::string >::value_type const & x)"""
        return _coda_types.VectorString_push_back(self, x)


    def front(self) -> "std::vector< std::string >::value_type const &":
        """front(VectorString self) -> std::vector< std::string >::value_type const &"""
        return _coda_types.VectorString_front(self)


    def back(self) -> "std::vector< std::string >::value_type const &":
        """back(VectorString self) -> std::vector< std::string >::value_type const &"""
        return _coda_types.VectorString_back(self)


    def assign(self, n: 'std::vector< std::string >::size_type', x: 'std::vector< std::string >::value_type const &') -> "void":
        """assign(VectorString self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)"""
        return _coda_types.VectorString_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(VectorString self, std::vector< std::string >::size_type new_size)
        resize(VectorString self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)
        """
        return _coda_types.VectorString_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(VectorString self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator
        insert(VectorString self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)
        """
        return _coda_types.VectorString_insert(self, *args)


    def reserve(self, n: 'std::vector< std::string >::size_type') -> "void":
        """reserve(VectorString self, std::vector< std::string >::size_type n)"""
        return _coda_types.VectorString_reserve(self, n)


    def capacity(self) -> "std::vector< std::string >::size_type":
        """capacity(VectorString self) -> std::vector< std::string >::size_type"""
        return _coda_types.VectorString_capacity(self)


    def __getstate__(self):
    # Return a nonempty (thus non-false) tuple with dummy value in first position
        return (-1, tuple(pickle.dumps(elem) for elem in self))

    def __setstate__(self, state):
        self.__init__()
    # State will have a dummy entry in the first position
        for elem in state[1]:
            self.push_back(pickle.loads(elem))

    __swig_destroy__ = _coda_types.delete_VectorString
    __del__ = lambda self: None
VectorString_swigregister = _coda_types.VectorString_swigregister
VectorString_swigregister(VectorString)

# This file is compatible with both classic and new-style classes.


