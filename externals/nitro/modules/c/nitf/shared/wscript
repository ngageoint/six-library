import os, subprocess
from waflib import Options
from os.path import splitext, dirname, join

MAINTAINER         = 'adam.sylvester@mdaus.com'
LANG               = 'c'
USE                = 'nitf-c'
PLUGIN             = 'nitf'
REMOVEPLUGINPREFIX = True
DEFINES            = ['NITF_MODULE_EXPORTS']

distclean = lambda p: None

def options(opt):
    opt.add_option('--enable-static-tres', action='store_true', default=False, dest='enable_static_tres',
                   help='Enable static TRE support')

def configure(conf):
    # If it's already defined in a wscript, don't touch
    if not conf.env['enable_static_tres']:
        conf.env['enable_static_tres'] = Options.options.enable_static_tres

def build(bld):
    variant = bld.env['VARIANT'] or 'default'
    env = bld.all_envs[variant]

    pluginList = []
    tres = bld.path.ant_glob('*.c')

    for tre in tres:
        filename = str(tre)

        # We're building a single source file so don't have any includes
        # If we don't blank out INCLUDES and EXPORT_INCLUDES, 'waf msvs' has
        # problems complaining include directories don't exist (which is fair
        # since they don't)
        kw = globals()
        treName = splitext(filename)[0]
        kw['LIBNAME'] = treName
        kw['INCLUDES'] = []
        kw['EXPORT_INCLUDES'] = []
        kw['VERSION'] = bld.env['VERSION']

        # Build the TRE as a plugin
        kw['NAME'] = treName
        kw['SOURCE'] = filename
        bld.plugin(**kw)
        pluginList.append(treName)

        # Build the TRE as a static library
        if env['enable_static_tres']:
            staticName = treName + '-static'
            kw['NAME'] = staticName
            kw['LIBNAME'] = staticName

            bld.module(**kw)

    bld(features='add_targets', target='nitro-plugins',
        targets_to_add=pluginList)
