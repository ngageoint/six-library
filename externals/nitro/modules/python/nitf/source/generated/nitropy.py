# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_nitropy')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_nitropy')
    _nitropy = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_nitropy', [dirname(__file__)])
        except ImportError:
            import _nitropy
            return _nitropy
        try:
            _mod = imp.load_module('_nitropy', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _nitropy = swig_import_helper()
    del swig_import_helper
else:
    import _nitropy
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

NRT_DEFAULT_PERM = _nitropy.NRT_DEFAULT_PERM
NRT_INVALID_HANDLE_VALUE = _nitropy.NRT_INVALID_HANDLE_VALUE
NRT_OPEN_EXISTING = _nitropy.NRT_OPEN_EXISTING
NRT_MAX_PATH = _nitropy.NRT_MAX_PATH
NRT_SUCCESS = _nitropy.NRT_SUCCESS
NRT_FAILURE = _nitropy.NRT_FAILURE
NRT_TRUE = _nitropy.NRT_TRUE
NRT_FALSE = _nitropy.NRT_FALSE
NRT_CORNERS_UNKNOWN = _nitropy.NRT_CORNERS_UNKNOWN
NRT_CORNERS_UTM = _nitropy.NRT_CORNERS_UTM
NRT_CORNERS_UTM_UPS_S = _nitropy.NRT_CORNERS_UTM_UPS_S
NRT_CORNERS_UTM_UPS_N = _nitropy.NRT_CORNERS_UTM_UPS_N
NRT_CORNERS_GEO = _nitropy.NRT_CORNERS_GEO
NRT_CORNERS_DECIMAL = _nitropy.NRT_CORNERS_DECIMAL

def nrt_System_swap16(ins: 'uint16_t') -> "uint16_t":
    return _nitropy.nrt_System_swap16(ins)
nrt_System_swap16 = _nitropy.nrt_System_swap16

def nrt_System_swap32(inl: 'uint32_t') -> "uint32_t":
    return _nitropy.nrt_System_swap32(inl)
nrt_System_swap32 = _nitropy.nrt_System_swap32

def nrt_System_swap64(inl: 'uint64_t') -> "uint64_t":
    return _nitropy.nrt_System_swap64(inl)
nrt_System_swap64 = _nitropy.nrt_System_swap64

def nrt_System_swap64c(inl: 'uint64_t') -> "uint64_t":
    return _nitropy.nrt_System_swap64c(inl)
nrt_System_swap64c = _nitropy.nrt_System_swap64c
NITF_VER_20 = _nitropy.NITF_VER_20
NITF_VER_21 = _nitropy.NITF_VER_21
NITF_VER_UNKNOWN = _nitropy.NITF_VER_UNKNOWN
NRT_MAX_EMESSAGE = _nitropy.NRT_MAX_EMESSAGE
NRT_NO_ERR = _nitropy.NRT_NO_ERR
NRT_ERR_MEMORY = _nitropy.NRT_ERR_MEMORY
NRT_ERR_OPENING_FILE = _nitropy.NRT_ERR_OPENING_FILE
NRT_ERR_READING_FROM_FILE = _nitropy.NRT_ERR_READING_FROM_FILE
NRT_ERR_SEEKING_IN_FILE = _nitropy.NRT_ERR_SEEKING_IN_FILE
NRT_ERR_WRITING_TO_FILE = _nitropy.NRT_ERR_WRITING_TO_FILE
NRT_ERR_STAT_FILE = _nitropy.NRT_ERR_STAT_FILE
NRT_ERR_LOADING_DLL = _nitropy.NRT_ERR_LOADING_DLL
NRT_ERR_UNLOADING_DLL = _nitropy.NRT_ERR_UNLOADING_DLL
NRT_ERR_RETRIEVING_DLL_HOOK = _nitropy.NRT_ERR_RETRIEVING_DLL_HOOK
NRT_ERR_UNINITIALIZED_DLL_READ = _nitropy.NRT_ERR_UNINITIALIZED_DLL_READ
NRT_ERR_INVALID_PARAMETER = _nitropy.NRT_ERR_INVALID_PARAMETER
NRT_ERR_INVALID_OBJECT = _nitropy.NRT_ERR_INVALID_OBJECT
NRT_ERR_INVALID_FILE = _nitropy.NRT_ERR_INVALID_FILE
NRT_ERR_COMPRESSION = _nitropy.NRT_ERR_COMPRESSION
NRT_ERR_DECOMPRESSION = _nitropy.NRT_ERR_DECOMPRESSION
NRT_ERR_PARSING_FILE = _nitropy.NRT_ERR_PARSING_FILE
NRT_ERR_INT_STACK_OVERFLOW = _nitropy.NRT_ERR_INT_STACK_OVERFLOW
NRT_ERR_UNK = _nitropy.NRT_ERR_UNK
class nrt_Error(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nrt_Error, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nrt_Error, name)
    __repr__ = _swig_repr
    __swig_setmethods__["message"] = _nitropy.nrt_Error_message_set
    __swig_getmethods__["message"] = _nitropy.nrt_Error_message_get
    if _newclass:
        message = _swig_property(_nitropy.nrt_Error_message_get, _nitropy.nrt_Error_message_set)
    __swig_setmethods__["file"] = _nitropy.nrt_Error_file_set
    __swig_getmethods__["file"] = _nitropy.nrt_Error_file_get
    if _newclass:
        file = _swig_property(_nitropy.nrt_Error_file_get, _nitropy.nrt_Error_file_set)
    __swig_setmethods__["line"] = _nitropy.nrt_Error_line_set
    __swig_getmethods__["line"] = _nitropy.nrt_Error_line_get
    if _newclass:
        line = _swig_property(_nitropy.nrt_Error_line_get, _nitropy.nrt_Error_line_set)
    __swig_setmethods__["func"] = _nitropy.nrt_Error_func_set
    __swig_getmethods__["func"] = _nitropy.nrt_Error_func_get
    if _newclass:
        func = _swig_property(_nitropy.nrt_Error_func_get, _nitropy.nrt_Error_func_set)
    __swig_setmethods__["level"] = _nitropy.nrt_Error_level_set
    __swig_getmethods__["level"] = _nitropy.nrt_Error_level_get
    if _newclass:
        level = _swig_property(_nitropy.nrt_Error_level_get, _nitropy.nrt_Error_level_set)

    def __init__(self):
        this = _nitropy.new_nrt_Error()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nitropy.delete_nrt_Error
    __del__ = lambda self: None
nrt_Error_swigregister = _nitropy.nrt_Error_swigregister
nrt_Error_swigregister(nrt_Error)


def nrt_Error_init(error: 'nrt_Error', message: 'char const *', file: 'char const *', line: 'int', func: 'char const *', level: 'int') -> "void":
    return _nitropy.nrt_Error_init(error, message, file, line, func, level)
nrt_Error_init = _nitropy.nrt_Error_init

def nrt_Error_flogf(error: 'nrt_Error', file: 'FILE *', level: 'int', format: 'char const *') -> "void":
    return _nitropy.nrt_Error_flogf(error, file, level, format)
nrt_Error_flogf = _nitropy.nrt_Error_flogf

def nrt_Error_fprintf(error: 'nrt_Error', file: 'FILE *', format: 'char const *') -> "void":
    return _nitropy.nrt_Error_fprintf(error, file, format)
nrt_Error_fprintf = _nitropy.nrt_Error_fprintf

def nrt_Error_initf(error: 'nrt_Error', file: 'char const *', line: 'int', func: 'char const *', level: 'int', format: 'char const *') -> "void":
    return _nitropy.nrt_Error_initf(error, file, line, func, level, format)
nrt_Error_initf = _nitropy.nrt_Error_initf

def nrt_Error_print(error: 'nrt_Error', file: 'FILE *', userMessage: 'char const *') -> "void":
    return _nitropy.nrt_Error_print(error, file, userMessage)
nrt_Error_print = _nitropy.nrt_Error_print

def nrt_strerror(errnum: 'int') -> "char *":
    return _nitropy.nrt_strerror(errnum)
nrt_strerror = _nitropy.nrt_strerror
NRT_MAX_READ_ATTEMPTS = _nitropy.NRT_MAX_READ_ATTEMPTS

def nrt_IOHandle_create(fname: 'char const *', access: 'nrt_AccessFlags', creation: 'nrt_CreationFlags', error: 'nrt_Error') -> "nrt_IOHandle":
    return _nitropy.nrt_IOHandle_create(fname, access, creation, error)
nrt_IOHandle_create = _nitropy.nrt_IOHandle_create

def nrt_IOHandle_read(handle: 'nrt_IOHandle', buf: 'void *', size: 'size_t', error: 'nrt_Error') -> "bool":
    return _nitropy.nrt_IOHandle_read(handle, buf, size, error)
nrt_IOHandle_read = _nitropy.nrt_IOHandle_read

def nrt_IOHandle_write(handle: 'nrt_IOHandle', buf: 'void const *', size: 'size_t', error: 'nrt_Error') -> "bool":
    return _nitropy.nrt_IOHandle_write(handle, buf, size, error)
nrt_IOHandle_write = _nitropy.nrt_IOHandle_write

def nrt_IOHandle_seek(handle: 'nrt_IOHandle', offset: 'nrt_Off', whence: 'int', error: 'nrt_Error') -> "nrt_Off":
    return _nitropy.nrt_IOHandle_seek(handle, offset, whence, error)
nrt_IOHandle_seek = _nitropy.nrt_IOHandle_seek

def nrt_IOHandle_tell(handle: 'nrt_IOHandle', error: 'nrt_Error') -> "nrt_Off":
    return _nitropy.nrt_IOHandle_tell(handle, error)
nrt_IOHandle_tell = _nitropy.nrt_IOHandle_tell

def nrt_IOHandle_getSize(handle: 'nrt_IOHandle', error: 'nrt_Error') -> "nrt_Off":
    return _nitropy.nrt_IOHandle_getSize(handle, error)
nrt_IOHandle_getSize = _nitropy.nrt_IOHandle_getSize

def nrt_IOHandle_close(handle: 'nrt_IOHandle') -> "void":
    return _nitropy.nrt_IOHandle_close(handle)
nrt_IOHandle_close = _nitropy.nrt_IOHandle_close
class nrt_IIOInterface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nrt_IIOInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nrt_IIOInterface, name)
    __repr__ = _swig_repr
    __swig_setmethods__["read"] = _nitropy.nrt_IIOInterface_read_set
    __swig_getmethods__["read"] = _nitropy.nrt_IIOInterface_read_get
    if _newclass:
        read = _swig_property(_nitropy.nrt_IIOInterface_read_get, _nitropy.nrt_IIOInterface_read_set)
    __swig_setmethods__["write"] = _nitropy.nrt_IIOInterface_write_set
    __swig_getmethods__["write"] = _nitropy.nrt_IIOInterface_write_get
    if _newclass:
        write = _swig_property(_nitropy.nrt_IIOInterface_write_get, _nitropy.nrt_IIOInterface_write_set)
    __swig_setmethods__["canSeek"] = _nitropy.nrt_IIOInterface_canSeek_set
    __swig_getmethods__["canSeek"] = _nitropy.nrt_IIOInterface_canSeek_get
    if _newclass:
        canSeek = _swig_property(_nitropy.nrt_IIOInterface_canSeek_get, _nitropy.nrt_IIOInterface_canSeek_set)
    __swig_setmethods__["seek"] = _nitropy.nrt_IIOInterface_seek_set
    __swig_getmethods__["seek"] = _nitropy.nrt_IIOInterface_seek_get
    if _newclass:
        seek = _swig_property(_nitropy.nrt_IIOInterface_seek_get, _nitropy.nrt_IIOInterface_seek_set)
    __swig_setmethods__["tell"] = _nitropy.nrt_IIOInterface_tell_set
    __swig_getmethods__["tell"] = _nitropy.nrt_IIOInterface_tell_get
    if _newclass:
        tell = _swig_property(_nitropy.nrt_IIOInterface_tell_get, _nitropy.nrt_IIOInterface_tell_set)
    __swig_setmethods__["getSize"] = _nitropy.nrt_IIOInterface_getSize_set
    __swig_getmethods__["getSize"] = _nitropy.nrt_IIOInterface_getSize_get
    if _newclass:
        getSize = _swig_property(_nitropy.nrt_IIOInterface_getSize_get, _nitropy.nrt_IIOInterface_getSize_set)
    __swig_setmethods__["getMode"] = _nitropy.nrt_IIOInterface_getMode_set
    __swig_getmethods__["getMode"] = _nitropy.nrt_IIOInterface_getMode_get
    if _newclass:
        getMode = _swig_property(_nitropy.nrt_IIOInterface_getMode_get, _nitropy.nrt_IIOInterface_getMode_set)
    __swig_setmethods__["close"] = _nitropy.nrt_IIOInterface_close_set
    __swig_getmethods__["close"] = _nitropy.nrt_IIOInterface_close_get
    if _newclass:
        close = _swig_property(_nitropy.nrt_IIOInterface_close_get, _nitropy.nrt_IIOInterface_close_set)
    __swig_setmethods__["destruct"] = _nitropy.nrt_IIOInterface_destruct_set
    __swig_getmethods__["destruct"] = _nitropy.nrt_IIOInterface_destruct_get
    if _newclass:
        destruct = _swig_property(_nitropy.nrt_IIOInterface_destruct_get, _nitropy.nrt_IIOInterface_destruct_set)

    def __init__(self):
        this = _nitropy.new_nrt_IIOInterface()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nitropy.delete_nrt_IIOInterface
    __del__ = lambda self: None
nrt_IIOInterface_swigregister = _nitropy.nrt_IIOInterface_swigregister
nrt_IIOInterface_swigregister(nrt_IIOInterface)

class nrt_IOInterface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nrt_IOInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nrt_IOInterface, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _nitropy.nrt_IOInterface_data_set
    __swig_getmethods__["data"] = _nitropy.nrt_IOInterface_data_get
    if _newclass:
        data = _swig_property(_nitropy.nrt_IOInterface_data_get, _nitropy.nrt_IOInterface_data_set)
    __swig_setmethods__["iface"] = _nitropy.nrt_IOInterface_iface_set
    __swig_getmethods__["iface"] = _nitropy.nrt_IOInterface_iface_get
    if _newclass:
        iface = _swig_property(_nitropy.nrt_IOInterface_iface_get, _nitropy.nrt_IOInterface_iface_set)

    def __init__(self):
        this = _nitropy.new_nrt_IOInterface()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nitropy.delete_nrt_IOInterface
    __del__ = lambda self: None
nrt_IOInterface_swigregister = _nitropy.nrt_IOInterface_swigregister
nrt_IOInterface_swigregister(nrt_IOInterface)


def nrt_IOInterface_read(arg1: 'nrt_IOInterface', buf: 'void *', size: 'size_t', error: 'nrt_Error') -> "bool":
    return _nitropy.nrt_IOInterface_read(arg1, buf, size, error)
nrt_IOInterface_read = _nitropy.nrt_IOInterface_read

def nrt_IOInterface_write(io: 'nrt_IOInterface', buf: 'void const *', size: 'size_t', error: 'nrt_Error') -> "bool":
    return _nitropy.nrt_IOInterface_write(io, buf, size, error)
nrt_IOInterface_write = _nitropy.nrt_IOInterface_write

def nrt_IOInterface_canSeek(io: 'nrt_IOInterface', arg2: 'nrt_Error') -> "bool":
    return _nitropy.nrt_IOInterface_canSeek(io, arg2)
nrt_IOInterface_canSeek = _nitropy.nrt_IOInterface_canSeek

def nrt_IOInterface_seek(io: 'nrt_IOInterface', offset: 'nrt_Off', whence: 'int', error: 'nrt_Error') -> "nrt_Off":
    return _nitropy.nrt_IOInterface_seek(io, offset, whence, error)
nrt_IOInterface_seek = _nitropy.nrt_IOInterface_seek

def nrt_IOInterface_tell(io: 'nrt_IOInterface', error: 'nrt_Error') -> "nrt_Off":
    return _nitropy.nrt_IOInterface_tell(io, error)
nrt_IOInterface_tell = _nitropy.nrt_IOInterface_tell

def nrt_IOInterface_getSize(io: 'nrt_IOInterface', error: 'nrt_Error') -> "nrt_Off":
    return _nitropy.nrt_IOInterface_getSize(io, error)
nrt_IOInterface_getSize = _nitropy.nrt_IOInterface_getSize

def nrt_IOInterface_getMode(io: 'nrt_IOInterface', error: 'nrt_Error') -> "int":
    return _nitropy.nrt_IOInterface_getMode(io, error)
nrt_IOInterface_getMode = _nitropy.nrt_IOInterface_getMode

def nrt_IOInterface_close(io: 'nrt_IOInterface', error: 'nrt_Error') -> "bool":
    return _nitropy.nrt_IOInterface_close(io, error)
nrt_IOInterface_close = _nitropy.nrt_IOInterface_close

def nrt_IOInterface_destruct(io: 'nrt_IOInterface **') -> "void":
    return _nitropy.nrt_IOInterface_destruct(io)
nrt_IOInterface_destruct = _nitropy.nrt_IOInterface_destruct

def nrt_IOHandleAdapter_construct(handle: 'nrt_IOHandle', accessMode: 'int', error: 'nrt_Error') -> "nrt_IOInterface *":
    return _nitropy.nrt_IOHandleAdapter_construct(handle, accessMode, error)
nrt_IOHandleAdapter_construct = _nitropy.nrt_IOHandleAdapter_construct

def nrt_IOHandleAdapter_open(fname: 'char const *', accessFlags: 'int', creationFlags: 'int', error: 'nrt_Error') -> "nrt_IOInterface *":
    return _nitropy.nrt_IOHandleAdapter_open(fname, accessFlags, creationFlags, error)
nrt_IOHandleAdapter_open = _nitropy.nrt_IOHandleAdapter_open

def nrt_BufferAdapter_construct(buf: 'char *', size: 'size_t', ownBuf: 'bool', error: 'nrt_Error') -> "nrt_IOInterface *":
    return _nitropy.nrt_BufferAdapter_construct(buf, size, ownBuf, error)
nrt_BufferAdapter_construct = _nitropy.nrt_BufferAdapter_construct

def nitf_strdup(src: 'char const *') -> "char *":
    return _nitropy.nitf_strdup(src)
nitf_strdup = _nitropy.nitf_strdup
NITF_MAX_PATH = _nitropy.NITF_MAX_PATH
NITF_DEFAULT_PERM = _nitropy.NITF_DEFAULT_PERM
NITF_INVALID_HANDLE_VALUE = _nitropy.NITF_INVALID_HANDLE_VALUE
NITF_OPEN_EXISTING = _nitropy.NITF_OPEN_EXISTING
NITF_SUCCESS = _nitropy.NITF_SUCCESS
NITF_FAILURE = _nitropy.NITF_FAILURE
NITF_MAX_EMESSAGE = _nitropy.NITF_MAX_EMESSAGE
NITF_MAX_READ_ATTEMPTS = _nitropy.NITF_MAX_READ_ATTEMPTS
NITF_DATE_FORMAT_20 = _nitropy.NITF_DATE_FORMAT_20
NITF_DATE_FORMAT_21 = _nitropy.NITF_DATE_FORMAT_21
NITF_TRE_HASH_SIZE = _nitropy.NITF_TRE_HASH_SIZE
HAVE_CLOCK_GETTIME = _nitropy.HAVE_CLOCK_GETTIME
HAVE_SYS_TIME_H = _nitropy.HAVE_SYS_TIME_H
NRT_LIB_VERSION = _nitropy.NRT_LIB_VERSION
NITF_LIB_VERSION = _nitropy.NITF_LIB_VERSION
NITF_COMPRESSION_HASH_SIZE = _nitropy.NITF_COMPRESSION_HASH_SIZE
NITF_DECOMPRESSION_HASH_SIZE = _nitropy.NITF_DECOMPRESSION_HASH_SIZE
NITF_PLUGIN_PATH = _nitropy.NITF_PLUGIN_PATH
class nitf_PluginRegistry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_PluginRegistry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nitf_PluginRegistry, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["path"] = _nitropy.nitf_PluginRegistry_path_set
    __swig_getmethods__["path"] = _nitropy.nitf_PluginRegistry_path_get
    if _newclass:
        path = _swig_property(_nitropy.nitf_PluginRegistry_path_get, _nitropy.nitf_PluginRegistry_path_set)
    __swig_setmethods__["treHandlers"] = _nitropy.nitf_PluginRegistry_treHandlers_set
    __swig_getmethods__["treHandlers"] = _nitropy.nitf_PluginRegistry_treHandlers_get
    if _newclass:
        treHandlers = _swig_property(_nitropy.nitf_PluginRegistry_treHandlers_get, _nitropy.nitf_PluginRegistry_treHandlers_set)
    __swig_setmethods__["compressionHandlers"] = _nitropy.nitf_PluginRegistry_compressionHandlers_set
    __swig_getmethods__["compressionHandlers"] = _nitropy.nitf_PluginRegistry_compressionHandlers_get
    if _newclass:
        compressionHandlers = _swig_property(_nitropy.nitf_PluginRegistry_compressionHandlers_get, _nitropy.nitf_PluginRegistry_compressionHandlers_set)
    __swig_setmethods__["decompressionHandlers"] = _nitropy.nitf_PluginRegistry_decompressionHandlers_set
    __swig_getmethods__["decompressionHandlers"] = _nitropy.nitf_PluginRegistry_decompressionHandlers_get
    if _newclass:
        decompressionHandlers = _swig_property(_nitropy.nitf_PluginRegistry_decompressionHandlers_get, _nitropy.nitf_PluginRegistry_decompressionHandlers_set)
    __swig_setmethods__["dsos"] = _nitropy.nitf_PluginRegistry_dsos_set
    __swig_getmethods__["dsos"] = _nitropy.nitf_PluginRegistry_dsos_get
    if _newclass:
        dsos = _swig_property(_nitropy.nitf_PluginRegistry_dsos_get, _nitropy.nitf_PluginRegistry_dsos_set)
    __swig_destroy__ = _nitropy.delete_nitf_PluginRegistry
    __del__ = lambda self: None
nitf_PluginRegistry_swigregister = _nitropy.nitf_PluginRegistry_swigregister
nitf_PluginRegistry_swigregister(nitf_PluginRegistry)


def nitf_PluginRegistry_getInstance(error: 'nrt_Error') -> "nitf_PluginRegistry *":
    return _nitropy.nitf_PluginRegistry_getInstance(error)
nitf_PluginRegistry_getInstance = _nitropy.nitf_PluginRegistry_getInstance

def nitf_PluginRegistry_load(reg: 'nitf_PluginRegistry', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_PluginRegistry_load(reg, error)
nitf_PluginRegistry_load = _nitropy.nitf_PluginRegistry_load

def nitf_PluginRegistry_registerTREHandler(init: 'NITF_PLUGIN_INIT_FUNCTION', handler: 'NITF_PLUGIN_TRE_HANDLER_FUNCTION', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_PluginRegistry_registerTREHandler(init, handler, error)
nitf_PluginRegistry_registerTREHandler = _nitropy.nitf_PluginRegistry_registerTREHandler

def nitf_PluginRegistry_registerCompressionHandler(init: 'NITF_PLUGIN_INIT_FUNCTION', handler: 'NITF_PLUGIN_COMPRESSION_CONSTRUCT_FUNCTION', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_PluginRegistry_registerCompressionHandler(init, handler, error)
nitf_PluginRegistry_registerCompressionHandler = _nitropy.nitf_PluginRegistry_registerCompressionHandler

def nitf_PluginRegistry_registerDecompressionHandler(init: 'NITF_PLUGIN_INIT_FUNCTION', handler: 'NITF_PLUGIN_COMPRESSION_CONSTRUCT_FUNCTION', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_PluginRegistry_registerDecompressionHandler(init, handler, error)
nitf_PluginRegistry_registerDecompressionHandler = _nitropy.nitf_PluginRegistry_registerDecompressionHandler

def nitf_PluginRegistry_loadDir(dirName: 'char const *', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_PluginRegistry_loadDir(dirName, error)
nitf_PluginRegistry_loadDir = _nitropy.nitf_PluginRegistry_loadDir

def nitf_PluginRegistry_loadPlugin(fullPathName: 'char const *', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_PluginRegistry_loadPlugin(fullPathName, error)
nitf_PluginRegistry_loadPlugin = _nitropy.nitf_PluginRegistry_loadPlugin

def nitf_PluginRegistry_TREHandlerExists(ident: 'char const *') -> "bool":
    return _nitropy.nitf_PluginRegistry_TREHandlerExists(ident)
nitf_PluginRegistry_TREHandlerExists = _nitropy.nitf_PluginRegistry_TREHandlerExists

def nitf_PluginRegistry_compressionHandlerExists(ident: 'char const *') -> "bool":
    return _nitropy.nitf_PluginRegistry_compressionHandlerExists(ident)
nitf_PluginRegistry_compressionHandlerExists = _nitropy.nitf_PluginRegistry_compressionHandlerExists

def nitf_PluginRegistry_decompressionHandlerExists(ident: 'char const *') -> "bool":
    return _nitropy.nitf_PluginRegistry_decompressionHandlerExists(ident)
nitf_PluginRegistry_decompressionHandlerExists = _nitropy.nitf_PluginRegistry_decompressionHandlerExists

def nitf_PluginRegistry_unload(reg: 'nitf_PluginRegistry', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_PluginRegistry_unload(reg, error)
nitf_PluginRegistry_unload = _nitropy.nitf_PluginRegistry_unload

def nitf_PluginRegistry_retrieveTREHandler(reg: 'nitf_PluginRegistry', ident: 'char const *', hadError: 'int *', error: 'nrt_Error') -> "nitf_TREHandler *":
    return _nitropy.nitf_PluginRegistry_retrieveTREHandler(reg, ident, hadError, error)
nitf_PluginRegistry_retrieveTREHandler = _nitropy.nitf_PluginRegistry_retrieveTREHandler

def nitf_PluginRegistry_retrieveDecompConstructor(reg: 'nitf_PluginRegistry', ident: 'char const *', hadError: 'int *', error: 'nrt_Error') -> "NITF_PLUGIN_DECOMPRESSION_CONSTRUCT_FUNCTION":
    return _nitropy.nitf_PluginRegistry_retrieveDecompConstructor(reg, ident, hadError, error)
nitf_PluginRegistry_retrieveDecompConstructor = _nitropy.nitf_PluginRegistry_retrieveDecompConstructor

def nitf_PluginRegistry_retrieveCompConstructor(reg: 'nitf_PluginRegistry', ident: 'char const *', hadError: 'int *', error: 'nrt_Error') -> "NITF_PLUGIN_COMPRESSION_CONSTRUCT_FUNCTION":
    return _nitropy.nitf_PluginRegistry_retrieveCompConstructor(reg, ident, hadError, error)
nitf_PluginRegistry_retrieveCompConstructor = _nitropy.nitf_PluginRegistry_retrieveCompConstructor

def nitf_PluginRegistry_retrieveCompInterface(comp: 'char const *', error: 'nrt_Error') -> "nitf_CompressionInterface *":
    return _nitropy.nitf_PluginRegistry_retrieveCompInterface(comp, error)
nitf_PluginRegistry_retrieveCompInterface = _nitropy.nitf_PluginRegistry_retrieveCompInterface
class nitf_Record(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_Record, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nitf_Record, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _nitropy.nitf_Record_header_set
    __swig_getmethods__["header"] = _nitropy.nitf_Record_header_get
    if _newclass:
        header = _swig_property(_nitropy.nitf_Record_header_get, _nitropy.nitf_Record_header_set)
    __swig_setmethods__["images"] = _nitropy.nitf_Record_images_set
    __swig_getmethods__["images"] = _nitropy.nitf_Record_images_get
    if _newclass:
        images = _swig_property(_nitropy.nitf_Record_images_get, _nitropy.nitf_Record_images_set)
    __swig_setmethods__["graphics"] = _nitropy.nitf_Record_graphics_set
    __swig_getmethods__["graphics"] = _nitropy.nitf_Record_graphics_get
    if _newclass:
        graphics = _swig_property(_nitropy.nitf_Record_graphics_get, _nitropy.nitf_Record_graphics_set)
    __swig_setmethods__["labels"] = _nitropy.nitf_Record_labels_set
    __swig_getmethods__["labels"] = _nitropy.nitf_Record_labels_get
    if _newclass:
        labels = _swig_property(_nitropy.nitf_Record_labels_get, _nitropy.nitf_Record_labels_set)
    __swig_setmethods__["texts"] = _nitropy.nitf_Record_texts_set
    __swig_getmethods__["texts"] = _nitropy.nitf_Record_texts_get
    if _newclass:
        texts = _swig_property(_nitropy.nitf_Record_texts_get, _nitropy.nitf_Record_texts_set)
    __swig_setmethods__["dataExtensions"] = _nitropy.nitf_Record_dataExtensions_set
    __swig_getmethods__["dataExtensions"] = _nitropy.nitf_Record_dataExtensions_get
    if _newclass:
        dataExtensions = _swig_property(_nitropy.nitf_Record_dataExtensions_get, _nitropy.nitf_Record_dataExtensions_set)
    __swig_setmethods__["reservedExtensions"] = _nitropy.nitf_Record_reservedExtensions_set
    __swig_getmethods__["reservedExtensions"] = _nitropy.nitf_Record_reservedExtensions_get
    if _newclass:
        reservedExtensions = _swig_property(_nitropy.nitf_Record_reservedExtensions_get, _nitropy.nitf_Record_reservedExtensions_set)
    __swig_destroy__ = _nitropy.delete_nitf_Record
    __del__ = lambda self: None
nitf_Record_swigregister = _nitropy.nitf_Record_swigregister
nitf_Record_swigregister(nitf_Record)


def nitf_Record_construct(version: 'nitf_Version', error: 'nrt_Error') -> "nitf_Record *":
    return _nitropy.nitf_Record_construct(version, error)
nitf_Record_construct = _nitropy.nitf_Record_construct

def nitf_Record_clone(source: 'nitf_Record', error: 'nrt_Error') -> "nitf_Record *":
    return _nitropy.nitf_Record_clone(source, error)
nitf_Record_clone = _nitropy.nitf_Record_clone

def nitf_Record_destruct(record: 'nitf_Record **') -> "void":
    return _nitropy.nitf_Record_destruct(record)
nitf_Record_destruct = _nitropy.nitf_Record_destruct

def nitf_Record_getVersion(record: 'nitf_Record') -> "nitf_Version":
    return _nitropy.nitf_Record_getVersion(record)
nitf_Record_getVersion = _nitropy.nitf_Record_getVersion

def nitf_Record_getNumImages(record: 'nitf_Record', error: 'nrt_Error') -> "uint32_t":
    return _nitropy.nitf_Record_getNumImages(record, error)
nitf_Record_getNumImages = _nitropy.nitf_Record_getNumImages

def nitf_Record_newImageSegment(record: 'nitf_Record', error: 'nrt_Error') -> "nitf_ImageSegment *":
    return _nitropy.nitf_Record_newImageSegment(record, error)
nitf_Record_newImageSegment = _nitropy.nitf_Record_newImageSegment

def nitf_Record_getNumGraphics(record: 'nitf_Record', error: 'nrt_Error') -> "uint32_t":
    return _nitropy.nitf_Record_getNumGraphics(record, error)
nitf_Record_getNumGraphics = _nitropy.nitf_Record_getNumGraphics

def nitf_Record_newGraphicSegment(record: 'nitf_Record', error: 'nrt_Error') -> "nitf_GraphicSegment *":
    return _nitropy.nitf_Record_newGraphicSegment(record, error)
nitf_Record_newGraphicSegment = _nitropy.nitf_Record_newGraphicSegment

def nitf_Record_getNumTexts(record: 'nitf_Record', error: 'nrt_Error') -> "uint32_t":
    return _nitropy.nitf_Record_getNumTexts(record, error)
nitf_Record_getNumTexts = _nitropy.nitf_Record_getNumTexts

def nitf_Record_newTextSegment(record: 'nitf_Record', error: 'nrt_Error') -> "nitf_TextSegment *":
    return _nitropy.nitf_Record_newTextSegment(record, error)
nitf_Record_newTextSegment = _nitropy.nitf_Record_newTextSegment

def nitf_Record_getNumDataExtensions(record: 'nitf_Record', error: 'nrt_Error') -> "uint32_t":
    return _nitropy.nitf_Record_getNumDataExtensions(record, error)
nitf_Record_getNumDataExtensions = _nitropy.nitf_Record_getNumDataExtensions

def nitf_Record_newDataExtensionSegment(record: 'nitf_Record', error: 'nrt_Error') -> "nitf_DESegment *":
    return _nitropy.nitf_Record_newDataExtensionSegment(record, error)
nitf_Record_newDataExtensionSegment = _nitropy.nitf_Record_newDataExtensionSegment

def nitf_Record_removeImageSegment(record: 'nitf_Record', segmentNumber: 'uint32_t', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_Record_removeImageSegment(record, segmentNumber, error)
nitf_Record_removeImageSegment = _nitropy.nitf_Record_removeImageSegment

def nitf_Record_removeGraphicSegment(record: 'nitf_Record', segmentNumber: 'uint32_t', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_Record_removeGraphicSegment(record, segmentNumber, error)
nitf_Record_removeGraphicSegment = _nitropy.nitf_Record_removeGraphicSegment

def nitf_Record_getNumLabels(record: 'nitf_Record', error: 'nrt_Error') -> "uint32_t":
    return _nitropy.nitf_Record_getNumLabels(record, error)
nitf_Record_getNumLabels = _nitropy.nitf_Record_getNumLabels

def nitf_Record_removeLabelSegment(record: 'nitf_Record', segmentNumber: 'uint32_t', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_Record_removeLabelSegment(record, segmentNumber, error)
nitf_Record_removeLabelSegment = _nitropy.nitf_Record_removeLabelSegment

def nitf_Record_removeTextSegment(record: 'nitf_Record', segmentNumber: 'uint32_t', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_Record_removeTextSegment(record, segmentNumber, error)
nitf_Record_removeTextSegment = _nitropy.nitf_Record_removeTextSegment

def nitf_Record_removeDataExtensionSegment(record: 'nitf_Record', segmentNumber: 'uint32_t', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_Record_removeDataExtensionSegment(record, segmentNumber, error)
nitf_Record_removeDataExtensionSegment = _nitropy.nitf_Record_removeDataExtensionSegment

def nitf_Record_getNumReservedExtensions(record: 'nitf_Record', error: 'nrt_Error') -> "uint32_t":
    return _nitropy.nitf_Record_getNumReservedExtensions(record, error)
nitf_Record_getNumReservedExtensions = _nitropy.nitf_Record_getNumReservedExtensions

def nitf_Record_removeReservedExtensionSegment(record: 'nitf_Record', segmentNumber: 'uint32_t', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_Record_removeReservedExtensionSegment(record, segmentNumber, error)
nitf_Record_removeReservedExtensionSegment = _nitropy.nitf_Record_removeReservedExtensionSegment

def nitf_Record_moveImageSegment(record: 'nitf_Record', oldIndex: 'uint32_t', newIndex: 'uint32_t', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_Record_moveImageSegment(record, oldIndex, newIndex, error)
nitf_Record_moveImageSegment = _nitropy.nitf_Record_moveImageSegment

def nitf_Record_moveGraphicSegment(record: 'nitf_Record', oldIndex: 'uint32_t', newIndex: 'uint32_t', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_Record_moveGraphicSegment(record, oldIndex, newIndex, error)
nitf_Record_moveGraphicSegment = _nitropy.nitf_Record_moveGraphicSegment

def nitf_Record_moveLabelSegment(record: 'nitf_Record', oldIndex: 'uint32_t', newIndex: 'uint32_t', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_Record_moveLabelSegment(record, oldIndex, newIndex, error)
nitf_Record_moveLabelSegment = _nitropy.nitf_Record_moveLabelSegment

def nitf_Record_moveTextSegment(record: 'nitf_Record', oldIndex: 'uint32_t', newIndex: 'uint32_t', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_Record_moveTextSegment(record, oldIndex, newIndex, error)
nitf_Record_moveTextSegment = _nitropy.nitf_Record_moveTextSegment

def nitf_Record_moveDataExtensionSegment(record: 'nitf_Record', oldIndex: 'uint32_t', newIndex: 'uint32_t', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_Record_moveDataExtensionSegment(record, oldIndex, newIndex, error)
nitf_Record_moveDataExtensionSegment = _nitropy.nitf_Record_moveDataExtensionSegment

def nitf_Record_moveReservedExtensionSegment(record: 'nitf_Record', oldIndex: 'uint32_t', newIndex: 'uint32_t', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_Record_moveReservedExtensionSegment(record, oldIndex, newIndex, error)
nitf_Record_moveReservedExtensionSegment = _nitropy.nitf_Record_moveReservedExtensionSegment

def nitf_Record_mergeTREs(record: 'nitf_Record', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_Record_mergeTREs(record, error)
nitf_Record_mergeTREs = _nitropy.nitf_Record_mergeTREs

def nitf_Record_unmergeTREs(record: 'nitf_Record', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_Record_unmergeTREs(record, error)
nitf_Record_unmergeTREs = _nitropy.nitf_Record_unmergeTREs
NITF_CONV_UINT = _nitropy.NITF_CONV_UINT
NITF_CONV_INT = _nitropy.NITF_CONV_INT
NITF_CONV_REAL = _nitropy.NITF_CONV_REAL
NITF_CONV_STRING = _nitropy.NITF_CONV_STRING
NITF_CONV_RAW = _nitropy.NITF_CONV_RAW
NITF_INT8_SZ = _nitropy.NITF_INT8_SZ
NITF_INT16_SZ = _nitropy.NITF_INT16_SZ
NITF_INT32_SZ = _nitropy.NITF_INT32_SZ
NITF_INT64_SZ = _nitropy.NITF_INT64_SZ
NITF_BCS_A = _nitropy.NITF_BCS_A
NITF_BCS_N = _nitropy.NITF_BCS_N
NITF_BINARY = _nitropy.NITF_BINARY
class nitf_Field(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_Field, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nitf_Field, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _nitropy.nitf_Field_type_set
    __swig_getmethods__["type"] = _nitropy.nitf_Field_type_get
    if _newclass:
        type = _swig_property(_nitropy.nitf_Field_type_get, _nitropy.nitf_Field_type_set)
    __swig_setmethods__["raw"] = _nitropy.nitf_Field_raw_set
    __swig_getmethods__["raw"] = _nitropy.nitf_Field_raw_get
    if _newclass:
        raw = _swig_property(_nitropy.nitf_Field_raw_get, _nitropy.nitf_Field_raw_set)
    __swig_setmethods__["length"] = _nitropy.nitf_Field_length_set
    __swig_getmethods__["length"] = _nitropy.nitf_Field_length_get
    if _newclass:
        length = _swig_property(_nitropy.nitf_Field_length_get, _nitropy.nitf_Field_length_set)
    __swig_setmethods__["resizable"] = _nitropy.nitf_Field_resizable_set
    __swig_getmethods__["resizable"] = _nitropy.nitf_Field_resizable_get
    if _newclass:
        resizable = _swig_property(_nitropy.nitf_Field_resizable_get, _nitropy.nitf_Field_resizable_set)
    __swig_destroy__ = _nitropy.delete_nitf_Field
    __del__ = lambda self: None
nitf_Field_swigregister = _nitropy.nitf_Field_swigregister
nitf_Field_swigregister(nitf_Field)


def nitf_Field_construct(length: 'size_t', type: 'nitf_FieldType', error: 'nrt_Error') -> "nitf_Field *":
    return _nitropy.nitf_Field_construct(length, type, error)
nitf_Field_construct = _nitropy.nitf_Field_construct

def nitf_Field_setRawData(field: 'nitf_Field', data: 'NITF_DATA *', dataLength: 'size_t', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_Field_setRawData(field, data, dataLength, error)
nitf_Field_setRawData = _nitropy.nitf_Field_setRawData

def nitf_Field_setUint32(field: 'nitf_Field', number: 'uint32_t', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_Field_setUint32(field, number, error)
nitf_Field_setUint32 = _nitropy.nitf_Field_setUint32

def nitf_Field_setUint64(field: 'nitf_Field', number: 'uint64_t', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_Field_setUint64(field, number, error)
nitf_Field_setUint64 = _nitropy.nitf_Field_setUint64

def nitf_Field_setInt32(field: 'nitf_Field', number: 'int32_t', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_Field_setInt32(field, number, error)
nitf_Field_setInt32 = _nitropy.nitf_Field_setInt32

def nitf_Field_setInt64(field: 'nitf_Field', number: 'int64_t', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_Field_setInt64(field, number, error)
nitf_Field_setInt64 = _nitropy.nitf_Field_setInt64

def nitf_Field_trimString(str: 'char *') -> "void":
    return _nitropy.nitf_Field_trimString(str)
nitf_Field_trimString = _nitropy.nitf_Field_trimString

def nitf_Field_setString(field: 'nitf_Field', str: 'char const *', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_Field_setString(field, str, error)
nitf_Field_setString = _nitropy.nitf_Field_setString

def nitf_Field_setDateTime(field: 'nitf_Field', dateTime: 'nitf_DateTime const *', format: 'char const *', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_Field_setDateTime(field, dateTime, format, error)
nitf_Field_setDateTime = _nitropy.nitf_Field_setDateTime

def nitf_Field_setReal(field: 'nitf_Field', type: 'char const *', plus: 'bool', value: 'double', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_Field_setReal(field, type, plus, value, error)
nitf_Field_setReal = _nitropy.nitf_Field_setReal

def nitf_Field_destruct(field: 'nitf_Field **') -> "void":
    return _nitropy.nitf_Field_destruct(field)
nitf_Field_destruct = _nitropy.nitf_Field_destruct

def nitf_Field_clone(source: 'nitf_Field', error: 'nrt_Error') -> "nitf_Field *":
    return _nitropy.nitf_Field_clone(source, error)
nitf_Field_clone = _nitropy.nitf_Field_clone

def nitf_Field_get(field: 'nitf_Field', outValue: 'NITF_DATA *', convType: 'nitf_ConvType', length: 'size_t', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_Field_get(field, outValue, convType, length, error)
nitf_Field_get = _nitropy.nitf_Field_get

def nitf_Field_asDateTime(field: 'nitf_Field', dateFormat: 'char const *', error: 'nrt_Error') -> "nitf_DateTime *":
    return _nitropy.nitf_Field_asDateTime(field, dateFormat, error)
nitf_Field_asDateTime = _nitropy.nitf_Field_asDateTime

def nitf_Field_resetLength(field: 'nitf_Field', newLength: 'size_t', keepData: 'bool', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_Field_resetLength(field, newLength, keepData, error)
nitf_Field_resetLength = _nitropy.nitf_Field_resetLength

def nitf_Field_print(field: 'nitf_Field') -> "void":
    return _nitropy.nitf_Field_print(field)
nitf_Field_print = _nitropy.nitf_Field_print

def nitf_Field_snprint(buffer: 'char *', buf_size: 'size_t', field: 'nitf_Field') -> "void":
    return _nitropy.nitf_Field_snprint(buffer, buf_size, field)
nitf_Field_snprint = _nitropy.nitf_Field_snprint

def nitf_Field_resizeField(field: 'nitf_Field', newLength: 'size_t', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_Field_resizeField(field, newLength, error)
nitf_Field_resizeField = _nitropy.nitf_Field_resizeField
NITF_CLSY_SZ = _nitropy.NITF_CLSY_SZ
NITF_CODE_SZ = _nitropy.NITF_CODE_SZ
NITF_CTLH_SZ = _nitropy.NITF_CTLH_SZ
NITF_REL_SZ = _nitropy.NITF_REL_SZ
NITF_DCTP_SZ = _nitropy.NITF_DCTP_SZ
NITF_DCDT_SZ = _nitropy.NITF_DCDT_SZ
NITF_DCXM_SZ = _nitropy.NITF_DCXM_SZ
NITF_DG_SZ = _nitropy.NITF_DG_SZ
NITF_DGDT_SZ = _nitropy.NITF_DGDT_SZ
NITF_CLTX_SZ = _nitropy.NITF_CLTX_SZ
NITF_CATP_SZ = _nitropy.NITF_CATP_SZ
NITF_CAUT_SZ = _nitropy.NITF_CAUT_SZ
NITF_CRSN_SZ = _nitropy.NITF_CRSN_SZ
NITF_RDT_SZ = _nitropy.NITF_RDT_SZ
NITF_CTLN_SZ = _nitropy.NITF_CTLN_SZ
NITF_SG_BLOCK_SZ = _nitropy.NITF_SG_BLOCK_SZ
NITF_CODE_20_SZ = _nitropy.NITF_CODE_20_SZ
NITF_CTLH_20_SZ = _nitropy.NITF_CTLH_20_SZ
NITF_REL_20_SZ = _nitropy.NITF_REL_20_SZ
NITF_CAUT_20_SZ = _nitropy.NITF_CAUT_20_SZ
NITF_CTLN_20_SZ = _nitropy.NITF_CTLN_20_SZ
NITF_DGDT_20_SZ = _nitropy.NITF_DGDT_20_SZ
NITF_CLTX_20_SZ = _nitropy.NITF_CLTX_20_SZ
class nitf_FileSecurity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_FileSecurity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nitf_FileSecurity, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["classificationSystem"] = _nitropy.nitf_FileSecurity_classificationSystem_set
    __swig_getmethods__["classificationSystem"] = _nitropy.nitf_FileSecurity_classificationSystem_get
    if _newclass:
        classificationSystem = _swig_property(_nitropy.nitf_FileSecurity_classificationSystem_get, _nitropy.nitf_FileSecurity_classificationSystem_set)
    __swig_setmethods__["codewords"] = _nitropy.nitf_FileSecurity_codewords_set
    __swig_getmethods__["codewords"] = _nitropy.nitf_FileSecurity_codewords_get
    if _newclass:
        codewords = _swig_property(_nitropy.nitf_FileSecurity_codewords_get, _nitropy.nitf_FileSecurity_codewords_set)
    __swig_setmethods__["controlAndHandling"] = _nitropy.nitf_FileSecurity_controlAndHandling_set
    __swig_getmethods__["controlAndHandling"] = _nitropy.nitf_FileSecurity_controlAndHandling_get
    if _newclass:
        controlAndHandling = _swig_property(_nitropy.nitf_FileSecurity_controlAndHandling_get, _nitropy.nitf_FileSecurity_controlAndHandling_set)
    __swig_setmethods__["releasingInstructions"] = _nitropy.nitf_FileSecurity_releasingInstructions_set
    __swig_getmethods__["releasingInstructions"] = _nitropy.nitf_FileSecurity_releasingInstructions_get
    if _newclass:
        releasingInstructions = _swig_property(_nitropy.nitf_FileSecurity_releasingInstructions_get, _nitropy.nitf_FileSecurity_releasingInstructions_set)
    __swig_setmethods__["declassificationType"] = _nitropy.nitf_FileSecurity_declassificationType_set
    __swig_getmethods__["declassificationType"] = _nitropy.nitf_FileSecurity_declassificationType_get
    if _newclass:
        declassificationType = _swig_property(_nitropy.nitf_FileSecurity_declassificationType_get, _nitropy.nitf_FileSecurity_declassificationType_set)
    __swig_setmethods__["declassificationDate"] = _nitropy.nitf_FileSecurity_declassificationDate_set
    __swig_getmethods__["declassificationDate"] = _nitropy.nitf_FileSecurity_declassificationDate_get
    if _newclass:
        declassificationDate = _swig_property(_nitropy.nitf_FileSecurity_declassificationDate_get, _nitropy.nitf_FileSecurity_declassificationDate_set)
    __swig_setmethods__["declassificationExemption"] = _nitropy.nitf_FileSecurity_declassificationExemption_set
    __swig_getmethods__["declassificationExemption"] = _nitropy.nitf_FileSecurity_declassificationExemption_get
    if _newclass:
        declassificationExemption = _swig_property(_nitropy.nitf_FileSecurity_declassificationExemption_get, _nitropy.nitf_FileSecurity_declassificationExemption_set)
    __swig_setmethods__["downgrade"] = _nitropy.nitf_FileSecurity_downgrade_set
    __swig_getmethods__["downgrade"] = _nitropy.nitf_FileSecurity_downgrade_get
    if _newclass:
        downgrade = _swig_property(_nitropy.nitf_FileSecurity_downgrade_get, _nitropy.nitf_FileSecurity_downgrade_set)
    __swig_setmethods__["downgradeDateTime"] = _nitropy.nitf_FileSecurity_downgradeDateTime_set
    __swig_getmethods__["downgradeDateTime"] = _nitropy.nitf_FileSecurity_downgradeDateTime_get
    if _newclass:
        downgradeDateTime = _swig_property(_nitropy.nitf_FileSecurity_downgradeDateTime_get, _nitropy.nitf_FileSecurity_downgradeDateTime_set)
    __swig_setmethods__["classificationText"] = _nitropy.nitf_FileSecurity_classificationText_set
    __swig_getmethods__["classificationText"] = _nitropy.nitf_FileSecurity_classificationText_get
    if _newclass:
        classificationText = _swig_property(_nitropy.nitf_FileSecurity_classificationText_get, _nitropy.nitf_FileSecurity_classificationText_set)
    __swig_setmethods__["classificationAuthorityType"] = _nitropy.nitf_FileSecurity_classificationAuthorityType_set
    __swig_getmethods__["classificationAuthorityType"] = _nitropy.nitf_FileSecurity_classificationAuthorityType_get
    if _newclass:
        classificationAuthorityType = _swig_property(_nitropy.nitf_FileSecurity_classificationAuthorityType_get, _nitropy.nitf_FileSecurity_classificationAuthorityType_set)
    __swig_setmethods__["classificationAuthority"] = _nitropy.nitf_FileSecurity_classificationAuthority_set
    __swig_getmethods__["classificationAuthority"] = _nitropy.nitf_FileSecurity_classificationAuthority_get
    if _newclass:
        classificationAuthority = _swig_property(_nitropy.nitf_FileSecurity_classificationAuthority_get, _nitropy.nitf_FileSecurity_classificationAuthority_set)
    __swig_setmethods__["classificationReason"] = _nitropy.nitf_FileSecurity_classificationReason_set
    __swig_getmethods__["classificationReason"] = _nitropy.nitf_FileSecurity_classificationReason_get
    if _newclass:
        classificationReason = _swig_property(_nitropy.nitf_FileSecurity_classificationReason_get, _nitropy.nitf_FileSecurity_classificationReason_set)
    __swig_setmethods__["securitySourceDate"] = _nitropy.nitf_FileSecurity_securitySourceDate_set
    __swig_getmethods__["securitySourceDate"] = _nitropy.nitf_FileSecurity_securitySourceDate_get
    if _newclass:
        securitySourceDate = _swig_property(_nitropy.nitf_FileSecurity_securitySourceDate_get, _nitropy.nitf_FileSecurity_securitySourceDate_set)
    __swig_setmethods__["securityControlNumber"] = _nitropy.nitf_FileSecurity_securityControlNumber_set
    __swig_getmethods__["securityControlNumber"] = _nitropy.nitf_FileSecurity_securityControlNumber_get
    if _newclass:
        securityControlNumber = _swig_property(_nitropy.nitf_FileSecurity_securityControlNumber_get, _nitropy.nitf_FileSecurity_securityControlNumber_set)
    __swig_destroy__ = _nitropy.delete_nitf_FileSecurity
    __del__ = lambda self: None
nitf_FileSecurity_swigregister = _nitropy.nitf_FileSecurity_swigregister
nitf_FileSecurity_swigregister(nitf_FileSecurity)


def nitf_FileSecurity_construct(error: 'nrt_Error') -> "nitf_FileSecurity *":
    return _nitropy.nitf_FileSecurity_construct(error)
nitf_FileSecurity_construct = _nitropy.nitf_FileSecurity_construct

def nitf_FileSecurity_clone(source: 'nitf_FileSecurity', error: 'nrt_Error') -> "nitf_FileSecurity *":
    return _nitropy.nitf_FileSecurity_clone(source, error)
nitf_FileSecurity_clone = _nitropy.nitf_FileSecurity_clone

def nitf_FileSecurity_destruct(fs: 'nitf_FileSecurity **') -> "void":
    return _nitropy.nitf_FileSecurity_destruct(fs)
nitf_FileSecurity_destruct = _nitropy.nitf_FileSecurity_destruct

def nitf_FileSecurity_resizeForVersion(fs: 'nitf_FileSecurity', ver: 'nitf_Version', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_FileSecurity_resizeForVersion(fs, ver, error)
nitf_FileSecurity_resizeForVersion = _nitropy.nitf_FileSecurity_resizeForVersion
NITF_TRE_RAW = _nitropy.NITF_TRE_RAW
NITF_MAX_TAG = _nitropy.NITF_MAX_TAG
NITF_ETAG_SZ = _nitropy.NITF_ETAG_SZ
NITF_EL_SZ = _nitropy.NITF_EL_SZ
NITF_TRE_DEFAULT_LENGTH = _nitropy.NITF_TRE_DEFAULT_LENGTH
NITF_TRE_CONDITIONAL_LENGTH = _nitropy.NITF_TRE_CONDITIONAL_LENGTH
NITF_TRE_GOBBLE = _nitropy.NITF_TRE_GOBBLE
NITF_LOOP = _nitropy.NITF_LOOP
NITF_ENDLOOP = _nitropy.NITF_ENDLOOP
NITF_IF = _nitropy.NITF_IF
NITF_ENDIF = _nitropy.NITF_ENDIF
NITF_COMP_LEN = _nitropy.NITF_COMP_LEN
NITF_END = _nitropy.NITF_END
NITF_CONST_N = _nitropy.NITF_CONST_N
NITF_FUNCTION = _nitropy.NITF_FUNCTION
class nitf_TRE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_TRE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nitf_TRE, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["handler"] = _nitropy.nitf_TRE_handler_set
    __swig_getmethods__["handler"] = _nitropy.nitf_TRE_handler_get
    if _newclass:
        handler = _swig_property(_nitropy.nitf_TRE_handler_get, _nitropy.nitf_TRE_handler_set)
    __swig_setmethods__["priv"] = _nitropy.nitf_TRE_priv_set
    __swig_getmethods__["priv"] = _nitropy.nitf_TRE_priv_get
    if _newclass:
        priv = _swig_property(_nitropy.nitf_TRE_priv_get, _nitropy.nitf_TRE_priv_set)
    __swig_setmethods__["tag"] = _nitropy.nitf_TRE_tag_set
    __swig_getmethods__["tag"] = _nitropy.nitf_TRE_tag_get
    if _newclass:
        tag = _swig_property(_nitropy.nitf_TRE_tag_get, _nitropy.nitf_TRE_tag_set)
    __swig_destroy__ = _nitropy.delete_nitf_TRE
    __del__ = lambda self: None
nitf_TRE_swigregister = _nitropy.nitf_TRE_swigregister
nitf_TRE_swigregister(nitf_TRE)

class nitf_TREEnumerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_TREEnumerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nitf_TREEnumerator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["next"] = _nitropy.nitf_TREEnumerator_next_set
    __swig_getmethods__["next"] = _nitropy.nitf_TREEnumerator_next_get
    if _newclass:
        next = _swig_property(_nitropy.nitf_TREEnumerator_next_get, _nitropy.nitf_TREEnumerator_next_set)
    __swig_setmethods__["hasNext"] = _nitropy.nitf_TREEnumerator_hasNext_set
    __swig_getmethods__["hasNext"] = _nitropy.nitf_TREEnumerator_hasNext_get
    if _newclass:
        hasNext = _swig_property(_nitropy.nitf_TREEnumerator_hasNext_get, _nitropy.nitf_TREEnumerator_hasNext_set)
    __swig_setmethods__["getFieldDescription"] = _nitropy.nitf_TREEnumerator_getFieldDescription_set
    __swig_getmethods__["getFieldDescription"] = _nitropy.nitf_TREEnumerator_getFieldDescription_get
    if _newclass:
        getFieldDescription = _swig_property(_nitropy.nitf_TREEnumerator_getFieldDescription_get, _nitropy.nitf_TREEnumerator_getFieldDescription_set)
    __swig_setmethods__["data"] = _nitropy.nitf_TREEnumerator_data_set
    __swig_getmethods__["data"] = _nitropy.nitf_TREEnumerator_data_get
    if _newclass:
        data = _swig_property(_nitropy.nitf_TREEnumerator_data_get, _nitropy.nitf_TREEnumerator_data_set)
    __swig_destroy__ = _nitropy.delete_nitf_TREEnumerator
    __del__ = lambda self: None
nitf_TREEnumerator_swigregister = _nitropy.nitf_TREEnumerator_swigregister
nitf_TREEnumerator_swigregister(nitf_TREEnumerator)

class nitf_TREHandler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_TREHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nitf_TREHandler, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["init"] = _nitropy.nitf_TREHandler_init_set
    __swig_getmethods__["init"] = _nitropy.nitf_TREHandler_init_get
    if _newclass:
        init = _swig_property(_nitropy.nitf_TREHandler_init_get, _nitropy.nitf_TREHandler_init_set)
    __swig_setmethods__["getID"] = _nitropy.nitf_TREHandler_getID_set
    __swig_getmethods__["getID"] = _nitropy.nitf_TREHandler_getID_get
    if _newclass:
        getID = _swig_property(_nitropy.nitf_TREHandler_getID_get, _nitropy.nitf_TREHandler_getID_set)
    __swig_setmethods__["read"] = _nitropy.nitf_TREHandler_read_set
    __swig_getmethods__["read"] = _nitropy.nitf_TREHandler_read_get
    if _newclass:
        read = _swig_property(_nitropy.nitf_TREHandler_read_get, _nitropy.nitf_TREHandler_read_set)
    __swig_setmethods__["setField"] = _nitropy.nitf_TREHandler_setField_set
    __swig_getmethods__["setField"] = _nitropy.nitf_TREHandler_setField_get
    if _newclass:
        setField = _swig_property(_nitropy.nitf_TREHandler_setField_get, _nitropy.nitf_TREHandler_setField_set)
    __swig_setmethods__["getField"] = _nitropy.nitf_TREHandler_getField_set
    __swig_getmethods__["getField"] = _nitropy.nitf_TREHandler_getField_get
    if _newclass:
        getField = _swig_property(_nitropy.nitf_TREHandler_getField_get, _nitropy.nitf_TREHandler_getField_set)
    __swig_setmethods__["find"] = _nitropy.nitf_TREHandler_find_set
    __swig_getmethods__["find"] = _nitropy.nitf_TREHandler_find_get
    if _newclass:
        find = _swig_property(_nitropy.nitf_TREHandler_find_get, _nitropy.nitf_TREHandler_find_set)
    __swig_setmethods__["write"] = _nitropy.nitf_TREHandler_write_set
    __swig_getmethods__["write"] = _nitropy.nitf_TREHandler_write_get
    if _newclass:
        write = _swig_property(_nitropy.nitf_TREHandler_write_get, _nitropy.nitf_TREHandler_write_set)
    __swig_setmethods__["begin"] = _nitropy.nitf_TREHandler_begin_set
    __swig_getmethods__["begin"] = _nitropy.nitf_TREHandler_begin_get
    if _newclass:
        begin = _swig_property(_nitropy.nitf_TREHandler_begin_get, _nitropy.nitf_TREHandler_begin_set)
    __swig_setmethods__["getCurrentSize"] = _nitropy.nitf_TREHandler_getCurrentSize_set
    __swig_getmethods__["getCurrentSize"] = _nitropy.nitf_TREHandler_getCurrentSize_get
    if _newclass:
        getCurrentSize = _swig_property(_nitropy.nitf_TREHandler_getCurrentSize_get, _nitropy.nitf_TREHandler_getCurrentSize_set)
    __swig_setmethods__["clone"] = _nitropy.nitf_TREHandler_clone_set
    __swig_getmethods__["clone"] = _nitropy.nitf_TREHandler_clone_get
    if _newclass:
        clone = _swig_property(_nitropy.nitf_TREHandler_clone_get, _nitropy.nitf_TREHandler_clone_set)
    __swig_setmethods__["destruct"] = _nitropy.nitf_TREHandler_destruct_set
    __swig_getmethods__["destruct"] = _nitropy.nitf_TREHandler_destruct_get
    if _newclass:
        destruct = _swig_property(_nitropy.nitf_TREHandler_destruct_get, _nitropy.nitf_TREHandler_destruct_set)
    __swig_setmethods__["data"] = _nitropy.nitf_TREHandler_data_set
    __swig_getmethods__["data"] = _nitropy.nitf_TREHandler_data_get
    if _newclass:
        data = _swig_property(_nitropy.nitf_TREHandler_data_get, _nitropy.nitf_TREHandler_data_set)
    __swig_destroy__ = _nitropy.delete_nitf_TREHandler
    __del__ = lambda self: None
nitf_TREHandler_swigregister = _nitropy.nitf_TREHandler_swigregister
nitf_TREHandler_swigregister(nitf_TREHandler)


def nitf_TRE_createSkeleton(tag: 'char const *', error: 'nrt_Error') -> "nitf_TRE *":
    return _nitropy.nitf_TRE_createSkeleton(tag, error)
nitf_TRE_createSkeleton = _nitropy.nitf_TRE_createSkeleton

def nitf_TRE_construct(tag: 'char const *', id: 'char const *', error: 'nrt_Error') -> "nitf_TRE *":
    return _nitropy.nitf_TRE_construct(tag, id, error)
nitf_TRE_construct = _nitropy.nitf_TRE_construct

def nitf_TRE_clone(tre: 'nitf_TRE', error: 'nrt_Error') -> "nitf_TRE *":
    return _nitropy.nitf_TRE_clone(tre, error)
nitf_TRE_clone = _nitropy.nitf_TRE_clone

def nitf_TRE_destruct(tre: 'nitf_TRE **') -> "void":
    return _nitropy.nitf_TRE_destruct(tre)
nitf_TRE_destruct = _nitropy.nitf_TRE_destruct

def nitf_TRE_exists(tre: 'nitf_TRE', tag: 'char const *') -> "bool":
    return _nitropy.nitf_TRE_exists(tre, tag)
nitf_TRE_exists = _nitropy.nitf_TRE_exists

def nitf_TRE_setField(tre: 'nitf_TRE', tag: 'char const *', data: 'NITF_DATA const *', dataLength: 'size_t', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_TRE_setField(tre, tag, data, dataLength, error)
nitf_TRE_setField = _nitropy.nitf_TRE_setField

def nitf_TRE_find(tre: 'nitf_TRE', pattern: 'char const *', error: 'nrt_Error') -> "nitf_List *":
    return _nitropy.nitf_TRE_find(tre, pattern, error)
nitf_TRE_find = _nitropy.nitf_TRE_find

def nitf_TRE_getField(tre: 'nitf_TRE', tag: 'char const *') -> "nitf_Field *":
    return _nitropy.nitf_TRE_getField(tre, tag)
nitf_TRE_getField = _nitropy.nitf_TRE_getField

def nitf_TRE_begin(tre: 'nitf_TRE', error: 'nrt_Error') -> "nitf_TREEnumerator *":
    return _nitropy.nitf_TRE_begin(tre, error)
nitf_TRE_begin = _nitropy.nitf_TRE_begin

def nitf_TRE_getCurrentSize(tre: 'nitf_TRE', error: 'nrt_Error') -> "int":
    return _nitropy.nitf_TRE_getCurrentSize(tre, error)
nitf_TRE_getCurrentSize = _nitropy.nitf_TRE_getCurrentSize

def nitf_TRE_getID(tre: 'nitf_TRE') -> "char const *":
    return _nitropy.nitf_TRE_getID(tre)
nitf_TRE_getID = _nitropy.nitf_TRE_getID
class nitf_Extensions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_Extensions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nitf_Extensions, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["hash"] = _nitropy.nitf_Extensions_hash_set
    __swig_getmethods__["hash"] = _nitropy.nitf_Extensions_hash_get
    if _newclass:
        hash = _swig_property(_nitropy.nitf_Extensions_hash_get, _nitropy.nitf_Extensions_hash_set)
    __swig_setmethods__["ref"] = _nitropy.nitf_Extensions_ref_set
    __swig_getmethods__["ref"] = _nitropy.nitf_Extensions_ref_get
    if _newclass:
        ref = _swig_property(_nitropy.nitf_Extensions_ref_get, _nitropy.nitf_Extensions_ref_set)
    __swig_destroy__ = _nitropy.delete_nitf_Extensions
    __del__ = lambda self: None
nitf_Extensions_swigregister = _nitropy.nitf_Extensions_swigregister
nitf_Extensions_swigregister(nitf_Extensions)

class nitf_ExtensionsIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_ExtensionsIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nitf_ExtensionsIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["iter"] = _nitropy.nitf_ExtensionsIterator_iter_set
    __swig_getmethods__["iter"] = _nitropy.nitf_ExtensionsIterator_iter_get
    if _newclass:
        iter = _swig_property(_nitropy.nitf_ExtensionsIterator_iter_get, _nitropy.nitf_ExtensionsIterator_iter_set)
    __swig_destroy__ = _nitropy.delete_nitf_ExtensionsIterator
    __del__ = lambda self: None
nitf_ExtensionsIterator_swigregister = _nitropy.nitf_ExtensionsIterator_swigregister
nitf_ExtensionsIterator_swigregister(nitf_ExtensionsIterator)


def nitf_Extensions_construct(error: 'nrt_Error') -> "nitf_Extensions *":
    return _nitropy.nitf_Extensions_construct(error)
nitf_Extensions_construct = _nitropy.nitf_Extensions_construct

def nitf_Extensions_clone(source: 'nitf_Extensions', error: 'nrt_Error') -> "nitf_Extensions *":
    return _nitropy.nitf_Extensions_clone(source, error)
nitf_Extensions_clone = _nitropy.nitf_Extensions_clone

def nitf_Extensions_destruct(ext: 'nitf_Extensions **') -> "void":
    return _nitropy.nitf_Extensions_destruct(ext)
nitf_Extensions_destruct = _nitropy.nitf_Extensions_destruct

def nitf_Extensions_appendTRE(ext: 'nitf_Extensions', tre: 'nitf_TRE', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_Extensions_appendTRE(ext, tre, error)
nitf_Extensions_appendTRE = _nitropy.nitf_Extensions_appendTRE

def nitf_Extensions_getTREsByName(ext: 'nitf_Extensions', name: 'char const *') -> "nitf_List *":
    return _nitropy.nitf_Extensions_getTREsByName(ext, name)
nitf_Extensions_getTREsByName = _nitropy.nitf_Extensions_getTREsByName

def nitf_Extensions_removeTREsByName(ext: 'nitf_Extensions', name: 'char const *') -> "void":
    return _nitropy.nitf_Extensions_removeTREsByName(ext, name)
nitf_Extensions_removeTREsByName = _nitropy.nitf_Extensions_removeTREsByName

def nitf_Extensions_exists(ext: 'nitf_Extensions', name: 'char const *') -> "bool":
    return _nitropy.nitf_Extensions_exists(ext, name)
nitf_Extensions_exists = _nitropy.nitf_Extensions_exists

def nitf_Extensions_begin(ext: 'nitf_Extensions') -> "nitf_ExtensionsIterator":
    return _nitropy.nitf_Extensions_begin(ext)
nitf_Extensions_begin = _nitropy.nitf_Extensions_begin

def nitf_Extensions_end(ext: 'nitf_Extensions') -> "nitf_ExtensionsIterator":
    return _nitropy.nitf_Extensions_end(ext)
nitf_Extensions_end = _nitropy.nitf_Extensions_end

def nitf_ExtensionsIterator_increment(extIt: 'nitf_ExtensionsIterator') -> "void":
    return _nitropy.nitf_ExtensionsIterator_increment(extIt)
nitf_ExtensionsIterator_increment = _nitropy.nitf_ExtensionsIterator_increment

def nitf_ExtensionsIterator_get(extIt: 'nitf_ExtensionsIterator') -> "nitf_TRE *":
    return _nitropy.nitf_ExtensionsIterator_get(extIt)
nitf_ExtensionsIterator_get = _nitropy.nitf_ExtensionsIterator_get

def nitf_Extensions_insert(ext: 'nitf_Extensions', extIter: 'nitf_ExtensionsIterator', tre: 'nitf_TRE', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_Extensions_insert(ext, extIter, tre, error)
nitf_Extensions_insert = _nitropy.nitf_Extensions_insert

def nitf_Extensions_remove(ext: 'nitf_Extensions', extIter: 'nitf_ExtensionsIterator', error: 'nrt_Error') -> "nitf_TRE *":
    return _nitropy.nitf_Extensions_remove(ext, extIter, error)
nitf_Extensions_remove = _nitropy.nitf_Extensions_remove

def nitf_ExtensionsIterator_equals(it1: 'nitf_ExtensionsIterator', it2: 'nitf_ExtensionsIterator') -> "bool":
    return _nitropy.nitf_ExtensionsIterator_equals(it1, it2)
nitf_ExtensionsIterator_equals = _nitropy.nitf_ExtensionsIterator_equals

def nitf_ExtensionsIterator_notEqualTo(it1: 'nitf_ExtensionsIterator', it2: 'nitf_ExtensionsIterator') -> "bool":
    return _nitropy.nitf_ExtensionsIterator_notEqualTo(it1, it2)
nitf_ExtensionsIterator_notEqualTo = _nitropy.nitf_ExtensionsIterator_notEqualTo

def nitf_Extensions_computeLength(ext: 'nitf_Extensions', fver: 'nitf_Version', error: 'nrt_Error') -> "uint32_t":
    return _nitropy.nitf_Extensions_computeLength(ext, fver, error)
nitf_Extensions_computeLength = _nitropy.nitf_Extensions_computeLength
NRT_DATA_RETAIN_OWNER = _nitropy.NRT_DATA_RETAIN_OWNER
NRT_DATA_ADOPT = _nitropy.NRT_DATA_ADOPT
class nrt_HashTable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nrt_HashTable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nrt_HashTable, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["buckets"] = _nitropy.nrt_HashTable_buckets_set
    __swig_getmethods__["buckets"] = _nitropy.nrt_HashTable_buckets_get
    if _newclass:
        buckets = _swig_property(_nitropy.nrt_HashTable_buckets_get, _nitropy.nrt_HashTable_buckets_set)
    __swig_setmethods__["nbuckets"] = _nitropy.nrt_HashTable_nbuckets_set
    __swig_getmethods__["nbuckets"] = _nitropy.nrt_HashTable_nbuckets_get
    if _newclass:
        nbuckets = _swig_property(_nitropy.nrt_HashTable_nbuckets_get, _nitropy.nrt_HashTable_nbuckets_set)
    __swig_setmethods__["adopt"] = _nitropy.nrt_HashTable_adopt_set
    __swig_getmethods__["adopt"] = _nitropy.nrt_HashTable_adopt_get
    if _newclass:
        adopt = _swig_property(_nitropy.nrt_HashTable_adopt_get, _nitropy.nrt_HashTable_adopt_set)
    __swig_setmethods__["hash"] = _nitropy.nrt_HashTable_hash_set
    __swig_getmethods__["hash"] = _nitropy.nrt_HashTable_hash_get
    if _newclass:
        hash = _swig_property(_nitropy.nrt_HashTable_hash_get, _nitropy.nrt_HashTable_hash_set)
    __swig_destroy__ = _nitropy.delete_nrt_HashTable
    __del__ = lambda self: None
nrt_HashTable_swigregister = _nitropy.nrt_HashTable_swigregister
nrt_HashTable_swigregister(nrt_HashTable)

class nrt_HashTableIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nrt_HashTableIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nrt_HashTableIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["hash"] = _nitropy.nrt_HashTableIterator_hash_set
    __swig_getmethods__["hash"] = _nitropy.nrt_HashTableIterator_hash_get
    if _newclass:
        hash = _swig_property(_nitropy.nrt_HashTableIterator_hash_get, _nitropy.nrt_HashTableIterator_hash_set)
    __swig_setmethods__["curBucket"] = _nitropy.nrt_HashTableIterator_curBucket_set
    __swig_getmethods__["curBucket"] = _nitropy.nrt_HashTableIterator_curBucket_get
    if _newclass:
        curBucket = _swig_property(_nitropy.nrt_HashTableIterator_curBucket_get, _nitropy.nrt_HashTableIterator_curBucket_set)
    __swig_setmethods__["listIter"] = _nitropy.nrt_HashTableIterator_listIter_set
    __swig_getmethods__["listIter"] = _nitropy.nrt_HashTableIterator_listIter_get
    if _newclass:
        listIter = _swig_property(_nitropy.nrt_HashTableIterator_listIter_get, _nitropy.nrt_HashTableIterator_listIter_set)
    __swig_destroy__ = _nitropy.delete_nrt_HashTableIterator
    __del__ = lambda self: None
nrt_HashTableIterator_swigregister = _nitropy.nrt_HashTableIterator_swigregister
nrt_HashTableIterator_swigregister(nrt_HashTableIterator)


def nrt_HashTable_construct(nbuckets: 'int', error: 'nrt_Error') -> "nrt_HashTable *":
    return _nitropy.nrt_HashTable_construct(nbuckets, error)
nrt_HashTable_construct = _nitropy.nrt_HashTable_construct

def nrt_HashTable_clone(source: 'nrt_HashTable', cloner: 'NRT_DATA_ITEM_CLONE', error: 'nrt_Error') -> "nrt_HashTable *":
    return _nitropy.nrt_HashTable_clone(source, cloner, error)
nrt_HashTable_clone = _nitropy.nrt_HashTable_clone

def nrt_HashTable_setPolicy(ht: 'nrt_HashTable', policy: 'int') -> "void":
    return _nitropy.nrt_HashTable_setPolicy(ht, policy)
nrt_HashTable_setPolicy = _nitropy.nrt_HashTable_setPolicy

def nrt_HashTable_remove(ht: 'nrt_HashTable', key: 'char const *') -> "NRT_DATA *":
    return _nitropy.nrt_HashTable_remove(ht, key)
nrt_HashTable_remove = _nitropy.nrt_HashTable_remove

def __NRT_HashTable_defaultHash(ht: 'nrt_HashTable', key: 'char const *') -> "unsigned int":
    return _nitropy.__NRT_HashTable_defaultHash(ht, key)
__NRT_HashTable_defaultHash = _nitropy.__NRT_HashTable_defaultHash

def nrt_HashTable_initDefaults(ht: 'nrt_HashTable') -> "void":
    return _nitropy.nrt_HashTable_initDefaults(ht)
nrt_HashTable_initDefaults = _nitropy.nrt_HashTable_initDefaults

def nrt_HashTable_destruct(ht: 'nrt_HashTable **') -> "void":
    return _nitropy.nrt_HashTable_destruct(ht)
nrt_HashTable_destruct = _nitropy.nrt_HashTable_destruct

def nrt_HashTable_exists(ht: 'nrt_HashTable', key: 'char const *') -> "bool":
    return _nitropy.nrt_HashTable_exists(ht, key)
nrt_HashTable_exists = _nitropy.nrt_HashTable_exists

def nrt_HashTable_print(ht: 'nrt_HashTable') -> "void":
    return _nitropy.nrt_HashTable_print(ht)
nrt_HashTable_print = _nitropy.nrt_HashTable_print

def nrt_HashTable_foreach(ht: 'nrt_HashTable', fn: 'NRT_HASH_FUNCTOR', userData: 'NRT_DATA *', error: 'nrt_Error') -> "bool":
    return _nitropy.nrt_HashTable_foreach(ht, fn, userData, error)
nrt_HashTable_foreach = _nitropy.nrt_HashTable_foreach

def nrt_HashTable_insert(ht: 'nrt_HashTable', key: 'char const *', data: 'NRT_DATA *', error: 'nrt_Error') -> "bool":
    return _nitropy.nrt_HashTable_insert(ht, key, data, error)
nrt_HashTable_insert = _nitropy.nrt_HashTable_insert

def nrt_HashTable_find(ht: 'nrt_HashTable', key: 'char const *') -> "nrt_Pair *":
    return _nitropy.nrt_HashTable_find(ht, key)
nrt_HashTable_find = _nitropy.nrt_HashTable_find

def nrt_HashTableIterator_equals(it1: 'nrt_HashTableIterator', it2: 'nrt_HashTableIterator') -> "bool":
    return _nitropy.nrt_HashTableIterator_equals(it1, it2)
nrt_HashTableIterator_equals = _nitropy.nrt_HashTableIterator_equals

def nrt_HashTableIterator_notEqualTo(it1: 'nrt_HashTableIterator', it2: 'nrt_HashTableIterator') -> "bool":
    return _nitropy.nrt_HashTableIterator_notEqualTo(it1, it2)
nrt_HashTableIterator_notEqualTo = _nitropy.nrt_HashTableIterator_notEqualTo

def nrt_HashTable_begin(ht: 'nrt_HashTable') -> "nrt_HashTableIterator":
    return _nitropy.nrt_HashTable_begin(ht)
nrt_HashTable_begin = _nitropy.nrt_HashTable_begin

def nrt_HashTable_end(ht: 'nrt_HashTable') -> "nrt_HashTableIterator":
    return _nitropy.nrt_HashTable_end(ht)
nrt_HashTable_end = _nitropy.nrt_HashTable_end

def nrt_HashTableIterator_increment(iter: 'nrt_HashTableIterator') -> "void":
    return _nitropy.nrt_HashTableIterator_increment(iter)
nrt_HashTableIterator_increment = _nitropy.nrt_HashTableIterator_increment

def nrt_HashTableIterator_get(iter: 'nrt_HashTableIterator') -> "nrt_Pair *":
    return _nitropy.nrt_HashTableIterator_get(iter)
nrt_HashTableIterator_get = _nitropy.nrt_HashTableIterator_get
class nrt_Pair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nrt_Pair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nrt_Pair, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["key"] = _nitropy.nrt_Pair_key_set
    __swig_getmethods__["key"] = _nitropy.nrt_Pair_key_get
    if _newclass:
        key = _swig_property(_nitropy.nrt_Pair_key_get, _nitropy.nrt_Pair_key_set)
    __swig_setmethods__["data"] = _nitropy.nrt_Pair_data_set
    __swig_getmethods__["data"] = _nitropy.nrt_Pair_data_get
    if _newclass:
        data = _swig_property(_nitropy.nrt_Pair_data_get, _nitropy.nrt_Pair_data_set)
    __swig_destroy__ = _nitropy.delete_nrt_Pair
    __del__ = lambda self: None
nrt_Pair_swigregister = _nitropy.nrt_Pair_swigregister
nrt_Pair_swigregister(nrt_Pair)


def nrt_Pair_init(pair: 'nrt_Pair', key: 'char const *', data: 'NRT_DATA *') -> "void":
    return _nitropy.nrt_Pair_init(pair, key, data)
nrt_Pair_init = _nitropy.nrt_Pair_init

def nrt_Pair_copy(dst: 'nrt_Pair', src: 'nrt_Pair') -> "void":
    return _nitropy.nrt_Pair_copy(dst, src)
nrt_Pair_copy = _nitropy.nrt_Pair_copy
class nitf_ImageSource(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_ImageSource, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nitf_ImageSource, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["bandSources"] = _nitropy.nitf_ImageSource_bandSources_set
    __swig_getmethods__["bandSources"] = _nitropy.nitf_ImageSource_bandSources_get
    if _newclass:
        bandSources = _swig_property(_nitropy.nitf_ImageSource_bandSources_get, _nitropy.nitf_ImageSource_bandSources_set)
    __swig_setmethods__["size"] = _nitropy.nitf_ImageSource_size_set
    __swig_getmethods__["size"] = _nitropy.nitf_ImageSource_size_get
    if _newclass:
        size = _swig_property(_nitropy.nitf_ImageSource_size_get, _nitropy.nitf_ImageSource_size_set)
    __swig_destroy__ = _nitropy.delete_nitf_ImageSource
    __del__ = lambda self: None
nitf_ImageSource_swigregister = _nitropy.nitf_ImageSource_swigregister
nitf_ImageSource_swigregister(nitf_ImageSource)


def nitf_ImageSource_construct(error: 'nrt_Error') -> "nitf_ImageSource *":
    return _nitropy.nitf_ImageSource_construct(error)
nitf_ImageSource_construct = _nitropy.nitf_ImageSource_construct

def nitf_ImageSource_destruct(arg1: 'nitf_ImageSource **') -> "void":
    return _nitropy.nitf_ImageSource_destruct(arg1)
nitf_ImageSource_destruct = _nitropy.nitf_ImageSource_destruct

def nitf_ImageSource_addBand(imageSource: 'nitf_ImageSource', bandSource: 'nitf_DataSource', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_ImageSource_addBand(imageSource, bandSource, error)
nitf_ImageSource_addBand = _nitropy.nitf_ImageSource_addBand

def nitf_ImageSource_getBand(imageSource: 'nitf_ImageSource', n: 'int', error: 'nrt_Error') -> "nitf_BandSource *":
    return _nitropy.nitf_ImageSource_getBand(imageSource, n, error)
nitf_ImageSource_getBand = _nitropy.nitf_ImageSource_getBand
class nitf_IDataSource(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_IDataSource, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nitf_IDataSource, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["read"] = _nitropy.nitf_IDataSource_read_set
    __swig_getmethods__["read"] = _nitropy.nitf_IDataSource_read_get
    if _newclass:
        read = _swig_property(_nitropy.nitf_IDataSource_read_get, _nitropy.nitf_IDataSource_read_set)
    __swig_setmethods__["destruct"] = _nitropy.nitf_IDataSource_destruct_set
    __swig_getmethods__["destruct"] = _nitropy.nitf_IDataSource_destruct_get
    if _newclass:
        destruct = _swig_property(_nitropy.nitf_IDataSource_destruct_get, _nitropy.nitf_IDataSource_destruct_set)
    __swig_setmethods__["getSize"] = _nitropy.nitf_IDataSource_getSize_set
    __swig_getmethods__["getSize"] = _nitropy.nitf_IDataSource_getSize_get
    if _newclass:
        getSize = _swig_property(_nitropy.nitf_IDataSource_getSize_get, _nitropy.nitf_IDataSource_getSize_set)
    __swig_setmethods__["setSize"] = _nitropy.nitf_IDataSource_setSize_set
    __swig_getmethods__["setSize"] = _nitropy.nitf_IDataSource_setSize_get
    if _newclass:
        setSize = _swig_property(_nitropy.nitf_IDataSource_setSize_get, _nitropy.nitf_IDataSource_setSize_set)
    __swig_destroy__ = _nitropy.delete_nitf_IDataSource
    __del__ = lambda self: None
nitf_IDataSource_swigregister = _nitropy.nitf_IDataSource_swigregister
nitf_IDataSource_swigregister(nitf_IDataSource)

class nitf_DataSource(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_DataSource, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nitf_DataSource, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["iface"] = _nitropy.nitf_DataSource_iface_set
    __swig_getmethods__["iface"] = _nitropy.nitf_DataSource_iface_get
    if _newclass:
        iface = _swig_property(_nitropy.nitf_DataSource_iface_get, _nitropy.nitf_DataSource_iface_set)
    __swig_setmethods__["data"] = _nitropy.nitf_DataSource_data_set
    __swig_getmethods__["data"] = _nitropy.nitf_DataSource_data_get
    if _newclass:
        data = _swig_property(_nitropy.nitf_DataSource_data_get, _nitropy.nitf_DataSource_data_set)
    __swig_destroy__ = _nitropy.delete_nitf_DataSource
    __del__ = lambda self: None
nitf_DataSource_swigregister = _nitropy.nitf_DataSource_swigregister
nitf_DataSource_swigregister(nitf_DataSource)


def nitf_DataSource_destruct(dataSource: 'nitf_DataSource **') -> "void":
    return _nitropy.nitf_DataSource_destruct(dataSource)
nitf_DataSource_destruct = _nitropy.nitf_DataSource_destruct

def nitf_MemorySource_construct(data: 'void const *', size: 'nitf_Off', start: 'nitf_Off', numBytesPerPixel: 'int', pixelSkip: 'int', error: 'nrt_Error') -> "nitf_BandSource *":
    return _nitropy.nitf_MemorySource_construct(data, size, start, numBytesPerPixel, pixelSkip, error)
nitf_MemorySource_construct = _nitropy.nitf_MemorySource_construct

def nitf_FileSource_construct(arg1: 'nitf_IOHandle', start: 'nitf_Off', numBytesPerPixel: 'int', pixelSkip: 'int', error: 'nrt_Error') -> "nitf_BandSource *":
    return _nitropy.nitf_FileSource_construct(arg1, start, numBytesPerPixel, pixelSkip, error)
nitf_FileSource_construct = _nitropy.nitf_FileSource_construct

def nitf_FileSource_constructFile(fname: 'char const *', start: 'nitf_Off', numBytesPerPixel: 'int', pixelSkip: 'int', error: 'nrt_Error') -> "nitf_BandSource *":
    return _nitropy.nitf_FileSource_constructFile(fname, start, numBytesPerPixel, pixelSkip, error)
nitf_FileSource_constructFile = _nitropy.nitf_FileSource_constructFile

def nitf_IOSource_construct(io: 'nrt_IOInterface', start: 'nitf_Off', numBytesPerPixel: 'int', pixelSkip: 'int', error: 'nrt_Error') -> "nitf_BandSource *":
    return _nitropy.nitf_IOSource_construct(io, start, numBytesPerPixel, pixelSkip, error)
nitf_IOSource_construct = _nitropy.nitf_IOSource_construct

def nitf_ImageWriter_construct(subheader: 'nitf_ImageSubheader', options: 'nrt_HashTable', error: 'nrt_Error') -> "nitf_ImageWriter *":
    return _nitropy.nitf_ImageWriter_construct(subheader, options, error)
nitf_ImageWriter_construct = _nitropy.nitf_ImageWriter_construct

def nitf_ImageWriter_attachSource(writer: 'nitf_ImageWriter *', imageSource: 'nitf_ImageSource', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_ImageWriter_attachSource(writer, imageSource, error)
nitf_ImageWriter_attachSource = _nitropy.nitf_ImageWriter_attachSource

def nitf_ImageWriter_setWriteCaching(iWriter: 'nitf_ImageWriter *', enable: 'int') -> "int":
    return _nitropy.nitf_ImageWriter_setWriteCaching(iWriter, enable)
nitf_ImageWriter_setWriteCaching = _nitropy.nitf_ImageWriter_setWriteCaching

def nitf_ImageWriter_setDirectBlockWrite(iWriter: 'nitf_ImageWriter *', enable: 'int', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_ImageWriter_setDirectBlockWrite(iWriter, enable, error)
nitf_ImageWriter_setDirectBlockWrite = _nitropy.nitf_ImageWriter_setDirectBlockWrite

def nitf_ImageWriter_setPadPixel(imageWriter: 'nitf_ImageWriter *', value: 'uint8_t *', length: 'uint32_t', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_ImageWriter_setPadPixel(imageWriter, value, length, error)
nitf_ImageWriter_setPadPixel = _nitropy.nitf_ImageWriter_setPadPixel
NITF_FHDR_SZ = _nitropy.NITF_FHDR_SZ
NITF_FVER_SZ = _nitropy.NITF_FVER_SZ
NITF_CLEVEL_SZ = _nitropy.NITF_CLEVEL_SZ
NITF_STYPE_SZ = _nitropy.NITF_STYPE_SZ
NITF_OSTAID_SZ = _nitropy.NITF_OSTAID_SZ
NITF_FDT_SZ = _nitropy.NITF_FDT_SZ
NITF_FTITLE_SZ = _nitropy.NITF_FTITLE_SZ
NITF_FSCLAS_SZ = _nitropy.NITF_FSCLAS_SZ
NITF_FSCOP_SZ = _nitropy.NITF_FSCOP_SZ
NITF_FSCPYS_SZ = _nitropy.NITF_FSCPYS_SZ
NITF_ENCRYP_SZ = _nitropy.NITF_ENCRYP_SZ
NITF_FBKGC_SZ = _nitropy.NITF_FBKGC_SZ
NITF_ONAME_SZ = _nitropy.NITF_ONAME_SZ
NITF_OPHONE_SZ = _nitropy.NITF_OPHONE_SZ
NITF_FL_SZ = _nitropy.NITF_FL_SZ
NITF_HL_SZ = _nitropy.NITF_HL_SZ
NITF_LISH_SZ = _nitropy.NITF_LISH_SZ
NITF_LI_SZ = _nitropy.NITF_LI_SZ
NITF_LSSH_SZ = _nitropy.NITF_LSSH_SZ
NITF_LS_SZ = _nitropy.NITF_LS_SZ
NITF_LLSH_SZ = _nitropy.NITF_LLSH_SZ
NITF_LL_SZ = _nitropy.NITF_LL_SZ
NITF_LTSH_SZ = _nitropy.NITF_LTSH_SZ
NITF_LT_SZ = _nitropy.NITF_LT_SZ
NITF_LDSH_SZ = _nitropy.NITF_LDSH_SZ
NITF_LD_SZ = _nitropy.NITF_LD_SZ
NITF_LRESH_SZ = _nitropy.NITF_LRESH_SZ
NITF_LRE_SZ = _nitropy.NITF_LRE_SZ
NITF_UDHDL_SZ = _nitropy.NITF_UDHDL_SZ
NITF_UDHOFL_SZ = _nitropy.NITF_UDHOFL_SZ
NITF_XHDL_SZ = _nitropy.NITF_XHDL_SZ
NITF_XHDLOFL_SZ = _nitropy.NITF_XHDLOFL_SZ
NITF_NUMI_SZ = _nitropy.NITF_NUMI_SZ
NITF_NUMS_SZ = _nitropy.NITF_NUMS_SZ
NITF_NUMX_SZ = _nitropy.NITF_NUMX_SZ
NITF_NUMT_SZ = _nitropy.NITF_NUMT_SZ
NITF_NUMDES_SZ = _nitropy.NITF_NUMDES_SZ
NITF_NUMRES_SZ = _nitropy.NITF_NUMRES_SZ
class nitf_FileHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_FileHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nitf_FileHeader, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["fileHeader"] = _nitropy.nitf_FileHeader_fileHeader_set
    __swig_getmethods__["fileHeader"] = _nitropy.nitf_FileHeader_fileHeader_get
    if _newclass:
        fileHeader = _swig_property(_nitropy.nitf_FileHeader_fileHeader_get, _nitropy.nitf_FileHeader_fileHeader_set)
    __swig_setmethods__["fileVersion"] = _nitropy.nitf_FileHeader_fileVersion_set
    __swig_getmethods__["fileVersion"] = _nitropy.nitf_FileHeader_fileVersion_get
    if _newclass:
        fileVersion = _swig_property(_nitropy.nitf_FileHeader_fileVersion_get, _nitropy.nitf_FileHeader_fileVersion_set)
    __swig_setmethods__["complianceLevel"] = _nitropy.nitf_FileHeader_complianceLevel_set
    __swig_getmethods__["complianceLevel"] = _nitropy.nitf_FileHeader_complianceLevel_get
    if _newclass:
        complianceLevel = _swig_property(_nitropy.nitf_FileHeader_complianceLevel_get, _nitropy.nitf_FileHeader_complianceLevel_set)
    __swig_setmethods__["systemType"] = _nitropy.nitf_FileHeader_systemType_set
    __swig_getmethods__["systemType"] = _nitropy.nitf_FileHeader_systemType_get
    if _newclass:
        systemType = _swig_property(_nitropy.nitf_FileHeader_systemType_get, _nitropy.nitf_FileHeader_systemType_set)
    __swig_setmethods__["originStationID"] = _nitropy.nitf_FileHeader_originStationID_set
    __swig_getmethods__["originStationID"] = _nitropy.nitf_FileHeader_originStationID_get
    if _newclass:
        originStationID = _swig_property(_nitropy.nitf_FileHeader_originStationID_get, _nitropy.nitf_FileHeader_originStationID_set)
    __swig_setmethods__["fileDateTime"] = _nitropy.nitf_FileHeader_fileDateTime_set
    __swig_getmethods__["fileDateTime"] = _nitropy.nitf_FileHeader_fileDateTime_get
    if _newclass:
        fileDateTime = _swig_property(_nitropy.nitf_FileHeader_fileDateTime_get, _nitropy.nitf_FileHeader_fileDateTime_set)
    __swig_setmethods__["fileTitle"] = _nitropy.nitf_FileHeader_fileTitle_set
    __swig_getmethods__["fileTitle"] = _nitropy.nitf_FileHeader_fileTitle_get
    if _newclass:
        fileTitle = _swig_property(_nitropy.nitf_FileHeader_fileTitle_get, _nitropy.nitf_FileHeader_fileTitle_set)
    __swig_setmethods__["classification"] = _nitropy.nitf_FileHeader_classification_set
    __swig_getmethods__["classification"] = _nitropy.nitf_FileHeader_classification_get
    if _newclass:
        classification = _swig_property(_nitropy.nitf_FileHeader_classification_get, _nitropy.nitf_FileHeader_classification_set)
    __swig_setmethods__["securityGroup"] = _nitropy.nitf_FileHeader_securityGroup_set
    __swig_getmethods__["securityGroup"] = _nitropy.nitf_FileHeader_securityGroup_get
    if _newclass:
        securityGroup = _swig_property(_nitropy.nitf_FileHeader_securityGroup_get, _nitropy.nitf_FileHeader_securityGroup_set)
    __swig_setmethods__["messageCopyNum"] = _nitropy.nitf_FileHeader_messageCopyNum_set
    __swig_getmethods__["messageCopyNum"] = _nitropy.nitf_FileHeader_messageCopyNum_get
    if _newclass:
        messageCopyNum = _swig_property(_nitropy.nitf_FileHeader_messageCopyNum_get, _nitropy.nitf_FileHeader_messageCopyNum_set)
    __swig_setmethods__["messageNumCopies"] = _nitropy.nitf_FileHeader_messageNumCopies_set
    __swig_getmethods__["messageNumCopies"] = _nitropy.nitf_FileHeader_messageNumCopies_get
    if _newclass:
        messageNumCopies = _swig_property(_nitropy.nitf_FileHeader_messageNumCopies_get, _nitropy.nitf_FileHeader_messageNumCopies_set)
    __swig_setmethods__["encrypted"] = _nitropy.nitf_FileHeader_encrypted_set
    __swig_getmethods__["encrypted"] = _nitropy.nitf_FileHeader_encrypted_get
    if _newclass:
        encrypted = _swig_property(_nitropy.nitf_FileHeader_encrypted_get, _nitropy.nitf_FileHeader_encrypted_set)
    __swig_setmethods__["backgroundColor"] = _nitropy.nitf_FileHeader_backgroundColor_set
    __swig_getmethods__["backgroundColor"] = _nitropy.nitf_FileHeader_backgroundColor_get
    if _newclass:
        backgroundColor = _swig_property(_nitropy.nitf_FileHeader_backgroundColor_get, _nitropy.nitf_FileHeader_backgroundColor_set)
    __swig_setmethods__["originatorName"] = _nitropy.nitf_FileHeader_originatorName_set
    __swig_getmethods__["originatorName"] = _nitropy.nitf_FileHeader_originatorName_get
    if _newclass:
        originatorName = _swig_property(_nitropy.nitf_FileHeader_originatorName_get, _nitropy.nitf_FileHeader_originatorName_set)
    __swig_setmethods__["originatorPhone"] = _nitropy.nitf_FileHeader_originatorPhone_set
    __swig_getmethods__["originatorPhone"] = _nitropy.nitf_FileHeader_originatorPhone_get
    if _newclass:
        originatorPhone = _swig_property(_nitropy.nitf_FileHeader_originatorPhone_get, _nitropy.nitf_FileHeader_originatorPhone_set)
    __swig_setmethods__["fileLength"] = _nitropy.nitf_FileHeader_fileLength_set
    __swig_getmethods__["fileLength"] = _nitropy.nitf_FileHeader_fileLength_get
    if _newclass:
        fileLength = _swig_property(_nitropy.nitf_FileHeader_fileLength_get, _nitropy.nitf_FileHeader_fileLength_set)
    __swig_setmethods__["headerLength"] = _nitropy.nitf_FileHeader_headerLength_set
    __swig_getmethods__["headerLength"] = _nitropy.nitf_FileHeader_headerLength_get
    if _newclass:
        headerLength = _swig_property(_nitropy.nitf_FileHeader_headerLength_get, _nitropy.nitf_FileHeader_headerLength_set)
    __swig_setmethods__["numImages"] = _nitropy.nitf_FileHeader_numImages_set
    __swig_getmethods__["numImages"] = _nitropy.nitf_FileHeader_numImages_get
    if _newclass:
        numImages = _swig_property(_nitropy.nitf_FileHeader_numImages_get, _nitropy.nitf_FileHeader_numImages_set)
    __swig_setmethods__["numGraphics"] = _nitropy.nitf_FileHeader_numGraphics_set
    __swig_getmethods__["numGraphics"] = _nitropy.nitf_FileHeader_numGraphics_get
    if _newclass:
        numGraphics = _swig_property(_nitropy.nitf_FileHeader_numGraphics_get, _nitropy.nitf_FileHeader_numGraphics_set)
    __swig_setmethods__["numLabels"] = _nitropy.nitf_FileHeader_numLabels_set
    __swig_getmethods__["numLabels"] = _nitropy.nitf_FileHeader_numLabels_get
    if _newclass:
        numLabels = _swig_property(_nitropy.nitf_FileHeader_numLabels_get, _nitropy.nitf_FileHeader_numLabels_set)
    __swig_setmethods__["numTexts"] = _nitropy.nitf_FileHeader_numTexts_set
    __swig_getmethods__["numTexts"] = _nitropy.nitf_FileHeader_numTexts_get
    if _newclass:
        numTexts = _swig_property(_nitropy.nitf_FileHeader_numTexts_get, _nitropy.nitf_FileHeader_numTexts_set)
    __swig_setmethods__["numDataExtensions"] = _nitropy.nitf_FileHeader_numDataExtensions_set
    __swig_getmethods__["numDataExtensions"] = _nitropy.nitf_FileHeader_numDataExtensions_get
    if _newclass:
        numDataExtensions = _swig_property(_nitropy.nitf_FileHeader_numDataExtensions_get, _nitropy.nitf_FileHeader_numDataExtensions_set)
    __swig_setmethods__["numReservedExtensions"] = _nitropy.nitf_FileHeader_numReservedExtensions_set
    __swig_getmethods__["numReservedExtensions"] = _nitropy.nitf_FileHeader_numReservedExtensions_get
    if _newclass:
        numReservedExtensions = _swig_property(_nitropy.nitf_FileHeader_numReservedExtensions_get, _nitropy.nitf_FileHeader_numReservedExtensions_set)
    __swig_setmethods__["imageInfo"] = _nitropy.nitf_FileHeader_imageInfo_set
    __swig_getmethods__["imageInfo"] = _nitropy.nitf_FileHeader_imageInfo_get
    if _newclass:
        imageInfo = _swig_property(_nitropy.nitf_FileHeader_imageInfo_get, _nitropy.nitf_FileHeader_imageInfo_set)
    __swig_setmethods__["graphicInfo"] = _nitropy.nitf_FileHeader_graphicInfo_set
    __swig_getmethods__["graphicInfo"] = _nitropy.nitf_FileHeader_graphicInfo_get
    if _newclass:
        graphicInfo = _swig_property(_nitropy.nitf_FileHeader_graphicInfo_get, _nitropy.nitf_FileHeader_graphicInfo_set)
    __swig_setmethods__["labelInfo"] = _nitropy.nitf_FileHeader_labelInfo_set
    __swig_getmethods__["labelInfo"] = _nitropy.nitf_FileHeader_labelInfo_get
    if _newclass:
        labelInfo = _swig_property(_nitropy.nitf_FileHeader_labelInfo_get, _nitropy.nitf_FileHeader_labelInfo_set)
    __swig_setmethods__["textInfo"] = _nitropy.nitf_FileHeader_textInfo_set
    __swig_getmethods__["textInfo"] = _nitropy.nitf_FileHeader_textInfo_get
    if _newclass:
        textInfo = _swig_property(_nitropy.nitf_FileHeader_textInfo_get, _nitropy.nitf_FileHeader_textInfo_set)
    __swig_setmethods__["dataExtensionInfo"] = _nitropy.nitf_FileHeader_dataExtensionInfo_set
    __swig_getmethods__["dataExtensionInfo"] = _nitropy.nitf_FileHeader_dataExtensionInfo_get
    if _newclass:
        dataExtensionInfo = _swig_property(_nitropy.nitf_FileHeader_dataExtensionInfo_get, _nitropy.nitf_FileHeader_dataExtensionInfo_set)
    __swig_setmethods__["reservedExtensionInfo"] = _nitropy.nitf_FileHeader_reservedExtensionInfo_set
    __swig_getmethods__["reservedExtensionInfo"] = _nitropy.nitf_FileHeader_reservedExtensionInfo_get
    if _newclass:
        reservedExtensionInfo = _swig_property(_nitropy.nitf_FileHeader_reservedExtensionInfo_get, _nitropy.nitf_FileHeader_reservedExtensionInfo_set)
    __swig_setmethods__["userDefinedHeaderLength"] = _nitropy.nitf_FileHeader_userDefinedHeaderLength_set
    __swig_getmethods__["userDefinedHeaderLength"] = _nitropy.nitf_FileHeader_userDefinedHeaderLength_get
    if _newclass:
        userDefinedHeaderLength = _swig_property(_nitropy.nitf_FileHeader_userDefinedHeaderLength_get, _nitropy.nitf_FileHeader_userDefinedHeaderLength_set)
    __swig_setmethods__["userDefinedOverflow"] = _nitropy.nitf_FileHeader_userDefinedOverflow_set
    __swig_getmethods__["userDefinedOverflow"] = _nitropy.nitf_FileHeader_userDefinedOverflow_get
    if _newclass:
        userDefinedOverflow = _swig_property(_nitropy.nitf_FileHeader_userDefinedOverflow_get, _nitropy.nitf_FileHeader_userDefinedOverflow_set)
    __swig_setmethods__["extendedHeaderLength"] = _nitropy.nitf_FileHeader_extendedHeaderLength_set
    __swig_getmethods__["extendedHeaderLength"] = _nitropy.nitf_FileHeader_extendedHeaderLength_get
    if _newclass:
        extendedHeaderLength = _swig_property(_nitropy.nitf_FileHeader_extendedHeaderLength_get, _nitropy.nitf_FileHeader_extendedHeaderLength_set)
    __swig_setmethods__["extendedHeaderOverflow"] = _nitropy.nitf_FileHeader_extendedHeaderOverflow_set
    __swig_getmethods__["extendedHeaderOverflow"] = _nitropy.nitf_FileHeader_extendedHeaderOverflow_get
    if _newclass:
        extendedHeaderOverflow = _swig_property(_nitropy.nitf_FileHeader_extendedHeaderOverflow_get, _nitropy.nitf_FileHeader_extendedHeaderOverflow_set)
    __swig_setmethods__["userDefinedSection"] = _nitropy.nitf_FileHeader_userDefinedSection_set
    __swig_getmethods__["userDefinedSection"] = _nitropy.nitf_FileHeader_userDefinedSection_get
    if _newclass:
        userDefinedSection = _swig_property(_nitropy.nitf_FileHeader_userDefinedSection_get, _nitropy.nitf_FileHeader_userDefinedSection_set)
    __swig_setmethods__["extendedSection"] = _nitropy.nitf_FileHeader_extendedSection_set
    __swig_getmethods__["extendedSection"] = _nitropy.nitf_FileHeader_extendedSection_get
    if _newclass:
        extendedSection = _swig_property(_nitropy.nitf_FileHeader_extendedSection_get, _nitropy.nitf_FileHeader_extendedSection_set)
    __swig_destroy__ = _nitropy.delete_nitf_FileHeader
    __del__ = lambda self: None
nitf_FileHeader_swigregister = _nitropy.nitf_FileHeader_swigregister
nitf_FileHeader_swigregister(nitf_FileHeader)


def nitf_FileHeader_construct(error: 'nrt_Error') -> "nitf_FileHeader *":
    return _nitropy.nitf_FileHeader_construct(error)
nitf_FileHeader_construct = _nitropy.nitf_FileHeader_construct

def nitf_FileHeader_clone(source: 'nitf_FileHeader', error: 'nrt_Error') -> "nitf_FileHeader *":
    return _nitropy.nitf_FileHeader_clone(source, error)
nitf_FileHeader_clone = _nitropy.nitf_FileHeader_clone

def nitf_FileHeader_destruct(fh: 'nitf_FileHeader **') -> "void":
    return _nitropy.nitf_FileHeader_destruct(fh)
nitf_FileHeader_destruct = _nitropy.nitf_FileHeader_destruct
class nitf_ImageSegment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_ImageSegment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nitf_ImageSegment, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["subheader"] = _nitropy.nitf_ImageSegment_subheader_set
    __swig_getmethods__["subheader"] = _nitropy.nitf_ImageSegment_subheader_get
    if _newclass:
        subheader = _swig_property(_nitropy.nitf_ImageSegment_subheader_get, _nitropy.nitf_ImageSegment_subheader_set)
    __swig_setmethods__["imageOffset"] = _nitropy.nitf_ImageSegment_imageOffset_set
    __swig_getmethods__["imageOffset"] = _nitropy.nitf_ImageSegment_imageOffset_get
    if _newclass:
        imageOffset = _swig_property(_nitropy.nitf_ImageSegment_imageOffset_get, _nitropy.nitf_ImageSegment_imageOffset_set)
    __swig_setmethods__["imageEnd"] = _nitropy.nitf_ImageSegment_imageEnd_set
    __swig_getmethods__["imageEnd"] = _nitropy.nitf_ImageSegment_imageEnd_get
    if _newclass:
        imageEnd = _swig_property(_nitropy.nitf_ImageSegment_imageEnd_get, _nitropy.nitf_ImageSegment_imageEnd_set)
    __swig_destroy__ = _nitropy.delete_nitf_ImageSegment
    __del__ = lambda self: None
nitf_ImageSegment_swigregister = _nitropy.nitf_ImageSegment_swigregister
nitf_ImageSegment_swigregister(nitf_ImageSegment)


def nitf_ImageSegment_construct(error: 'nrt_Error') -> "nitf_ImageSegment *":
    return _nitropy.nitf_ImageSegment_construct(error)
nitf_ImageSegment_construct = _nitropy.nitf_ImageSegment_construct

def nitf_ImageSegment_clone(source: 'nitf_ImageSegment', error: 'nrt_Error') -> "nitf_ImageSegment *":
    return _nitropy.nitf_ImageSegment_clone(source, error)
nitf_ImageSegment_clone = _nitropy.nitf_ImageSegment_clone

def nitf_ImageSegment_destruct(segment: 'nitf_ImageSegment **') -> "void":
    return _nitropy.nitf_ImageSegment_destruct(segment)
nitf_ImageSegment_destruct = _nitropy.nitf_ImageSegment_destruct
NITF_IM_SZ = _nitropy.NITF_IM_SZ
NITF_IID1_SZ = _nitropy.NITF_IID1_SZ
NITF_IDATIM_SZ = _nitropy.NITF_IDATIM_SZ
NITF_TGTID_SZ = _nitropy.NITF_TGTID_SZ
NITF_IID2_SZ = _nitropy.NITF_IID2_SZ
NITF_ISCLAS_SZ = _nitropy.NITF_ISCLAS_SZ
NITF_ISORCE_SZ = _nitropy.NITF_ISORCE_SZ
NITF_NROWS_SZ = _nitropy.NITF_NROWS_SZ
NITF_NCOLS_SZ = _nitropy.NITF_NCOLS_SZ
NITF_PVTYPE_SZ = _nitropy.NITF_PVTYPE_SZ
NITF_IREP_SZ = _nitropy.NITF_IREP_SZ
NITF_ICAT_SZ = _nitropy.NITF_ICAT_SZ
NITF_ABPP_SZ = _nitropy.NITF_ABPP_SZ
NITF_PJUST_SZ = _nitropy.NITF_PJUST_SZ
NITF_ICORDS_SZ = _nitropy.NITF_ICORDS_SZ
NITF_IGEOLO_SZ = _nitropy.NITF_IGEOLO_SZ
NITF_NICOM_SZ = _nitropy.NITF_NICOM_SZ
NITF_ICOM_SZ = _nitropy.NITF_ICOM_SZ
NITF_IC_SZ = _nitropy.NITF_IC_SZ
NITF_COMRAT_SZ = _nitropy.NITF_COMRAT_SZ
NITF_NBANDS_SZ = _nitropy.NITF_NBANDS_SZ
NITF_XBANDS_SZ = _nitropy.NITF_XBANDS_SZ
NITF_ISYNC_SZ = _nitropy.NITF_ISYNC_SZ
NITF_IMODE_SZ = _nitropy.NITF_IMODE_SZ
NITF_NBPR_SZ = _nitropy.NITF_NBPR_SZ
NITF_NBPC_SZ = _nitropy.NITF_NBPC_SZ
NITF_NPPBH_SZ = _nitropy.NITF_NPPBH_SZ
NITF_NPPBV_SZ = _nitropy.NITF_NPPBV_SZ
NITF_NBPP_SZ = _nitropy.NITF_NBPP_SZ
NITF_IDLVL_SZ = _nitropy.NITF_IDLVL_SZ
NITF_IALVL_SZ = _nitropy.NITF_IALVL_SZ
NITF_ILOC_SZ = _nitropy.NITF_ILOC_SZ
NITF_IMAG_SZ = _nitropy.NITF_IMAG_SZ
NITF_UDIDL_SZ = _nitropy.NITF_UDIDL_SZ
NITF_UDOFL_SZ = _nitropy.NITF_UDOFL_SZ
NITF_IXSHDL_SZ = _nitropy.NITF_IXSHDL_SZ
NITF_IXSOFL_SZ = _nitropy.NITF_IXSOFL_SZ
NITF_MAX_BAND_COUNT = _nitropy.NITF_MAX_BAND_COUNT
class nitf_ImageSubheader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_ImageSubheader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nitf_ImageSubheader, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["filePartType"] = _nitropy.nitf_ImageSubheader_filePartType_set
    __swig_getmethods__["filePartType"] = _nitropy.nitf_ImageSubheader_filePartType_get
    if _newclass:
        filePartType = _swig_property(_nitropy.nitf_ImageSubheader_filePartType_get, _nitropy.nitf_ImageSubheader_filePartType_set)
    __swig_setmethods__["imageId"] = _nitropy.nitf_ImageSubheader_imageId_set
    __swig_getmethods__["imageId"] = _nitropy.nitf_ImageSubheader_imageId_get
    if _newclass:
        imageId = _swig_property(_nitropy.nitf_ImageSubheader_imageId_get, _nitropy.nitf_ImageSubheader_imageId_set)
    __swig_setmethods__["imageDateAndTime"] = _nitropy.nitf_ImageSubheader_imageDateAndTime_set
    __swig_getmethods__["imageDateAndTime"] = _nitropy.nitf_ImageSubheader_imageDateAndTime_get
    if _newclass:
        imageDateAndTime = _swig_property(_nitropy.nitf_ImageSubheader_imageDateAndTime_get, _nitropy.nitf_ImageSubheader_imageDateAndTime_set)
    __swig_setmethods__["targetId"] = _nitropy.nitf_ImageSubheader_targetId_set
    __swig_getmethods__["targetId"] = _nitropy.nitf_ImageSubheader_targetId_get
    if _newclass:
        targetId = _swig_property(_nitropy.nitf_ImageSubheader_targetId_get, _nitropy.nitf_ImageSubheader_targetId_set)
    __swig_setmethods__["imageTitle"] = _nitropy.nitf_ImageSubheader_imageTitle_set
    __swig_getmethods__["imageTitle"] = _nitropy.nitf_ImageSubheader_imageTitle_get
    if _newclass:
        imageTitle = _swig_property(_nitropy.nitf_ImageSubheader_imageTitle_get, _nitropy.nitf_ImageSubheader_imageTitle_set)
    __swig_setmethods__["imageSecurityClass"] = _nitropy.nitf_ImageSubheader_imageSecurityClass_set
    __swig_getmethods__["imageSecurityClass"] = _nitropy.nitf_ImageSubheader_imageSecurityClass_get
    if _newclass:
        imageSecurityClass = _swig_property(_nitropy.nitf_ImageSubheader_imageSecurityClass_get, _nitropy.nitf_ImageSubheader_imageSecurityClass_set)
    __swig_setmethods__["securityGroup"] = _nitropy.nitf_ImageSubheader_securityGroup_set
    __swig_getmethods__["securityGroup"] = _nitropy.nitf_ImageSubheader_securityGroup_get
    if _newclass:
        securityGroup = _swig_property(_nitropy.nitf_ImageSubheader_securityGroup_get, _nitropy.nitf_ImageSubheader_securityGroup_set)
    __swig_setmethods__["encrypted"] = _nitropy.nitf_ImageSubheader_encrypted_set
    __swig_getmethods__["encrypted"] = _nitropy.nitf_ImageSubheader_encrypted_get
    if _newclass:
        encrypted = _swig_property(_nitropy.nitf_ImageSubheader_encrypted_get, _nitropy.nitf_ImageSubheader_encrypted_set)
    __swig_setmethods__["imageSource"] = _nitropy.nitf_ImageSubheader_imageSource_set
    __swig_getmethods__["imageSource"] = _nitropy.nitf_ImageSubheader_imageSource_get
    if _newclass:
        imageSource = _swig_property(_nitropy.nitf_ImageSubheader_imageSource_get, _nitropy.nitf_ImageSubheader_imageSource_set)
    __swig_setmethods__["numRows"] = _nitropy.nitf_ImageSubheader_numRows_set
    __swig_getmethods__["numRows"] = _nitropy.nitf_ImageSubheader_numRows_get
    if _newclass:
        numRows = _swig_property(_nitropy.nitf_ImageSubheader_numRows_get, _nitropy.nitf_ImageSubheader_numRows_set)
    __swig_setmethods__["numCols"] = _nitropy.nitf_ImageSubheader_numCols_set
    __swig_getmethods__["numCols"] = _nitropy.nitf_ImageSubheader_numCols_get
    if _newclass:
        numCols = _swig_property(_nitropy.nitf_ImageSubheader_numCols_get, _nitropy.nitf_ImageSubheader_numCols_set)
    __swig_setmethods__["pixelValueType"] = _nitropy.nitf_ImageSubheader_pixelValueType_set
    __swig_getmethods__["pixelValueType"] = _nitropy.nitf_ImageSubheader_pixelValueType_get
    if _newclass:
        pixelValueType = _swig_property(_nitropy.nitf_ImageSubheader_pixelValueType_get, _nitropy.nitf_ImageSubheader_pixelValueType_set)
    __swig_setmethods__["imageRepresentation"] = _nitropy.nitf_ImageSubheader_imageRepresentation_set
    __swig_getmethods__["imageRepresentation"] = _nitropy.nitf_ImageSubheader_imageRepresentation_get
    if _newclass:
        imageRepresentation = _swig_property(_nitropy.nitf_ImageSubheader_imageRepresentation_get, _nitropy.nitf_ImageSubheader_imageRepresentation_set)
    __swig_setmethods__["imageCategory"] = _nitropy.nitf_ImageSubheader_imageCategory_set
    __swig_getmethods__["imageCategory"] = _nitropy.nitf_ImageSubheader_imageCategory_get
    if _newclass:
        imageCategory = _swig_property(_nitropy.nitf_ImageSubheader_imageCategory_get, _nitropy.nitf_ImageSubheader_imageCategory_set)
    __swig_setmethods__["actualBitsPerPixel"] = _nitropy.nitf_ImageSubheader_actualBitsPerPixel_set
    __swig_getmethods__["actualBitsPerPixel"] = _nitropy.nitf_ImageSubheader_actualBitsPerPixel_get
    if _newclass:
        actualBitsPerPixel = _swig_property(_nitropy.nitf_ImageSubheader_actualBitsPerPixel_get, _nitropy.nitf_ImageSubheader_actualBitsPerPixel_set)
    __swig_setmethods__["pixelJustification"] = _nitropy.nitf_ImageSubheader_pixelJustification_set
    __swig_getmethods__["pixelJustification"] = _nitropy.nitf_ImageSubheader_pixelJustification_get
    if _newclass:
        pixelJustification = _swig_property(_nitropy.nitf_ImageSubheader_pixelJustification_get, _nitropy.nitf_ImageSubheader_pixelJustification_set)
    __swig_setmethods__["imageCoordinateSystem"] = _nitropy.nitf_ImageSubheader_imageCoordinateSystem_set
    __swig_getmethods__["imageCoordinateSystem"] = _nitropy.nitf_ImageSubheader_imageCoordinateSystem_get
    if _newclass:
        imageCoordinateSystem = _swig_property(_nitropy.nitf_ImageSubheader_imageCoordinateSystem_get, _nitropy.nitf_ImageSubheader_imageCoordinateSystem_set)
    __swig_setmethods__["cornerCoordinates"] = _nitropy.nitf_ImageSubheader_cornerCoordinates_set
    __swig_getmethods__["cornerCoordinates"] = _nitropy.nitf_ImageSubheader_cornerCoordinates_get
    if _newclass:
        cornerCoordinates = _swig_property(_nitropy.nitf_ImageSubheader_cornerCoordinates_get, _nitropy.nitf_ImageSubheader_cornerCoordinates_set)
    __swig_setmethods__["numImageComments"] = _nitropy.nitf_ImageSubheader_numImageComments_set
    __swig_getmethods__["numImageComments"] = _nitropy.nitf_ImageSubheader_numImageComments_get
    if _newclass:
        numImageComments = _swig_property(_nitropy.nitf_ImageSubheader_numImageComments_get, _nitropy.nitf_ImageSubheader_numImageComments_set)
    __swig_setmethods__["imageComments"] = _nitropy.nitf_ImageSubheader_imageComments_set
    __swig_getmethods__["imageComments"] = _nitropy.nitf_ImageSubheader_imageComments_get
    if _newclass:
        imageComments = _swig_property(_nitropy.nitf_ImageSubheader_imageComments_get, _nitropy.nitf_ImageSubheader_imageComments_set)
    __swig_setmethods__["imageCompression"] = _nitropy.nitf_ImageSubheader_imageCompression_set
    __swig_getmethods__["imageCompression"] = _nitropy.nitf_ImageSubheader_imageCompression_get
    if _newclass:
        imageCompression = _swig_property(_nitropy.nitf_ImageSubheader_imageCompression_get, _nitropy.nitf_ImageSubheader_imageCompression_set)
    __swig_setmethods__["compressionRate"] = _nitropy.nitf_ImageSubheader_compressionRate_set
    __swig_getmethods__["compressionRate"] = _nitropy.nitf_ImageSubheader_compressionRate_get
    if _newclass:
        compressionRate = _swig_property(_nitropy.nitf_ImageSubheader_compressionRate_get, _nitropy.nitf_ImageSubheader_compressionRate_set)
    __swig_setmethods__["numImageBands"] = _nitropy.nitf_ImageSubheader_numImageBands_set
    __swig_getmethods__["numImageBands"] = _nitropy.nitf_ImageSubheader_numImageBands_get
    if _newclass:
        numImageBands = _swig_property(_nitropy.nitf_ImageSubheader_numImageBands_get, _nitropy.nitf_ImageSubheader_numImageBands_set)
    __swig_setmethods__["numMultispectralImageBands"] = _nitropy.nitf_ImageSubheader_numMultispectralImageBands_set
    __swig_getmethods__["numMultispectralImageBands"] = _nitropy.nitf_ImageSubheader_numMultispectralImageBands_get
    if _newclass:
        numMultispectralImageBands = _swig_property(_nitropy.nitf_ImageSubheader_numMultispectralImageBands_get, _nitropy.nitf_ImageSubheader_numMultispectralImageBands_set)
    __swig_setmethods__["bandInfo"] = _nitropy.nitf_ImageSubheader_bandInfo_set
    __swig_getmethods__["bandInfo"] = _nitropy.nitf_ImageSubheader_bandInfo_get
    if _newclass:
        bandInfo = _swig_property(_nitropy.nitf_ImageSubheader_bandInfo_get, _nitropy.nitf_ImageSubheader_bandInfo_set)
    __swig_setmethods__["imageSyncCode"] = _nitropy.nitf_ImageSubheader_imageSyncCode_set
    __swig_getmethods__["imageSyncCode"] = _nitropy.nitf_ImageSubheader_imageSyncCode_get
    if _newclass:
        imageSyncCode = _swig_property(_nitropy.nitf_ImageSubheader_imageSyncCode_get, _nitropy.nitf_ImageSubheader_imageSyncCode_set)
    __swig_setmethods__["imageMode"] = _nitropy.nitf_ImageSubheader_imageMode_set
    __swig_getmethods__["imageMode"] = _nitropy.nitf_ImageSubheader_imageMode_get
    if _newclass:
        imageMode = _swig_property(_nitropy.nitf_ImageSubheader_imageMode_get, _nitropy.nitf_ImageSubheader_imageMode_set)
    __swig_setmethods__["numBlocksPerRow"] = _nitropy.nitf_ImageSubheader_numBlocksPerRow_set
    __swig_getmethods__["numBlocksPerRow"] = _nitropy.nitf_ImageSubheader_numBlocksPerRow_get
    if _newclass:
        numBlocksPerRow = _swig_property(_nitropy.nitf_ImageSubheader_numBlocksPerRow_get, _nitropy.nitf_ImageSubheader_numBlocksPerRow_set)
    __swig_setmethods__["numBlocksPerCol"] = _nitropy.nitf_ImageSubheader_numBlocksPerCol_set
    __swig_getmethods__["numBlocksPerCol"] = _nitropy.nitf_ImageSubheader_numBlocksPerCol_get
    if _newclass:
        numBlocksPerCol = _swig_property(_nitropy.nitf_ImageSubheader_numBlocksPerCol_get, _nitropy.nitf_ImageSubheader_numBlocksPerCol_set)
    __swig_setmethods__["numPixelsPerHorizBlock"] = _nitropy.nitf_ImageSubheader_numPixelsPerHorizBlock_set
    __swig_getmethods__["numPixelsPerHorizBlock"] = _nitropy.nitf_ImageSubheader_numPixelsPerHorizBlock_get
    if _newclass:
        numPixelsPerHorizBlock = _swig_property(_nitropy.nitf_ImageSubheader_numPixelsPerHorizBlock_get, _nitropy.nitf_ImageSubheader_numPixelsPerHorizBlock_set)
    __swig_setmethods__["numPixelsPerVertBlock"] = _nitropy.nitf_ImageSubheader_numPixelsPerVertBlock_set
    __swig_getmethods__["numPixelsPerVertBlock"] = _nitropy.nitf_ImageSubheader_numPixelsPerVertBlock_get
    if _newclass:
        numPixelsPerVertBlock = _swig_property(_nitropy.nitf_ImageSubheader_numPixelsPerVertBlock_get, _nitropy.nitf_ImageSubheader_numPixelsPerVertBlock_set)
    __swig_setmethods__["numBitsPerPixel"] = _nitropy.nitf_ImageSubheader_numBitsPerPixel_set
    __swig_getmethods__["numBitsPerPixel"] = _nitropy.nitf_ImageSubheader_numBitsPerPixel_get
    if _newclass:
        numBitsPerPixel = _swig_property(_nitropy.nitf_ImageSubheader_numBitsPerPixel_get, _nitropy.nitf_ImageSubheader_numBitsPerPixel_set)
    __swig_setmethods__["imageDisplayLevel"] = _nitropy.nitf_ImageSubheader_imageDisplayLevel_set
    __swig_getmethods__["imageDisplayLevel"] = _nitropy.nitf_ImageSubheader_imageDisplayLevel_get
    if _newclass:
        imageDisplayLevel = _swig_property(_nitropy.nitf_ImageSubheader_imageDisplayLevel_get, _nitropy.nitf_ImageSubheader_imageDisplayLevel_set)
    __swig_setmethods__["imageAttachmentLevel"] = _nitropy.nitf_ImageSubheader_imageAttachmentLevel_set
    __swig_getmethods__["imageAttachmentLevel"] = _nitropy.nitf_ImageSubheader_imageAttachmentLevel_get
    if _newclass:
        imageAttachmentLevel = _swig_property(_nitropy.nitf_ImageSubheader_imageAttachmentLevel_get, _nitropy.nitf_ImageSubheader_imageAttachmentLevel_set)
    __swig_setmethods__["imageLocation"] = _nitropy.nitf_ImageSubheader_imageLocation_set
    __swig_getmethods__["imageLocation"] = _nitropy.nitf_ImageSubheader_imageLocation_get
    if _newclass:
        imageLocation = _swig_property(_nitropy.nitf_ImageSubheader_imageLocation_get, _nitropy.nitf_ImageSubheader_imageLocation_set)
    __swig_setmethods__["imageMagnification"] = _nitropy.nitf_ImageSubheader_imageMagnification_set
    __swig_getmethods__["imageMagnification"] = _nitropy.nitf_ImageSubheader_imageMagnification_get
    if _newclass:
        imageMagnification = _swig_property(_nitropy.nitf_ImageSubheader_imageMagnification_get, _nitropy.nitf_ImageSubheader_imageMagnification_set)
    __swig_setmethods__["userDefinedImageDataLength"] = _nitropy.nitf_ImageSubheader_userDefinedImageDataLength_set
    __swig_getmethods__["userDefinedImageDataLength"] = _nitropy.nitf_ImageSubheader_userDefinedImageDataLength_get
    if _newclass:
        userDefinedImageDataLength = _swig_property(_nitropy.nitf_ImageSubheader_userDefinedImageDataLength_get, _nitropy.nitf_ImageSubheader_userDefinedImageDataLength_set)
    __swig_setmethods__["userDefinedOverflow"] = _nitropy.nitf_ImageSubheader_userDefinedOverflow_set
    __swig_getmethods__["userDefinedOverflow"] = _nitropy.nitf_ImageSubheader_userDefinedOverflow_get
    if _newclass:
        userDefinedOverflow = _swig_property(_nitropy.nitf_ImageSubheader_userDefinedOverflow_get, _nitropy.nitf_ImageSubheader_userDefinedOverflow_set)
    __swig_setmethods__["extendedHeaderLength"] = _nitropy.nitf_ImageSubheader_extendedHeaderLength_set
    __swig_getmethods__["extendedHeaderLength"] = _nitropy.nitf_ImageSubheader_extendedHeaderLength_get
    if _newclass:
        extendedHeaderLength = _swig_property(_nitropy.nitf_ImageSubheader_extendedHeaderLength_get, _nitropy.nitf_ImageSubheader_extendedHeaderLength_set)
    __swig_setmethods__["extendedHeaderOverflow"] = _nitropy.nitf_ImageSubheader_extendedHeaderOverflow_set
    __swig_getmethods__["extendedHeaderOverflow"] = _nitropy.nitf_ImageSubheader_extendedHeaderOverflow_get
    if _newclass:
        extendedHeaderOverflow = _swig_property(_nitropy.nitf_ImageSubheader_extendedHeaderOverflow_get, _nitropy.nitf_ImageSubheader_extendedHeaderOverflow_set)
    __swig_setmethods__["userDefinedSection"] = _nitropy.nitf_ImageSubheader_userDefinedSection_set
    __swig_getmethods__["userDefinedSection"] = _nitropy.nitf_ImageSubheader_userDefinedSection_get
    if _newclass:
        userDefinedSection = _swig_property(_nitropy.nitf_ImageSubheader_userDefinedSection_get, _nitropy.nitf_ImageSubheader_userDefinedSection_set)
    __swig_setmethods__["extendedSection"] = _nitropy.nitf_ImageSubheader_extendedSection_set
    __swig_getmethods__["extendedSection"] = _nitropy.nitf_ImageSubheader_extendedSection_get
    if _newclass:
        extendedSection = _swig_property(_nitropy.nitf_ImageSubheader_extendedSection_get, _nitropy.nitf_ImageSubheader_extendedSection_set)
    __swig_destroy__ = _nitropy.delete_nitf_ImageSubheader
    __del__ = lambda self: None
nitf_ImageSubheader_swigregister = _nitropy.nitf_ImageSubheader_swigregister
nitf_ImageSubheader_swigregister(nitf_ImageSubheader)


def nitf_ImageSubheader_construct(error: 'nrt_Error') -> "nitf_ImageSubheader *":
    return _nitropy.nitf_ImageSubheader_construct(error)
nitf_ImageSubheader_construct = _nitropy.nitf_ImageSubheader_construct

def nitf_ImageSubheader_clone(source: 'nitf_ImageSubheader', error: 'nrt_Error') -> "nitf_ImageSubheader *":
    return _nitropy.nitf_ImageSubheader_clone(source, error)
nitf_ImageSubheader_clone = _nitropy.nitf_ImageSubheader_clone

def nitf_ImageSubheader_destruct(subhdr: 'nitf_ImageSubheader **') -> "void":
    return _nitropy.nitf_ImageSubheader_destruct(subhdr)
nitf_ImageSubheader_destruct = _nitropy.nitf_ImageSubheader_destruct

def nitf_ImageSubheader_setPixelInformation(subhdr: 'nitf_ImageSubheader', pvtype: 'char const *', nbpp: 'uint32_t', abpp: 'uint32_t', justification: 'char const *', irep: 'char const *', icat: 'char const *', bandCount: 'uint32_t', bands: 'nitf_BandInfo **', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_ImageSubheader_setPixelInformation(subhdr, pvtype, nbpp, abpp, justification, irep, icat, bandCount, bands, error)
nitf_ImageSubheader_setPixelInformation = _nitropy.nitf_ImageSubheader_setPixelInformation

def nitf_ImageSubheader_getBandCount(subhdr: 'nitf_ImageSubheader', error: 'nrt_Error') -> "uint32_t":
    return _nitropy.nitf_ImageSubheader_getBandCount(subhdr, error)
nitf_ImageSubheader_getBandCount = _nitropy.nitf_ImageSubheader_getBandCount

def nitf_ImageSubheader_getBandInfo(subhdr: 'nitf_ImageSubheader', band: 'uint32_t', error: 'nrt_Error') -> "nitf_BandInfo *":
    return _nitropy.nitf_ImageSubheader_getBandInfo(subhdr, band, error)
nitf_ImageSubheader_getBandInfo = _nitropy.nitf_ImageSubheader_getBandInfo

def nitf_ImageSubheader_createBands(subhdr: 'nitf_ImageSubheader', numBands: 'uint32_t', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_ImageSubheader_createBands(subhdr, numBands, error)
nitf_ImageSubheader_createBands = _nitropy.nitf_ImageSubheader_createBands

def nitf_ImageSubheader_removeBand(subhdr: 'nitf_ImageSubheader', index: 'uint32_t', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_ImageSubheader_removeBand(subhdr, index, error)
nitf_ImageSubheader_removeBand = _nitropy.nitf_ImageSubheader_removeBand

def nitf_ImageSubheader_getDimensions(subhdr: 'nitf_ImageSubheader', numRows: 'uint32_t *', numCols: 'uint32_t *', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_ImageSubheader_getDimensions(subhdr, numRows, numCols, error)
nitf_ImageSubheader_getDimensions = _nitropy.nitf_ImageSubheader_getDimensions

def nitf_ImageSubheader_getBlocking(subhdr: 'nitf_ImageSubheader', numRows: 'uint32_t *', numCols: 'uint32_t *', numRowsPerBlock: 'uint32_t *', numColsPerBlock: 'uint32_t *', numBlocksPerRow: 'uint32_t *', numBlocksPerCol: 'uint32_t *', imode: 'char *', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_ImageSubheader_getBlocking(subhdr, numRows, numCols, numRowsPerBlock, numColsPerBlock, numBlocksPerRow, numBlocksPerCol, imode, error)
nitf_ImageSubheader_getBlocking = _nitropy.nitf_ImageSubheader_getBlocking

def nitf_ImageSubheader_getCompression(subhdr: 'nitf_ImageSubheader', imageCompression: 'char *', compressionRate: 'char *', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_ImageSubheader_getCompression(subhdr, imageCompression, compressionRate, error)
nitf_ImageSubheader_getCompression = _nitropy.nitf_ImageSubheader_getCompression

def nitf_ImageSubheader_setDimensions(subhdr: 'nitf_ImageSubheader', numRows: 'uint32_t', numCols: 'uint32_t', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_ImageSubheader_setDimensions(subhdr, numRows, numCols, error)
nitf_ImageSubheader_setDimensions = _nitropy.nitf_ImageSubheader_setDimensions

def nitf_ImageSubheader_setCornersFromLatLons(subheader: 'nitf_ImageSubheader', type: 'nitf_CornersType', corners: 'double const [4][2]', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_ImageSubheader_setCornersFromLatLons(subheader, type, corners, error)
nitf_ImageSubheader_setCornersFromLatLons = _nitropy.nitf_ImageSubheader_setCornersFromLatLons

def nitf_ImageSubheader_getCornersType(subheader: 'nitf_ImageSubheader') -> "nitf_CornersType":
    return _nitropy.nitf_ImageSubheader_getCornersType(subheader)
nitf_ImageSubheader_getCornersType = _nitropy.nitf_ImageSubheader_getCornersType

def nitf_ImageSubheader_getCornersAsLatLons(subheader: 'nitf_ImageSubheader', corners: 'double [4][2]', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_ImageSubheader_getCornersAsLatLons(subheader, corners, error)
nitf_ImageSubheader_getCornersAsLatLons = _nitropy.nitf_ImageSubheader_getCornersAsLatLons

def nitf_ImageSubheader_computeBlocking(numRows: 'uint32_t', numCols: 'uint32_t', numRowsPerBlock: 'uint32_t *', numColsPerBlock: 'uint32_t *', numBlocksPerCol: 'uint32_t *', numBlocksPerRow: 'uint32_t *') -> "void":
    return _nitropy.nitf_ImageSubheader_computeBlocking(numRows, numCols, numRowsPerBlock, numColsPerBlock, numBlocksPerCol, numBlocksPerRow)
nitf_ImageSubheader_computeBlocking = _nitropy.nitf_ImageSubheader_computeBlocking

def nitf_ImageSubheader_setBlocking(subhdr: 'nitf_ImageSubheader', numRows: 'uint32_t', numCols: 'uint32_t', numRowsPerBlock: 'uint32_t', numColsPerBlock: 'uint32_t', imode: 'char const *', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_ImageSubheader_setBlocking(subhdr, numRows, numCols, numRowsPerBlock, numColsPerBlock, imode, error)
nitf_ImageSubheader_setBlocking = _nitropy.nitf_ImageSubheader_setBlocking

def nitf_ImageSubheader_setCompression(subhdr: 'nitf_ImageSubheader', imageCompression: 'char const *', compressionRate: 'char const *', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_ImageSubheader_setCompression(subhdr, imageCompression, compressionRate, error)
nitf_ImageSubheader_setCompression = _nitropy.nitf_ImageSubheader_setCompression

def nitf_ImageSubheader_insertImageComment(subhdr: 'nitf_ImageSubheader', comment: 'char const *', position: 'int', error: 'nrt_Error') -> "int":
    return _nitropy.nitf_ImageSubheader_insertImageComment(subhdr, comment, position, error)
nitf_ImageSubheader_insertImageComment = _nitropy.nitf_ImageSubheader_insertImageComment

def nitf_ImageSubheader_removeImageComment(subhdr: 'nitf_ImageSubheader', position: 'int', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_ImageSubheader_removeImageComment(subhdr, position, error)
nitf_ImageSubheader_removeImageComment = _nitropy.nitf_ImageSubheader_removeImageComment
class nitf_GraphicSegment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_GraphicSegment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nitf_GraphicSegment, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["subheader"] = _nitropy.nitf_GraphicSegment_subheader_set
    __swig_getmethods__["subheader"] = _nitropy.nitf_GraphicSegment_subheader_get
    if _newclass:
        subheader = _swig_property(_nitropy.nitf_GraphicSegment_subheader_get, _nitropy.nitf_GraphicSegment_subheader_set)
    __swig_setmethods__["offset"] = _nitropy.nitf_GraphicSegment_offset_set
    __swig_getmethods__["offset"] = _nitropy.nitf_GraphicSegment_offset_get
    if _newclass:
        offset = _swig_property(_nitropy.nitf_GraphicSegment_offset_get, _nitropy.nitf_GraphicSegment_offset_set)
    __swig_setmethods__["end"] = _nitropy.nitf_GraphicSegment_end_set
    __swig_getmethods__["end"] = _nitropy.nitf_GraphicSegment_end_get
    if _newclass:
        end = _swig_property(_nitropy.nitf_GraphicSegment_end_get, _nitropy.nitf_GraphicSegment_end_set)
    __swig_setmethods__["graphic"] = _nitropy.nitf_GraphicSegment_graphic_set
    __swig_getmethods__["graphic"] = _nitropy.nitf_GraphicSegment_graphic_get
    if _newclass:
        graphic = _swig_property(_nitropy.nitf_GraphicSegment_graphic_get, _nitropy.nitf_GraphicSegment_graphic_set)
    __swig_destroy__ = _nitropy.delete_nitf_GraphicSegment
    __del__ = lambda self: None
nitf_GraphicSegment_swigregister = _nitropy.nitf_GraphicSegment_swigregister
nitf_GraphicSegment_swigregister(nitf_GraphicSegment)


def nitf_GraphicSegment_construct(error: 'nrt_Error') -> "nitf_GraphicSegment *":
    return _nitropy.nitf_GraphicSegment_construct(error)
nitf_GraphicSegment_construct = _nitropy.nitf_GraphicSegment_construct

def nitf_GraphicSegment_clone(source: 'nitf_GraphicSegment', error: 'nrt_Error') -> "nitf_GraphicSegment *":
    return _nitropy.nitf_GraphicSegment_clone(source, error)
nitf_GraphicSegment_clone = _nitropy.nitf_GraphicSegment_clone

def nitf_GraphicSegment_destruct(segment: 'nitf_GraphicSegment **') -> "void":
    return _nitropy.nitf_GraphicSegment_destruct(segment)
nitf_GraphicSegment_destruct = _nitropy.nitf_GraphicSegment_destruct
NITF_SY_SZ = _nitropy.NITF_SY_SZ
NITF_SID_SZ = _nitropy.NITF_SID_SZ
NITF_SNAME_SZ = _nitropy.NITF_SNAME_SZ
NITF_SSCLAS_SZ = _nitropy.NITF_SSCLAS_SZ
NITF_SFMT_SZ = _nitropy.NITF_SFMT_SZ
NITF_SSTRUCT_SZ = _nitropy.NITF_SSTRUCT_SZ
NITF_SDLVL_SZ = _nitropy.NITF_SDLVL_SZ
NITF_SALVL_SZ = _nitropy.NITF_SALVL_SZ
NITF_SLOC_SZ = _nitropy.NITF_SLOC_SZ
NITF_SBND1_SZ = _nitropy.NITF_SBND1_SZ
NITF_SCOLOR_SZ = _nitropy.NITF_SCOLOR_SZ
NITF_SBND2_SZ = _nitropy.NITF_SBND2_SZ
NITF_SRES2_SZ = _nitropy.NITF_SRES2_SZ
NITF_SXSHDL_SZ = _nitropy.NITF_SXSHDL_SZ
NITF_SXSOFL_SZ = _nitropy.NITF_SXSOFL_SZ
class nitf_GraphicSubheader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_GraphicSubheader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nitf_GraphicSubheader, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["filePartType"] = _nitropy.nitf_GraphicSubheader_filePartType_set
    __swig_getmethods__["filePartType"] = _nitropy.nitf_GraphicSubheader_filePartType_get
    if _newclass:
        filePartType = _swig_property(_nitropy.nitf_GraphicSubheader_filePartType_get, _nitropy.nitf_GraphicSubheader_filePartType_set)
    __swig_setmethods__["graphicID"] = _nitropy.nitf_GraphicSubheader_graphicID_set
    __swig_getmethods__["graphicID"] = _nitropy.nitf_GraphicSubheader_graphicID_get
    if _newclass:
        graphicID = _swig_property(_nitropy.nitf_GraphicSubheader_graphicID_get, _nitropy.nitf_GraphicSubheader_graphicID_set)
    __swig_setmethods__["name"] = _nitropy.nitf_GraphicSubheader_name_set
    __swig_getmethods__["name"] = _nitropy.nitf_GraphicSubheader_name_get
    if _newclass:
        name = _swig_property(_nitropy.nitf_GraphicSubheader_name_get, _nitropy.nitf_GraphicSubheader_name_set)
    __swig_setmethods__["securityClass"] = _nitropy.nitf_GraphicSubheader_securityClass_set
    __swig_getmethods__["securityClass"] = _nitropy.nitf_GraphicSubheader_securityClass_get
    if _newclass:
        securityClass = _swig_property(_nitropy.nitf_GraphicSubheader_securityClass_get, _nitropy.nitf_GraphicSubheader_securityClass_set)
    __swig_setmethods__["securityGroup"] = _nitropy.nitf_GraphicSubheader_securityGroup_set
    __swig_getmethods__["securityGroup"] = _nitropy.nitf_GraphicSubheader_securityGroup_get
    if _newclass:
        securityGroup = _swig_property(_nitropy.nitf_GraphicSubheader_securityGroup_get, _nitropy.nitf_GraphicSubheader_securityGroup_set)
    __swig_setmethods__["encrypted"] = _nitropy.nitf_GraphicSubheader_encrypted_set
    __swig_getmethods__["encrypted"] = _nitropy.nitf_GraphicSubheader_encrypted_get
    if _newclass:
        encrypted = _swig_property(_nitropy.nitf_GraphicSubheader_encrypted_get, _nitropy.nitf_GraphicSubheader_encrypted_set)
    __swig_setmethods__["stype"] = _nitropy.nitf_GraphicSubheader_stype_set
    __swig_getmethods__["stype"] = _nitropy.nitf_GraphicSubheader_stype_get
    if _newclass:
        stype = _swig_property(_nitropy.nitf_GraphicSubheader_stype_get, _nitropy.nitf_GraphicSubheader_stype_set)
    __swig_setmethods__["res1"] = _nitropy.nitf_GraphicSubheader_res1_set
    __swig_getmethods__["res1"] = _nitropy.nitf_GraphicSubheader_res1_get
    if _newclass:
        res1 = _swig_property(_nitropy.nitf_GraphicSubheader_res1_get, _nitropy.nitf_GraphicSubheader_res1_set)
    __swig_setmethods__["displayLevel"] = _nitropy.nitf_GraphicSubheader_displayLevel_set
    __swig_getmethods__["displayLevel"] = _nitropy.nitf_GraphicSubheader_displayLevel_get
    if _newclass:
        displayLevel = _swig_property(_nitropy.nitf_GraphicSubheader_displayLevel_get, _nitropy.nitf_GraphicSubheader_displayLevel_set)
    __swig_setmethods__["attachmentLevel"] = _nitropy.nitf_GraphicSubheader_attachmentLevel_set
    __swig_getmethods__["attachmentLevel"] = _nitropy.nitf_GraphicSubheader_attachmentLevel_get
    if _newclass:
        attachmentLevel = _swig_property(_nitropy.nitf_GraphicSubheader_attachmentLevel_get, _nitropy.nitf_GraphicSubheader_attachmentLevel_set)
    __swig_setmethods__["location"] = _nitropy.nitf_GraphicSubheader_location_set
    __swig_getmethods__["location"] = _nitropy.nitf_GraphicSubheader_location_get
    if _newclass:
        location = _swig_property(_nitropy.nitf_GraphicSubheader_location_get, _nitropy.nitf_GraphicSubheader_location_set)
    __swig_setmethods__["bound1Loc"] = _nitropy.nitf_GraphicSubheader_bound1Loc_set
    __swig_getmethods__["bound1Loc"] = _nitropy.nitf_GraphicSubheader_bound1Loc_get
    if _newclass:
        bound1Loc = _swig_property(_nitropy.nitf_GraphicSubheader_bound1Loc_get, _nitropy.nitf_GraphicSubheader_bound1Loc_set)
    __swig_setmethods__["color"] = _nitropy.nitf_GraphicSubheader_color_set
    __swig_getmethods__["color"] = _nitropy.nitf_GraphicSubheader_color_get
    if _newclass:
        color = _swig_property(_nitropy.nitf_GraphicSubheader_color_get, _nitropy.nitf_GraphicSubheader_color_set)
    __swig_setmethods__["bound2Loc"] = _nitropy.nitf_GraphicSubheader_bound2Loc_set
    __swig_getmethods__["bound2Loc"] = _nitropy.nitf_GraphicSubheader_bound2Loc_get
    if _newclass:
        bound2Loc = _swig_property(_nitropy.nitf_GraphicSubheader_bound2Loc_get, _nitropy.nitf_GraphicSubheader_bound2Loc_set)
    __swig_setmethods__["res2"] = _nitropy.nitf_GraphicSubheader_res2_set
    __swig_getmethods__["res2"] = _nitropy.nitf_GraphicSubheader_res2_get
    if _newclass:
        res2 = _swig_property(_nitropy.nitf_GraphicSubheader_res2_get, _nitropy.nitf_GraphicSubheader_res2_set)
    __swig_setmethods__["extendedHeaderLength"] = _nitropy.nitf_GraphicSubheader_extendedHeaderLength_set
    __swig_getmethods__["extendedHeaderLength"] = _nitropy.nitf_GraphicSubheader_extendedHeaderLength_get
    if _newclass:
        extendedHeaderLength = _swig_property(_nitropy.nitf_GraphicSubheader_extendedHeaderLength_get, _nitropy.nitf_GraphicSubheader_extendedHeaderLength_set)
    __swig_setmethods__["extendedHeaderOverflow"] = _nitropy.nitf_GraphicSubheader_extendedHeaderOverflow_set
    __swig_getmethods__["extendedHeaderOverflow"] = _nitropy.nitf_GraphicSubheader_extendedHeaderOverflow_get
    if _newclass:
        extendedHeaderOverflow = _swig_property(_nitropy.nitf_GraphicSubheader_extendedHeaderOverflow_get, _nitropy.nitf_GraphicSubheader_extendedHeaderOverflow_set)
    __swig_setmethods__["extendedSection"] = _nitropy.nitf_GraphicSubheader_extendedSection_set
    __swig_getmethods__["extendedSection"] = _nitropy.nitf_GraphicSubheader_extendedSection_get
    if _newclass:
        extendedSection = _swig_property(_nitropy.nitf_GraphicSubheader_extendedSection_get, _nitropy.nitf_GraphicSubheader_extendedSection_set)
    __swig_destroy__ = _nitropy.delete_nitf_GraphicSubheader
    __del__ = lambda self: None
nitf_GraphicSubheader_swigregister = _nitropy.nitf_GraphicSubheader_swigregister
nitf_GraphicSubheader_swigregister(nitf_GraphicSubheader)


def nitf_GraphicSubheader_construct(error: 'nrt_Error') -> "nitf_GraphicSubheader *":
    return _nitropy.nitf_GraphicSubheader_construct(error)
nitf_GraphicSubheader_construct = _nitropy.nitf_GraphicSubheader_construct

def nitf_GraphicSubheader_clone(source: 'nitf_GraphicSubheader', error: 'nrt_Error') -> "nitf_GraphicSubheader *":
    return _nitropy.nitf_GraphicSubheader_clone(source, error)
nitf_GraphicSubheader_clone = _nitropy.nitf_GraphicSubheader_clone

def nitf_GraphicSubheader_destruct(subhdr: 'nitf_GraphicSubheader **') -> "void":
    return _nitropy.nitf_GraphicSubheader_destruct(subhdr)
nitf_GraphicSubheader_destruct = _nitropy.nitf_GraphicSubheader_destruct
class nitf_LabelSegment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_LabelSegment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nitf_LabelSegment, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["subheader"] = _nitropy.nitf_LabelSegment_subheader_set
    __swig_getmethods__["subheader"] = _nitropy.nitf_LabelSegment_subheader_get
    if _newclass:
        subheader = _swig_property(_nitropy.nitf_LabelSegment_subheader_get, _nitropy.nitf_LabelSegment_subheader_set)
    __swig_setmethods__["offset"] = _nitropy.nitf_LabelSegment_offset_set
    __swig_getmethods__["offset"] = _nitropy.nitf_LabelSegment_offset_get
    if _newclass:
        offset = _swig_property(_nitropy.nitf_LabelSegment_offset_get, _nitropy.nitf_LabelSegment_offset_set)
    __swig_setmethods__["end"] = _nitropy.nitf_LabelSegment_end_set
    __swig_getmethods__["end"] = _nitropy.nitf_LabelSegment_end_get
    if _newclass:
        end = _swig_property(_nitropy.nitf_LabelSegment_end_get, _nitropy.nitf_LabelSegment_end_set)
    __swig_setmethods__["label"] = _nitropy.nitf_LabelSegment_label_set
    __swig_getmethods__["label"] = _nitropy.nitf_LabelSegment_label_get
    if _newclass:
        label = _swig_property(_nitropy.nitf_LabelSegment_label_get, _nitropy.nitf_LabelSegment_label_set)
    __swig_destroy__ = _nitropy.delete_nitf_LabelSegment
    __del__ = lambda self: None
nitf_LabelSegment_swigregister = _nitropy.nitf_LabelSegment_swigregister
nitf_LabelSegment_swigregister(nitf_LabelSegment)


def nitf_LabelSegment_construct(error: 'nrt_Error') -> "nitf_LabelSegment *":
    return _nitropy.nitf_LabelSegment_construct(error)
nitf_LabelSegment_construct = _nitropy.nitf_LabelSegment_construct

def nitf_LabelSegment_clone(source: 'nitf_LabelSegment', error: 'nrt_Error') -> "nitf_LabelSegment *":
    return _nitropy.nitf_LabelSegment_clone(source, error)
nitf_LabelSegment_clone = _nitropy.nitf_LabelSegment_clone

def nitf_LabelSegment_destruct(segment: 'nitf_LabelSegment **') -> "void":
    return _nitropy.nitf_LabelSegment_destruct(segment)
nitf_LabelSegment_destruct = _nitropy.nitf_LabelSegment_destruct
NITF_LA_SZ = _nitropy.NITF_LA_SZ
NITF_LID_SZ = _nitropy.NITF_LID_SZ
NITF_LSCLAS_SZ = _nitropy.NITF_LSCLAS_SZ
NITF_LFS_SZ = _nitropy.NITF_LFS_SZ
NITF_LCW_SZ = _nitropy.NITF_LCW_SZ
NITF_LCH_SZ = _nitropy.NITF_LCH_SZ
NITF_LDLVL_SZ = _nitropy.NITF_LDLVL_SZ
NITF_LALVL_SZ = _nitropy.NITF_LALVL_SZ
NITF_LLOCR_SZ = _nitropy.NITF_LLOCR_SZ
NITF_LLOCC_SZ = _nitropy.NITF_LLOCC_SZ
NITF_LTC_SZ = _nitropy.NITF_LTC_SZ
NITF_LBC_SZ = _nitropy.NITF_LBC_SZ
NITF_LXSHDL_SZ = _nitropy.NITF_LXSHDL_SZ
NITF_LXSOFL_SZ = _nitropy.NITF_LXSOFL_SZ
class nitf_LabelSubheader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_LabelSubheader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nitf_LabelSubheader, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["filePartType"] = _nitropy.nitf_LabelSubheader_filePartType_set
    __swig_getmethods__["filePartType"] = _nitropy.nitf_LabelSubheader_filePartType_get
    if _newclass:
        filePartType = _swig_property(_nitropy.nitf_LabelSubheader_filePartType_get, _nitropy.nitf_LabelSubheader_filePartType_set)
    __swig_setmethods__["labelID"] = _nitropy.nitf_LabelSubheader_labelID_set
    __swig_getmethods__["labelID"] = _nitropy.nitf_LabelSubheader_labelID_get
    if _newclass:
        labelID = _swig_property(_nitropy.nitf_LabelSubheader_labelID_get, _nitropy.nitf_LabelSubheader_labelID_set)
    __swig_setmethods__["securityClass"] = _nitropy.nitf_LabelSubheader_securityClass_set
    __swig_getmethods__["securityClass"] = _nitropy.nitf_LabelSubheader_securityClass_get
    if _newclass:
        securityClass = _swig_property(_nitropy.nitf_LabelSubheader_securityClass_get, _nitropy.nitf_LabelSubheader_securityClass_set)
    __swig_setmethods__["securityGroup"] = _nitropy.nitf_LabelSubheader_securityGroup_set
    __swig_getmethods__["securityGroup"] = _nitropy.nitf_LabelSubheader_securityGroup_get
    if _newclass:
        securityGroup = _swig_property(_nitropy.nitf_LabelSubheader_securityGroup_get, _nitropy.nitf_LabelSubheader_securityGroup_set)
    __swig_setmethods__["encrypted"] = _nitropy.nitf_LabelSubheader_encrypted_set
    __swig_getmethods__["encrypted"] = _nitropy.nitf_LabelSubheader_encrypted_get
    if _newclass:
        encrypted = _swig_property(_nitropy.nitf_LabelSubheader_encrypted_get, _nitropy.nitf_LabelSubheader_encrypted_set)
    __swig_setmethods__["fontStyle"] = _nitropy.nitf_LabelSubheader_fontStyle_set
    __swig_getmethods__["fontStyle"] = _nitropy.nitf_LabelSubheader_fontStyle_get
    if _newclass:
        fontStyle = _swig_property(_nitropy.nitf_LabelSubheader_fontStyle_get, _nitropy.nitf_LabelSubheader_fontStyle_set)
    __swig_setmethods__["cellWidth"] = _nitropy.nitf_LabelSubheader_cellWidth_set
    __swig_getmethods__["cellWidth"] = _nitropy.nitf_LabelSubheader_cellWidth_get
    if _newclass:
        cellWidth = _swig_property(_nitropy.nitf_LabelSubheader_cellWidth_get, _nitropy.nitf_LabelSubheader_cellWidth_set)
    __swig_setmethods__["cellHeight"] = _nitropy.nitf_LabelSubheader_cellHeight_set
    __swig_getmethods__["cellHeight"] = _nitropy.nitf_LabelSubheader_cellHeight_get
    if _newclass:
        cellHeight = _swig_property(_nitropy.nitf_LabelSubheader_cellHeight_get, _nitropy.nitf_LabelSubheader_cellHeight_set)
    __swig_setmethods__["displayLevel"] = _nitropy.nitf_LabelSubheader_displayLevel_set
    __swig_getmethods__["displayLevel"] = _nitropy.nitf_LabelSubheader_displayLevel_get
    if _newclass:
        displayLevel = _swig_property(_nitropy.nitf_LabelSubheader_displayLevel_get, _nitropy.nitf_LabelSubheader_displayLevel_set)
    __swig_setmethods__["attachmentLevel"] = _nitropy.nitf_LabelSubheader_attachmentLevel_set
    __swig_getmethods__["attachmentLevel"] = _nitropy.nitf_LabelSubheader_attachmentLevel_get
    if _newclass:
        attachmentLevel = _swig_property(_nitropy.nitf_LabelSubheader_attachmentLevel_get, _nitropy.nitf_LabelSubheader_attachmentLevel_set)
    __swig_setmethods__["locationRow"] = _nitropy.nitf_LabelSubheader_locationRow_set
    __swig_getmethods__["locationRow"] = _nitropy.nitf_LabelSubheader_locationRow_get
    if _newclass:
        locationRow = _swig_property(_nitropy.nitf_LabelSubheader_locationRow_get, _nitropy.nitf_LabelSubheader_locationRow_set)
    __swig_setmethods__["locationColumn"] = _nitropy.nitf_LabelSubheader_locationColumn_set
    __swig_getmethods__["locationColumn"] = _nitropy.nitf_LabelSubheader_locationColumn_get
    if _newclass:
        locationColumn = _swig_property(_nitropy.nitf_LabelSubheader_locationColumn_get, _nitropy.nitf_LabelSubheader_locationColumn_set)
    __swig_setmethods__["textColor"] = _nitropy.nitf_LabelSubheader_textColor_set
    __swig_getmethods__["textColor"] = _nitropy.nitf_LabelSubheader_textColor_get
    if _newclass:
        textColor = _swig_property(_nitropy.nitf_LabelSubheader_textColor_get, _nitropy.nitf_LabelSubheader_textColor_set)
    __swig_setmethods__["backgroundColor"] = _nitropy.nitf_LabelSubheader_backgroundColor_set
    __swig_getmethods__["backgroundColor"] = _nitropy.nitf_LabelSubheader_backgroundColor_get
    if _newclass:
        backgroundColor = _swig_property(_nitropy.nitf_LabelSubheader_backgroundColor_get, _nitropy.nitf_LabelSubheader_backgroundColor_set)
    __swig_setmethods__["extendedHeaderLength"] = _nitropy.nitf_LabelSubheader_extendedHeaderLength_set
    __swig_getmethods__["extendedHeaderLength"] = _nitropy.nitf_LabelSubheader_extendedHeaderLength_get
    if _newclass:
        extendedHeaderLength = _swig_property(_nitropy.nitf_LabelSubheader_extendedHeaderLength_get, _nitropy.nitf_LabelSubheader_extendedHeaderLength_set)
    __swig_setmethods__["extendedHeaderOverflow"] = _nitropy.nitf_LabelSubheader_extendedHeaderOverflow_set
    __swig_getmethods__["extendedHeaderOverflow"] = _nitropy.nitf_LabelSubheader_extendedHeaderOverflow_get
    if _newclass:
        extendedHeaderOverflow = _swig_property(_nitropy.nitf_LabelSubheader_extendedHeaderOverflow_get, _nitropy.nitf_LabelSubheader_extendedHeaderOverflow_set)
    __swig_setmethods__["extendedSection"] = _nitropy.nitf_LabelSubheader_extendedSection_set
    __swig_getmethods__["extendedSection"] = _nitropy.nitf_LabelSubheader_extendedSection_get
    if _newclass:
        extendedSection = _swig_property(_nitropy.nitf_LabelSubheader_extendedSection_get, _nitropy.nitf_LabelSubheader_extendedSection_set)
    __swig_destroy__ = _nitropy.delete_nitf_LabelSubheader
    __del__ = lambda self: None
nitf_LabelSubheader_swigregister = _nitropy.nitf_LabelSubheader_swigregister
nitf_LabelSubheader_swigregister(nitf_LabelSubheader)


def nitf_LabelSubheader_construct(error: 'nrt_Error') -> "nitf_LabelSubheader *":
    return _nitropy.nitf_LabelSubheader_construct(error)
nitf_LabelSubheader_construct = _nitropy.nitf_LabelSubheader_construct

def nitf_LabelSubheader_clone(source: 'nitf_LabelSubheader', error: 'nrt_Error') -> "nitf_LabelSubheader *":
    return _nitropy.nitf_LabelSubheader_clone(source, error)
nitf_LabelSubheader_clone = _nitropy.nitf_LabelSubheader_clone

def nitf_LabelSubheader_destruct(subhdr: 'nitf_LabelSubheader **') -> "void":
    return _nitropy.nitf_LabelSubheader_destruct(subhdr)
nitf_LabelSubheader_destruct = _nitropy.nitf_LabelSubheader_destruct
class nitf_TextSegment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_TextSegment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nitf_TextSegment, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["subheader"] = _nitropy.nitf_TextSegment_subheader_set
    __swig_getmethods__["subheader"] = _nitropy.nitf_TextSegment_subheader_get
    if _newclass:
        subheader = _swig_property(_nitropy.nitf_TextSegment_subheader_get, _nitropy.nitf_TextSegment_subheader_set)
    __swig_setmethods__["offset"] = _nitropy.nitf_TextSegment_offset_set
    __swig_getmethods__["offset"] = _nitropy.nitf_TextSegment_offset_get
    if _newclass:
        offset = _swig_property(_nitropy.nitf_TextSegment_offset_get, _nitropy.nitf_TextSegment_offset_set)
    __swig_setmethods__["end"] = _nitropy.nitf_TextSegment_end_set
    __swig_getmethods__["end"] = _nitropy.nitf_TextSegment_end_get
    if _newclass:
        end = _swig_property(_nitropy.nitf_TextSegment_end_get, _nitropy.nitf_TextSegment_end_set)
    __swig_destroy__ = _nitropy.delete_nitf_TextSegment
    __del__ = lambda self: None
nitf_TextSegment_swigregister = _nitropy.nitf_TextSegment_swigregister
nitf_TextSegment_swigregister(nitf_TextSegment)


def nitf_TextSegment_construct(error: 'nrt_Error') -> "nitf_TextSegment *":
    return _nitropy.nitf_TextSegment_construct(error)
nitf_TextSegment_construct = _nitropy.nitf_TextSegment_construct

def nitf_TextSegment_clone(source: 'nitf_TextSegment', error: 'nrt_Error') -> "nitf_TextSegment *":
    return _nitropy.nitf_TextSegment_clone(source, error)
nitf_TextSegment_clone = _nitropy.nitf_TextSegment_clone

def nitf_TextSegment_destruct(segment: 'nitf_TextSegment **') -> "void":
    return _nitropy.nitf_TextSegment_destruct(segment)
nitf_TextSegment_destruct = _nitropy.nitf_TextSegment_destruct
NITF_TE_SZ = _nitropy.NITF_TE_SZ
NITF_TEXTID_SZ = _nitropy.NITF_TEXTID_SZ
NITF_TXTALVL_SZ = _nitropy.NITF_TXTALVL_SZ
NITF_TXTDT_SZ = _nitropy.NITF_TXTDT_SZ
NITF_TXTITL_SZ = _nitropy.NITF_TXTITL_SZ
NITF_TSCLAS_SZ = _nitropy.NITF_TSCLAS_SZ
NITF_TXTFMT_SZ = _nitropy.NITF_TXTFMT_SZ
NITF_TXSHDL_SZ = _nitropy.NITF_TXSHDL_SZ
NITF_TXSOFL_SZ = _nitropy.NITF_TXSOFL_SZ
class nitf_TextSubheader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_TextSubheader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nitf_TextSubheader, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["filePartType"] = _nitropy.nitf_TextSubheader_filePartType_set
    __swig_getmethods__["filePartType"] = _nitropy.nitf_TextSubheader_filePartType_get
    if _newclass:
        filePartType = _swig_property(_nitropy.nitf_TextSubheader_filePartType_get, _nitropy.nitf_TextSubheader_filePartType_set)
    __swig_setmethods__["textID"] = _nitropy.nitf_TextSubheader_textID_set
    __swig_getmethods__["textID"] = _nitropy.nitf_TextSubheader_textID_get
    if _newclass:
        textID = _swig_property(_nitropy.nitf_TextSubheader_textID_get, _nitropy.nitf_TextSubheader_textID_set)
    __swig_setmethods__["attachmentLevel"] = _nitropy.nitf_TextSubheader_attachmentLevel_set
    __swig_getmethods__["attachmentLevel"] = _nitropy.nitf_TextSubheader_attachmentLevel_get
    if _newclass:
        attachmentLevel = _swig_property(_nitropy.nitf_TextSubheader_attachmentLevel_get, _nitropy.nitf_TextSubheader_attachmentLevel_set)
    __swig_setmethods__["dateTime"] = _nitropy.nitf_TextSubheader_dateTime_set
    __swig_getmethods__["dateTime"] = _nitropy.nitf_TextSubheader_dateTime_get
    if _newclass:
        dateTime = _swig_property(_nitropy.nitf_TextSubheader_dateTime_get, _nitropy.nitf_TextSubheader_dateTime_set)
    __swig_setmethods__["title"] = _nitropy.nitf_TextSubheader_title_set
    __swig_getmethods__["title"] = _nitropy.nitf_TextSubheader_title_get
    if _newclass:
        title = _swig_property(_nitropy.nitf_TextSubheader_title_get, _nitropy.nitf_TextSubheader_title_set)
    __swig_setmethods__["securityClass"] = _nitropy.nitf_TextSubheader_securityClass_set
    __swig_getmethods__["securityClass"] = _nitropy.nitf_TextSubheader_securityClass_get
    if _newclass:
        securityClass = _swig_property(_nitropy.nitf_TextSubheader_securityClass_get, _nitropy.nitf_TextSubheader_securityClass_set)
    __swig_setmethods__["securityGroup"] = _nitropy.nitf_TextSubheader_securityGroup_set
    __swig_getmethods__["securityGroup"] = _nitropy.nitf_TextSubheader_securityGroup_get
    if _newclass:
        securityGroup = _swig_property(_nitropy.nitf_TextSubheader_securityGroup_get, _nitropy.nitf_TextSubheader_securityGroup_set)
    __swig_setmethods__["encrypted"] = _nitropy.nitf_TextSubheader_encrypted_set
    __swig_getmethods__["encrypted"] = _nitropy.nitf_TextSubheader_encrypted_get
    if _newclass:
        encrypted = _swig_property(_nitropy.nitf_TextSubheader_encrypted_get, _nitropy.nitf_TextSubheader_encrypted_set)
    __swig_setmethods__["format"] = _nitropy.nitf_TextSubheader_format_set
    __swig_getmethods__["format"] = _nitropy.nitf_TextSubheader_format_get
    if _newclass:
        format = _swig_property(_nitropy.nitf_TextSubheader_format_get, _nitropy.nitf_TextSubheader_format_set)
    __swig_setmethods__["extendedHeaderLength"] = _nitropy.nitf_TextSubheader_extendedHeaderLength_set
    __swig_getmethods__["extendedHeaderLength"] = _nitropy.nitf_TextSubheader_extendedHeaderLength_get
    if _newclass:
        extendedHeaderLength = _swig_property(_nitropy.nitf_TextSubheader_extendedHeaderLength_get, _nitropy.nitf_TextSubheader_extendedHeaderLength_set)
    __swig_setmethods__["extendedHeaderOverflow"] = _nitropy.nitf_TextSubheader_extendedHeaderOverflow_set
    __swig_getmethods__["extendedHeaderOverflow"] = _nitropy.nitf_TextSubheader_extendedHeaderOverflow_get
    if _newclass:
        extendedHeaderOverflow = _swig_property(_nitropy.nitf_TextSubheader_extendedHeaderOverflow_get, _nitropy.nitf_TextSubheader_extendedHeaderOverflow_set)
    __swig_setmethods__["extendedSection"] = _nitropy.nitf_TextSubheader_extendedSection_set
    __swig_getmethods__["extendedSection"] = _nitropy.nitf_TextSubheader_extendedSection_get
    if _newclass:
        extendedSection = _swig_property(_nitropy.nitf_TextSubheader_extendedSection_get, _nitropy.nitf_TextSubheader_extendedSection_set)
    __swig_destroy__ = _nitropy.delete_nitf_TextSubheader
    __del__ = lambda self: None
nitf_TextSubheader_swigregister = _nitropy.nitf_TextSubheader_swigregister
nitf_TextSubheader_swigregister(nitf_TextSubheader)


def nitf_TextSubheader_construct(error: 'nrt_Error') -> "nitf_TextSubheader *":
    return _nitropy.nitf_TextSubheader_construct(error)
nitf_TextSubheader_construct = _nitropy.nitf_TextSubheader_construct

def nitf_TextSubheader_clone(source: 'nitf_TextSubheader', error: 'nrt_Error') -> "nitf_TextSubheader *":
    return _nitropy.nitf_TextSubheader_clone(source, error)
nitf_TextSubheader_clone = _nitropy.nitf_TextSubheader_clone

def nitf_TextSubheader_destruct(subhdr: 'nitf_TextSubheader **') -> "void":
    return _nitropy.nitf_TextSubheader_destruct(subhdr)
nitf_TextSubheader_destruct = _nitropy.nitf_TextSubheader_destruct
class nitf_DESegment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_DESegment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nitf_DESegment, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["subheader"] = _nitropy.nitf_DESegment_subheader_set
    __swig_getmethods__["subheader"] = _nitropy.nitf_DESegment_subheader_get
    if _newclass:
        subheader = _swig_property(_nitropy.nitf_DESegment_subheader_get, _nitropy.nitf_DESegment_subheader_set)
    __swig_setmethods__["offset"] = _nitropy.nitf_DESegment_offset_set
    __swig_getmethods__["offset"] = _nitropy.nitf_DESegment_offset_get
    if _newclass:
        offset = _swig_property(_nitropy.nitf_DESegment_offset_get, _nitropy.nitf_DESegment_offset_set)
    __swig_setmethods__["end"] = _nitropy.nitf_DESegment_end_set
    __swig_getmethods__["end"] = _nitropy.nitf_DESegment_end_get
    if _newclass:
        end = _swig_property(_nitropy.nitf_DESegment_end_get, _nitropy.nitf_DESegment_end_set)
    __swig_destroy__ = _nitropy.delete_nitf_DESegment
    __del__ = lambda self: None
nitf_DESegment_swigregister = _nitropy.nitf_DESegment_swigregister
nitf_DESegment_swigregister(nitf_DESegment)


def nitf_DESegment_construct(error: 'nrt_Error') -> "nitf_DESegment *":
    return _nitropy.nitf_DESegment_construct(error)
nitf_DESegment_construct = _nitropy.nitf_DESegment_construct

def nitf_DESegment_clone(source: 'nitf_DESegment', error: 'nrt_Error') -> "nitf_DESegment *":
    return _nitropy.nitf_DESegment_clone(source, error)
nitf_DESegment_clone = _nitropy.nitf_DESegment_clone

def nitf_DESegment_destruct(segment: 'nitf_DESegment **') -> "void":
    return _nitropy.nitf_DESegment_destruct(segment)
nitf_DESegment_destruct = _nitropy.nitf_DESegment_destruct
NITF_DE_SZ = _nitropy.NITF_DE_SZ
NITF_DESTAG_SZ = _nitropy.NITF_DESTAG_SZ
NITF_DESVER_SZ = _nitropy.NITF_DESVER_SZ
NITF_DESCLAS_SZ = _nitropy.NITF_DESCLAS_SZ
NITF_DESOFLW_SZ = _nitropy.NITF_DESOFLW_SZ
NITF_DESITEM_SZ = _nitropy.NITF_DESITEM_SZ
NITF_DESSHL_SZ = _nitropy.NITF_DESSHL_SZ
class nitf_DESubheader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_DESubheader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nitf_DESubheader, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["filePartType"] = _nitropy.nitf_DESubheader_filePartType_set
    __swig_getmethods__["filePartType"] = _nitropy.nitf_DESubheader_filePartType_get
    if _newclass:
        filePartType = _swig_property(_nitropy.nitf_DESubheader_filePartType_get, _nitropy.nitf_DESubheader_filePartType_set)
    __swig_setmethods__["typeID"] = _nitropy.nitf_DESubheader_typeID_set
    __swig_getmethods__["typeID"] = _nitropy.nitf_DESubheader_typeID_get
    if _newclass:
        typeID = _swig_property(_nitropy.nitf_DESubheader_typeID_get, _nitropy.nitf_DESubheader_typeID_set)
    __swig_setmethods__["version"] = _nitropy.nitf_DESubheader_version_set
    __swig_getmethods__["version"] = _nitropy.nitf_DESubheader_version_get
    if _newclass:
        version = _swig_property(_nitropy.nitf_DESubheader_version_get, _nitropy.nitf_DESubheader_version_set)
    __swig_setmethods__["securityClass"] = _nitropy.nitf_DESubheader_securityClass_set
    __swig_getmethods__["securityClass"] = _nitropy.nitf_DESubheader_securityClass_get
    if _newclass:
        securityClass = _swig_property(_nitropy.nitf_DESubheader_securityClass_get, _nitropy.nitf_DESubheader_securityClass_set)
    __swig_setmethods__["securityGroup"] = _nitropy.nitf_DESubheader_securityGroup_set
    __swig_getmethods__["securityGroup"] = _nitropy.nitf_DESubheader_securityGroup_get
    if _newclass:
        securityGroup = _swig_property(_nitropy.nitf_DESubheader_securityGroup_get, _nitropy.nitf_DESubheader_securityGroup_set)
    __swig_setmethods__["overflowedHeaderType"] = _nitropy.nitf_DESubheader_overflowedHeaderType_set
    __swig_getmethods__["overflowedHeaderType"] = _nitropy.nitf_DESubheader_overflowedHeaderType_get
    if _newclass:
        overflowedHeaderType = _swig_property(_nitropy.nitf_DESubheader_overflowedHeaderType_get, _nitropy.nitf_DESubheader_overflowedHeaderType_set)
    __swig_setmethods__["dataItemOverflowed"] = _nitropy.nitf_DESubheader_dataItemOverflowed_set
    __swig_getmethods__["dataItemOverflowed"] = _nitropy.nitf_DESubheader_dataItemOverflowed_get
    if _newclass:
        dataItemOverflowed = _swig_property(_nitropy.nitf_DESubheader_dataItemOverflowed_get, _nitropy.nitf_DESubheader_dataItemOverflowed_set)
    __swig_setmethods__["subheaderFieldsLength"] = _nitropy.nitf_DESubheader_subheaderFieldsLength_set
    __swig_getmethods__["subheaderFieldsLength"] = _nitropy.nitf_DESubheader_subheaderFieldsLength_get
    if _newclass:
        subheaderFieldsLength = _swig_property(_nitropy.nitf_DESubheader_subheaderFieldsLength_get, _nitropy.nitf_DESubheader_subheaderFieldsLength_set)
    __swig_setmethods__["subheaderFields"] = _nitropy.nitf_DESubheader_subheaderFields_set
    __swig_getmethods__["subheaderFields"] = _nitropy.nitf_DESubheader_subheaderFields_get
    if _newclass:
        subheaderFields = _swig_property(_nitropy.nitf_DESubheader_subheaderFields_get, _nitropy.nitf_DESubheader_subheaderFields_set)
    __swig_setmethods__["dataLength"] = _nitropy.nitf_DESubheader_dataLength_set
    __swig_getmethods__["dataLength"] = _nitropy.nitf_DESubheader_dataLength_get
    if _newclass:
        dataLength = _swig_property(_nitropy.nitf_DESubheader_dataLength_get, _nitropy.nitf_DESubheader_dataLength_set)
    __swig_setmethods__["userDefinedSection"] = _nitropy.nitf_DESubheader_userDefinedSection_set
    __swig_getmethods__["userDefinedSection"] = _nitropy.nitf_DESubheader_userDefinedSection_get
    if _newclass:
        userDefinedSection = _swig_property(_nitropy.nitf_DESubheader_userDefinedSection_get, _nitropy.nitf_DESubheader_userDefinedSection_set)
    __swig_destroy__ = _nitropy.delete_nitf_DESubheader
    __del__ = lambda self: None
nitf_DESubheader_swigregister = _nitropy.nitf_DESubheader_swigregister
nitf_DESubheader_swigregister(nitf_DESubheader)


def nitf_DESubheader_construct(error: 'nrt_Error') -> "nitf_DESubheader *":
    return _nitropy.nitf_DESubheader_construct(error)
nitf_DESubheader_construct = _nitropy.nitf_DESubheader_construct

def nitf_DESubheader_clone(source: 'nitf_DESubheader', error: 'nrt_Error') -> "nitf_DESubheader *":
    return _nitropy.nitf_DESubheader_clone(source, error)
nitf_DESubheader_clone = _nitropy.nitf_DESubheader_clone

def nitf_DESubheader_destruct(subhdr: 'nitf_DESubheader **') -> "void":
    return _nitropy.nitf_DESubheader_destruct(subhdr)
nitf_DESubheader_destruct = _nitropy.nitf_DESubheader_destruct
class nitf_RESegment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_RESegment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nitf_RESegment, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["subheader"] = _nitropy.nitf_RESegment_subheader_set
    __swig_getmethods__["subheader"] = _nitropy.nitf_RESegment_subheader_get
    if _newclass:
        subheader = _swig_property(_nitropy.nitf_RESegment_subheader_get, _nitropy.nitf_RESegment_subheader_set)
    __swig_setmethods__["offset"] = _nitropy.nitf_RESegment_offset_set
    __swig_getmethods__["offset"] = _nitropy.nitf_RESegment_offset_get
    if _newclass:
        offset = _swig_property(_nitropy.nitf_RESegment_offset_get, _nitropy.nitf_RESegment_offset_set)
    __swig_setmethods__["end"] = _nitropy.nitf_RESegment_end_set
    __swig_getmethods__["end"] = _nitropy.nitf_RESegment_end_get
    if _newclass:
        end = _swig_property(_nitropy.nitf_RESegment_end_get, _nitropy.nitf_RESegment_end_set)
    __swig_setmethods__["data"] = _nitropy.nitf_RESegment_data_set
    __swig_getmethods__["data"] = _nitropy.nitf_RESegment_data_get
    if _newclass:
        data = _swig_property(_nitropy.nitf_RESegment_data_get, _nitropy.nitf_RESegment_data_set)
    __swig_destroy__ = _nitropy.delete_nitf_RESegment
    __del__ = lambda self: None
nitf_RESegment_swigregister = _nitropy.nitf_RESegment_swigregister
nitf_RESegment_swigregister(nitf_RESegment)


def nitf_RESegment_construct(error: 'nrt_Error') -> "nitf_RESegment *":
    return _nitropy.nitf_RESegment_construct(error)
nitf_RESegment_construct = _nitropy.nitf_RESegment_construct

def nitf_RESegment_clone(source: 'nitf_RESegment', error: 'nrt_Error') -> "nitf_RESegment *":
    return _nitropy.nitf_RESegment_clone(source, error)
nitf_RESegment_clone = _nitropy.nitf_RESegment_clone

def nitf_RESegment_destruct(segment: 'nitf_RESegment **') -> "void":
    return _nitropy.nitf_RESegment_destruct(segment)
nitf_RESegment_destruct = _nitropy.nitf_RESegment_destruct
NITF_RE_SZ = _nitropy.NITF_RE_SZ
NITF_RESTAG_SZ = _nitropy.NITF_RESTAG_SZ
NITF_RESVER_SZ = _nitropy.NITF_RESVER_SZ
NITF_RESCLAS_SZ = _nitropy.NITF_RESCLAS_SZ
NITF_RESSHL_SZ = _nitropy.NITF_RESSHL_SZ
class nitf_RESubheader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_RESubheader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nitf_RESubheader, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["filePartType"] = _nitropy.nitf_RESubheader_filePartType_set
    __swig_getmethods__["filePartType"] = _nitropy.nitf_RESubheader_filePartType_get
    if _newclass:
        filePartType = _swig_property(_nitropy.nitf_RESubheader_filePartType_get, _nitropy.nitf_RESubheader_filePartType_set)
    __swig_setmethods__["typeID"] = _nitropy.nitf_RESubheader_typeID_set
    __swig_getmethods__["typeID"] = _nitropy.nitf_RESubheader_typeID_get
    if _newclass:
        typeID = _swig_property(_nitropy.nitf_RESubheader_typeID_get, _nitropy.nitf_RESubheader_typeID_set)
    __swig_setmethods__["version"] = _nitropy.nitf_RESubheader_version_set
    __swig_getmethods__["version"] = _nitropy.nitf_RESubheader_version_get
    if _newclass:
        version = _swig_property(_nitropy.nitf_RESubheader_version_get, _nitropy.nitf_RESubheader_version_set)
    __swig_setmethods__["securityClass"] = _nitropy.nitf_RESubheader_securityClass_set
    __swig_getmethods__["securityClass"] = _nitropy.nitf_RESubheader_securityClass_get
    if _newclass:
        securityClass = _swig_property(_nitropy.nitf_RESubheader_securityClass_get, _nitropy.nitf_RESubheader_securityClass_set)
    __swig_setmethods__["securityGroup"] = _nitropy.nitf_RESubheader_securityGroup_set
    __swig_getmethods__["securityGroup"] = _nitropy.nitf_RESubheader_securityGroup_get
    if _newclass:
        securityGroup = _swig_property(_nitropy.nitf_RESubheader_securityGroup_get, _nitropy.nitf_RESubheader_securityGroup_set)
    __swig_setmethods__["subheaderFieldsLength"] = _nitropy.nitf_RESubheader_subheaderFieldsLength_set
    __swig_getmethods__["subheaderFieldsLength"] = _nitropy.nitf_RESubheader_subheaderFieldsLength_get
    if _newclass:
        subheaderFieldsLength = _swig_property(_nitropy.nitf_RESubheader_subheaderFieldsLength_get, _nitropy.nitf_RESubheader_subheaderFieldsLength_set)
    __swig_setmethods__["subheaderFields"] = _nitropy.nitf_RESubheader_subheaderFields_set
    __swig_getmethods__["subheaderFields"] = _nitropy.nitf_RESubheader_subheaderFields_get
    if _newclass:
        subheaderFields = _swig_property(_nitropy.nitf_RESubheader_subheaderFields_get, _nitropy.nitf_RESubheader_subheaderFields_set)
    __swig_setmethods__["dataLength"] = _nitropy.nitf_RESubheader_dataLength_set
    __swig_getmethods__["dataLength"] = _nitropy.nitf_RESubheader_dataLength_get
    if _newclass:
        dataLength = _swig_property(_nitropy.nitf_RESubheader_dataLength_get, _nitropy.nitf_RESubheader_dataLength_set)
    __swig_destroy__ = _nitropy.delete_nitf_RESubheader
    __del__ = lambda self: None
nitf_RESubheader_swigregister = _nitropy.nitf_RESubheader_swigregister
nitf_RESubheader_swigregister(nitf_RESubheader)


def nitf_RESubheader_construct(error: 'nrt_Error') -> "nitf_RESubheader *":
    return _nitropy.nitf_RESubheader_construct(error)
nitf_RESubheader_construct = _nitropy.nitf_RESubheader_construct

def nitf_RESubheader_clone(source: 'nitf_RESubheader', error: 'nrt_Error') -> "nitf_RESubheader *":
    return _nitropy.nitf_RESubheader_clone(source, error)
nitf_RESubheader_clone = _nitropy.nitf_RESubheader_clone

def nitf_RESubheader_destruct(subhdr: 'nitf_RESubheader **') -> "void":
    return _nitropy.nitf_RESubheader_destruct(subhdr)
nitf_RESubheader_destruct = _nitropy.nitf_RESubheader_destruct
class nitf_ComponentInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_ComponentInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nitf_ComponentInfo, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["lengthSubheader"] = _nitropy.nitf_ComponentInfo_lengthSubheader_set
    __swig_getmethods__["lengthSubheader"] = _nitropy.nitf_ComponentInfo_lengthSubheader_get
    if _newclass:
        lengthSubheader = _swig_property(_nitropy.nitf_ComponentInfo_lengthSubheader_get, _nitropy.nitf_ComponentInfo_lengthSubheader_set)
    __swig_setmethods__["lengthData"] = _nitropy.nitf_ComponentInfo_lengthData_set
    __swig_getmethods__["lengthData"] = _nitropy.nitf_ComponentInfo_lengthData_get
    if _newclass:
        lengthData = _swig_property(_nitropy.nitf_ComponentInfo_lengthData_get, _nitropy.nitf_ComponentInfo_lengthData_set)
    __swig_destroy__ = _nitropy.delete_nitf_ComponentInfo
    __del__ = lambda self: None
nitf_ComponentInfo_swigregister = _nitropy.nitf_ComponentInfo_swigregister
nitf_ComponentInfo_swigregister(nitf_ComponentInfo)


def nitf_ComponentInfo_construct(subheaderFieldWidth: 'uint32_t', dataFieldWidth: 'uint32_t', error: 'nrt_Error') -> "nitf_ComponentInfo *":
    return _nitropy.nitf_ComponentInfo_construct(subheaderFieldWidth, dataFieldWidth, error)
nitf_ComponentInfo_construct = _nitropy.nitf_ComponentInfo_construct

def nitf_ComponentInfo_clone(source: 'nitf_ComponentInfo', error: 'nrt_Error') -> "nitf_ComponentInfo *":
    return _nitropy.nitf_ComponentInfo_clone(source, error)
nitf_ComponentInfo_clone = _nitropy.nitf_ComponentInfo_clone

def nitf_ComponentInfo_destruct(info: 'nitf_ComponentInfo **') -> "void":
    return _nitropy.nitf_ComponentInfo_destruct(info)
nitf_ComponentInfo_destruct = _nitropy.nitf_ComponentInfo_destruct
class nitf_ImageReader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_ImageReader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nitf_ImageReader, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["input"] = _nitropy.nitf_ImageReader_input_set
    __swig_getmethods__["input"] = _nitropy.nitf_ImageReader_input_get
    if _newclass:
        input = _swig_property(_nitropy.nitf_ImageReader_input_get, _nitropy.nitf_ImageReader_input_set)
    __swig_setmethods__["imageDeblocker"] = _nitropy.nitf_ImageReader_imageDeblocker_set
    __swig_getmethods__["imageDeblocker"] = _nitropy.nitf_ImageReader_imageDeblocker_get
    if _newclass:
        imageDeblocker = _swig_property(_nitropy.nitf_ImageReader_imageDeblocker_get, _nitropy.nitf_ImageReader_imageDeblocker_set)
    __swig_setmethods__["directBlockRead"] = _nitropy.nitf_ImageReader_directBlockRead_set
    __swig_getmethods__["directBlockRead"] = _nitropy.nitf_ImageReader_directBlockRead_get
    if _newclass:
        directBlockRead = _swig_property(_nitropy.nitf_ImageReader_directBlockRead_get, _nitropy.nitf_ImageReader_directBlockRead_set)
    __swig_destroy__ = _nitropy.delete_nitf_ImageReader
    __del__ = lambda self: None
nitf_ImageReader_swigregister = _nitropy.nitf_ImageReader_swigregister
nitf_ImageReader_swigregister(nitf_ImageReader)


def nitf_ImageReader_getBlockingInfo(imageReader: 'nitf_ImageReader', error: 'nrt_Error') -> "nitf_BlockingInfo *":
    return _nitropy.nitf_ImageReader_getBlockingInfo(imageReader, error)
nitf_ImageReader_getBlockingInfo = _nitropy.nitf_ImageReader_getBlockingInfo

def nitf_ImageReader_read(imageReader: 'nitf_ImageReader', subWindow: 'nitf_SubWindow', user: 'uint8_t **', padded: 'int *', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_ImageReader_read(imageReader, subWindow, user, padded, error)
nitf_ImageReader_read = _nitropy.nitf_ImageReader_read

def nitf_ImageReader_readBlock(imageReader: 'nitf_ImageReader', blockNumber: 'uint32_t', blockSize: 'uint64_t *', error: 'nrt_Error') -> "uint8_t *":
    return _nitropy.nitf_ImageReader_readBlock(imageReader, blockNumber, blockSize, error)
nitf_ImageReader_readBlock = _nitropy.nitf_ImageReader_readBlock

def nitf_ImageReader_destruct(imageReader: 'nitf_ImageReader **') -> "void":
    return _nitropy.nitf_ImageReader_destruct(imageReader)
nitf_ImageReader_destruct = _nitropy.nitf_ImageReader_destruct

def nitf_ImageReader_setReadCaching(iReader: 'nitf_ImageReader') -> "void":
    return _nitropy.nitf_ImageReader_setReadCaching(iReader)
nitf_ImageReader_setReadCaching = _nitropy.nitf_ImageReader_setReadCaching
class nitf_SegmentReader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_SegmentReader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nitf_SegmentReader, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["input"] = _nitropy.nitf_SegmentReader_input_set
    __swig_getmethods__["input"] = _nitropy.nitf_SegmentReader_input_get
    if _newclass:
        input = _swig_property(_nitropy.nitf_SegmentReader_input_get, _nitropy.nitf_SegmentReader_input_set)
    __swig_setmethods__["dataLength"] = _nitropy.nitf_SegmentReader_dataLength_set
    __swig_getmethods__["dataLength"] = _nitropy.nitf_SegmentReader_dataLength_get
    if _newclass:
        dataLength = _swig_property(_nitropy.nitf_SegmentReader_dataLength_get, _nitropy.nitf_SegmentReader_dataLength_set)
    __swig_setmethods__["baseOffset"] = _nitropy.nitf_SegmentReader_baseOffset_set
    __swig_getmethods__["baseOffset"] = _nitropy.nitf_SegmentReader_baseOffset_get
    if _newclass:
        baseOffset = _swig_property(_nitropy.nitf_SegmentReader_baseOffset_get, _nitropy.nitf_SegmentReader_baseOffset_set)
    __swig_setmethods__["virtualOffset"] = _nitropy.nitf_SegmentReader_virtualOffset_set
    __swig_getmethods__["virtualOffset"] = _nitropy.nitf_SegmentReader_virtualOffset_get
    if _newclass:
        virtualOffset = _swig_property(_nitropy.nitf_SegmentReader_virtualOffset_get, _nitropy.nitf_SegmentReader_virtualOffset_set)
    __swig_destroy__ = _nitropy.delete_nitf_SegmentReader
    __del__ = lambda self: None
nitf_SegmentReader_swigregister = _nitropy.nitf_SegmentReader_swigregister
nitf_SegmentReader_swigregister(nitf_SegmentReader)


def nitf_SegmentReader_read(segmentReader: 'nitf_SegmentReader', buffer: 'NITF_DATA *', count: 'size_t', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_SegmentReader_read(segmentReader, buffer, count, error)
nitf_SegmentReader_read = _nitropy.nitf_SegmentReader_read

def nitf_SegmentReader_seek(segmentReader: 'nitf_SegmentReader', offset: 'nitf_Off', whence: 'int', error: 'nrt_Error') -> "nitf_Off":
    return _nitropy.nitf_SegmentReader_seek(segmentReader, offset, whence, error)
nitf_SegmentReader_seek = _nitropy.nitf_SegmentReader_seek

def nitf_SegmentReader_tell(segmentReader: 'nitf_SegmentReader', error: 'nrt_Error') -> "nitf_Off":
    return _nitropy.nitf_SegmentReader_tell(segmentReader, error)
nitf_SegmentReader_tell = _nitropy.nitf_SegmentReader_tell

def nitf_SegmentReader_getSize(segmentReader: 'nitf_SegmentReader', error: 'nrt_Error') -> "nitf_Off":
    return _nitropy.nitf_SegmentReader_getSize(segmentReader, error)
nitf_SegmentReader_getSize = _nitropy.nitf_SegmentReader_getSize

def nitf_SegmentReader_destruct(segmentReader: 'nitf_SegmentReader **') -> "void":
    return _nitropy.nitf_SegmentReader_destruct(segmentReader)
nitf_SegmentReader_destruct = _nitropy.nitf_SegmentReader_destruct

def nitf_SegmentWriter_construct(error: 'nrt_Error') -> "nitf_SegmentWriter *":
    return _nitropy.nitf_SegmentWriter_construct(error)
nitf_SegmentWriter_construct = _nitropy.nitf_SegmentWriter_construct

def nitf_SegmentWriter_attachSource(writer: 'nitf_SegmentWriter *', segmentSource: 'nitf_DataSource', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_SegmentWriter_attachSource(writer, segmentSource, error)
nitf_SegmentWriter_attachSource = _nitropy.nitf_SegmentWriter_attachSource
class nitf_SubWindow(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_SubWindow, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nitf_SubWindow, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["startRow"] = _nitropy.nitf_SubWindow_startRow_set
    __swig_getmethods__["startRow"] = _nitropy.nitf_SubWindow_startRow_get
    if _newclass:
        startRow = _swig_property(_nitropy.nitf_SubWindow_startRow_get, _nitropy.nitf_SubWindow_startRow_set)
    __swig_setmethods__["startCol"] = _nitropy.nitf_SubWindow_startCol_set
    __swig_getmethods__["startCol"] = _nitropy.nitf_SubWindow_startCol_get
    if _newclass:
        startCol = _swig_property(_nitropy.nitf_SubWindow_startCol_get, _nitropy.nitf_SubWindow_startCol_set)
    __swig_setmethods__["numRows"] = _nitropy.nitf_SubWindow_numRows_set
    __swig_getmethods__["numRows"] = _nitropy.nitf_SubWindow_numRows_get
    if _newclass:
        numRows = _swig_property(_nitropy.nitf_SubWindow_numRows_get, _nitropy.nitf_SubWindow_numRows_set)
    __swig_setmethods__["numCols"] = _nitropy.nitf_SubWindow_numCols_set
    __swig_getmethods__["numCols"] = _nitropy.nitf_SubWindow_numCols_get
    if _newclass:
        numCols = _swig_property(_nitropy.nitf_SubWindow_numCols_get, _nitropy.nitf_SubWindow_numCols_set)
    __swig_setmethods__["bandList"] = _nitropy.nitf_SubWindow_bandList_set
    __swig_getmethods__["bandList"] = _nitropy.nitf_SubWindow_bandList_get
    if _newclass:
        bandList = _swig_property(_nitropy.nitf_SubWindow_bandList_get, _nitropy.nitf_SubWindow_bandList_set)
    __swig_setmethods__["numBands"] = _nitropy.nitf_SubWindow_numBands_set
    __swig_getmethods__["numBands"] = _nitropy.nitf_SubWindow_numBands_get
    if _newclass:
        numBands = _swig_property(_nitropy.nitf_SubWindow_numBands_get, _nitropy.nitf_SubWindow_numBands_set)
    __swig_setmethods__["downsampler"] = _nitropy.nitf_SubWindow_downsampler_set
    __swig_getmethods__["downsampler"] = _nitropy.nitf_SubWindow_downsampler_get
    if _newclass:
        downsampler = _swig_property(_nitropy.nitf_SubWindow_downsampler_get, _nitropy.nitf_SubWindow_downsampler_set)
    __swig_destroy__ = _nitropy.delete_nitf_SubWindow
    __del__ = lambda self: None
nitf_SubWindow_swigregister = _nitropy.nitf_SubWindow_swigregister
nitf_SubWindow_swigregister(nitf_SubWindow)


def nitf_SubWindow_construct(error: 'nrt_Error') -> "nitf_SubWindow *":
    return _nitropy.nitf_SubWindow_construct(error)
nitf_SubWindow_construct = _nitropy.nitf_SubWindow_construct

def nitf_SubWindow_destruct(subWindow: 'nitf_SubWindow **') -> "void":
    return _nitropy.nitf_SubWindow_destruct(subWindow)
nitf_SubWindow_destruct = _nitropy.nitf_SubWindow_destruct

def nitf_SubWindow_setDownSampler(subWindow: 'nitf_SubWindow', downsampler: 'nitf_DownSampler', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_SubWindow_setDownSampler(subWindow, downsampler, error)
nitf_SubWindow_setDownSampler = _nitropy.nitf_SubWindow_setDownSampler
class nitf_IDownSampler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_IDownSampler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nitf_IDownSampler, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["apply"] = _nitropy.nitf_IDownSampler_apply_set
    __swig_getmethods__["apply"] = _nitropy.nitf_IDownSampler_apply_get
    if _newclass:
        apply = _swig_property(_nitropy.nitf_IDownSampler_apply_get, _nitropy.nitf_IDownSampler_apply_set)
    __swig_setmethods__["destruct"] = _nitropy.nitf_IDownSampler_destruct_set
    __swig_getmethods__["destruct"] = _nitropy.nitf_IDownSampler_destruct_get
    if _newclass:
        destruct = _swig_property(_nitropy.nitf_IDownSampler_destruct_get, _nitropy.nitf_IDownSampler_destruct_set)
    __swig_destroy__ = _nitropy.delete_nitf_IDownSampler
    __del__ = lambda self: None
nitf_IDownSampler_swigregister = _nitropy.nitf_IDownSampler_swigregister
nitf_IDownSampler_swigregister(nitf_IDownSampler)

class nitf_DownSampler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_DownSampler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nitf_DownSampler, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["iface"] = _nitropy.nitf_DownSampler_iface_set
    __swig_getmethods__["iface"] = _nitropy.nitf_DownSampler_iface_get
    if _newclass:
        iface = _swig_property(_nitropy.nitf_DownSampler_iface_get, _nitropy.nitf_DownSampler_iface_set)
    __swig_setmethods__["rowSkip"] = _nitropy.nitf_DownSampler_rowSkip_set
    __swig_getmethods__["rowSkip"] = _nitropy.nitf_DownSampler_rowSkip_get
    if _newclass:
        rowSkip = _swig_property(_nitropy.nitf_DownSampler_rowSkip_get, _nitropy.nitf_DownSampler_rowSkip_set)
    __swig_setmethods__["colSkip"] = _nitropy.nitf_DownSampler_colSkip_set
    __swig_getmethods__["colSkip"] = _nitropy.nitf_DownSampler_colSkip_get
    if _newclass:
        colSkip = _swig_property(_nitropy.nitf_DownSampler_colSkip_get, _nitropy.nitf_DownSampler_colSkip_set)
    __swig_setmethods__["multiBand"] = _nitropy.nitf_DownSampler_multiBand_set
    __swig_getmethods__["multiBand"] = _nitropy.nitf_DownSampler_multiBand_get
    if _newclass:
        multiBand = _swig_property(_nitropy.nitf_DownSampler_multiBand_get, _nitropy.nitf_DownSampler_multiBand_set)
    __swig_setmethods__["minBands"] = _nitropy.nitf_DownSampler_minBands_set
    __swig_getmethods__["minBands"] = _nitropy.nitf_DownSampler_minBands_get
    if _newclass:
        minBands = _swig_property(_nitropy.nitf_DownSampler_minBands_get, _nitropy.nitf_DownSampler_minBands_set)
    __swig_setmethods__["maxBands"] = _nitropy.nitf_DownSampler_maxBands_set
    __swig_getmethods__["maxBands"] = _nitropy.nitf_DownSampler_maxBands_get
    if _newclass:
        maxBands = _swig_property(_nitropy.nitf_DownSampler_maxBands_get, _nitropy.nitf_DownSampler_maxBands_set)
    __swig_setmethods__["types"] = _nitropy.nitf_DownSampler_types_set
    __swig_getmethods__["types"] = _nitropy.nitf_DownSampler_types_get
    if _newclass:
        types = _swig_property(_nitropy.nitf_DownSampler_types_get, _nitropy.nitf_DownSampler_types_set)
    __swig_setmethods__["data"] = _nitropy.nitf_DownSampler_data_set
    __swig_getmethods__["data"] = _nitropy.nitf_DownSampler_data_get
    if _newclass:
        data = _swig_property(_nitropy.nitf_DownSampler_data_get, _nitropy.nitf_DownSampler_data_set)
    __swig_destroy__ = _nitropy.delete_nitf_DownSampler
    __del__ = lambda self: None
nitf_DownSampler_swigregister = _nitropy.nitf_DownSampler_swigregister
nitf_DownSampler_swigregister(nitf_DownSampler)


def nitf_PixelSkip_construct(rowSkip: 'uint32_t', colSkip: 'uint32_t', error: 'nrt_Error') -> "nitf_DownSampler *":
    return _nitropy.nitf_PixelSkip_construct(rowSkip, colSkip, error)
nitf_PixelSkip_construct = _nitropy.nitf_PixelSkip_construct

def nitf_MaxDownSample_construct(rowSkip: 'uint32_t', colSkip: 'uint32_t', error: 'nrt_Error') -> "nitf_DownSampler *":
    return _nitropy.nitf_MaxDownSample_construct(rowSkip, colSkip, error)
nitf_MaxDownSample_construct = _nitropy.nitf_MaxDownSample_construct

def nitf_SumSq2DownSample_construct(rowSkip: 'uint32_t', colSkip: 'uint32_t', error: 'nrt_Error') -> "nitf_DownSampler *":
    return _nitropy.nitf_SumSq2DownSample_construct(rowSkip, colSkip, error)
nitf_SumSq2DownSample_construct = _nitropy.nitf_SumSq2DownSample_construct

def nitf_Select2DownSample_construct(rowSkip: 'uint32_t', colSkip: 'uint32_t', error: 'nrt_Error') -> "nitf_DownSampler *":
    return _nitropy.nitf_Select2DownSample_construct(rowSkip, colSkip, error)
nitf_Select2DownSample_construct = _nitropy.nitf_Select2DownSample_construct

def nitf_DownSampler_destruct(downsampler: 'nitf_DownSampler **') -> "void":
    return _nitropy.nitf_DownSampler_destruct(downsampler)
nitf_DownSampler_destruct = _nitropy.nitf_DownSampler_destruct

def nitf_SegmentMemorySource_construct(data: 'char const *', size: 'nitf_Off', start: 'nitf_Off', byteSkip: 'int', copyData: 'bool', error: 'nrt_Error') -> "nitf_SegmentSource *":
    return _nitropy.nitf_SegmentMemorySource_construct(data, size, start, byteSkip, copyData, error)
nitf_SegmentMemorySource_construct = _nitropy.nitf_SegmentMemorySource_construct

def nitf_SegmentFileSource_construct(handle: 'nitf_IOHandle', start: 'nitf_Off', byteSkip: 'int', error: 'nrt_Error') -> "nitf_SegmentSource *":
    return _nitropy.nitf_SegmentFileSource_construct(handle, start, byteSkip, error)
nitf_SegmentFileSource_construct = _nitropy.nitf_SegmentFileSource_construct

def nitf_SegmentFileSource_constructIO(io: 'nrt_IOInterface', start: 'nitf_Off', byteSkip: 'int', error: 'nrt_Error') -> "nitf_SegmentSource *":
    return _nitropy.nitf_SegmentFileSource_constructIO(io, start, byteSkip, error)
nitf_SegmentFileSource_constructIO = _nitropy.nitf_SegmentFileSource_constructIO

def nitf_SegmentReaderSource_construct(reader: 'nitf_SegmentReader', error: 'nrt_Error') -> "nitf_SegmentSource *":
    return _nitropy.nitf_SegmentReaderSource_construct(reader, error)
nitf_SegmentReaderSource_construct = _nitropy.nitf_SegmentReaderSource_construct
NITF_IREPBAND_SZ = _nitropy.NITF_IREPBAND_SZ
NITF_ISUBCAT_SZ = _nitropy.NITF_ISUBCAT_SZ
NITF_IFC_SZ = _nitropy.NITF_IFC_SZ
NITF_IMFLT_SZ = _nitropy.NITF_IMFLT_SZ
NITF_NLUTS_SZ = _nitropy.NITF_NLUTS_SZ
NITF_NELUT_SZ = _nitropy.NITF_NELUT_SZ
class nitf_BandInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_BandInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nitf_BandInfo, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["representation"] = _nitropy.nitf_BandInfo_representation_set
    __swig_getmethods__["representation"] = _nitropy.nitf_BandInfo_representation_get
    if _newclass:
        representation = _swig_property(_nitropy.nitf_BandInfo_representation_get, _nitropy.nitf_BandInfo_representation_set)
    __swig_setmethods__["subcategory"] = _nitropy.nitf_BandInfo_subcategory_set
    __swig_getmethods__["subcategory"] = _nitropy.nitf_BandInfo_subcategory_get
    if _newclass:
        subcategory = _swig_property(_nitropy.nitf_BandInfo_subcategory_get, _nitropy.nitf_BandInfo_subcategory_set)
    __swig_setmethods__["imageFilterCondition"] = _nitropy.nitf_BandInfo_imageFilterCondition_set
    __swig_getmethods__["imageFilterCondition"] = _nitropy.nitf_BandInfo_imageFilterCondition_get
    if _newclass:
        imageFilterCondition = _swig_property(_nitropy.nitf_BandInfo_imageFilterCondition_get, _nitropy.nitf_BandInfo_imageFilterCondition_set)
    __swig_setmethods__["imageFilterCode"] = _nitropy.nitf_BandInfo_imageFilterCode_set
    __swig_getmethods__["imageFilterCode"] = _nitropy.nitf_BandInfo_imageFilterCode_get
    if _newclass:
        imageFilterCode = _swig_property(_nitropy.nitf_BandInfo_imageFilterCode_get, _nitropy.nitf_BandInfo_imageFilterCode_set)
    __swig_setmethods__["numLUTs"] = _nitropy.nitf_BandInfo_numLUTs_set
    __swig_getmethods__["numLUTs"] = _nitropy.nitf_BandInfo_numLUTs_get
    if _newclass:
        numLUTs = _swig_property(_nitropy.nitf_BandInfo_numLUTs_get, _nitropy.nitf_BandInfo_numLUTs_set)
    __swig_setmethods__["bandEntriesPerLUT"] = _nitropy.nitf_BandInfo_bandEntriesPerLUT_set
    __swig_getmethods__["bandEntriesPerLUT"] = _nitropy.nitf_BandInfo_bandEntriesPerLUT_get
    if _newclass:
        bandEntriesPerLUT = _swig_property(_nitropy.nitf_BandInfo_bandEntriesPerLUT_get, _nitropy.nitf_BandInfo_bandEntriesPerLUT_set)
    __swig_setmethods__["lut"] = _nitropy.nitf_BandInfo_lut_set
    __swig_getmethods__["lut"] = _nitropy.nitf_BandInfo_lut_get
    if _newclass:
        lut = _swig_property(_nitropy.nitf_BandInfo_lut_get, _nitropy.nitf_BandInfo_lut_set)
    __swig_destroy__ = _nitropy.delete_nitf_BandInfo
    __del__ = lambda self: None
nitf_BandInfo_swigregister = _nitropy.nitf_BandInfo_swigregister
nitf_BandInfo_swigregister(nitf_BandInfo)


def nitf_BandInfo_construct(error: 'nrt_Error') -> "nitf_BandInfo *":
    return _nitropy.nitf_BandInfo_construct(error)
nitf_BandInfo_construct = _nitropy.nitf_BandInfo_construct

def nitf_BandInfo_destruct(info: 'nitf_BandInfo **') -> "void":
    return _nitropy.nitf_BandInfo_destruct(info)
nitf_BandInfo_destruct = _nitropy.nitf_BandInfo_destruct

def nitf_BandInfo_clone(source: 'nitf_BandInfo', error: 'nrt_Error') -> "nitf_BandInfo *":
    return _nitropy.nitf_BandInfo_clone(source, error)
nitf_BandInfo_clone = _nitropy.nitf_BandInfo_clone

def nitf_BandInfo_init(bandInfo: 'nitf_BandInfo', representation: 'char const *', subcategory: 'char const *', imageFilterCondition: 'char const *', imageFilterCode: 'char const *', numLUTs: 'uint32_t', bandEntriesPerLUT: 'uint32_t', lut: 'nitf_LookupTable *', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_BandInfo_init(bandInfo, representation, subcategory, imageFilterCondition, imageFilterCode, numLUTs, bandEntriesPerLUT, lut, error)
nitf_BandInfo_init = _nitropy.nitf_BandInfo_init
NITF_WRITER_FILL_LEFT = _nitropy.NITF_WRITER_FILL_LEFT
NITF_WRITER_FILL_RIGHT = _nitropy.NITF_WRITER_FILL_RIGHT
class nitf_Writer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_Writer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nitf_Writer, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["warningList"] = _nitropy.nitf_Writer_warningList_set
    __swig_getmethods__["warningList"] = _nitropy.nitf_Writer_warningList_get
    if _newclass:
        warningList = _swig_property(_nitropy.nitf_Writer_warningList_get, _nitropy.nitf_Writer_warningList_set)
    __swig_setmethods__["imageWriters"] = _nitropy.nitf_Writer_imageWriters_set
    __swig_getmethods__["imageWriters"] = _nitropy.nitf_Writer_imageWriters_get
    if _newclass:
        imageWriters = _swig_property(_nitropy.nitf_Writer_imageWriters_get, _nitropy.nitf_Writer_imageWriters_set)
    __swig_setmethods__["textWriters"] = _nitropy.nitf_Writer_textWriters_set
    __swig_getmethods__["textWriters"] = _nitropy.nitf_Writer_textWriters_get
    if _newclass:
        textWriters = _swig_property(_nitropy.nitf_Writer_textWriters_get, _nitropy.nitf_Writer_textWriters_set)
    __swig_setmethods__["graphicWriters"] = _nitropy.nitf_Writer_graphicWriters_set
    __swig_getmethods__["graphicWriters"] = _nitropy.nitf_Writer_graphicWriters_get
    if _newclass:
        graphicWriters = _swig_property(_nitropy.nitf_Writer_graphicWriters_get, _nitropy.nitf_Writer_graphicWriters_set)
    __swig_setmethods__["dataExtensionWriters"] = _nitropy.nitf_Writer_dataExtensionWriters_set
    __swig_getmethods__["dataExtensionWriters"] = _nitropy.nitf_Writer_dataExtensionWriters_get
    if _newclass:
        dataExtensionWriters = _swig_property(_nitropy.nitf_Writer_dataExtensionWriters_get, _nitropy.nitf_Writer_dataExtensionWriters_set)
    __swig_setmethods__["output"] = _nitropy.nitf_Writer_output_set
    __swig_getmethods__["output"] = _nitropy.nitf_Writer_output_get
    if _newclass:
        output = _swig_property(_nitropy.nitf_Writer_output_get, _nitropy.nitf_Writer_output_set)
    __swig_setmethods__["record"] = _nitropy.nitf_Writer_record_set
    __swig_getmethods__["record"] = _nitropy.nitf_Writer_record_get
    if _newclass:
        record = _swig_property(_nitropy.nitf_Writer_record_get, _nitropy.nitf_Writer_record_set)
    __swig_setmethods__["numImageWriters"] = _nitropy.nitf_Writer_numImageWriters_set
    __swig_getmethods__["numImageWriters"] = _nitropy.nitf_Writer_numImageWriters_get
    if _newclass:
        numImageWriters = _swig_property(_nitropy.nitf_Writer_numImageWriters_get, _nitropy.nitf_Writer_numImageWriters_set)
    __swig_setmethods__["numTextWriters"] = _nitropy.nitf_Writer_numTextWriters_set
    __swig_getmethods__["numTextWriters"] = _nitropy.nitf_Writer_numTextWriters_get
    if _newclass:
        numTextWriters = _swig_property(_nitropy.nitf_Writer_numTextWriters_get, _nitropy.nitf_Writer_numTextWriters_set)
    __swig_setmethods__["numGraphicWriters"] = _nitropy.nitf_Writer_numGraphicWriters_set
    __swig_getmethods__["numGraphicWriters"] = _nitropy.nitf_Writer_numGraphicWriters_get
    if _newclass:
        numGraphicWriters = _swig_property(_nitropy.nitf_Writer_numGraphicWriters_get, _nitropy.nitf_Writer_numGraphicWriters_set)
    __swig_setmethods__["numDataExtensionWriters"] = _nitropy.nitf_Writer_numDataExtensionWriters_set
    __swig_getmethods__["numDataExtensionWriters"] = _nitropy.nitf_Writer_numDataExtensionWriters_get
    if _newclass:
        numDataExtensionWriters = _swig_property(_nitropy.nitf_Writer_numDataExtensionWriters_get, _nitropy.nitf_Writer_numDataExtensionWriters_set)
    __swig_setmethods__["ownOutput"] = _nitropy.nitf_Writer_ownOutput_set
    __swig_getmethods__["ownOutput"] = _nitropy.nitf_Writer_ownOutput_get
    if _newclass:
        ownOutput = _swig_property(_nitropy.nitf_Writer_ownOutput_get, _nitropy.nitf_Writer_ownOutput_set)
    __swig_destroy__ = _nitropy.delete_nitf_Writer
    __del__ = lambda self: None
nitf_Writer_swigregister = _nitropy.nitf_Writer_swigregister
nitf_Writer_swigregister(nitf_Writer)


def nitf_Writer_construct(error: 'nrt_Error') -> "nitf_Writer *":
    return _nitropy.nitf_Writer_construct(error)
nitf_Writer_construct = _nitropy.nitf_Writer_construct

def nitf_Writer_destruct(writer: 'nitf_Writer **') -> "void":
    return _nitropy.nitf_Writer_destruct(writer)
nitf_Writer_destruct = _nitropy.nitf_Writer_destruct

def nitf_Writer_prepare(writer: 'nitf_Writer', record: 'nitf_Record', ioHandle: 'nitf_IOHandle', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_Writer_prepare(writer, record, ioHandle, error)
nitf_Writer_prepare = _nitropy.nitf_Writer_prepare

def nitf_Writer_prepareIO(writer: 'nitf_Writer', record: 'nitf_Record', io: 'nrt_IOInterface', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_Writer_prepareIO(writer, record, io, error)
nitf_Writer_prepareIO = _nitropy.nitf_Writer_prepareIO

def nitf_Writer_setImageWriteHandler(writer: 'nitf_Writer', index: 'int', writeHandler: 'nitf_WriteHandler *', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_Writer_setImageWriteHandler(writer, index, writeHandler, error)
nitf_Writer_setImageWriteHandler = _nitropy.nitf_Writer_setImageWriteHandler

def nitf_Writer_setGraphicWriteHandler(writer: 'nitf_Writer', index: 'int', writeHandler: 'nitf_WriteHandler *', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_Writer_setGraphicWriteHandler(writer, index, writeHandler, error)
nitf_Writer_setGraphicWriteHandler = _nitropy.nitf_Writer_setGraphicWriteHandler

def nitf_Writer_setTextWriteHandler(writer: 'nitf_Writer', index: 'int', writeHandler: 'nitf_WriteHandler *', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_Writer_setTextWriteHandler(writer, index, writeHandler, error)
nitf_Writer_setTextWriteHandler = _nitropy.nitf_Writer_setTextWriteHandler

def nitf_Writer_setDEWriteHandler(writer: 'nitf_Writer', index: 'int', writeHandler: 'nitf_WriteHandler *', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_Writer_setDEWriteHandler(writer, index, writeHandler, error)
nitf_Writer_setDEWriteHandler = _nitropy.nitf_Writer_setDEWriteHandler

def nitf_Writer_newImageWriter(writer: 'nitf_Writer', index: 'int', options: 'nrt_HashTable', error: 'nrt_Error') -> "nitf_ImageWriter *":
    return _nitropy.nitf_Writer_newImageWriter(writer, index, options, error)
nitf_Writer_newImageWriter = _nitropy.nitf_Writer_newImageWriter

def nitf_Writer_newGraphicWriter(writer: 'nitf_Writer', index: 'int', error: 'nrt_Error') -> "nitf_SegmentWriter *":
    return _nitropy.nitf_Writer_newGraphicWriter(writer, index, error)
nitf_Writer_newGraphicWriter = _nitropy.nitf_Writer_newGraphicWriter

def nitf_Writer_newTextWriter(writer: 'nitf_Writer', index: 'int', error: 'nrt_Error') -> "nitf_SegmentWriter *":
    return _nitropy.nitf_Writer_newTextWriter(writer, index, error)
nitf_Writer_newTextWriter = _nitropy.nitf_Writer_newTextWriter

def nitf_Writer_newDEWriter(writer: 'nitf_Writer', index: 'int', error: 'nrt_Error') -> "nitf_SegmentWriter *":
    return _nitropy.nitf_Writer_newDEWriter(writer, index, error)
nitf_Writer_newDEWriter = _nitropy.nitf_Writer_newDEWriter

def nitf_Writer_write(writer: 'nitf_Writer', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_Writer_write(writer, error)
nitf_Writer_write = _nitropy.nitf_Writer_write

def nitf_Writer_writeHeader(writer: 'nitf_Writer', fileLenOff: 'nitf_Off *', hdrLen: 'uint32_t *', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_Writer_writeHeader(writer, fileLenOff, hdrLen, error)
nitf_Writer_writeHeader = _nitropy.nitf_Writer_writeHeader

def nitf_Writer_writeImageSubheader(writer: 'nitf_Writer', subhdr: 'nitf_ImageSubheader', fver: 'nitf_Version', comratOff: 'nitf_Off *', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_Writer_writeImageSubheader(writer, subhdr, fver, comratOff, error)
nitf_Writer_writeImageSubheader = _nitropy.nitf_Writer_writeImageSubheader

def nitf_Writer_writeDESubheader(writer: 'nitf_Writer', subhdr: 'nitf_DESubheader', userSublen: 'uint32_t *', fver: 'nitf_Version', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_Writer_writeDESubheader(writer, subhdr, userSublen, fver, error)
nitf_Writer_writeDESubheader = _nitropy.nitf_Writer_writeDESubheader

def nitf_Writer_writeInt64Field(writer: 'nitf_Writer', field: 'uint64_t', length: 'uint32_t', fill: 'char', fillDir: 'uint32_t', error: 'nrt_Error') -> "bool":
    return _nitropy.nitf_Writer_writeInt64Field(writer, field, length, fill, fillDir, error)
nitf_Writer_writeInt64Field = _nitropy.nitf_Writer_writeInt64Field
class nitf_Reader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_Reader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nitf_Reader, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["warningList"] = _nitropy.nitf_Reader_warningList_set
    __swig_getmethods__["warningList"] = _nitropy.nitf_Reader_warningList_get
    if _newclass:
        warningList = _swig_property(_nitropy.nitf_Reader_warningList_get, _nitropy.nitf_Reader_warningList_set)
    __swig_setmethods__["input"] = _nitropy.nitf_Reader_input_set
    __swig_getmethods__["input"] = _nitropy.nitf_Reader_input_get
    if _newclass:
        input = _swig_property(_nitropy.nitf_Reader_input_get, _nitropy.nitf_Reader_input_set)
    __swig_setmethods__["record"] = _nitropy.nitf_Reader_record_set
    __swig_getmethods__["record"] = _nitropy.nitf_Reader_record_get
    if _newclass:
        record = _swig_property(_nitropy.nitf_Reader_record_get, _nitropy.nitf_Reader_record_set)
    __swig_setmethods__["ownInput"] = _nitropy.nitf_Reader_ownInput_set
    __swig_getmethods__["ownInput"] = _nitropy.nitf_Reader_ownInput_get
    if _newclass:
        ownInput = _swig_property(_nitropy.nitf_Reader_ownInput_get, _nitropy.nitf_Reader_ownInput_set)
    __swig_destroy__ = _nitropy.delete_nitf_Reader
    __del__ = lambda self: None
nitf_Reader_swigregister = _nitropy.nitf_Reader_swigregister
nitf_Reader_swigregister(nitf_Reader)


def nitf_Reader_construct(error: 'nrt_Error') -> "nitf_Reader *":
    return _nitropy.nitf_Reader_construct(error)
nitf_Reader_construct = _nitropy.nitf_Reader_construct

def nitf_Reader_destruct(reader: 'nitf_Reader **') -> "void":
    return _nitropy.nitf_Reader_destruct(reader)
nitf_Reader_destruct = _nitropy.nitf_Reader_destruct

def nitf_Reader_read(reader: 'nitf_Reader', inputHandle: 'nitf_IOHandle', error: 'nrt_Error') -> "nitf_Record *":
    return _nitropy.nitf_Reader_read(reader, inputHandle, error)
nitf_Reader_read = _nitropy.nitf_Reader_read

def nitf_Reader_readIO(reader: 'nitf_Reader', io: 'nrt_IOInterface', error: 'nrt_Error') -> "nitf_Record *":
    return _nitropy.nitf_Reader_readIO(reader, io, error)
nitf_Reader_readIO = _nitropy.nitf_Reader_readIO

def nitf_Reader_newImageReader(reader: 'nitf_Reader', imageSegmentNumber: 'int', options: 'nrt_HashTable', error: 'nrt_Error') -> "nitf_ImageReader *":
    return _nitropy.nitf_Reader_newImageReader(reader, imageSegmentNumber, options, error)
nitf_Reader_newImageReader = _nitropy.nitf_Reader_newImageReader

def nitf_Reader_newTextReader(reader: 'nitf_Reader', textSegmentNumber: 'int', error: 'nrt_Error') -> "nitf_SegmentReader *":
    return _nitropy.nitf_Reader_newTextReader(reader, textSegmentNumber, error)
nitf_Reader_newTextReader = _nitropy.nitf_Reader_newTextReader

def nitf_Reader_newGraphicReader(reader: 'nitf_Reader', graphicSegmentNumber: 'int', error: 'nrt_Error') -> "nitf_SegmentReader *":
    return _nitropy.nitf_Reader_newGraphicReader(reader, graphicSegmentNumber, error)
nitf_Reader_newGraphicReader = _nitropy.nitf_Reader_newGraphicReader

def nitf_Reader_newDEReader(reader: 'nitf_Reader', DESegmentNumber: 'int', error: 'nrt_Error') -> "nitf_SegmentReader *":
    return _nitropy.nitf_Reader_newDEReader(reader, DESegmentNumber, error)
nitf_Reader_newDEReader = _nitropy.nitf_Reader_newDEReader

def nitf_Reader_getNITFVersion(fileName: 'char const *') -> "nitf_Version":
    return _nitropy.nitf_Reader_getNITFVersion(fileName)
nitf_Reader_getNITFVersion = _nitropy.nitf_Reader_getNITFVersion

def nitf_Reader_getNITFVersionIO(io: 'nrt_IOInterface') -> "nitf_Version":
    return _nitropy.nitf_Reader_getNITFVersionIO(io)
nitf_Reader_getNITFVersionIO = _nitropy.nitf_Reader_getNITFVersionIO
PY_NITF_CREATE = _nitropy.PY_NITF_CREATE
PY_NITF_TRUNCATE = _nitropy.PY_NITF_TRUNCATE
PY_NITF_OPEN_EXISTING = _nitropy.PY_NITF_OPEN_EXISTING
PY_NITF_ACCESS_READONLY = _nitropy.PY_NITF_ACCESS_READONLY
PY_NITF_ACCESS_WRITEONLY = _nitropy.PY_NITF_ACCESS_WRITEONLY
PY_NITF_ACCESS_READWRITE = _nitropy.PY_NITF_ACCESS_READWRITE
PY_NITF_SEEK_CUR = _nitropy.PY_NITF_SEEK_CUR
PY_NITF_SEEK_SET = _nitropy.PY_NITF_SEEK_SET
PY_NITF_SEEK_END = _nitropy.PY_NITF_SEEK_END

def py_IOHandle_create(fname: 'char const *', accessFlag: 'int', createFlag: 'int', error: 'nrt_Error') -> "nitf_IOHandle":
    return _nitropy.py_IOHandle_create(fname, accessFlag, createFlag, error)
py_IOHandle_create = _nitropy.py_IOHandle_create

def py_IOHandle_write(handle: 'nitf_IOHandle', address: 'long long', size: 'size_t', error: 'nrt_Error') -> "bool":
    return _nitropy.py_IOHandle_write(handle, address, size, error)
py_IOHandle_write = _nitropy.py_IOHandle_write

def py_IOHandle_seek(handle: 'nitf_IOHandle', offset: 'nitf_Off', whence: 'int', error: 'nrt_Error') -> "nitf_Off":
    return _nitropy.py_IOHandle_seek(handle, offset, whence, error)
py_IOHandle_seek = _nitropy.py_IOHandle_seek

def py_Field_getString(field: 'nitf_Field', error: 'nrt_Error') -> "char *":
    return _nitropy.py_Field_getString(field, error)
py_Field_getString = _nitropy.py_Field_getString

def py_Field_getInt(field: 'nitf_Field', error: 'nrt_Error') -> "uint32_t":
    return _nitropy.py_Field_getInt(field, error)
py_Field_getInt = _nitropy.py_Field_getInt

def py_Field_setRawData(field: 'nitf_Field', pfsrd_buf: 'char *', length: 'int', error: 'nrt_Error') -> "void":
    return _nitropy.py_Field_setRawData(field, pfsrd_buf, length, error)
py_Field_setRawData = _nitropy.py_Field_setRawData

def py_TRE_setField(tre: 'nitf_TRE', tag: 'char const *', buf: 'char *', length: 'int', error: 'nrt_Error') -> "void":
    return _nitropy.py_TRE_setField(tre, tag, buf, length, error)
py_TRE_setField = _nitropy.py_TRE_setField

def py_Field_getRawData(field: 'nitf_Field', error: 'nrt_Error') -> "PyObject *":
    return _nitropy.py_Field_getRawData(field, error)
py_Field_getRawData = _nitropy.py_Field_getRawData

def py_TRE_clone(tre: 'nitf_TRE', error: 'nrt_Error') -> "nitf_TRE *":
    return _nitropy.py_TRE_clone(tre, error)
py_TRE_clone = _nitropy.py_TRE_clone

def py_Record_getFileHeader(record: 'nitf_Record') -> "nitf_FileHeader *":
    return _nitropy.py_Record_getFileHeader(record)
py_Record_getFileHeader = _nitropy.py_Record_getFileHeader

def py_Record_getImage(record: 'nitf_Record', index: 'int', error: 'nrt_Error') -> "nitf_ImageSegment *":
    return _nitropy.py_Record_getImage(record, index, error)
py_Record_getImage = _nitropy.py_Record_getImage

def py_Record_getNumImages(record: 'nitf_Record') -> "int":
    return _nitropy.py_Record_getNumImages(record)
py_Record_getNumImages = _nitropy.py_Record_getNumImages

def py_Record_getGraphic(record: 'nitf_Record', index: 'int', error: 'nrt_Error') -> "nitf_GraphicSegment *":
    return _nitropy.py_Record_getGraphic(record, index, error)
py_Record_getGraphic = _nitropy.py_Record_getGraphic

def py_Record_getNumGraphics(record: 'nitf_Record') -> "int":
    return _nitropy.py_Record_getNumGraphics(record)
py_Record_getNumGraphics = _nitropy.py_Record_getNumGraphics

def py_Record_getLabel(record: 'nitf_Record', index: 'int', error: 'nrt_Error') -> "nitf_LabelSegment *":
    return _nitropy.py_Record_getLabel(record, index, error)
py_Record_getLabel = _nitropy.py_Record_getLabel

def py_Record_getNumLabels(record: 'nitf_Record') -> "int":
    return _nitropy.py_Record_getNumLabels(record)
py_Record_getNumLabels = _nitropy.py_Record_getNumLabels

def py_Record_getText(record: 'nitf_Record', index: 'int', error: 'nrt_Error') -> "nitf_TextSegment *":
    return _nitropy.py_Record_getText(record, index, error)
py_Record_getText = _nitropy.py_Record_getText

def py_Record_getNumTexts(record: 'nitf_Record') -> "int":
    return _nitropy.py_Record_getNumTexts(record)
py_Record_getNumTexts = _nitropy.py_Record_getNumTexts

def py_Record_getDE(record: 'nitf_Record', index: 'int', error: 'nrt_Error') -> "nitf_DESegment *":
    return _nitropy.py_Record_getDE(record, index, error)
py_Record_getDE = _nitropy.py_Record_getDE

def py_Record_getNumDEs(record: 'nitf_Record') -> "int":
    return _nitropy.py_Record_getNumDEs(record)
py_Record_getNumDEs = _nitropy.py_Record_getNumDEs

def py_Record_getRE(record: 'nitf_Record', index: 'int', error: 'nrt_Error') -> "nitf_RESegment *":
    return _nitropy.py_Record_getRE(record, index, error)
py_Record_getRE = _nitropy.py_Record_getRE

def py_Record_getNumREs(record: 'nitf_Record') -> "int":
    return _nitropy.py_Record_getNumREs(record)
py_Record_getNumREs = _nitropy.py_Record_getNumREs

def py_Record_destruct(record: 'nitf_Record') -> "void":
    return _nitropy.py_Record_destruct(record)
py_Record_destruct = _nitropy.py_Record_destruct

def py_Record_getVersion(record: 'nitf_Record') -> "nitf_Version":
    return _nitropy.py_Record_getVersion(record)
py_Record_getVersion = _nitropy.py_Record_getVersion

def py_FileHeader_getComponentInfo(header: 'nitf_FileHeader', index: 'int', type: 'char *', error: 'nrt_Error') -> "nitf_ComponentInfo *":
    return _nitropy.py_FileHeader_getComponentInfo(header, index, type, error)
py_FileHeader_getComponentInfo = _nitropy.py_FileHeader_getComponentInfo

def py_nitf_PluginRegistry_canRetrieveTREHandler(reg: 'nitf_PluginRegistry', ident: 'char const *', error: 'nrt_Error') -> "bool":
    return _nitropy.py_nitf_PluginRegistry_canRetrieveTREHandler(reg, ident, error)
py_nitf_PluginRegistry_canRetrieveTREHandler = _nitropy.py_nitf_PluginRegistry_canRetrieveTREHandler

def py_nitf_Reader_newImageReader(reader: 'nitf_Reader', imageSegmentNumber: 'int', options: 'PyObject *', error: 'nrt_Error') -> "nitf_ImageReader *":
    return _nitropy.py_nitf_Reader_newImageReader(reader, imageSegmentNumber, options, error)
py_nitf_Reader_newImageReader = _nitropy.py_nitf_Reader_newImageReader

def py_nitf_Writer_construct(error: 'nrt_Error') -> "nitf_Writer *":
    return _nitropy.py_nitf_Writer_construct(error)
py_nitf_Writer_construct = _nitropy.py_nitf_Writer_construct

def py_nitf_Writer_prepare(writer: 'nitf_Writer', record: 'nitf_Record', ioHandle: 'nitf_IOHandle', error: 'nrt_Error') -> "bool":
    return _nitropy.py_nitf_Writer_prepare(writer, record, ioHandle, error)
py_nitf_Writer_prepare = _nitropy.py_nitf_Writer_prepare

def py_nitf_Writer_destruct(writer: 'nitf_Writer **') -> "void":
    return _nitropy.py_nitf_Writer_destruct(writer)
py_nitf_Writer_destruct = _nitropy.py_nitf_Writer_destruct

def py_nitf_Writer_newImageWriter(writer: 'nitf_Writer', index: 'int', options: 'PyObject *', error: 'nrt_Error') -> "nitf_ImageWriter *":
    return _nitropy.py_nitf_Writer_newImageWriter(writer, index, options, error)
py_nitf_Writer_newImageWriter = _nitropy.py_nitf_Writer_newImageWriter

def py_nitf_MemorySource_construct(data: 'long long', size: 'nitf_Off', start: 'nitf_Off', numBytesPerPixel: 'int', pixelSkip: 'int', error: 'nrt_Error') -> "nitf_BandSource *":
    return _nitropy.py_nitf_MemorySource_construct(data, size, start, numBytesPerPixel, pixelSkip, error)
py_nitf_MemorySource_construct = _nitropy.py_nitf_MemorySource_construct

def py_nitf_SegmentMemorySource_construct(data: 'long long', size: 'nitf_Off', start: 'nitf_Off', byteSkip: 'int', copyData: 'bool', error: 'nrt_Error') -> "nitf_SegmentSource *":
    return _nitropy.py_nitf_SegmentMemorySource_construct(data, size, start, byteSkip, copyData, error)
py_nitf_SegmentMemorySource_construct = _nitropy.py_nitf_SegmentMemorySource_construct

def py_SubWindow_construct(startRow: 'int', startCol: 'int', numRows: 'int', numCols: 'int', bandList: 'PyObject *', downSampler: 'nitf_DownSampler', error: 'nrt_Error') -> "nitf_SubWindow *":
    return _nitropy.py_SubWindow_construct(startRow, startCol, numRows, numCols, bandList, downSampler, error)
py_SubWindow_construct = _nitropy.py_SubWindow_construct

def py_ImageReader_read(reader: 'nitf_ImageReader', window: 'nitf_SubWindow', nbpp: 'int', error: 'nrt_Error') -> "PyObject *":
    return _nitropy.py_ImageReader_read(reader, window, nbpp, error)
py_ImageReader_read = _nitropy.py_ImageReader_read

def py_Pair_getFieldData(pair: 'nrt_Pair') -> "nitf_Field *":
    return _nitropy.py_Pair_getFieldData(pair)
py_Pair_getFieldData = _nitropy.py_Pair_getFieldData

def py_TREEnumerator_hasNext(it: 'nitf_TREEnumerator **') -> "PyObject *":
    return _nitropy.py_TREEnumerator_hasNext(it)
py_TREEnumerator_hasNext = _nitropy.py_TREEnumerator_hasNext

def py_TREEnumerator_next(it: 'nitf_TREEnumerator', error: 'nrt_Error') -> "nitf_Pair *":
    return _nitropy.py_TREEnumerator_next(it, error)
py_TREEnumerator_next = _nitropy.py_TREEnumerator_next

def py_DataSource_read(source: 'nitf_DataSource', size: 'size_t', error: 'nrt_Error') -> "PyObject *":
    return _nitropy.py_DataSource_read(source, size, error)
py_DataSource_read = _nitropy.py_DataSource_read

def py_SegmentReader_read(reader: 'nitf_SegmentReader', size: 'size_t', error: 'nrt_Error') -> "PyObject *":
    return _nitropy.py_SegmentReader_read(reader, size, error)
py_SegmentReader_read = _nitropy.py_SegmentReader_read

def py_IOHandle_read(handle: 'nitf_IOHandle', size: 'size_t', error: 'nrt_Error') -> "PyObject *":
    return _nitropy.py_IOHandle_read(handle, size, error)
py_IOHandle_read = _nitropy.py_IOHandle_read
# This file is compatible with both classic and new-style classes.


