from os.path import join, split, basename, splitext

NAME            = 'nitf'
MODULE_DEPS     = 'j2k math sio.lite mt sys mem io gsl std'
TEST_DEPS       = 'j2k cli'
USELIB          = 'THREAD DL'
USELIB_LOCAL    = 'nitf-c j2k-c'
LANG            = 'c++'
TEST_FILTER     = 'test_functional.cpp test_handles.cpp ' \
                  'test_mem_source.cpp test_static_plugin.cpp'
APPS            = join('apps', 'show_nitf++.cpp')

options = configure = distclean = lambda p: None

def build(bld):
    modArgs = globals()
    modArgs['VERSION'] = bld.env['VERSION']
    bld.module(**modArgs)

    env = bld.get_env()
    for app in APPS.split():
        app_name = splitext(basename(app))[0]
        bld.program_helper(module_deps=NAME,
                           source=app, path=bld.path,
                           name=app_name)

    # We can only test static "plugins" if we've got them enabled
    # If we do, we have to build this test directly ourselves because we need
    # to link in the TRE that it uses (so it's in TEST_FILTER regardless of if
    # we're going to build it or not)
    if bld.env['enable_static_tres']:
        bld.program_helper(module_deps=NAME,
                           use='PIAPEA-static-c',
                           source=join('tests', 'test_static_plugin.cpp'),
                           name='test_static_plugin',
                           install_path='${PREFIX}/tests/%s' % NAME)
